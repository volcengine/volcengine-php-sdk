<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Secagent\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AuthParamForGetResourceAuthConfigOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuthParamForGetResourceAuthConfigOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enums' => 'string[]',
        'param_key' => 'string',
        'param_name' => 'string',
        'param_tips' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enums' => null,
        'param_key' => null,
        'param_name' => null,
        'param_tips' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enums' => 'Enums',
        'param_key' => 'ParamKey',
        'param_name' => 'ParamName',
        'param_tips' => 'ParamTips'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enums' => 'setEnums',
        'param_key' => 'setParamKey',
        'param_name' => 'setParamName',
        'param_tips' => 'setParamTips'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enums' => 'getEnums',
        'param_key' => 'getParamKey',
        'param_name' => 'getParamName',
        'param_tips' => 'getParamTips'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enums'] = isset($data['enums']) ? $data['enums'] : null;
        $this->container['param_key'] = isset($data['param_key']) ? $data['param_key'] : null;
        $this->container['param_name'] = isset($data['param_name']) ? $data['param_name'] : null;
        $this->container['param_tips'] = isset($data['param_tips']) ? $data['param_tips'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enums
     *
     * @return string[]
     */
    public function getEnums()
    {
        return $this->container['enums'];
    }

    /**
     * Sets enums
     *
     * @param string[] $enums enums
     *
     * @return $this
     */
    public function setEnums($enums)
    {
        $this->container['enums'] = $enums;

        return $this;
    }

    /**
     * Gets param_key
     *
     * @return string
     */
    public function getParamKey()
    {
        return $this->container['param_key'];
    }

    /**
     * Sets param_key
     *
     * @param string $param_key param_key
     *
     * @return $this
     */
    public function setParamKey($param_key)
    {
        $this->container['param_key'] = $param_key;

        return $this;
    }

    /**
     * Gets param_name
     *
     * @return string
     */
    public function getParamName()
    {
        return $this->container['param_name'];
    }

    /**
     * Sets param_name
     *
     * @param string $param_name param_name
     *
     * @return $this
     */
    public function setParamName($param_name)
    {
        $this->container['param_name'] = $param_name;

        return $this;
    }

    /**
     * Gets param_tips
     *
     * @return string
     */
    public function getParamTips()
    {
        return $this->container['param_tips'];
    }

    /**
     * Sets param_tips
     *
     * @param string $param_tips param_tips
     *
     * @return $this
     */
    public function setParamTips($param_tips)
    {
        $this->container['param_tips'] = $param_tips;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

