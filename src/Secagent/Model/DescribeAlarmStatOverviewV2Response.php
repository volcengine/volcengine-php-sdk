<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Secagent\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeAlarmStatOverviewV2Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeAlarmStatOverviewV2Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'analysis_attempted_count' => 'int',
        'analysis_false_count' => 'int',
        'analysis_pending_count' => 'int',
        'analysis_suspicious_count' => 'int',
        'analysis_true_count' => 'int',
        'auto_decide_rate' => 'float',
        'discover_hidden_count' => 'int',
        'ioc_intel_count' => 'int',
        'priority_focus_count' => 'int',
        'reduce_rate' => 'float',
        'risk_stage_automatic_process_complete_count' => 'int',
        'risk_total_count' => 'int',
        'valid_alarm_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'analysis_attempted_count' => 'int64',
        'analysis_false_count' => 'int64',
        'analysis_pending_count' => 'int64',
        'analysis_suspicious_count' => 'int64',
        'analysis_true_count' => 'int64',
        'auto_decide_rate' => 'float',
        'discover_hidden_count' => 'int64',
        'ioc_intel_count' => 'int64',
        'priority_focus_count' => 'int64',
        'reduce_rate' => 'float',
        'risk_stage_automatic_process_complete_count' => 'int64',
        'risk_total_count' => 'int64',
        'valid_alarm_count' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'analysis_attempted_count' => 'AnalysisAttemptedCount',
        'analysis_false_count' => 'AnalysisFalseCount',
        'analysis_pending_count' => 'AnalysisPendingCount',
        'analysis_suspicious_count' => 'AnalysisSuspiciousCount',
        'analysis_true_count' => 'AnalysisTrueCount',
        'auto_decide_rate' => 'AutoDecideRate',
        'discover_hidden_count' => 'DiscoverHiddenCount',
        'ioc_intel_count' => 'IOCIntelCount',
        'priority_focus_count' => 'PriorityFocusCount',
        'reduce_rate' => 'ReduceRate',
        'risk_stage_automatic_process_complete_count' => 'RiskStageAutomaticProcessCompleteCount',
        'risk_total_count' => 'RiskTotalCount',
        'valid_alarm_count' => 'ValidAlarmCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'analysis_attempted_count' => 'setAnalysisAttemptedCount',
        'analysis_false_count' => 'setAnalysisFalseCount',
        'analysis_pending_count' => 'setAnalysisPendingCount',
        'analysis_suspicious_count' => 'setAnalysisSuspiciousCount',
        'analysis_true_count' => 'setAnalysisTrueCount',
        'auto_decide_rate' => 'setAutoDecideRate',
        'discover_hidden_count' => 'setDiscoverHiddenCount',
        'ioc_intel_count' => 'setIocIntelCount',
        'priority_focus_count' => 'setPriorityFocusCount',
        'reduce_rate' => 'setReduceRate',
        'risk_stage_automatic_process_complete_count' => 'setRiskStageAutomaticProcessCompleteCount',
        'risk_total_count' => 'setRiskTotalCount',
        'valid_alarm_count' => 'setValidAlarmCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'analysis_attempted_count' => 'getAnalysisAttemptedCount',
        'analysis_false_count' => 'getAnalysisFalseCount',
        'analysis_pending_count' => 'getAnalysisPendingCount',
        'analysis_suspicious_count' => 'getAnalysisSuspiciousCount',
        'analysis_true_count' => 'getAnalysisTrueCount',
        'auto_decide_rate' => 'getAutoDecideRate',
        'discover_hidden_count' => 'getDiscoverHiddenCount',
        'ioc_intel_count' => 'getIocIntelCount',
        'priority_focus_count' => 'getPriorityFocusCount',
        'reduce_rate' => 'getReduceRate',
        'risk_stage_automatic_process_complete_count' => 'getRiskStageAutomaticProcessCompleteCount',
        'risk_total_count' => 'getRiskTotalCount',
        'valid_alarm_count' => 'getValidAlarmCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['analysis_attempted_count'] = isset($data['analysis_attempted_count']) ? $data['analysis_attempted_count'] : null;
        $this->container['analysis_false_count'] = isset($data['analysis_false_count']) ? $data['analysis_false_count'] : null;
        $this->container['analysis_pending_count'] = isset($data['analysis_pending_count']) ? $data['analysis_pending_count'] : null;
        $this->container['analysis_suspicious_count'] = isset($data['analysis_suspicious_count']) ? $data['analysis_suspicious_count'] : null;
        $this->container['analysis_true_count'] = isset($data['analysis_true_count']) ? $data['analysis_true_count'] : null;
        $this->container['auto_decide_rate'] = isset($data['auto_decide_rate']) ? $data['auto_decide_rate'] : null;
        $this->container['discover_hidden_count'] = isset($data['discover_hidden_count']) ? $data['discover_hidden_count'] : null;
        $this->container['ioc_intel_count'] = isset($data['ioc_intel_count']) ? $data['ioc_intel_count'] : null;
        $this->container['priority_focus_count'] = isset($data['priority_focus_count']) ? $data['priority_focus_count'] : null;
        $this->container['reduce_rate'] = isset($data['reduce_rate']) ? $data['reduce_rate'] : null;
        $this->container['risk_stage_automatic_process_complete_count'] = isset($data['risk_stage_automatic_process_complete_count']) ? $data['risk_stage_automatic_process_complete_count'] : null;
        $this->container['risk_total_count'] = isset($data['risk_total_count']) ? $data['risk_total_count'] : null;
        $this->container['valid_alarm_count'] = isset($data['valid_alarm_count']) ? $data['valid_alarm_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets analysis_attempted_count
     *
     * @return int
     */
    public function getAnalysisAttemptedCount()
    {
        return $this->container['analysis_attempted_count'];
    }

    /**
     * Sets analysis_attempted_count
     *
     * @param int $analysis_attempted_count analysis_attempted_count
     *
     * @return $this
     */
    public function setAnalysisAttemptedCount($analysis_attempted_count)
    {
        $this->container['analysis_attempted_count'] = $analysis_attempted_count;

        return $this;
    }

    /**
     * Gets analysis_false_count
     *
     * @return int
     */
    public function getAnalysisFalseCount()
    {
        return $this->container['analysis_false_count'];
    }

    /**
     * Sets analysis_false_count
     *
     * @param int $analysis_false_count analysis_false_count
     *
     * @return $this
     */
    public function setAnalysisFalseCount($analysis_false_count)
    {
        $this->container['analysis_false_count'] = $analysis_false_count;

        return $this;
    }

    /**
     * Gets analysis_pending_count
     *
     * @return int
     */
    public function getAnalysisPendingCount()
    {
        return $this->container['analysis_pending_count'];
    }

    /**
     * Sets analysis_pending_count
     *
     * @param int $analysis_pending_count analysis_pending_count
     *
     * @return $this
     */
    public function setAnalysisPendingCount($analysis_pending_count)
    {
        $this->container['analysis_pending_count'] = $analysis_pending_count;

        return $this;
    }

    /**
     * Gets analysis_suspicious_count
     *
     * @return int
     */
    public function getAnalysisSuspiciousCount()
    {
        return $this->container['analysis_suspicious_count'];
    }

    /**
     * Sets analysis_suspicious_count
     *
     * @param int $analysis_suspicious_count analysis_suspicious_count
     *
     * @return $this
     */
    public function setAnalysisSuspiciousCount($analysis_suspicious_count)
    {
        $this->container['analysis_suspicious_count'] = $analysis_suspicious_count;

        return $this;
    }

    /**
     * Gets analysis_true_count
     *
     * @return int
     */
    public function getAnalysisTrueCount()
    {
        return $this->container['analysis_true_count'];
    }

    /**
     * Sets analysis_true_count
     *
     * @param int $analysis_true_count analysis_true_count
     *
     * @return $this
     */
    public function setAnalysisTrueCount($analysis_true_count)
    {
        $this->container['analysis_true_count'] = $analysis_true_count;

        return $this;
    }

    /**
     * Gets auto_decide_rate
     *
     * @return float
     */
    public function getAutoDecideRate()
    {
        return $this->container['auto_decide_rate'];
    }

    /**
     * Sets auto_decide_rate
     *
     * @param float $auto_decide_rate auto_decide_rate
     *
     * @return $this
     */
    public function setAutoDecideRate($auto_decide_rate)
    {
        $this->container['auto_decide_rate'] = $auto_decide_rate;

        return $this;
    }

    /**
     * Gets discover_hidden_count
     *
     * @return int
     */
    public function getDiscoverHiddenCount()
    {
        return $this->container['discover_hidden_count'];
    }

    /**
     * Sets discover_hidden_count
     *
     * @param int $discover_hidden_count discover_hidden_count
     *
     * @return $this
     */
    public function setDiscoverHiddenCount($discover_hidden_count)
    {
        $this->container['discover_hidden_count'] = $discover_hidden_count;

        return $this;
    }

    /**
     * Gets ioc_intel_count
     *
     * @return int
     */
    public function getIocIntelCount()
    {
        return $this->container['ioc_intel_count'];
    }

    /**
     * Sets ioc_intel_count
     *
     * @param int $ioc_intel_count ioc_intel_count
     *
     * @return $this
     */
    public function setIocIntelCount($ioc_intel_count)
    {
        $this->container['ioc_intel_count'] = $ioc_intel_count;

        return $this;
    }

    /**
     * Gets priority_focus_count
     *
     * @return int
     */
    public function getPriorityFocusCount()
    {
        return $this->container['priority_focus_count'];
    }

    /**
     * Sets priority_focus_count
     *
     * @param int $priority_focus_count priority_focus_count
     *
     * @return $this
     */
    public function setPriorityFocusCount($priority_focus_count)
    {
        $this->container['priority_focus_count'] = $priority_focus_count;

        return $this;
    }

    /**
     * Gets reduce_rate
     *
     * @return float
     */
    public function getReduceRate()
    {
        return $this->container['reduce_rate'];
    }

    /**
     * Sets reduce_rate
     *
     * @param float $reduce_rate reduce_rate
     *
     * @return $this
     */
    public function setReduceRate($reduce_rate)
    {
        $this->container['reduce_rate'] = $reduce_rate;

        return $this;
    }

    /**
     * Gets risk_stage_automatic_process_complete_count
     *
     * @return int
     */
    public function getRiskStageAutomaticProcessCompleteCount()
    {
        return $this->container['risk_stage_automatic_process_complete_count'];
    }

    /**
     * Sets risk_stage_automatic_process_complete_count
     *
     * @param int $risk_stage_automatic_process_complete_count risk_stage_automatic_process_complete_count
     *
     * @return $this
     */
    public function setRiskStageAutomaticProcessCompleteCount($risk_stage_automatic_process_complete_count)
    {
        $this->container['risk_stage_automatic_process_complete_count'] = $risk_stage_automatic_process_complete_count;

        return $this;
    }

    /**
     * Gets risk_total_count
     *
     * @return int
     */
    public function getRiskTotalCount()
    {
        return $this->container['risk_total_count'];
    }

    /**
     * Sets risk_total_count
     *
     * @param int $risk_total_count risk_total_count
     *
     * @return $this
     */
    public function setRiskTotalCount($risk_total_count)
    {
        $this->container['risk_total_count'] = $risk_total_count;

        return $this;
    }

    /**
     * Gets valid_alarm_count
     *
     * @return int
     */
    public function getValidAlarmCount()
    {
        return $this->container['valid_alarm_count'];
    }

    /**
     * Sets valid_alarm_count
     *
     * @param int $valid_alarm_count valid_alarm_count
     *
     * @return $this
     */
    public function setValidAlarmCount($valid_alarm_count)
    {
        $this->container['valid_alarm_count'] = $valid_alarm_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

