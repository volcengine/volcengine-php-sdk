<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Secagent\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FeedbackForGetAlarmDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeedbackForGetAlarmDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feedback_complement' => 'string',
        'feedback_ioc_feature' => 'string',
        'feedback_result' => 'string',
        'feedback_tag' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feedback_complement' => null,
        'feedback_ioc_feature' => null,
        'feedback_result' => null,
        'feedback_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feedback_complement' => 'FeedbackComplement',
        'feedback_ioc_feature' => 'FeedbackIOCFeature',
        'feedback_result' => 'FeedbackResult',
        'feedback_tag' => 'FeedbackTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feedback_complement' => 'setFeedbackComplement',
        'feedback_ioc_feature' => 'setFeedbackIocFeature',
        'feedback_result' => 'setFeedbackResult',
        'feedback_tag' => 'setFeedbackTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feedback_complement' => 'getFeedbackComplement',
        'feedback_ioc_feature' => 'getFeedbackIocFeature',
        'feedback_result' => 'getFeedbackResult',
        'feedback_tag' => 'getFeedbackTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feedback_complement'] = isset($data['feedback_complement']) ? $data['feedback_complement'] : null;
        $this->container['feedback_ioc_feature'] = isset($data['feedback_ioc_feature']) ? $data['feedback_ioc_feature'] : null;
        $this->container['feedback_result'] = isset($data['feedback_result']) ? $data['feedback_result'] : null;
        $this->container['feedback_tag'] = isset($data['feedback_tag']) ? $data['feedback_tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feedback_complement
     *
     * @return string
     */
    public function getFeedbackComplement()
    {
        return $this->container['feedback_complement'];
    }

    /**
     * Sets feedback_complement
     *
     * @param string $feedback_complement feedback_complement
     *
     * @return $this
     */
    public function setFeedbackComplement($feedback_complement)
    {
        $this->container['feedback_complement'] = $feedback_complement;

        return $this;
    }

    /**
     * Gets feedback_ioc_feature
     *
     * @return string
     */
    public function getFeedbackIocFeature()
    {
        return $this->container['feedback_ioc_feature'];
    }

    /**
     * Sets feedback_ioc_feature
     *
     * @param string $feedback_ioc_feature feedback_ioc_feature
     *
     * @return $this
     */
    public function setFeedbackIocFeature($feedback_ioc_feature)
    {
        $this->container['feedback_ioc_feature'] = $feedback_ioc_feature;

        return $this;
    }

    /**
     * Gets feedback_result
     *
     * @return string
     */
    public function getFeedbackResult()
    {
        return $this->container['feedback_result'];
    }

    /**
     * Sets feedback_result
     *
     * @param string $feedback_result feedback_result
     *
     * @return $this
     */
    public function setFeedbackResult($feedback_result)
    {
        $this->container['feedback_result'] = $feedback_result;

        return $this;
    }

    /**
     * Gets feedback_tag
     *
     * @return string[]
     */
    public function getFeedbackTag()
    {
        return $this->container['feedback_tag'];
    }

    /**
     * Sets feedback_tag
     *
     * @param string[] $feedback_tag feedback_tag
     *
     * @return $this
     */
    public function setFeedbackTag($feedback_tag)
    {
        $this->container['feedback_tag'] = $feedback_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

