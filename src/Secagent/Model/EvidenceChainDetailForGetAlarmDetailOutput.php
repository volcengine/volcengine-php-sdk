<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Secagent\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class EvidenceChainDetailForGetAlarmDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvidenceChainDetailForGetAlarmDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action_advice' => 'string',
        'alarm_raw_data' => 'string',
        'analysis_end_time' => 'int',
        'analysis_start_time' => 'int',
        'critical_attribute' => 'string',
        'event_summarize' => 'string',
        'evidences' => '\Volcengine\Secagent\Model\EvidencesForGetAlarmDetailOutput',
        'feedback' => '\Volcengine\Secagent\Model\FeedbackForGetAlarmDetailOutput',
        'final_analysis_result' => 'string',
        'findings' => '\Volcengine\Secagent\Model\FindingsForGetAlarmDetailOutput',
        'first_analysis_result' => 'string',
        'formatted_alarm' => 'string',
        'ioc_data' => '\Volcengine\Secagent\Model\IOCDataForGetAlarmDetailOutput',
        'kill_chain' => 'string',
        'planning_survey_path' => '\Volcengine\Secagent\Model\PlanningSurveyPathForGetAlarmDetailOutput',
        'product_name' => 'string',
        'rag_detail' => '\Volcengine\Secagent\Model\RagDetailForGetAlarmDetailOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action_advice' => null,
        'alarm_raw_data' => null,
        'analysis_end_time' => 'int64',
        'analysis_start_time' => 'int64',
        'critical_attribute' => null,
        'event_summarize' => null,
        'evidences' => null,
        'feedback' => null,
        'final_analysis_result' => null,
        'findings' => null,
        'first_analysis_result' => null,
        'formatted_alarm' => null,
        'ioc_data' => null,
        'kill_chain' => null,
        'planning_survey_path' => null,
        'product_name' => null,
        'rag_detail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_advice' => 'ActionAdvice',
        'alarm_raw_data' => 'AlarmRawData',
        'analysis_end_time' => 'AnalysisEndTime',
        'analysis_start_time' => 'AnalysisStartTime',
        'critical_attribute' => 'CriticalAttribute',
        'event_summarize' => 'EventSummarize',
        'evidences' => 'Evidences',
        'feedback' => 'Feedback',
        'final_analysis_result' => 'FinalAnalysisResult',
        'findings' => 'Findings',
        'first_analysis_result' => 'FirstAnalysisResult',
        'formatted_alarm' => 'FormattedAlarm',
        'ioc_data' => 'IOCData',
        'kill_chain' => 'KillChain',
        'planning_survey_path' => 'PlanningSurveyPath',
        'product_name' => 'ProductName',
        'rag_detail' => 'RagDetail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_advice' => 'setActionAdvice',
        'alarm_raw_data' => 'setAlarmRawData',
        'analysis_end_time' => 'setAnalysisEndTime',
        'analysis_start_time' => 'setAnalysisStartTime',
        'critical_attribute' => 'setCriticalAttribute',
        'event_summarize' => 'setEventSummarize',
        'evidences' => 'setEvidences',
        'feedback' => 'setFeedback',
        'final_analysis_result' => 'setFinalAnalysisResult',
        'findings' => 'setFindings',
        'first_analysis_result' => 'setFirstAnalysisResult',
        'formatted_alarm' => 'setFormattedAlarm',
        'ioc_data' => 'setIocData',
        'kill_chain' => 'setKillChain',
        'planning_survey_path' => 'setPlanningSurveyPath',
        'product_name' => 'setProductName',
        'rag_detail' => 'setRagDetail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_advice' => 'getActionAdvice',
        'alarm_raw_data' => 'getAlarmRawData',
        'analysis_end_time' => 'getAnalysisEndTime',
        'analysis_start_time' => 'getAnalysisStartTime',
        'critical_attribute' => 'getCriticalAttribute',
        'event_summarize' => 'getEventSummarize',
        'evidences' => 'getEvidences',
        'feedback' => 'getFeedback',
        'final_analysis_result' => 'getFinalAnalysisResult',
        'findings' => 'getFindings',
        'first_analysis_result' => 'getFirstAnalysisResult',
        'formatted_alarm' => 'getFormattedAlarm',
        'ioc_data' => 'getIocData',
        'kill_chain' => 'getKillChain',
        'planning_survey_path' => 'getPlanningSurveyPath',
        'product_name' => 'getProductName',
        'rag_detail' => 'getRagDetail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_advice'] = isset($data['action_advice']) ? $data['action_advice'] : null;
        $this->container['alarm_raw_data'] = isset($data['alarm_raw_data']) ? $data['alarm_raw_data'] : null;
        $this->container['analysis_end_time'] = isset($data['analysis_end_time']) ? $data['analysis_end_time'] : null;
        $this->container['analysis_start_time'] = isset($data['analysis_start_time']) ? $data['analysis_start_time'] : null;
        $this->container['critical_attribute'] = isset($data['critical_attribute']) ? $data['critical_attribute'] : null;
        $this->container['event_summarize'] = isset($data['event_summarize']) ? $data['event_summarize'] : null;
        $this->container['evidences'] = isset($data['evidences']) ? $data['evidences'] : null;
        $this->container['feedback'] = isset($data['feedback']) ? $data['feedback'] : null;
        $this->container['final_analysis_result'] = isset($data['final_analysis_result']) ? $data['final_analysis_result'] : null;
        $this->container['findings'] = isset($data['findings']) ? $data['findings'] : null;
        $this->container['first_analysis_result'] = isset($data['first_analysis_result']) ? $data['first_analysis_result'] : null;
        $this->container['formatted_alarm'] = isset($data['formatted_alarm']) ? $data['formatted_alarm'] : null;
        $this->container['ioc_data'] = isset($data['ioc_data']) ? $data['ioc_data'] : null;
        $this->container['kill_chain'] = isset($data['kill_chain']) ? $data['kill_chain'] : null;
        $this->container['planning_survey_path'] = isset($data['planning_survey_path']) ? $data['planning_survey_path'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['rag_detail'] = isset($data['rag_detail']) ? $data['rag_detail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_advice
     *
     * @return string
     */
    public function getActionAdvice()
    {
        return $this->container['action_advice'];
    }

    /**
     * Sets action_advice
     *
     * @param string $action_advice action_advice
     *
     * @return $this
     */
    public function setActionAdvice($action_advice)
    {
        $this->container['action_advice'] = $action_advice;

        return $this;
    }

    /**
     * Gets alarm_raw_data
     *
     * @return string
     */
    public function getAlarmRawData()
    {
        return $this->container['alarm_raw_data'];
    }

    /**
     * Sets alarm_raw_data
     *
     * @param string $alarm_raw_data alarm_raw_data
     *
     * @return $this
     */
    public function setAlarmRawData($alarm_raw_data)
    {
        $this->container['alarm_raw_data'] = $alarm_raw_data;

        return $this;
    }

    /**
     * Gets analysis_end_time
     *
     * @return int
     */
    public function getAnalysisEndTime()
    {
        return $this->container['analysis_end_time'];
    }

    /**
     * Sets analysis_end_time
     *
     * @param int $analysis_end_time analysis_end_time
     *
     * @return $this
     */
    public function setAnalysisEndTime($analysis_end_time)
    {
        $this->container['analysis_end_time'] = $analysis_end_time;

        return $this;
    }

    /**
     * Gets analysis_start_time
     *
     * @return int
     */
    public function getAnalysisStartTime()
    {
        return $this->container['analysis_start_time'];
    }

    /**
     * Sets analysis_start_time
     *
     * @param int $analysis_start_time analysis_start_time
     *
     * @return $this
     */
    public function setAnalysisStartTime($analysis_start_time)
    {
        $this->container['analysis_start_time'] = $analysis_start_time;

        return $this;
    }

    /**
     * Gets critical_attribute
     *
     * @return string
     */
    public function getCriticalAttribute()
    {
        return $this->container['critical_attribute'];
    }

    /**
     * Sets critical_attribute
     *
     * @param string $critical_attribute critical_attribute
     *
     * @return $this
     */
    public function setCriticalAttribute($critical_attribute)
    {
        $this->container['critical_attribute'] = $critical_attribute;

        return $this;
    }

    /**
     * Gets event_summarize
     *
     * @return string
     */
    public function getEventSummarize()
    {
        return $this->container['event_summarize'];
    }

    /**
     * Sets event_summarize
     *
     * @param string $event_summarize event_summarize
     *
     * @return $this
     */
    public function setEventSummarize($event_summarize)
    {
        $this->container['event_summarize'] = $event_summarize;

        return $this;
    }

    /**
     * Gets evidences
     *
     * @return \Volcengine\Secagent\Model\EvidencesForGetAlarmDetailOutput
     */
    public function getEvidences()
    {
        return $this->container['evidences'];
    }

    /**
     * Sets evidences
     *
     * @param \Volcengine\Secagent\Model\EvidencesForGetAlarmDetailOutput $evidences evidences
     *
     * @return $this
     */
    public function setEvidences($evidences)
    {
        $this->container['evidences'] = $evidences;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return \Volcengine\Secagent\Model\FeedbackForGetAlarmDetailOutput
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param \Volcengine\Secagent\Model\FeedbackForGetAlarmDetailOutput $feedback feedback
     *
     * @return $this
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets final_analysis_result
     *
     * @return string
     */
    public function getFinalAnalysisResult()
    {
        return $this->container['final_analysis_result'];
    }

    /**
     * Sets final_analysis_result
     *
     * @param string $final_analysis_result final_analysis_result
     *
     * @return $this
     */
    public function setFinalAnalysisResult($final_analysis_result)
    {
        $this->container['final_analysis_result'] = $final_analysis_result;

        return $this;
    }

    /**
     * Gets findings
     *
     * @return \Volcengine\Secagent\Model\FindingsForGetAlarmDetailOutput
     */
    public function getFindings()
    {
        return $this->container['findings'];
    }

    /**
     * Sets findings
     *
     * @param \Volcengine\Secagent\Model\FindingsForGetAlarmDetailOutput $findings findings
     *
     * @return $this
     */
    public function setFindings($findings)
    {
        $this->container['findings'] = $findings;

        return $this;
    }

    /**
     * Gets first_analysis_result
     *
     * @return string
     */
    public function getFirstAnalysisResult()
    {
        return $this->container['first_analysis_result'];
    }

    /**
     * Sets first_analysis_result
     *
     * @param string $first_analysis_result first_analysis_result
     *
     * @return $this
     */
    public function setFirstAnalysisResult($first_analysis_result)
    {
        $this->container['first_analysis_result'] = $first_analysis_result;

        return $this;
    }

    /**
     * Gets formatted_alarm
     *
     * @return string
     */
    public function getFormattedAlarm()
    {
        return $this->container['formatted_alarm'];
    }

    /**
     * Sets formatted_alarm
     *
     * @param string $formatted_alarm formatted_alarm
     *
     * @return $this
     */
    public function setFormattedAlarm($formatted_alarm)
    {
        $this->container['formatted_alarm'] = $formatted_alarm;

        return $this;
    }

    /**
     * Gets ioc_data
     *
     * @return \Volcengine\Secagent\Model\IOCDataForGetAlarmDetailOutput
     */
    public function getIocData()
    {
        return $this->container['ioc_data'];
    }

    /**
     * Sets ioc_data
     *
     * @param \Volcengine\Secagent\Model\IOCDataForGetAlarmDetailOutput $ioc_data ioc_data
     *
     * @return $this
     */
    public function setIocData($ioc_data)
    {
        $this->container['ioc_data'] = $ioc_data;

        return $this;
    }

    /**
     * Gets kill_chain
     *
     * @return string
     */
    public function getKillChain()
    {
        return $this->container['kill_chain'];
    }

    /**
     * Sets kill_chain
     *
     * @param string $kill_chain kill_chain
     *
     * @return $this
     */
    public function setKillChain($kill_chain)
    {
        $this->container['kill_chain'] = $kill_chain;

        return $this;
    }

    /**
     * Gets planning_survey_path
     *
     * @return \Volcengine\Secagent\Model\PlanningSurveyPathForGetAlarmDetailOutput
     */
    public function getPlanningSurveyPath()
    {
        return $this->container['planning_survey_path'];
    }

    /**
     * Sets planning_survey_path
     *
     * @param \Volcengine\Secagent\Model\PlanningSurveyPathForGetAlarmDetailOutput $planning_survey_path planning_survey_path
     *
     * @return $this
     */
    public function setPlanningSurveyPath($planning_survey_path)
    {
        $this->container['planning_survey_path'] = $planning_survey_path;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets rag_detail
     *
     * @return \Volcengine\Secagent\Model\RagDetailForGetAlarmDetailOutput
     */
    public function getRagDetail()
    {
        return $this->container['rag_detail'];
    }

    /**
     * Sets rag_detail
     *
     * @param \Volcengine\Secagent\Model\RagDetailForGetAlarmDetailOutput $rag_detail rag_detail
     *
     * @return $this
     */
    public function setRagDetail($rag_detail)
    {
        $this->container['rag_detail'] = $rag_detail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

