<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Resourceshare\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AssociationForListResourceShareAssociationsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssociationForListResourceShareAssociationsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'associate_time' => 'string',
        'association_entity' => 'string',
        'association_type' => 'string',
        'external' => 'bool',
        'resource_share_id' => 'string',
        'resource_share_name' => 'string',
        'resource_share_trn' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'associate_time' => null,
        'association_entity' => null,
        'association_type' => null,
        'external' => null,
        'resource_share_id' => null,
        'resource_share_name' => null,
        'resource_share_trn' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'associate_time' => 'AssociateTime',
        'association_entity' => 'AssociationEntity',
        'association_type' => 'AssociationType',
        'external' => 'External',
        'resource_share_id' => 'ResourceShareId',
        'resource_share_name' => 'ResourceShareName',
        'resource_share_trn' => 'ResourceShareTrn',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'associate_time' => 'setAssociateTime',
        'association_entity' => 'setAssociationEntity',
        'association_type' => 'setAssociationType',
        'external' => 'setExternal',
        'resource_share_id' => 'setResourceShareId',
        'resource_share_name' => 'setResourceShareName',
        'resource_share_trn' => 'setResourceShareTrn',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'associate_time' => 'getAssociateTime',
        'association_entity' => 'getAssociationEntity',
        'association_type' => 'getAssociationType',
        'external' => 'getExternal',
        'resource_share_id' => 'getResourceShareId',
        'resource_share_name' => 'getResourceShareName',
        'resource_share_trn' => 'getResourceShareTrn',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['associate_time'] = isset($data['associate_time']) ? $data['associate_time'] : null;
        $this->container['association_entity'] = isset($data['association_entity']) ? $data['association_entity'] : null;
        $this->container['association_type'] = isset($data['association_type']) ? $data['association_type'] : null;
        $this->container['external'] = isset($data['external']) ? $data['external'] : null;
        $this->container['resource_share_id'] = isset($data['resource_share_id']) ? $data['resource_share_id'] : null;
        $this->container['resource_share_name'] = isset($data['resource_share_name']) ? $data['resource_share_name'] : null;
        $this->container['resource_share_trn'] = isset($data['resource_share_trn']) ? $data['resource_share_trn'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets associate_time
     *
     * @return string
     */
    public function getAssociateTime()
    {
        return $this->container['associate_time'];
    }

    /**
     * Sets associate_time
     *
     * @param string $associate_time associate_time
     *
     * @return $this
     */
    public function setAssociateTime($associate_time)
    {
        $this->container['associate_time'] = $associate_time;

        return $this;
    }

    /**
     * Gets association_entity
     *
     * @return string
     */
    public function getAssociationEntity()
    {
        return $this->container['association_entity'];
    }

    /**
     * Sets association_entity
     *
     * @param string $association_entity association_entity
     *
     * @return $this
     */
    public function setAssociationEntity($association_entity)
    {
        $this->container['association_entity'] = $association_entity;

        return $this;
    }

    /**
     * Gets association_type
     *
     * @return string
     */
    public function getAssociationType()
    {
        return $this->container['association_type'];
    }

    /**
     * Sets association_type
     *
     * @param string $association_type association_type
     *
     * @return $this
     */
    public function setAssociationType($association_type)
    {
        $this->container['association_type'] = $association_type;

        return $this;
    }

    /**
     * Gets external
     *
     * @return bool
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param bool $external external
     *
     * @return $this
     */
    public function setExternal($external)
    {
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets resource_share_id
     *
     * @return string
     */
    public function getResourceShareId()
    {
        return $this->container['resource_share_id'];
    }

    /**
     * Sets resource_share_id
     *
     * @param string $resource_share_id resource_share_id
     *
     * @return $this
     */
    public function setResourceShareId($resource_share_id)
    {
        $this->container['resource_share_id'] = $resource_share_id;

        return $this;
    }

    /**
     * Gets resource_share_name
     *
     * @return string
     */
    public function getResourceShareName()
    {
        return $this->container['resource_share_name'];
    }

    /**
     * Sets resource_share_name
     *
     * @param string $resource_share_name resource_share_name
     *
     * @return $this
     */
    public function setResourceShareName($resource_share_name)
    {
        $this->container['resource_share_name'] = $resource_share_name;

        return $this;
    }

    /**
     * Gets resource_share_trn
     *
     * @return string
     */
    public function getResourceShareTrn()
    {
        return $this->container['resource_share_trn'];
    }

    /**
     * Sets resource_share_trn
     *
     * @param string $resource_share_trn resource_share_trn
     *
     * @return $this
     */
    public function setResourceShareTrn($resource_share_trn)
    {
        $this->container['resource_share_trn'] = $resource_share_trn;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

