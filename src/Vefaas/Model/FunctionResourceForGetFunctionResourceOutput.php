<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FunctionResourceForGetFunctionResourceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FunctionResourceForGetFunctionResourceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gpu_memory_mb' => 'int',
        'id' => 'string',
        'last_update_time' => 'string',
        'max_gpu_resource' => 'int',
        'max_instance' => 'int',
        'max_resource' => 'int',
        'memory_mb' => 'int',
        'min_instance' => 'int',
        'name' => 'string',
        'reserved_dp_enabled' => 'bool',
        'reserved_frozen_instance' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gpu_memory_mb' => 'int32',
        'id' => null,
        'last_update_time' => null,
        'max_gpu_resource' => 'int64',
        'max_instance' => 'int32',
        'max_resource' => 'int64',
        'memory_mb' => 'int32',
        'min_instance' => 'int32',
        'name' => null,
        'reserved_dp_enabled' => null,
        'reserved_frozen_instance' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gpu_memory_mb' => 'GPUMemoryMB',
        'id' => 'Id',
        'last_update_time' => 'LastUpdateTime',
        'max_gpu_resource' => 'MaxGPUResource',
        'max_instance' => 'MaxInstance',
        'max_resource' => 'MaxResource',
        'memory_mb' => 'MemoryMB',
        'min_instance' => 'MinInstance',
        'name' => 'Name',
        'reserved_dp_enabled' => 'ReservedDPEnabled',
        'reserved_frozen_instance' => 'ReservedFrozenInstance',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gpu_memory_mb' => 'setGpuMemoryMb',
        'id' => 'setId',
        'last_update_time' => 'setLastUpdateTime',
        'max_gpu_resource' => 'setMaxGpuResource',
        'max_instance' => 'setMaxInstance',
        'max_resource' => 'setMaxResource',
        'memory_mb' => 'setMemoryMb',
        'min_instance' => 'setMinInstance',
        'name' => 'setName',
        'reserved_dp_enabled' => 'setReservedDpEnabled',
        'reserved_frozen_instance' => 'setReservedFrozenInstance',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gpu_memory_mb' => 'getGpuMemoryMb',
        'id' => 'getId',
        'last_update_time' => 'getLastUpdateTime',
        'max_gpu_resource' => 'getMaxGpuResource',
        'max_instance' => 'getMaxInstance',
        'max_resource' => 'getMaxResource',
        'memory_mb' => 'getMemoryMb',
        'min_instance' => 'getMinInstance',
        'name' => 'getName',
        'reserved_dp_enabled' => 'getReservedDpEnabled',
        'reserved_frozen_instance' => 'getReservedFrozenInstance',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gpu_memory_mb'] = isset($data['gpu_memory_mb']) ? $data['gpu_memory_mb'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['max_gpu_resource'] = isset($data['max_gpu_resource']) ? $data['max_gpu_resource'] : null;
        $this->container['max_instance'] = isset($data['max_instance']) ? $data['max_instance'] : null;
        $this->container['max_resource'] = isset($data['max_resource']) ? $data['max_resource'] : null;
        $this->container['memory_mb'] = isset($data['memory_mb']) ? $data['memory_mb'] : null;
        $this->container['min_instance'] = isset($data['min_instance']) ? $data['min_instance'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reserved_dp_enabled'] = isset($data['reserved_dp_enabled']) ? $data['reserved_dp_enabled'] : null;
        $this->container['reserved_frozen_instance'] = isset($data['reserved_frozen_instance']) ? $data['reserved_frozen_instance'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gpu_memory_mb
     *
     * @return int
     */
    public function getGpuMemoryMb()
    {
        return $this->container['gpu_memory_mb'];
    }

    /**
     * Sets gpu_memory_mb
     *
     * @param int $gpu_memory_mb gpu_memory_mb
     *
     * @return $this
     */
    public function setGpuMemoryMb($gpu_memory_mb)
    {
        $this->container['gpu_memory_mb'] = $gpu_memory_mb;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_update_time
     *
     * @return string
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     *
     * @param string $last_update_time last_update_time
     *
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets max_gpu_resource
     *
     * @return int
     */
    public function getMaxGpuResource()
    {
        return $this->container['max_gpu_resource'];
    }

    /**
     * Sets max_gpu_resource
     *
     * @param int $max_gpu_resource max_gpu_resource
     *
     * @return $this
     */
    public function setMaxGpuResource($max_gpu_resource)
    {
        $this->container['max_gpu_resource'] = $max_gpu_resource;

        return $this;
    }

    /**
     * Gets max_instance
     *
     * @return int
     */
    public function getMaxInstance()
    {
        return $this->container['max_instance'];
    }

    /**
     * Sets max_instance
     *
     * @param int $max_instance max_instance
     *
     * @return $this
     */
    public function setMaxInstance($max_instance)
    {
        $this->container['max_instance'] = $max_instance;

        return $this;
    }

    /**
     * Gets max_resource
     *
     * @return int
     */
    public function getMaxResource()
    {
        return $this->container['max_resource'];
    }

    /**
     * Sets max_resource
     *
     * @param int $max_resource max_resource
     *
     * @return $this
     */
    public function setMaxResource($max_resource)
    {
        $this->container['max_resource'] = $max_resource;

        return $this;
    }

    /**
     * Gets memory_mb
     *
     * @return int
     */
    public function getMemoryMb()
    {
        return $this->container['memory_mb'];
    }

    /**
     * Sets memory_mb
     *
     * @param int $memory_mb memory_mb
     *
     * @return $this
     */
    public function setMemoryMb($memory_mb)
    {
        $this->container['memory_mb'] = $memory_mb;

        return $this;
    }

    /**
     * Gets min_instance
     *
     * @return int
     */
    public function getMinInstance()
    {
        return $this->container['min_instance'];
    }

    /**
     * Sets min_instance
     *
     * @param int $min_instance min_instance
     *
     * @return $this
     */
    public function setMinInstance($min_instance)
    {
        $this->container['min_instance'] = $min_instance;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reserved_dp_enabled
     *
     * @return bool
     */
    public function getReservedDpEnabled()
    {
        return $this->container['reserved_dp_enabled'];
    }

    /**
     * Sets reserved_dp_enabled
     *
     * @param bool $reserved_dp_enabled reserved_dp_enabled
     *
     * @return $this
     */
    public function setReservedDpEnabled($reserved_dp_enabled)
    {
        $this->container['reserved_dp_enabled'] = $reserved_dp_enabled;

        return $this;
    }

    /**
     * Gets reserved_frozen_instance
     *
     * @return int
     */
    public function getReservedFrozenInstance()
    {
        return $this->container['reserved_frozen_instance'];
    }

    /**
     * Sets reserved_frozen_instance
     *
     * @param int $reserved_frozen_instance reserved_frozen_instance
     *
     * @return $this
     */
    public function setReservedFrozenInstance($reserved_frozen_instance)
    {
        $this->container['reserved_frozen_instance'] = $reserved_frozen_instance;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

