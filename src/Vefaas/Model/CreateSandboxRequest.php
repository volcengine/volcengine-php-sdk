<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateSandboxRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateSandboxRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_milli' => 'int',
        'envs' => '\Volcengine\Vefaas\Model\EnvForCreateSandboxInput[]',
        'function_id' => 'string',
        'instance_image_info' => '\Volcengine\Vefaas\Model\InstanceImageInfoForCreateSandboxInput',
        'instance_tos_mount_config' => '\Volcengine\Vefaas\Model\InstanceTosMountConfigForCreateSandboxInput',
        'max_concurrency' => 'int',
        'memory_mb' => 'int',
        'metadata' => 'map[string,string]',
        'request_timeout' => 'int',
        'timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_milli' => 'int32',
        'envs' => null,
        'function_id' => null,
        'instance_image_info' => null,
        'instance_tos_mount_config' => null,
        'max_concurrency' => 'int32',
        'memory_mb' => 'int32',
        'metadata' => null,
        'request_timeout' => 'int32',
        'timeout' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_milli' => 'CpuMilli',
        'envs' => 'Envs',
        'function_id' => 'FunctionId',
        'instance_image_info' => 'InstanceImageInfo',
        'instance_tos_mount_config' => 'InstanceTosMountConfig',
        'max_concurrency' => 'MaxConcurrency',
        'memory_mb' => 'MemoryMB',
        'metadata' => 'Metadata',
        'request_timeout' => 'RequestTimeout',
        'timeout' => 'Timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_milli' => 'setCpuMilli',
        'envs' => 'setEnvs',
        'function_id' => 'setFunctionId',
        'instance_image_info' => 'setInstanceImageInfo',
        'instance_tos_mount_config' => 'setInstanceTosMountConfig',
        'max_concurrency' => 'setMaxConcurrency',
        'memory_mb' => 'setMemoryMb',
        'metadata' => 'setMetadata',
        'request_timeout' => 'setRequestTimeout',
        'timeout' => 'setTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_milli' => 'getCpuMilli',
        'envs' => 'getEnvs',
        'function_id' => 'getFunctionId',
        'instance_image_info' => 'getInstanceImageInfo',
        'instance_tos_mount_config' => 'getInstanceTosMountConfig',
        'max_concurrency' => 'getMaxConcurrency',
        'memory_mb' => 'getMemoryMb',
        'metadata' => 'getMetadata',
        'request_timeout' => 'getRequestTimeout',
        'timeout' => 'getTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_milli'] = isset($data['cpu_milli']) ? $data['cpu_milli'] : null;
        $this->container['envs'] = isset($data['envs']) ? $data['envs'] : null;
        $this->container['function_id'] = isset($data['function_id']) ? $data['function_id'] : null;
        $this->container['instance_image_info'] = isset($data['instance_image_info']) ? $data['instance_image_info'] : null;
        $this->container['instance_tos_mount_config'] = isset($data['instance_tos_mount_config']) ? $data['instance_tos_mount_config'] : null;
        $this->container['max_concurrency'] = isset($data['max_concurrency']) ? $data['max_concurrency'] : null;
        $this->container['memory_mb'] = isset($data['memory_mb']) ? $data['memory_mb'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['request_timeout'] = isset($data['request_timeout']) ? $data['request_timeout'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['function_id'] === null) {
            $invalidProperties[] = "'function_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_milli
     *
     * @return int
     */
    public function getCpuMilli()
    {
        return $this->container['cpu_milli'];
    }

    /**
     * Sets cpu_milli
     *
     * @param int $cpu_milli cpu_milli
     *
     * @return $this
     */
    public function setCpuMilli($cpu_milli)
    {
        $this->container['cpu_milli'] = $cpu_milli;

        return $this;
    }

    /**
     * Gets envs
     *
     * @return \Volcengine\Vefaas\Model\EnvForCreateSandboxInput[]
     */
    public function getEnvs()
    {
        return $this->container['envs'];
    }

    /**
     * Sets envs
     *
     * @param \Volcengine\Vefaas\Model\EnvForCreateSandboxInput[] $envs envs
     *
     * @return $this
     */
    public function setEnvs($envs)
    {
        $this->container['envs'] = $envs;

        return $this;
    }

    /**
     * Gets function_id
     *
     * @return string
     */
    public function getFunctionId()
    {
        return $this->container['function_id'];
    }

    /**
     * Sets function_id
     *
     * @param string $function_id function_id
     *
     * @return $this
     */
    public function setFunctionId($function_id)
    {
        $this->container['function_id'] = $function_id;

        return $this;
    }

    /**
     * Gets instance_image_info
     *
     * @return \Volcengine\Vefaas\Model\InstanceImageInfoForCreateSandboxInput
     */
    public function getInstanceImageInfo()
    {
        return $this->container['instance_image_info'];
    }

    /**
     * Sets instance_image_info
     *
     * @param \Volcengine\Vefaas\Model\InstanceImageInfoForCreateSandboxInput $instance_image_info instance_image_info
     *
     * @return $this
     */
    public function setInstanceImageInfo($instance_image_info)
    {
        $this->container['instance_image_info'] = $instance_image_info;

        return $this;
    }

    /**
     * Gets instance_tos_mount_config
     *
     * @return \Volcengine\Vefaas\Model\InstanceTosMountConfigForCreateSandboxInput
     */
    public function getInstanceTosMountConfig()
    {
        return $this->container['instance_tos_mount_config'];
    }

    /**
     * Sets instance_tos_mount_config
     *
     * @param \Volcengine\Vefaas\Model\InstanceTosMountConfigForCreateSandboxInput $instance_tos_mount_config instance_tos_mount_config
     *
     * @return $this
     */
    public function setInstanceTosMountConfig($instance_tos_mount_config)
    {
        $this->container['instance_tos_mount_config'] = $instance_tos_mount_config;

        return $this;
    }

    /**
     * Gets max_concurrency
     *
     * @return int
     */
    public function getMaxConcurrency()
    {
        return $this->container['max_concurrency'];
    }

    /**
     * Sets max_concurrency
     *
     * @param int $max_concurrency max_concurrency
     *
     * @return $this
     */
    public function setMaxConcurrency($max_concurrency)
    {
        $this->container['max_concurrency'] = $max_concurrency;

        return $this;
    }

    /**
     * Gets memory_mb
     *
     * @return int
     */
    public function getMemoryMb()
    {
        return $this->container['memory_mb'];
    }

    /**
     * Sets memory_mb
     *
     * @param int $memory_mb memory_mb
     *
     * @return $this
     */
    public function setMemoryMb($memory_mb)
    {
        $this->container['memory_mb'] = $memory_mb;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets request_timeout
     *
     * @return int
     */
    public function getRequestTimeout()
    {
        return $this->container['request_timeout'];
    }

    /**
     * Sets request_timeout
     *
     * @param int $request_timeout request_timeout
     *
     * @return $this
     */
    public function setRequestTimeout($request_timeout)
    {
        $this->container['request_timeout'] = $request_timeout;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout timeout
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

