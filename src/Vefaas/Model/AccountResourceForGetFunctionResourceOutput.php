<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AccountResourceForGetFunctionResourceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountResourceForGetFunctionResourceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aailable' => 'int',
        'account_id' => 'string',
        'allocated' => 'int',
        'gpu_memory_aailable' => 'int',
        'gpu_memory_allocated' => 'int',
        'gpu_memory_total' => 'int',
        'total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aailable' => 'int64',
        'account_id' => null,
        'allocated' => 'int64',
        'gpu_memory_aailable' => 'int64',
        'gpu_memory_allocated' => 'int64',
        'gpu_memory_total' => 'int64',
        'total' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aailable' => 'Aailable',
        'account_id' => 'AccountId',
        'allocated' => 'Allocated',
        'gpu_memory_aailable' => 'GpuMemoryAailable',
        'gpu_memory_allocated' => 'GpuMemoryAllocated',
        'gpu_memory_total' => 'GpuMemoryTotal',
        'total' => 'Total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aailable' => 'setAailable',
        'account_id' => 'setAccountId',
        'allocated' => 'setAllocated',
        'gpu_memory_aailable' => 'setGpuMemoryAailable',
        'gpu_memory_allocated' => 'setGpuMemoryAllocated',
        'gpu_memory_total' => 'setGpuMemoryTotal',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aailable' => 'getAailable',
        'account_id' => 'getAccountId',
        'allocated' => 'getAllocated',
        'gpu_memory_aailable' => 'getGpuMemoryAailable',
        'gpu_memory_allocated' => 'getGpuMemoryAllocated',
        'gpu_memory_total' => 'getGpuMemoryTotal',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aailable'] = isset($data['aailable']) ? $data['aailable'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['allocated'] = isset($data['allocated']) ? $data['allocated'] : null;
        $this->container['gpu_memory_aailable'] = isset($data['gpu_memory_aailable']) ? $data['gpu_memory_aailable'] : null;
        $this->container['gpu_memory_allocated'] = isset($data['gpu_memory_allocated']) ? $data['gpu_memory_allocated'] : null;
        $this->container['gpu_memory_total'] = isset($data['gpu_memory_total']) ? $data['gpu_memory_total'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aailable
     *
     * @return int
     */
    public function getAailable()
    {
        return $this->container['aailable'];
    }

    /**
     * Sets aailable
     *
     * @param int $aailable aailable
     *
     * @return $this
     */
    public function setAailable($aailable)
    {
        $this->container['aailable'] = $aailable;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets allocated
     *
     * @return int
     */
    public function getAllocated()
    {
        return $this->container['allocated'];
    }

    /**
     * Sets allocated
     *
     * @param int $allocated allocated
     *
     * @return $this
     */
    public function setAllocated($allocated)
    {
        $this->container['allocated'] = $allocated;

        return $this;
    }

    /**
     * Gets gpu_memory_aailable
     *
     * @return int
     */
    public function getGpuMemoryAailable()
    {
        return $this->container['gpu_memory_aailable'];
    }

    /**
     * Sets gpu_memory_aailable
     *
     * @param int $gpu_memory_aailable gpu_memory_aailable
     *
     * @return $this
     */
    public function setGpuMemoryAailable($gpu_memory_aailable)
    {
        $this->container['gpu_memory_aailable'] = $gpu_memory_aailable;

        return $this;
    }

    /**
     * Gets gpu_memory_allocated
     *
     * @return int
     */
    public function getGpuMemoryAllocated()
    {
        return $this->container['gpu_memory_allocated'];
    }

    /**
     * Sets gpu_memory_allocated
     *
     * @param int $gpu_memory_allocated gpu_memory_allocated
     *
     * @return $this
     */
    public function setGpuMemoryAllocated($gpu_memory_allocated)
    {
        $this->container['gpu_memory_allocated'] = $gpu_memory_allocated;

        return $this;
    }

    /**
     * Gets gpu_memory_total
     *
     * @return int
     */
    public function getGpuMemoryTotal()
    {
        return $this->container['gpu_memory_total'];
    }

    /**
     * Sets gpu_memory_total
     *
     * @param int $gpu_memory_total gpu_memory_total
     *
     * @return $this
     */
    public function setGpuMemoryTotal($gpu_memory_total)
    {
        $this->container['gpu_memory_total'] = $gpu_memory_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

