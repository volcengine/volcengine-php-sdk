<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetRocketMQTriggerResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetRocketMQTriggerResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'consumer_group' => 'string',
        'creation_time' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'endpoint' => 'string',
        'function_id' => 'string',
        'id' => 'string',
        'last_update_time' => 'string',
        'maximum_retry_attempts' => 'int',
        'mq_instance_id' => 'string',
        'name' => 'string',
        'orderly' => 'bool',
        'qps_limit' => 'int',
        'starting_position' => 'string',
        'status' => 'string',
        'topic_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'consumer_group' => null,
        'creation_time' => null,
        'description' => null,
        'enabled' => null,
        'endpoint' => null,
        'function_id' => null,
        'id' => null,
        'last_update_time' => null,
        'maximum_retry_attempts' => 'int32',
        'mq_instance_id' => null,
        'name' => null,
        'orderly' => null,
        'qps_limit' => 'int32',
        'starting_position' => null,
        'status' => null,
        'topic_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consumer_group' => 'ConsumerGroup',
        'creation_time' => 'CreationTime',
        'description' => 'Description',
        'enabled' => 'Enabled',
        'endpoint' => 'Endpoint',
        'function_id' => 'FunctionId',
        'id' => 'Id',
        'last_update_time' => 'LastUpdateTime',
        'maximum_retry_attempts' => 'MaximumRetryAttempts',
        'mq_instance_id' => 'MqInstanceId',
        'name' => 'Name',
        'orderly' => 'Orderly',
        'qps_limit' => 'QPSLimit',
        'starting_position' => 'StartingPosition',
        'status' => 'Status',
        'topic_name' => 'TopicName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consumer_group' => 'setConsumerGroup',
        'creation_time' => 'setCreationTime',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'endpoint' => 'setEndpoint',
        'function_id' => 'setFunctionId',
        'id' => 'setId',
        'last_update_time' => 'setLastUpdateTime',
        'maximum_retry_attempts' => 'setMaximumRetryAttempts',
        'mq_instance_id' => 'setMqInstanceId',
        'name' => 'setName',
        'orderly' => 'setOrderly',
        'qps_limit' => 'setQpsLimit',
        'starting_position' => 'setStartingPosition',
        'status' => 'setStatus',
        'topic_name' => 'setTopicName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consumer_group' => 'getConsumerGroup',
        'creation_time' => 'getCreationTime',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'endpoint' => 'getEndpoint',
        'function_id' => 'getFunctionId',
        'id' => 'getId',
        'last_update_time' => 'getLastUpdateTime',
        'maximum_retry_attempts' => 'getMaximumRetryAttempts',
        'mq_instance_id' => 'getMqInstanceId',
        'name' => 'getName',
        'orderly' => 'getOrderly',
        'qps_limit' => 'getQpsLimit',
        'starting_position' => 'getStartingPosition',
        'status' => 'getStatus',
        'topic_name' => 'getTopicName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consumer_group'] = isset($data['consumer_group']) ? $data['consumer_group'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['endpoint'] = isset($data['endpoint']) ? $data['endpoint'] : null;
        $this->container['function_id'] = isset($data['function_id']) ? $data['function_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['maximum_retry_attempts'] = isset($data['maximum_retry_attempts']) ? $data['maximum_retry_attempts'] : null;
        $this->container['mq_instance_id'] = isset($data['mq_instance_id']) ? $data['mq_instance_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['orderly'] = isset($data['orderly']) ? $data['orderly'] : null;
        $this->container['qps_limit'] = isset($data['qps_limit']) ? $data['qps_limit'] : null;
        $this->container['starting_position'] = isset($data['starting_position']) ? $data['starting_position'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['topic_name'] = isset($data['topic_name']) ? $data['topic_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consumer_group
     *
     * @return string
     */
    public function getConsumerGroup()
    {
        return $this->container['consumer_group'];
    }

    /**
     * Sets consumer_group
     *
     * @param string $consumer_group consumer_group
     *
     * @return $this
     */
    public function setConsumerGroup($consumer_group)
    {
        $this->container['consumer_group'] = $consumer_group;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string $endpoint endpoint
     *
     * @return $this
     */
    public function setEndpoint($endpoint)
    {
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets function_id
     *
     * @return string
     */
    public function getFunctionId()
    {
        return $this->container['function_id'];
    }

    /**
     * Sets function_id
     *
     * @param string $function_id function_id
     *
     * @return $this
     */
    public function setFunctionId($function_id)
    {
        $this->container['function_id'] = $function_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_update_time
     *
     * @return string
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     *
     * @param string $last_update_time last_update_time
     *
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets maximum_retry_attempts
     *
     * @return int
     */
    public function getMaximumRetryAttempts()
    {
        return $this->container['maximum_retry_attempts'];
    }

    /**
     * Sets maximum_retry_attempts
     *
     * @param int $maximum_retry_attempts maximum_retry_attempts
     *
     * @return $this
     */
    public function setMaximumRetryAttempts($maximum_retry_attempts)
    {
        $this->container['maximum_retry_attempts'] = $maximum_retry_attempts;

        return $this;
    }

    /**
     * Gets mq_instance_id
     *
     * @return string
     */
    public function getMqInstanceId()
    {
        return $this->container['mq_instance_id'];
    }

    /**
     * Sets mq_instance_id
     *
     * @param string $mq_instance_id mq_instance_id
     *
     * @return $this
     */
    public function setMqInstanceId($mq_instance_id)
    {
        $this->container['mq_instance_id'] = $mq_instance_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets orderly
     *
     * @return bool
     */
    public function getOrderly()
    {
        return $this->container['orderly'];
    }

    /**
     * Sets orderly
     *
     * @param bool $orderly orderly
     *
     * @return $this
     */
    public function setOrderly($orderly)
    {
        $this->container['orderly'] = $orderly;

        return $this;
    }

    /**
     * Gets qps_limit
     *
     * @return int
     */
    public function getQpsLimit()
    {
        return $this->container['qps_limit'];
    }

    /**
     * Sets qps_limit
     *
     * @param int $qps_limit qps_limit
     *
     * @return $this
     */
    public function setQpsLimit($qps_limit)
    {
        $this->container['qps_limit'] = $qps_limit;

        return $this;
    }

    /**
     * Gets starting_position
     *
     * @return string
     */
    public function getStartingPosition()
    {
        return $this->container['starting_position'];
    }

    /**
     * Sets starting_position
     *
     * @param string $starting_position starting_position
     *
     * @return $this
     */
    public function setStartingPosition($starting_position)
    {
        $this->container['starting_position'] = $starting_position;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets topic_name
     *
     * @return string
     */
    public function getTopicName()
    {
        return $this->container['topic_name'];
    }

    /**
     * Sets topic_name
     *
     * @param string $topic_name topic_name
     *
     * @return $this
     */
    public function setTopicName($topic_name)
    {
        $this->container['topic_name'] = $topic_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

