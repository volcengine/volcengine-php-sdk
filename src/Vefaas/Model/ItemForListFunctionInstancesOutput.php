<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListFunctionInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListFunctionInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'availability_zone' => 'string',
        'creation_time' => 'string',
        'expire_at' => 'string',
        'id' => 'string',
        'instance_name' => 'string',
        'instance_status' => 'string',
        'instance_type' => 'string',
        'labels' => '\Volcengine\Vefaas\Model\LabelsForListFunctionInstancesOutput',
        'revision_number' => 'int',
        'user_vpc_ip' => 'string',
        'user_vpc_ipv6' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'availability_zone' => null,
        'creation_time' => null,
        'expire_at' => null,
        'id' => null,
        'instance_name' => null,
        'instance_status' => null,
        'instance_type' => null,
        'labels' => null,
        'revision_number' => 'int32',
        'user_vpc_ip' => null,
        'user_vpc_ipv6' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability_zone' => 'AvailabilityZone',
        'creation_time' => 'CreationTime',
        'expire_at' => 'ExpireAt',
        'id' => 'Id',
        'instance_name' => 'InstanceName',
        'instance_status' => 'InstanceStatus',
        'instance_type' => 'InstanceType',
        'labels' => 'Labels',
        'revision_number' => 'RevisionNumber',
        'user_vpc_ip' => 'UserVpcIP',
        'user_vpc_ipv6' => 'UserVpcIPv6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availability_zone' => 'setAvailabilityZone',
        'creation_time' => 'setCreationTime',
        'expire_at' => 'setExpireAt',
        'id' => 'setId',
        'instance_name' => 'setInstanceName',
        'instance_status' => 'setInstanceStatus',
        'instance_type' => 'setInstanceType',
        'labels' => 'setLabels',
        'revision_number' => 'setRevisionNumber',
        'user_vpc_ip' => 'setUserVpcIp',
        'user_vpc_ipv6' => 'setUserVpcIpv6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability_zone' => 'getAvailabilityZone',
        'creation_time' => 'getCreationTime',
        'expire_at' => 'getExpireAt',
        'id' => 'getId',
        'instance_name' => 'getInstanceName',
        'instance_status' => 'getInstanceStatus',
        'instance_type' => 'getInstanceType',
        'labels' => 'getLabels',
        'revision_number' => 'getRevisionNumber',
        'user_vpc_ip' => 'getUserVpcIp',
        'user_vpc_ipv6' => 'getUserVpcIpv6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availability_zone'] = isset($data['availability_zone']) ? $data['availability_zone'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_status'] = isset($data['instance_status']) ? $data['instance_status'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['revision_number'] = isset($data['revision_number']) ? $data['revision_number'] : null;
        $this->container['user_vpc_ip'] = isset($data['user_vpc_ip']) ? $data['user_vpc_ip'] : null;
        $this->container['user_vpc_ipv6'] = isset($data['user_vpc_ipv6']) ? $data['user_vpc_ipv6'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availability_zone
     *
     * @return string
     */
    public function getAvailabilityZone()
    {
        return $this->container['availability_zone'];
    }

    /**
     * Sets availability_zone
     *
     * @param string $availability_zone availability_zone
     *
     * @return $this
     */
    public function setAvailabilityZone($availability_zone)
    {
        $this->container['availability_zone'] = $availability_zone;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return string
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param string $expire_at expire_at
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_status
     *
     * @return string
     */
    public function getInstanceStatus()
    {
        return $this->container['instance_status'];
    }

    /**
     * Sets instance_status
     *
     * @param string $instance_status instance_status
     *
     * @return $this
     */
    public function setInstanceStatus($instance_status)
    {
        $this->container['instance_status'] = $instance_status;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Volcengine\Vefaas\Model\LabelsForListFunctionInstancesOutput
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Volcengine\Vefaas\Model\LabelsForListFunctionInstancesOutput $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets revision_number
     *
     * @return int
     */
    public function getRevisionNumber()
    {
        return $this->container['revision_number'];
    }

    /**
     * Sets revision_number
     *
     * @param int $revision_number revision_number
     *
     * @return $this
     */
    public function setRevisionNumber($revision_number)
    {
        $this->container['revision_number'] = $revision_number;

        return $this;
    }

    /**
     * Gets user_vpc_ip
     *
     * @return string
     */
    public function getUserVpcIp()
    {
        return $this->container['user_vpc_ip'];
    }

    /**
     * Sets user_vpc_ip
     *
     * @param string $user_vpc_ip user_vpc_ip
     *
     * @return $this
     */
    public function setUserVpcIp($user_vpc_ip)
    {
        $this->container['user_vpc_ip'] = $user_vpc_ip;

        return $this;
    }

    /**
     * Gets user_vpc_ipv6
     *
     * @return string
     */
    public function getUserVpcIpv6()
    {
        return $this->container['user_vpc_ipv6'];
    }

    /**
     * Sets user_vpc_ipv6
     *
     * @param string $user_vpc_ipv6 user_vpc_ipv6
     *
     * @return $this
     */
    public function setUserVpcIpv6($user_vpc_ipv6)
    {
        $this->container['user_vpc_ipv6'] = $user_vpc_ipv6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

