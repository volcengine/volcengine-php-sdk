<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SandboxForListSandboxesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SandboxForListSandboxesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'availability_zone' => 'string',
        'cpu_milli' => 'int',
        'created_at' => 'string',
        'error_code' => 'string',
        'error_message' => 'string',
        'expire_at' => 'string',
        'function_id' => 'string',
        'id' => 'string',
        'image' => 'string',
        'instance_type' => 'string',
        'memory_mb' => 'int',
        'metadata' => 'map[string,string]',
        'pending' => 'bool',
        'revision_number' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'availability_zone' => null,
        'cpu_milli' => 'int32',
        'created_at' => null,
        'error_code' => null,
        'error_message' => null,
        'expire_at' => null,
        'function_id' => null,
        'id' => null,
        'image' => null,
        'instance_type' => null,
        'memory_mb' => 'int32',
        'metadata' => null,
        'pending' => null,
        'revision_number' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability_zone' => 'AvailabilityZone',
        'cpu_milli' => 'CpuMilli',
        'created_at' => 'CreatedAt',
        'error_code' => 'ErrorCode',
        'error_message' => 'ErrorMessage',
        'expire_at' => 'ExpireAt',
        'function_id' => 'FunctionId',
        'id' => 'Id',
        'image' => 'Image',
        'instance_type' => 'InstanceType',
        'memory_mb' => 'MemoryMB',
        'metadata' => 'Metadata',
        'pending' => 'Pending',
        'revision_number' => 'RevisionNumber',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availability_zone' => 'setAvailabilityZone',
        'cpu_milli' => 'setCpuMilli',
        'created_at' => 'setCreatedAt',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'expire_at' => 'setExpireAt',
        'function_id' => 'setFunctionId',
        'id' => 'setId',
        'image' => 'setImage',
        'instance_type' => 'setInstanceType',
        'memory_mb' => 'setMemoryMb',
        'metadata' => 'setMetadata',
        'pending' => 'setPending',
        'revision_number' => 'setRevisionNumber',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability_zone' => 'getAvailabilityZone',
        'cpu_milli' => 'getCpuMilli',
        'created_at' => 'getCreatedAt',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'expire_at' => 'getExpireAt',
        'function_id' => 'getFunctionId',
        'id' => 'getId',
        'image' => 'getImage',
        'instance_type' => 'getInstanceType',
        'memory_mb' => 'getMemoryMb',
        'metadata' => 'getMetadata',
        'pending' => 'getPending',
        'revision_number' => 'getRevisionNumber',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availability_zone'] = isset($data['availability_zone']) ? $data['availability_zone'] : null;
        $this->container['cpu_milli'] = isset($data['cpu_milli']) ? $data['cpu_milli'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['function_id'] = isset($data['function_id']) ? $data['function_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['memory_mb'] = isset($data['memory_mb']) ? $data['memory_mb'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['revision_number'] = isset($data['revision_number']) ? $data['revision_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availability_zone
     *
     * @return string
     */
    public function getAvailabilityZone()
    {
        return $this->container['availability_zone'];
    }

    /**
     * Sets availability_zone
     *
     * @param string $availability_zone availability_zone
     *
     * @return $this
     */
    public function setAvailabilityZone($availability_zone)
    {
        $this->container['availability_zone'] = $availability_zone;

        return $this;
    }

    /**
     * Gets cpu_milli
     *
     * @return int
     */
    public function getCpuMilli()
    {
        return $this->container['cpu_milli'];
    }

    /**
     * Sets cpu_milli
     *
     * @param int $cpu_milli cpu_milli
     *
     * @return $this
     */
    public function setCpuMilli($cpu_milli)
    {
        $this->container['cpu_milli'] = $cpu_milli;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return string
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param string $expire_at expire_at
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets function_id
     *
     * @return string
     */
    public function getFunctionId()
    {
        return $this->container['function_id'];
    }

    /**
     * Sets function_id
     *
     * @param string $function_id function_id
     *
     * @return $this
     */
    public function setFunctionId($function_id)
    {
        $this->container['function_id'] = $function_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets memory_mb
     *
     * @return int
     */
    public function getMemoryMb()
    {
        return $this->container['memory_mb'];
    }

    /**
     * Sets memory_mb
     *
     * @param int $memory_mb memory_mb
     *
     * @return $this
     */
    public function setMemoryMb($memory_mb)
    {
        $this->container['memory_mb'] = $memory_mb;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending pending
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets revision_number
     *
     * @return int
     */
    public function getRevisionNumber()
    {
        return $this->container['revision_number'];
    }

    /**
     * Sets revision_number
     *
     * @param int $revision_number revision_number
     *
     * @return $this
     */
    public function setRevisionNumber($revision_number)
    {
        $this->container['revision_number'] = $revision_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

