<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceSpecForDescribeEnterpriseDBInstanceSpecsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceSpecForDescribeEnterpriseDBInstanceSpecsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_layout' => 'string',
        'flash_capacity_max' => 'int',
        'flash_capacity_min' => 'int',
        'flash_capacity_step' => 'int',
        'ram_capacity' => 'int',
        'shard_number_specs' => '\Volcengine\Redis\Model\ShardNumberSpecForDescribeEnterpriseDBInstanceSpecsOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'data_layout' => null,
        'flash_capacity_max' => 'int32',
        'flash_capacity_min' => 'int32',
        'flash_capacity_step' => 'int32',
        'ram_capacity' => 'int32',
        'shard_number_specs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_layout' => 'DataLayout',
        'flash_capacity_max' => 'FlashCapacityMax',
        'flash_capacity_min' => 'FlashCapacityMin',
        'flash_capacity_step' => 'FlashCapacityStep',
        'ram_capacity' => 'RamCapacity',
        'shard_number_specs' => 'ShardNumberSpecs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_layout' => 'setDataLayout',
        'flash_capacity_max' => 'setFlashCapacityMax',
        'flash_capacity_min' => 'setFlashCapacityMin',
        'flash_capacity_step' => 'setFlashCapacityStep',
        'ram_capacity' => 'setRamCapacity',
        'shard_number_specs' => 'setShardNumberSpecs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_layout' => 'getDataLayout',
        'flash_capacity_max' => 'getFlashCapacityMax',
        'flash_capacity_min' => 'getFlashCapacityMin',
        'flash_capacity_step' => 'getFlashCapacityStep',
        'ram_capacity' => 'getRamCapacity',
        'shard_number_specs' => 'getShardNumberSpecs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_layout'] = isset($data['data_layout']) ? $data['data_layout'] : null;
        $this->container['flash_capacity_max'] = isset($data['flash_capacity_max']) ? $data['flash_capacity_max'] : null;
        $this->container['flash_capacity_min'] = isset($data['flash_capacity_min']) ? $data['flash_capacity_min'] : null;
        $this->container['flash_capacity_step'] = isset($data['flash_capacity_step']) ? $data['flash_capacity_step'] : null;
        $this->container['ram_capacity'] = isset($data['ram_capacity']) ? $data['ram_capacity'] : null;
        $this->container['shard_number_specs'] = isset($data['shard_number_specs']) ? $data['shard_number_specs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_layout
     *
     * @return string
     */
    public function getDataLayout()
    {
        return $this->container['data_layout'];
    }

    /**
     * Sets data_layout
     *
     * @param string $data_layout data_layout
     *
     * @return $this
     */
    public function setDataLayout($data_layout)
    {
        $this->container['data_layout'] = $data_layout;

        return $this;
    }

    /**
     * Gets flash_capacity_max
     *
     * @return int
     */
    public function getFlashCapacityMax()
    {
        return $this->container['flash_capacity_max'];
    }

    /**
     * Sets flash_capacity_max
     *
     * @param int $flash_capacity_max flash_capacity_max
     *
     * @return $this
     */
    public function setFlashCapacityMax($flash_capacity_max)
    {
        $this->container['flash_capacity_max'] = $flash_capacity_max;

        return $this;
    }

    /**
     * Gets flash_capacity_min
     *
     * @return int
     */
    public function getFlashCapacityMin()
    {
        return $this->container['flash_capacity_min'];
    }

    /**
     * Sets flash_capacity_min
     *
     * @param int $flash_capacity_min flash_capacity_min
     *
     * @return $this
     */
    public function setFlashCapacityMin($flash_capacity_min)
    {
        $this->container['flash_capacity_min'] = $flash_capacity_min;

        return $this;
    }

    /**
     * Gets flash_capacity_step
     *
     * @return int
     */
    public function getFlashCapacityStep()
    {
        return $this->container['flash_capacity_step'];
    }

    /**
     * Sets flash_capacity_step
     *
     * @param int $flash_capacity_step flash_capacity_step
     *
     * @return $this
     */
    public function setFlashCapacityStep($flash_capacity_step)
    {
        $this->container['flash_capacity_step'] = $flash_capacity_step;

        return $this;
    }

    /**
     * Gets ram_capacity
     *
     * @return int
     */
    public function getRamCapacity()
    {
        return $this->container['ram_capacity'];
    }

    /**
     * Sets ram_capacity
     *
     * @param int $ram_capacity ram_capacity
     *
     * @return $this
     */
    public function setRamCapacity($ram_capacity)
    {
        $this->container['ram_capacity'] = $ram_capacity;

        return $this;
    }

    /**
     * Gets shard_number_specs
     *
     * @return \Volcengine\Redis\Model\ShardNumberSpecForDescribeEnterpriseDBInstanceSpecsOutput[]
     */
    public function getShardNumberSpecs()
    {
        return $this->container['shard_number_specs'];
    }

    /**
     * Sets shard_number_specs
     *
     * @param \Volcengine\Redis\Model\ShardNumberSpecForDescribeEnterpriseDBInstanceSpecsOutput[] $shard_number_specs shard_number_specs
     *
     * @return $this
     */
    public function setShardNumberSpecs($shard_number_specs)
    {
        $this->container['shard_number_specs'] = $shard_number_specs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

