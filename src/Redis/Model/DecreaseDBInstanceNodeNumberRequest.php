<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DecreaseDBInstanceNodeNumberRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DecreaseDBInstanceNodeNumberRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apply_immediately' => 'bool',
        'backup_point_name' => 'string',
        'client_token' => 'string',
        'create_backup' => 'bool',
        'instance_id' => 'string',
        'nodes_number_to_decrease' => 'int',
        'nodes_to_remove' => '\Volcengine\Redis\Model\NodesToRemoveForDecreaseDBInstanceNodeNumberInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apply_immediately' => null,
        'backup_point_name' => null,
        'client_token' => null,
        'create_backup' => null,
        'instance_id' => null,
        'nodes_number_to_decrease' => 'int32',
        'nodes_to_remove' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apply_immediately' => 'ApplyImmediately',
        'backup_point_name' => 'BackupPointName',
        'client_token' => 'ClientToken',
        'create_backup' => 'CreateBackup',
        'instance_id' => 'InstanceId',
        'nodes_number_to_decrease' => 'NodesNumberToDecrease',
        'nodes_to_remove' => 'NodesToRemove'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apply_immediately' => 'setApplyImmediately',
        'backup_point_name' => 'setBackupPointName',
        'client_token' => 'setClientToken',
        'create_backup' => 'setCreateBackup',
        'instance_id' => 'setInstanceId',
        'nodes_number_to_decrease' => 'setNodesNumberToDecrease',
        'nodes_to_remove' => 'setNodesToRemove'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apply_immediately' => 'getApplyImmediately',
        'backup_point_name' => 'getBackupPointName',
        'client_token' => 'getClientToken',
        'create_backup' => 'getCreateBackup',
        'instance_id' => 'getInstanceId',
        'nodes_number_to_decrease' => 'getNodesNumberToDecrease',
        'nodes_to_remove' => 'getNodesToRemove'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apply_immediately'] = isset($data['apply_immediately']) ? $data['apply_immediately'] : null;
        $this->container['backup_point_name'] = isset($data['backup_point_name']) ? $data['backup_point_name'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['create_backup'] = isset($data['create_backup']) ? $data['create_backup'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['nodes_number_to_decrease'] = isset($data['nodes_number_to_decrease']) ? $data['nodes_number_to_decrease'] : null;
        $this->container['nodes_to_remove'] = isset($data['nodes_to_remove']) ? $data['nodes_to_remove'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['apply_immediately'] === null) {
            $invalidProperties[] = "'apply_immediately' can't be null";
        }
        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        if ($this->container['nodes_number_to_decrease'] === null) {
            $invalidProperties[] = "'nodes_number_to_decrease' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apply_immediately
     *
     * @return bool
     */
    public function getApplyImmediately()
    {
        return $this->container['apply_immediately'];
    }

    /**
     * Sets apply_immediately
     *
     * @param bool $apply_immediately apply_immediately
     *
     * @return $this
     */
    public function setApplyImmediately($apply_immediately)
    {
        $this->container['apply_immediately'] = $apply_immediately;

        return $this;
    }

    /**
     * Gets backup_point_name
     *
     * @return string
     */
    public function getBackupPointName()
    {
        return $this->container['backup_point_name'];
    }

    /**
     * Sets backup_point_name
     *
     * @param string $backup_point_name backup_point_name
     *
     * @return $this
     */
    public function setBackupPointName($backup_point_name)
    {
        $this->container['backup_point_name'] = $backup_point_name;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets create_backup
     *
     * @return bool
     */
    public function getCreateBackup()
    {
        return $this->container['create_backup'];
    }

    /**
     * Sets create_backup
     *
     * @param bool $create_backup create_backup
     *
     * @return $this
     */
    public function setCreateBackup($create_backup)
    {
        $this->container['create_backup'] = $create_backup;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets nodes_number_to_decrease
     *
     * @return int
     */
    public function getNodesNumberToDecrease()
    {
        return $this->container['nodes_number_to_decrease'];
    }

    /**
     * Sets nodes_number_to_decrease
     *
     * @param int $nodes_number_to_decrease nodes_number_to_decrease
     *
     * @return $this
     */
    public function setNodesNumberToDecrease($nodes_number_to_decrease)
    {
        $this->container['nodes_number_to_decrease'] = $nodes_number_to_decrease;

        return $this;
    }

    /**
     * Gets nodes_to_remove
     *
     * @return \Volcengine\Redis\Model\NodesToRemoveForDecreaseDBInstanceNodeNumberInput[]
     */
    public function getNodesToRemove()
    {
        return $this->container['nodes_to_remove'];
    }

    /**
     * Sets nodes_to_remove
     *
     * @param \Volcengine\Redis\Model\NodesToRemoveForDecreaseDBInstanceNodeNumberInput[] $nodes_to_remove nodes_to_remove
     *
     * @return $this
     */
    public function setNodesToRemove($nodes_to_remove)
    {
        $this->container['nodes_to_remove'] = $nodes_to_remove;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

