<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PlannedEventForDescribePlannedEventsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlannedEventForDescribePlannedEventsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action_name' => 'string',
        'can_cancel' => 'bool',
        'can_modify_time' => 'bool',
        'event_id' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'max_end_time' => 'string',
        'plan_end_time' => 'string',
        'plan_start_time' => 'string',
        'status' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action_name' => null,
        'can_cancel' => null,
        'can_modify_time' => null,
        'event_id' => null,
        'instance_id' => null,
        'instance_name' => null,
        'max_end_time' => null,
        'plan_end_time' => null,
        'plan_start_time' => null,
        'status' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_name' => 'ActionName',
        'can_cancel' => 'CanCancel',
        'can_modify_time' => 'CanModifyTime',
        'event_id' => 'EventId',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'max_end_time' => 'MaxEndTime',
        'plan_end_time' => 'PlanEndTime',
        'plan_start_time' => 'PlanStartTime',
        'status' => 'Status',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_name' => 'setActionName',
        'can_cancel' => 'setCanCancel',
        'can_modify_time' => 'setCanModifyTime',
        'event_id' => 'setEventId',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'max_end_time' => 'setMaxEndTime',
        'plan_end_time' => 'setPlanEndTime',
        'plan_start_time' => 'setPlanStartTime',
        'status' => 'setStatus',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_name' => 'getActionName',
        'can_cancel' => 'getCanCancel',
        'can_modify_time' => 'getCanModifyTime',
        'event_id' => 'getEventId',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'max_end_time' => 'getMaxEndTime',
        'plan_end_time' => 'getPlanEndTime',
        'plan_start_time' => 'getPlanStartTime',
        'status' => 'getStatus',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_INITIATED = 'Initiated';
    const STATUS_WAITING = 'Waiting';
    const STATUS_RUNNING = 'Running';
    const STATUS_SUCCESS = 'Success';
    const STATUS_FAILED = 'Failed';
    const STATUS_CANCELED = 'Canceled';
    const STATUS_ABANDONED = 'Abandoned';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INITIATED,
            self::STATUS_WAITING,
            self::STATUS_RUNNING,
            self::STATUS_SUCCESS,
            self::STATUS_FAILED,
            self::STATUS_CANCELED,
            self::STATUS_ABANDONED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_name'] = isset($data['action_name']) ? $data['action_name'] : null;
        $this->container['can_cancel'] = isset($data['can_cancel']) ? $data['can_cancel'] : null;
        $this->container['can_modify_time'] = isset($data['can_modify_time']) ? $data['can_modify_time'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['max_end_time'] = isset($data['max_end_time']) ? $data['max_end_time'] : null;
        $this->container['plan_end_time'] = isset($data['plan_end_time']) ? $data['plan_end_time'] : null;
        $this->container['plan_start_time'] = isset($data['plan_start_time']) ? $data['plan_start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_name
     *
     * @return string
     */
    public function getActionName()
    {
        return $this->container['action_name'];
    }

    /**
     * Sets action_name
     *
     * @param string $action_name action_name
     *
     * @return $this
     */
    public function setActionName($action_name)
    {
        $this->container['action_name'] = $action_name;

        return $this;
    }

    /**
     * Gets can_cancel
     *
     * @return bool
     */
    public function getCanCancel()
    {
        return $this->container['can_cancel'];
    }

    /**
     * Sets can_cancel
     *
     * @param bool $can_cancel can_cancel
     *
     * @return $this
     */
    public function setCanCancel($can_cancel)
    {
        $this->container['can_cancel'] = $can_cancel;

        return $this;
    }

    /**
     * Gets can_modify_time
     *
     * @return bool
     */
    public function getCanModifyTime()
    {
        return $this->container['can_modify_time'];
    }

    /**
     * Sets can_modify_time
     *
     * @param bool $can_modify_time can_modify_time
     *
     * @return $this
     */
    public function setCanModifyTime($can_modify_time)
    {
        $this->container['can_modify_time'] = $can_modify_time;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets max_end_time
     *
     * @return string
     */
    public function getMaxEndTime()
    {
        return $this->container['max_end_time'];
    }

    /**
     * Sets max_end_time
     *
     * @param string $max_end_time max_end_time
     *
     * @return $this
     */
    public function setMaxEndTime($max_end_time)
    {
        $this->container['max_end_time'] = $max_end_time;

        return $this;
    }

    /**
     * Gets plan_end_time
     *
     * @return string
     */
    public function getPlanEndTime()
    {
        return $this->container['plan_end_time'];
    }

    /**
     * Sets plan_end_time
     *
     * @param string $plan_end_time plan_end_time
     *
     * @return $this
     */
    public function setPlanEndTime($plan_end_time)
    {
        $this->container['plan_end_time'] = $plan_end_time;

        return $this;
    }

    /**
     * Gets plan_start_time
     *
     * @return string
     */
    public function getPlanStartTime()
    {
        return $this->container['plan_start_time'];
    }

    /**
     * Sets plan_start_time
     *
     * @param string $plan_start_time plan_start_time
     *
     * @return $this
     */
    public function setPlanStartTime($plan_start_time)
    {
        $this->container['plan_start_time'] = $plan_start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

