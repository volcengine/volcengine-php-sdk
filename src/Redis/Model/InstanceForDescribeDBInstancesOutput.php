<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceForDescribeDBInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceForDescribeDBInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capacity' => '\Volcengine\Redis\Model\CapacityForDescribeDBInstancesOutput',
        'charge_type' => 'string',
        'create_time' => 'string',
        'data_layout' => 'string',
        'deletion_protection' => 'string',
        'engine_version' => 'string',
        'expired_time' => 'string',
        'instance_class' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'multi_az' => 'string',
        'node_number' => 'int',
        'private_address' => 'string',
        'private_port' => 'string',
        'project_name' => 'string',
        'region_id' => 'string',
        'service_type' => 'string',
        'shard_capacity' => 'double',
        'shard_number' => 'int',
        'sharded_cluster' => 'int',
        'status' => 'string',
        'tags' => '\Volcengine\Redis\Model\TagForDescribeDBInstancesOutput[]',
        'vip' => 'string',
        'vipv6' => 'string',
        'vpc_id' => 'string',
        'zone_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capacity' => null,
        'charge_type' => null,
        'create_time' => null,
        'data_layout' => null,
        'deletion_protection' => null,
        'engine_version' => null,
        'expired_time' => null,
        'instance_class' => null,
        'instance_id' => null,
        'instance_name' => null,
        'multi_az' => null,
        'node_number' => 'int32',
        'private_address' => null,
        'private_port' => null,
        'project_name' => null,
        'region_id' => null,
        'service_type' => null,
        'shard_capacity' => 'double',
        'shard_number' => 'int32',
        'sharded_cluster' => 'int32',
        'status' => null,
        'tags' => null,
        'vip' => null,
        'vipv6' => null,
        'vpc_id' => null,
        'zone_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capacity' => 'Capacity',
        'charge_type' => 'ChargeType',
        'create_time' => 'CreateTime',
        'data_layout' => 'DataLayout',
        'deletion_protection' => 'DeletionProtection',
        'engine_version' => 'EngineVersion',
        'expired_time' => 'ExpiredTime',
        'instance_class' => 'InstanceClass',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'multi_az' => 'MultiAZ',
        'node_number' => 'NodeNumber',
        'private_address' => 'PrivateAddress',
        'private_port' => 'PrivatePort',
        'project_name' => 'ProjectName',
        'region_id' => 'RegionId',
        'service_type' => 'ServiceType',
        'shard_capacity' => 'ShardCapacity',
        'shard_number' => 'ShardNumber',
        'sharded_cluster' => 'ShardedCluster',
        'status' => 'Status',
        'tags' => 'Tags',
        'vip' => 'VIP',
        'vipv6' => 'VIPv6',
        'vpc_id' => 'VpcId',
        'zone_ids' => 'ZoneIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capacity' => 'setCapacity',
        'charge_type' => 'setChargeType',
        'create_time' => 'setCreateTime',
        'data_layout' => 'setDataLayout',
        'deletion_protection' => 'setDeletionProtection',
        'engine_version' => 'setEngineVersion',
        'expired_time' => 'setExpiredTime',
        'instance_class' => 'setInstanceClass',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'multi_az' => 'setMultiAz',
        'node_number' => 'setNodeNumber',
        'private_address' => 'setPrivateAddress',
        'private_port' => 'setPrivatePort',
        'project_name' => 'setProjectName',
        'region_id' => 'setRegionId',
        'service_type' => 'setServiceType',
        'shard_capacity' => 'setShardCapacity',
        'shard_number' => 'setShardNumber',
        'sharded_cluster' => 'setShardedCluster',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'vip' => 'setVip',
        'vipv6' => 'setVipv6',
        'vpc_id' => 'setVpcId',
        'zone_ids' => 'setZoneIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capacity' => 'getCapacity',
        'charge_type' => 'getChargeType',
        'create_time' => 'getCreateTime',
        'data_layout' => 'getDataLayout',
        'deletion_protection' => 'getDeletionProtection',
        'engine_version' => 'getEngineVersion',
        'expired_time' => 'getExpiredTime',
        'instance_class' => 'getInstanceClass',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'multi_az' => 'getMultiAz',
        'node_number' => 'getNodeNumber',
        'private_address' => 'getPrivateAddress',
        'private_port' => 'getPrivatePort',
        'project_name' => 'getProjectName',
        'region_id' => 'getRegionId',
        'service_type' => 'getServiceType',
        'shard_capacity' => 'getShardCapacity',
        'shard_number' => 'getShardNumber',
        'sharded_cluster' => 'getShardedCluster',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'vip' => 'getVip',
        'vipv6' => 'getVipv6',
        'vpc_id' => 'getVpcId',
        'zone_ids' => 'getZoneIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['data_layout'] = isset($data['data_layout']) ? $data['data_layout'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['engine_version'] = isset($data['engine_version']) ? $data['engine_version'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['instance_class'] = isset($data['instance_class']) ? $data['instance_class'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['multi_az'] = isset($data['multi_az']) ? $data['multi_az'] : null;
        $this->container['node_number'] = isset($data['node_number']) ? $data['node_number'] : null;
        $this->container['private_address'] = isset($data['private_address']) ? $data['private_address'] : null;
        $this->container['private_port'] = isset($data['private_port']) ? $data['private_port'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['shard_capacity'] = isset($data['shard_capacity']) ? $data['shard_capacity'] : null;
        $this->container['shard_number'] = isset($data['shard_number']) ? $data['shard_number'] : null;
        $this->container['sharded_cluster'] = isset($data['sharded_cluster']) ? $data['sharded_cluster'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['vip'] = isset($data['vip']) ? $data['vip'] : null;
        $this->container['vipv6'] = isset($data['vipv6']) ? $data['vipv6'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_ids'] = isset($data['zone_ids']) ? $data['zone_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capacity
     *
     * @return \Volcengine\Redis\Model\CapacityForDescribeDBInstancesOutput
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param \Volcengine\Redis\Model\CapacityForDescribeDBInstancesOutput $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets data_layout
     *
     * @return string
     */
    public function getDataLayout()
    {
        return $this->container['data_layout'];
    }

    /**
     * Sets data_layout
     *
     * @param string $data_layout data_layout
     *
     * @return $this
     */
    public function setDataLayout($data_layout)
    {
        $this->container['data_layout'] = $data_layout;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets engine_version
     *
     * @return string
     */
    public function getEngineVersion()
    {
        return $this->container['engine_version'];
    }

    /**
     * Sets engine_version
     *
     * @param string $engine_version engine_version
     *
     * @return $this
     */
    public function setEngineVersion($engine_version)
    {
        $this->container['engine_version'] = $engine_version;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets instance_class
     *
     * @return string
     */
    public function getInstanceClass()
    {
        return $this->container['instance_class'];
    }

    /**
     * Sets instance_class
     *
     * @param string $instance_class instance_class
     *
     * @return $this
     */
    public function setInstanceClass($instance_class)
    {
        $this->container['instance_class'] = $instance_class;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets multi_az
     *
     * @return string
     */
    public function getMultiAz()
    {
        return $this->container['multi_az'];
    }

    /**
     * Sets multi_az
     *
     * @param string $multi_az multi_az
     *
     * @return $this
     */
    public function setMultiAz($multi_az)
    {
        $this->container['multi_az'] = $multi_az;

        return $this;
    }

    /**
     * Gets node_number
     *
     * @return int
     */
    public function getNodeNumber()
    {
        return $this->container['node_number'];
    }

    /**
     * Sets node_number
     *
     * @param int $node_number node_number
     *
     * @return $this
     */
    public function setNodeNumber($node_number)
    {
        $this->container['node_number'] = $node_number;

        return $this;
    }

    /**
     * Gets private_address
     *
     * @return string
     */
    public function getPrivateAddress()
    {
        return $this->container['private_address'];
    }

    /**
     * Sets private_address
     *
     * @param string $private_address private_address
     *
     * @return $this
     */
    public function setPrivateAddress($private_address)
    {
        $this->container['private_address'] = $private_address;

        return $this;
    }

    /**
     * Gets private_port
     *
     * @return string
     */
    public function getPrivatePort()
    {
        return $this->container['private_port'];
    }

    /**
     * Sets private_port
     *
     * @param string $private_port private_port
     *
     * @return $this
     */
    public function setPrivatePort($private_port)
    {
        $this->container['private_port'] = $private_port;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string $service_type service_type
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets shard_capacity
     *
     * @return double
     */
    public function getShardCapacity()
    {
        return $this->container['shard_capacity'];
    }

    /**
     * Sets shard_capacity
     *
     * @param double $shard_capacity shard_capacity
     *
     * @return $this
     */
    public function setShardCapacity($shard_capacity)
    {
        $this->container['shard_capacity'] = $shard_capacity;

        return $this;
    }

    /**
     * Gets shard_number
     *
     * @return int
     */
    public function getShardNumber()
    {
        return $this->container['shard_number'];
    }

    /**
     * Sets shard_number
     *
     * @param int $shard_number shard_number
     *
     * @return $this
     */
    public function setShardNumber($shard_number)
    {
        $this->container['shard_number'] = $shard_number;

        return $this;
    }

    /**
     * Gets sharded_cluster
     *
     * @return int
     */
    public function getShardedCluster()
    {
        return $this->container['sharded_cluster'];
    }

    /**
     * Sets sharded_cluster
     *
     * @param int $sharded_cluster sharded_cluster
     *
     * @return $this
     */
    public function setShardedCluster($sharded_cluster)
    {
        $this->container['sharded_cluster'] = $sharded_cluster;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Redis\Model\TagForDescribeDBInstancesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Redis\Model\TagForDescribeDBInstancesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vip
     *
     * @return string
     */
    public function getVip()
    {
        return $this->container['vip'];
    }

    /**
     * Sets vip
     *
     * @param string $vip vip
     *
     * @return $this
     */
    public function setVip($vip)
    {
        $this->container['vip'] = $vip;

        return $this;
    }

    /**
     * Gets vipv6
     *
     * @return string
     */
    public function getVipv6()
    {
        return $this->container['vipv6'];
    }

    /**
     * Sets vipv6
     *
     * @param string $vipv6 vipv6
     *
     * @return $this
     */
    public function setVipv6($vipv6)
    {
        $this->container['vipv6'] = $vipv6;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_ids
     *
     * @return string[]
     */
    public function getZoneIds()
    {
        return $this->container['zone_ids'];
    }

    /**
     * Sets zone_ids
     *
     * @param string[] $zone_ids zone_ids
     *
     * @return $this
     */
    public function setZoneIds($zone_ids)
    {
        $this->container['zone_ids'] = $zone_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

