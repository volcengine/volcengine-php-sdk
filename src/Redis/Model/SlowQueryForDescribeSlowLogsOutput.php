<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SlowQueryForDescribeSlowLogsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SlowQueryForDescribeSlowLogsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'db_name' => 'string',
        'execution_start_time' => 'string',
        'host_address' => 'string',
        'instance_id' => 'string',
        'node_id' => 'string',
        'query_text' => 'string',
        'query_times' => 'int',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'db_name' => null,
        'execution_start_time' => null,
        'host_address' => null,
        'instance_id' => null,
        'node_id' => null,
        'query_text' => null,
        'query_times' => 'int64',
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'db_name' => 'DBName',
        'execution_start_time' => 'ExecutionStartTime',
        'host_address' => 'HostAddress',
        'instance_id' => 'InstanceId',
        'node_id' => 'NodeId',
        'query_text' => 'QueryText',
        'query_times' => 'QueryTimes',
        'user_name' => 'UserName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'db_name' => 'setDbName',
        'execution_start_time' => 'setExecutionStartTime',
        'host_address' => 'setHostAddress',
        'instance_id' => 'setInstanceId',
        'node_id' => 'setNodeId',
        'query_text' => 'setQueryText',
        'query_times' => 'setQueryTimes',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'db_name' => 'getDbName',
        'execution_start_time' => 'getExecutionStartTime',
        'host_address' => 'getHostAddress',
        'instance_id' => 'getInstanceId',
        'node_id' => 'getNodeId',
        'query_text' => 'getQueryText',
        'query_times' => 'getQueryTimes',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['db_name'] = isset($data['db_name']) ? $data['db_name'] : null;
        $this->container['execution_start_time'] = isset($data['execution_start_time']) ? $data['execution_start_time'] : null;
        $this->container['host_address'] = isset($data['host_address']) ? $data['host_address'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['query_text'] = isset($data['query_text']) ? $data['query_text'] : null;
        $this->container['query_times'] = isset($data['query_times']) ? $data['query_times'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets db_name
     *
     * @return string
     */
    public function getDbName()
    {
        return $this->container['db_name'];
    }

    /**
     * Sets db_name
     *
     * @param string $db_name db_name
     *
     * @return $this
     */
    public function setDbName($db_name)
    {
        $this->container['db_name'] = $db_name;

        return $this;
    }

    /**
     * Gets execution_start_time
     *
     * @return string
     */
    public function getExecutionStartTime()
    {
        return $this->container['execution_start_time'];
    }

    /**
     * Sets execution_start_time
     *
     * @param string $execution_start_time execution_start_time
     *
     * @return $this
     */
    public function setExecutionStartTime($execution_start_time)
    {
        $this->container['execution_start_time'] = $execution_start_time;

        return $this;
    }

    /**
     * Gets host_address
     *
     * @return string
     */
    public function getHostAddress()
    {
        return $this->container['host_address'];
    }

    /**
     * Sets host_address
     *
     * @param string $host_address host_address
     *
     * @return $this
     */
    public function setHostAddress($host_address)
    {
        $this->container['host_address'] = $host_address;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets query_text
     *
     * @return string
     */
    public function getQueryText()
    {
        return $this->container['query_text'];
    }

    /**
     * Sets query_text
     *
     * @param string $query_text query_text
     *
     * @return $this
     */
    public function setQueryText($query_text)
    {
        $this->container['query_text'] = $query_text;

        return $this;
    }

    /**
     * Gets query_times
     *
     * @return int
     */
    public function getQueryTimes()
    {
        return $this->container['query_times'];
    }

    /**
     * Sets query_times
     *
     * @param int $query_times query_times
     *
     * @return $this
     */
    public function setQueryTimes($query_times)
    {
        $this->container['query_times'] = $query_times;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

