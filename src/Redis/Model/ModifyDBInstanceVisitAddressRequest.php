<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyDBInstanceVisitAddressRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyDBInstanceVisitAddressRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'addr_type' => 'string',
        'client_token' => 'string',
        'instance_id' => 'string',
        'new_address_prefix' => 'string',
        'new_port' => 'int',
        'upgrade_region_domain' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'addr_type' => null,
        'client_token' => null,
        'instance_id' => null,
        'new_address_prefix' => null,
        'new_port' => 'int32',
        'upgrade_region_domain' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addr_type' => 'AddrType',
        'client_token' => 'ClientToken',
        'instance_id' => 'InstanceId',
        'new_address_prefix' => 'NewAddressPrefix',
        'new_port' => 'NewPort',
        'upgrade_region_domain' => 'UpgradeRegionDomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addr_type' => 'setAddrType',
        'client_token' => 'setClientToken',
        'instance_id' => 'setInstanceId',
        'new_address_prefix' => 'setNewAddressPrefix',
        'new_port' => 'setNewPort',
        'upgrade_region_domain' => 'setUpgradeRegionDomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addr_type' => 'getAddrType',
        'client_token' => 'getClientToken',
        'instance_id' => 'getInstanceId',
        'new_address_prefix' => 'getNewAddressPrefix',
        'new_port' => 'getNewPort',
        'upgrade_region_domain' => 'getUpgradeRegionDomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDR_TYPE__PRIVATE = 'Private';
    const ADDR_TYPE__PUBLIC = 'Public';
    const ADDR_TYPE_PUBLIC_ZONE = 'PublicZone';
    const ADDR_TYPE_STORAGE_INNER = 'StorageInner';
    const ADDR_TYPE_DIRECT_LINK = 'DirectLink';
    const ADDR_TYPE_PUBLIC_ZONE_AFFINITY = 'PublicZoneAffinity';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrTypeAllowableValues()
    {
        return [
            self::ADDR_TYPE__PRIVATE,
            self::ADDR_TYPE__PUBLIC,
            self::ADDR_TYPE_PUBLIC_ZONE,
            self::ADDR_TYPE_STORAGE_INNER,
            self::ADDR_TYPE_DIRECT_LINK,
            self::ADDR_TYPE_PUBLIC_ZONE_AFFINITY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addr_type'] = isset($data['addr_type']) ? $data['addr_type'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['new_address_prefix'] = isset($data['new_address_prefix']) ? $data['new_address_prefix'] : null;
        $this->container['new_port'] = isset($data['new_port']) ? $data['new_port'] : null;
        $this->container['upgrade_region_domain'] = isset($data['upgrade_region_domain']) ? $data['upgrade_region_domain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addr_type'] === null) {
            $invalidProperties[] = "'addr_type' can't be null";
        }
        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($this->container['addr_type']) && !in_array($this->container['addr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'addr_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addr_type
     *
     * @return string
     */
    public function getAddrType()
    {
        return $this->container['addr_type'];
    }

    /**
     * Sets addr_type
     *
     * @param string $addr_type addr_type
     *
     * @return $this
     */
    public function setAddrType($addr_type)
    {
        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!in_array($addr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'addr_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_type'] = $addr_type;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets new_address_prefix
     *
     * @return string
     */
    public function getNewAddressPrefix()
    {
        return $this->container['new_address_prefix'];
    }

    /**
     * Sets new_address_prefix
     *
     * @param string $new_address_prefix new_address_prefix
     *
     * @return $this
     */
    public function setNewAddressPrefix($new_address_prefix)
    {
        $this->container['new_address_prefix'] = $new_address_prefix;

        return $this;
    }

    /**
     * Gets new_port
     *
     * @return int
     */
    public function getNewPort()
    {
        return $this->container['new_port'];
    }

    /**
     * Sets new_port
     *
     * @param int $new_port new_port
     *
     * @return $this
     */
    public function setNewPort($new_port)
    {
        $this->container['new_port'] = $new_port;

        return $this;
    }

    /**
     * Gets upgrade_region_domain
     *
     * @return bool
     */
    public function getUpgradeRegionDomain()
    {
        return $this->container['upgrade_region_domain'];
    }

    /**
     * Sets upgrade_region_domain
     *
     * @param bool $upgrade_region_domain upgrade_region_domain
     *
     * @return $this
     */
    public function setUpgradeRegionDomain($upgrade_region_domain)
    {
        $this->container['upgrade_region_domain'] = $upgrade_region_domain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

