<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateEnterpriseDBInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateEnterpriseDBInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_list_ids' => 'string[]',
        'auto_renew' => 'bool',
        'charge_type' => 'string',
        'client_token' => 'string',
        'configure_nodes' => '\Volcengine\Redis\Model\ConfigureNodeForCreateEnterpriseDBInstanceInput[]',
        'data_layout' => 'string',
        'deletion_protection' => 'string',
        'flash_per_shard' => 'int',
        'instance_name' => 'string',
        'modules' => 'string[]',
        'multi_az' => 'string',
        'password' => 'string',
        'project_name' => 'string',
        'purchase_months' => 'int',
        'ram_per_shard' => 'int',
        'region_id' => 'string',
        'shard_number' => 'int',
        'subnet_id' => 'string',
        'tags' => '\Volcengine\Redis\Model\TagForCreateEnterpriseDBInstanceInput[]',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_list_ids' => null,
        'auto_renew' => null,
        'charge_type' => null,
        'client_token' => null,
        'configure_nodes' => null,
        'data_layout' => null,
        'deletion_protection' => null,
        'flash_per_shard' => 'int32',
        'instance_name' => null,
        'modules' => null,
        'multi_az' => null,
        'password' => null,
        'project_name' => null,
        'purchase_months' => 'int32',
        'ram_per_shard' => 'int32',
        'region_id' => null,
        'shard_number' => 'int32',
        'subnet_id' => null,
        'tags' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_list_ids' => 'AllowListIds',
        'auto_renew' => 'AutoRenew',
        'charge_type' => 'ChargeType',
        'client_token' => 'ClientToken',
        'configure_nodes' => 'ConfigureNodes',
        'data_layout' => 'DataLayout',
        'deletion_protection' => 'DeletionProtection',
        'flash_per_shard' => 'FlashPerShard',
        'instance_name' => 'InstanceName',
        'modules' => 'Modules',
        'multi_az' => 'MultiAZ',
        'password' => 'Password',
        'project_name' => 'ProjectName',
        'purchase_months' => 'PurchaseMonths',
        'ram_per_shard' => 'RamPerShard',
        'region_id' => 'RegionId',
        'shard_number' => 'ShardNumber',
        'subnet_id' => 'SubnetId',
        'tags' => 'Tags',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_list_ids' => 'setAllowListIds',
        'auto_renew' => 'setAutoRenew',
        'charge_type' => 'setChargeType',
        'client_token' => 'setClientToken',
        'configure_nodes' => 'setConfigureNodes',
        'data_layout' => 'setDataLayout',
        'deletion_protection' => 'setDeletionProtection',
        'flash_per_shard' => 'setFlashPerShard',
        'instance_name' => 'setInstanceName',
        'modules' => 'setModules',
        'multi_az' => 'setMultiAz',
        'password' => 'setPassword',
        'project_name' => 'setProjectName',
        'purchase_months' => 'setPurchaseMonths',
        'ram_per_shard' => 'setRamPerShard',
        'region_id' => 'setRegionId',
        'shard_number' => 'setShardNumber',
        'subnet_id' => 'setSubnetId',
        'tags' => 'setTags',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_list_ids' => 'getAllowListIds',
        'auto_renew' => 'getAutoRenew',
        'charge_type' => 'getChargeType',
        'client_token' => 'getClientToken',
        'configure_nodes' => 'getConfigureNodes',
        'data_layout' => 'getDataLayout',
        'deletion_protection' => 'getDeletionProtection',
        'flash_per_shard' => 'getFlashPerShard',
        'instance_name' => 'getInstanceName',
        'modules' => 'getModules',
        'multi_az' => 'getMultiAz',
        'password' => 'getPassword',
        'project_name' => 'getProjectName',
        'purchase_months' => 'getPurchaseMonths',
        'ram_per_shard' => 'getRamPerShard',
        'region_id' => 'getRegionId',
        'shard_number' => 'getShardNumber',
        'subnet_id' => 'getSubnetId',
        'tags' => 'getTags',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_list_ids'] = isset($data['allow_list_ids']) ? $data['allow_list_ids'] : null;
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['configure_nodes'] = isset($data['configure_nodes']) ? $data['configure_nodes'] : null;
        $this->container['data_layout'] = isset($data['data_layout']) ? $data['data_layout'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['flash_per_shard'] = isset($data['flash_per_shard']) ? $data['flash_per_shard'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
        $this->container['multi_az'] = isset($data['multi_az']) ? $data['multi_az'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['purchase_months'] = isset($data['purchase_months']) ? $data['purchase_months'] : null;
        $this->container['ram_per_shard'] = isset($data['ram_per_shard']) ? $data['ram_per_shard'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['shard_number'] = isset($data['shard_number']) ? $data['shard_number'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['charge_type'] === null) {
            $invalidProperties[] = "'charge_type' can't be null";
        }
        if ($this->container['data_layout'] === null) {
            $invalidProperties[] = "'data_layout' can't be null";
        }
        if ($this->container['flash_per_shard'] === null) {
            $invalidProperties[] = "'flash_per_shard' can't be null";
        }
        if ($this->container['ram_per_shard'] === null) {
            $invalidProperties[] = "'ram_per_shard' can't be null";
        }
        if ($this->container['region_id'] === null) {
            $invalidProperties[] = "'region_id' can't be null";
        }
        if ($this->container['shard_number'] === null) {
            $invalidProperties[] = "'shard_number' can't be null";
        }
        if ($this->container['subnet_id'] === null) {
            $invalidProperties[] = "'subnet_id' can't be null";
        }
        if ($this->container['vpc_id'] === null) {
            $invalidProperties[] = "'vpc_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_list_ids
     *
     * @return string[]
     */
    public function getAllowListIds()
    {
        return $this->container['allow_list_ids'];
    }

    /**
     * Sets allow_list_ids
     *
     * @param string[] $allow_list_ids allow_list_ids
     *
     * @return $this
     */
    public function setAllowListIds($allow_list_ids)
    {
        $this->container['allow_list_ids'] = $allow_list_ids;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets configure_nodes
     *
     * @return \Volcengine\Redis\Model\ConfigureNodeForCreateEnterpriseDBInstanceInput[]
     */
    public function getConfigureNodes()
    {
        return $this->container['configure_nodes'];
    }

    /**
     * Sets configure_nodes
     *
     * @param \Volcengine\Redis\Model\ConfigureNodeForCreateEnterpriseDBInstanceInput[] $configure_nodes configure_nodes
     *
     * @return $this
     */
    public function setConfigureNodes($configure_nodes)
    {
        $this->container['configure_nodes'] = $configure_nodes;

        return $this;
    }

    /**
     * Gets data_layout
     *
     * @return string
     */
    public function getDataLayout()
    {
        return $this->container['data_layout'];
    }

    /**
     * Sets data_layout
     *
     * @param string $data_layout data_layout
     *
     * @return $this
     */
    public function setDataLayout($data_layout)
    {
        $this->container['data_layout'] = $data_layout;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets flash_per_shard
     *
     * @return int
     */
    public function getFlashPerShard()
    {
        return $this->container['flash_per_shard'];
    }

    /**
     * Sets flash_per_shard
     *
     * @param int $flash_per_shard flash_per_shard
     *
     * @return $this
     */
    public function setFlashPerShard($flash_per_shard)
    {
        $this->container['flash_per_shard'] = $flash_per_shard;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return string[]
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param string[] $modules modules
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets multi_az
     *
     * @return string
     */
    public function getMultiAz()
    {
        return $this->container['multi_az'];
    }

    /**
     * Sets multi_az
     *
     * @param string $multi_az multi_az
     *
     * @return $this
     */
    public function setMultiAz($multi_az)
    {
        $this->container['multi_az'] = $multi_az;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets purchase_months
     *
     * @return int
     */
    public function getPurchaseMonths()
    {
        return $this->container['purchase_months'];
    }

    /**
     * Sets purchase_months
     *
     * @param int $purchase_months purchase_months
     *
     * @return $this
     */
    public function setPurchaseMonths($purchase_months)
    {
        $this->container['purchase_months'] = $purchase_months;

        return $this;
    }

    /**
     * Gets ram_per_shard
     *
     * @return int
     */
    public function getRamPerShard()
    {
        return $this->container['ram_per_shard'];
    }

    /**
     * Sets ram_per_shard
     *
     * @param int $ram_per_shard ram_per_shard
     *
     * @return $this
     */
    public function setRamPerShard($ram_per_shard)
    {
        $this->container['ram_per_shard'] = $ram_per_shard;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets shard_number
     *
     * @return int
     */
    public function getShardNumber()
    {
        return $this->container['shard_number'];
    }

    /**
     * Sets shard_number
     *
     * @param int $shard_number shard_number
     *
     * @return $this
     */
    public function setShardNumber($shard_number)
    {
        $this->container['shard_number'] = $shard_number;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Redis\Model\TagForCreateEnterpriseDBInstanceInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Redis\Model\TagForCreateEnterpriseDBInstanceInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

