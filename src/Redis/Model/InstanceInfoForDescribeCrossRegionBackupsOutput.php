<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceInfoForDescribeCrossRegionBackupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceInfoForDescribeCrossRegionBackupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'arch_type' => 'string',
        'charge_type' => 'string',
        'deletion_protection' => 'string',
        'engine_version' => 'string',
        'expired_time' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'maintenance_time' => 'string',
        'network_type' => 'string',
        'region_id' => 'string',
        'replicas' => 'int',
        'shard_capacity' => 'double',
        'shard_number' => 'int',
        'total_capacity' => 'int',
        'vpc_id' => 'string',
        'zone_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'arch_type' => null,
        'charge_type' => null,
        'deletion_protection' => null,
        'engine_version' => null,
        'expired_time' => null,
        'instance_id' => null,
        'instance_name' => null,
        'maintenance_time' => null,
        'network_type' => null,
        'region_id' => null,
        'replicas' => 'int32',
        'shard_capacity' => 'double',
        'shard_number' => 'int32',
        'total_capacity' => 'int64',
        'vpc_id' => null,
        'zone_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'arch_type' => 'ArchType',
        'charge_type' => 'ChargeType',
        'deletion_protection' => 'DeletionProtection',
        'engine_version' => 'EngineVersion',
        'expired_time' => 'ExpiredTime',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'maintenance_time' => 'MaintenanceTime',
        'network_type' => 'NetworkType',
        'region_id' => 'RegionId',
        'replicas' => 'Replicas',
        'shard_capacity' => 'ShardCapacity',
        'shard_number' => 'ShardNumber',
        'total_capacity' => 'TotalCapacity',
        'vpc_id' => 'VpcId',
        'zone_ids' => 'ZoneIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'arch_type' => 'setArchType',
        'charge_type' => 'setChargeType',
        'deletion_protection' => 'setDeletionProtection',
        'engine_version' => 'setEngineVersion',
        'expired_time' => 'setExpiredTime',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'maintenance_time' => 'setMaintenanceTime',
        'network_type' => 'setNetworkType',
        'region_id' => 'setRegionId',
        'replicas' => 'setReplicas',
        'shard_capacity' => 'setShardCapacity',
        'shard_number' => 'setShardNumber',
        'total_capacity' => 'setTotalCapacity',
        'vpc_id' => 'setVpcId',
        'zone_ids' => 'setZoneIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'arch_type' => 'getArchType',
        'charge_type' => 'getChargeType',
        'deletion_protection' => 'getDeletionProtection',
        'engine_version' => 'getEngineVersion',
        'expired_time' => 'getExpiredTime',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'maintenance_time' => 'getMaintenanceTime',
        'network_type' => 'getNetworkType',
        'region_id' => 'getRegionId',
        'replicas' => 'getReplicas',
        'shard_capacity' => 'getShardCapacity',
        'shard_number' => 'getShardNumber',
        'total_capacity' => 'getTotalCapacity',
        'vpc_id' => 'getVpcId',
        'zone_ids' => 'getZoneIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['arch_type'] = isset($data['arch_type']) ? $data['arch_type'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['engine_version'] = isset($data['engine_version']) ? $data['engine_version'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['maintenance_time'] = isset($data['maintenance_time']) ? $data['maintenance_time'] : null;
        $this->container['network_type'] = isset($data['network_type']) ? $data['network_type'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['replicas'] = isset($data['replicas']) ? $data['replicas'] : null;
        $this->container['shard_capacity'] = isset($data['shard_capacity']) ? $data['shard_capacity'] : null;
        $this->container['shard_number'] = isset($data['shard_number']) ? $data['shard_number'] : null;
        $this->container['total_capacity'] = isset($data['total_capacity']) ? $data['total_capacity'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_ids'] = isset($data['zone_ids']) ? $data['zone_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets arch_type
     *
     * @return string
     */
    public function getArchType()
    {
        return $this->container['arch_type'];
    }

    /**
     * Sets arch_type
     *
     * @param string $arch_type arch_type
     *
     * @return $this
     */
    public function setArchType($arch_type)
    {
        $this->container['arch_type'] = $arch_type;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets engine_version
     *
     * @return string
     */
    public function getEngineVersion()
    {
        return $this->container['engine_version'];
    }

    /**
     * Sets engine_version
     *
     * @param string $engine_version engine_version
     *
     * @return $this
     */
    public function setEngineVersion($engine_version)
    {
        $this->container['engine_version'] = $engine_version;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets maintenance_time
     *
     * @return string
     */
    public function getMaintenanceTime()
    {
        return $this->container['maintenance_time'];
    }

    /**
     * Sets maintenance_time
     *
     * @param string $maintenance_time maintenance_time
     *
     * @return $this
     */
    public function setMaintenanceTime($maintenance_time)
    {
        $this->container['maintenance_time'] = $maintenance_time;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string $network_type network_type
     *
     * @return $this
     */
    public function setNetworkType($network_type)
    {
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets replicas
     *
     * @return int
     */
    public function getReplicas()
    {
        return $this->container['replicas'];
    }

    /**
     * Sets replicas
     *
     * @param int $replicas replicas
     *
     * @return $this
     */
    public function setReplicas($replicas)
    {
        $this->container['replicas'] = $replicas;

        return $this;
    }

    /**
     * Gets shard_capacity
     *
     * @return double
     */
    public function getShardCapacity()
    {
        return $this->container['shard_capacity'];
    }

    /**
     * Sets shard_capacity
     *
     * @param double $shard_capacity shard_capacity
     *
     * @return $this
     */
    public function setShardCapacity($shard_capacity)
    {
        $this->container['shard_capacity'] = $shard_capacity;

        return $this;
    }

    /**
     * Gets shard_number
     *
     * @return int
     */
    public function getShardNumber()
    {
        return $this->container['shard_number'];
    }

    /**
     * Sets shard_number
     *
     * @param int $shard_number shard_number
     *
     * @return $this
     */
    public function setShardNumber($shard_number)
    {
        $this->container['shard_number'] = $shard_number;

        return $this;
    }

    /**
     * Gets total_capacity
     *
     * @return int
     */
    public function getTotalCapacity()
    {
        return $this->container['total_capacity'];
    }

    /**
     * Sets total_capacity
     *
     * @param int $total_capacity total_capacity
     *
     * @return $this
     */
    public function setTotalCapacity($total_capacity)
    {
        $this->container['total_capacity'] = $total_capacity;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_ids
     *
     * @return string[]
     */
    public function getZoneIds()
    {
        return $this->container['zone_ids'];
    }

    /**
     * Sets zone_ids
     *
     * @param string[] $zone_ids zone_ids
     *
     * @return $this
     */
    public function setZoneIds($zone_ids)
    {
        $this->container['zone_ids'] = $zone_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

