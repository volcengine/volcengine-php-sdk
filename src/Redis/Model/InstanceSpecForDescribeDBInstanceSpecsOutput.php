<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceSpecForDescribeDBInstanceSpecsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceSpecForDescribeDBInstanceSpecsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arch_type' => 'string',
        'instance_class' => 'string',
        'max_connections_per_shard' => 'int',
        'node_numbers' => 'int[]',
        'shard_capacity_specs' => '\Volcengine\Redis\Model\ShardCapacitySpecForDescribeDBInstanceSpecsOutput[]',
        'shard_numbers' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arch_type' => null,
        'instance_class' => null,
        'max_connections_per_shard' => 'int32',
        'node_numbers' => 'int32',
        'shard_capacity_specs' => null,
        'shard_numbers' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arch_type' => 'ArchType',
        'instance_class' => 'InstanceClass',
        'max_connections_per_shard' => 'MaxConnectionsPerShard',
        'node_numbers' => 'NodeNumbers',
        'shard_capacity_specs' => 'ShardCapacitySpecs',
        'shard_numbers' => 'ShardNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arch_type' => 'setArchType',
        'instance_class' => 'setInstanceClass',
        'max_connections_per_shard' => 'setMaxConnectionsPerShard',
        'node_numbers' => 'setNodeNumbers',
        'shard_capacity_specs' => 'setShardCapacitySpecs',
        'shard_numbers' => 'setShardNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arch_type' => 'getArchType',
        'instance_class' => 'getInstanceClass',
        'max_connections_per_shard' => 'getMaxConnectionsPerShard',
        'node_numbers' => 'getNodeNumbers',
        'shard_capacity_specs' => 'getShardCapacitySpecs',
        'shard_numbers' => 'getShardNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arch_type'] = isset($data['arch_type']) ? $data['arch_type'] : null;
        $this->container['instance_class'] = isset($data['instance_class']) ? $data['instance_class'] : null;
        $this->container['max_connections_per_shard'] = isset($data['max_connections_per_shard']) ? $data['max_connections_per_shard'] : null;
        $this->container['node_numbers'] = isset($data['node_numbers']) ? $data['node_numbers'] : null;
        $this->container['shard_capacity_specs'] = isset($data['shard_capacity_specs']) ? $data['shard_capacity_specs'] : null;
        $this->container['shard_numbers'] = isset($data['shard_numbers']) ? $data['shard_numbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arch_type
     *
     * @return string
     */
    public function getArchType()
    {
        return $this->container['arch_type'];
    }

    /**
     * Sets arch_type
     *
     * @param string $arch_type arch_type
     *
     * @return $this
     */
    public function setArchType($arch_type)
    {
        $this->container['arch_type'] = $arch_type;

        return $this;
    }

    /**
     * Gets instance_class
     *
     * @return string
     */
    public function getInstanceClass()
    {
        return $this->container['instance_class'];
    }

    /**
     * Sets instance_class
     *
     * @param string $instance_class instance_class
     *
     * @return $this
     */
    public function setInstanceClass($instance_class)
    {
        $this->container['instance_class'] = $instance_class;

        return $this;
    }

    /**
     * Gets max_connections_per_shard
     *
     * @return int
     */
    public function getMaxConnectionsPerShard()
    {
        return $this->container['max_connections_per_shard'];
    }

    /**
     * Sets max_connections_per_shard
     *
     * @param int $max_connections_per_shard max_connections_per_shard
     *
     * @return $this
     */
    public function setMaxConnectionsPerShard($max_connections_per_shard)
    {
        $this->container['max_connections_per_shard'] = $max_connections_per_shard;

        return $this;
    }

    /**
     * Gets node_numbers
     *
     * @return int[]
     */
    public function getNodeNumbers()
    {
        return $this->container['node_numbers'];
    }

    /**
     * Sets node_numbers
     *
     * @param int[] $node_numbers node_numbers
     *
     * @return $this
     */
    public function setNodeNumbers($node_numbers)
    {
        $this->container['node_numbers'] = $node_numbers;

        return $this;
    }

    /**
     * Gets shard_capacity_specs
     *
     * @return \Volcengine\Redis\Model\ShardCapacitySpecForDescribeDBInstanceSpecsOutput[]
     */
    public function getShardCapacitySpecs()
    {
        return $this->container['shard_capacity_specs'];
    }

    /**
     * Sets shard_capacity_specs
     *
     * @param \Volcengine\Redis\Model\ShardCapacitySpecForDescribeDBInstanceSpecsOutput[] $shard_capacity_specs shard_capacity_specs
     *
     * @return $this
     */
    public function setShardCapacitySpecs($shard_capacity_specs)
    {
        $this->container['shard_capacity_specs'] = $shard_capacity_specs;

        return $this;
    }

    /**
     * Gets shard_numbers
     *
     * @return int[]
     */
    public function getShardNumbers()
    {
        return $this->container['shard_numbers'];
    }

    /**
     * Sets shard_numbers
     *
     * @param int[] $shard_numbers shard_numbers
     *
     * @return $this
     */
    public function setShardNumbers($shard_numbers)
    {
        $this->container['shard_numbers'] = $shard_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

