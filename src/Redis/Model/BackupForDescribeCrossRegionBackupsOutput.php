<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BackupForDescribeCrossRegionBackupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BackupForDescribeCrossRegionBackupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_point_id' => 'string',
        'backup_point_name' => 'string',
        'backup_strategy' => 'string',
        'backup_type' => 'string',
        'end_time' => 'string',
        'instance_id' => 'string',
        'instance_info' => '\Volcengine\Redis\Model\InstanceInfoForDescribeCrossRegionBackupsOutput',
        'project_name' => 'string',
        'size' => 'int',
        'source_region' => 'string',
        'start_time' => 'string',
        'status' => 'string',
        'ttl' => 'int',
        'target_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_point_id' => null,
        'backup_point_name' => null,
        'backup_strategy' => null,
        'backup_type' => null,
        'end_time' => null,
        'instance_id' => null,
        'instance_info' => null,
        'project_name' => null,
        'size' => 'int64',
        'source_region' => null,
        'start_time' => null,
        'status' => null,
        'ttl' => 'int32',
        'target_region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_point_id' => 'BackupPointId',
        'backup_point_name' => 'BackupPointName',
        'backup_strategy' => 'BackupStrategy',
        'backup_type' => 'BackupType',
        'end_time' => 'EndTime',
        'instance_id' => 'InstanceId',
        'instance_info' => 'InstanceInfo',
        'project_name' => 'ProjectName',
        'size' => 'Size',
        'source_region' => 'SourceRegion',
        'start_time' => 'StartTime',
        'status' => 'Status',
        'ttl' => 'TTL',
        'target_region' => 'TargetRegion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_point_id' => 'setBackupPointId',
        'backup_point_name' => 'setBackupPointName',
        'backup_strategy' => 'setBackupStrategy',
        'backup_type' => 'setBackupType',
        'end_time' => 'setEndTime',
        'instance_id' => 'setInstanceId',
        'instance_info' => 'setInstanceInfo',
        'project_name' => 'setProjectName',
        'size' => 'setSize',
        'source_region' => 'setSourceRegion',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'ttl' => 'setTtl',
        'target_region' => 'setTargetRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_point_id' => 'getBackupPointId',
        'backup_point_name' => 'getBackupPointName',
        'backup_strategy' => 'getBackupStrategy',
        'backup_type' => 'getBackupType',
        'end_time' => 'getEndTime',
        'instance_id' => 'getInstanceId',
        'instance_info' => 'getInstanceInfo',
        'project_name' => 'getProjectName',
        'size' => 'getSize',
        'source_region' => 'getSourceRegion',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'ttl' => 'getTtl',
        'target_region' => 'getTargetRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BACKUP_STRATEGY_MANUAL_BACKUP = 'ManualBackup';
    const BACKUP_STRATEGY_AUTOMATED_BACKUP = 'AutomatedBackup';
    const BACKUP_STRATEGY_DATA_FLASH_BACK = 'DataFlashBack';
    const BACKUP_STRATEGY_ALL_STRATEGY = 'AllStrategy';
    const BACKUP_TYPE_INVALID = 'Invalid';
    const BACKUP_TYPE_FULL = 'Full';
    const BACKUP_TYPE_INC = 'Inc';
    const BACKUP_TYPE_ALL = 'All';
    const STATUS_CREATING = 'Creating';
    const STATUS_AVAILABLE = 'Available';
    const STATUS_UNAVAILABLE = 'Unavailable';
    const STATUS_DELETING = 'Deleting';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackupStrategyAllowableValues()
    {
        return [
            self::BACKUP_STRATEGY_MANUAL_BACKUP,
            self::BACKUP_STRATEGY_AUTOMATED_BACKUP,
            self::BACKUP_STRATEGY_DATA_FLASH_BACK,
            self::BACKUP_STRATEGY_ALL_STRATEGY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackupTypeAllowableValues()
    {
        return [
            self::BACKUP_TYPE_INVALID,
            self::BACKUP_TYPE_FULL,
            self::BACKUP_TYPE_INC,
            self::BACKUP_TYPE_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATING,
            self::STATUS_AVAILABLE,
            self::STATUS_UNAVAILABLE,
            self::STATUS_DELETING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_point_id'] = isset($data['backup_point_id']) ? $data['backup_point_id'] : null;
        $this->container['backup_point_name'] = isset($data['backup_point_name']) ? $data['backup_point_name'] : null;
        $this->container['backup_strategy'] = isset($data['backup_strategy']) ? $data['backup_strategy'] : null;
        $this->container['backup_type'] = isset($data['backup_type']) ? $data['backup_type'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_info'] = isset($data['instance_info']) ? $data['instance_info'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['source_region'] = isset($data['source_region']) ? $data['source_region'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ttl'] = isset($data['ttl']) ? $data['ttl'] : null;
        $this->container['target_region'] = isset($data['target_region']) ? $data['target_region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBackupStrategyAllowableValues();
        if (!is_null($this->container['backup_strategy']) && !in_array($this->container['backup_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'backup_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBackupTypeAllowableValues();
        if (!is_null($this->container['backup_type']) && !in_array($this->container['backup_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'backup_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_point_id
     *
     * @return string
     */
    public function getBackupPointId()
    {
        return $this->container['backup_point_id'];
    }

    /**
     * Sets backup_point_id
     *
     * @param string $backup_point_id backup_point_id
     *
     * @return $this
     */
    public function setBackupPointId($backup_point_id)
    {
        $this->container['backup_point_id'] = $backup_point_id;

        return $this;
    }

    /**
     * Gets backup_point_name
     *
     * @return string
     */
    public function getBackupPointName()
    {
        return $this->container['backup_point_name'];
    }

    /**
     * Sets backup_point_name
     *
     * @param string $backup_point_name backup_point_name
     *
     * @return $this
     */
    public function setBackupPointName($backup_point_name)
    {
        $this->container['backup_point_name'] = $backup_point_name;

        return $this;
    }

    /**
     * Gets backup_strategy
     *
     * @return string
     */
    public function getBackupStrategy()
    {
        return $this->container['backup_strategy'];
    }

    /**
     * Sets backup_strategy
     *
     * @param string $backup_strategy backup_strategy
     *
     * @return $this
     */
    public function setBackupStrategy($backup_strategy)
    {
        $allowedValues = $this->getBackupStrategyAllowableValues();
        if (!is_null($backup_strategy) && !in_array($backup_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'backup_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['backup_strategy'] = $backup_strategy;

        return $this;
    }

    /**
     * Gets backup_type
     *
     * @return string
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param string $backup_type backup_type
     *
     * @return $this
     */
    public function setBackupType($backup_type)
    {
        $allowedValues = $this->getBackupTypeAllowableValues();
        if (!is_null($backup_type) && !in_array($backup_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'backup_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_info
     *
     * @return \Volcengine\Redis\Model\InstanceInfoForDescribeCrossRegionBackupsOutput
     */
    public function getInstanceInfo()
    {
        return $this->container['instance_info'];
    }

    /**
     * Sets instance_info
     *
     * @param \Volcengine\Redis\Model\InstanceInfoForDescribeCrossRegionBackupsOutput $instance_info instance_info
     *
     * @return $this
     */
    public function setInstanceInfo($instance_info)
    {
        $this->container['instance_info'] = $instance_info;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets source_region
     *
     * @return string
     */
    public function getSourceRegion()
    {
        return $this->container['source_region'];
    }

    /**
     * Sets source_region
     *
     * @param string $source_region source_region
     *
     * @return $this
     */
    public function setSourceRegion($source_region)
    {
        $this->container['source_region'] = $source_region;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int $ttl ttl
     *
     * @return $this
     */
    public function setTtl($ttl)
    {
        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets target_region
     *
     * @return string
     */
    public function getTargetRegion()
    {
        return $this->container['target_region'];
    }

    /**
     * Sets target_region
     *
     * @param string $target_region target_region
     *
     * @return $this
     */
    public function setTargetRegion($target_region)
    {
        $this->container['target_region'] = $target_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

