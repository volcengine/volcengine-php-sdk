<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Redis\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'private_download_url' => 'string',
        'public_download_url' => 'string',
        'rdb_file_size' => 'int',
        'shard_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'private_download_url' => null,
        'public_download_url' => null,
        'rdb_file_size' => 'int64',
        'shard_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'private_download_url' => 'PrivateDownloadUrl',
        'public_download_url' => 'PublicDownloadUrl',
        'rdb_file_size' => 'RdbFileSize',
        'shard_id' => 'ShardId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'private_download_url' => 'setPrivateDownloadUrl',
        'public_download_url' => 'setPublicDownloadUrl',
        'rdb_file_size' => 'setRdbFileSize',
        'shard_id' => 'setShardId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'private_download_url' => 'getPrivateDownloadUrl',
        'public_download_url' => 'getPublicDownloadUrl',
        'rdb_file_size' => 'getRdbFileSize',
        'shard_id' => 'getShardId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['private_download_url'] = isset($data['private_download_url']) ? $data['private_download_url'] : null;
        $this->container['public_download_url'] = isset($data['public_download_url']) ? $data['public_download_url'] : null;
        $this->container['rdb_file_size'] = isset($data['rdb_file_size']) ? $data['rdb_file_size'] : null;
        $this->container['shard_id'] = isset($data['shard_id']) ? $data['shard_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets private_download_url
     *
     * @return string
     */
    public function getPrivateDownloadUrl()
    {
        return $this->container['private_download_url'];
    }

    /**
     * Sets private_download_url
     *
     * @param string $private_download_url private_download_url
     *
     * @return $this
     */
    public function setPrivateDownloadUrl($private_download_url)
    {
        $this->container['private_download_url'] = $private_download_url;

        return $this;
    }

    /**
     * Gets public_download_url
     *
     * @return string
     */
    public function getPublicDownloadUrl()
    {
        return $this->container['public_download_url'];
    }

    /**
     * Sets public_download_url
     *
     * @param string $public_download_url public_download_url
     *
     * @return $this
     */
    public function setPublicDownloadUrl($public_download_url)
    {
        $this->container['public_download_url'] = $public_download_url;

        return $this;
    }

    /**
     * Gets rdb_file_size
     *
     * @return int
     */
    public function getRdbFileSize()
    {
        return $this->container['rdb_file_size'];
    }

    /**
     * Sets rdb_file_size
     *
     * @param int $rdb_file_size rdb_file_size
     *
     * @return $this
     */
    public function setRdbFileSize($rdb_file_size)
    {
        $this->container['rdb_file_size'] = $rdb_file_size;

        return $this;
    }

    /**
     * Gets shard_id
     *
     * @return string
     */
    public function getShardId()
    {
        return $this->container['shard_id'];
    }

    /**
     * Sets shard_id
     *
     * @param string $shard_id shard_id
     *
     * @return $this
     */
    public function setShardId($shard_id)
    {
        $this->container['shard_id'] = $shard_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

