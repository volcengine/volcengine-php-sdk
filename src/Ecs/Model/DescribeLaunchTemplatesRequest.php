<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeLaunchTemplatesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeLaunchTemplatesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'launch_template_ids' => 'string[]',
        'launch_template_names' => 'string[]',
        'launch_template_project_name' => 'string',
        'max_results' => 'int',
        'next_token' => 'string',
        'tag_filters' => '\Volcengine\Ecs\Model\TagFilterForDescribeLaunchTemplatesInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'launch_template_ids' => null,
        'launch_template_names' => null,
        'launch_template_project_name' => null,
        'max_results' => 'int32',
        'next_token' => null,
        'tag_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'launch_template_ids' => 'LaunchTemplateIds',
        'launch_template_names' => 'LaunchTemplateNames',
        'launch_template_project_name' => 'LaunchTemplateProjectName',
        'max_results' => 'MaxResults',
        'next_token' => 'NextToken',
        'tag_filters' => 'TagFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'launch_template_ids' => 'setLaunchTemplateIds',
        'launch_template_names' => 'setLaunchTemplateNames',
        'launch_template_project_name' => 'setLaunchTemplateProjectName',
        'max_results' => 'setMaxResults',
        'next_token' => 'setNextToken',
        'tag_filters' => 'setTagFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'launch_template_ids' => 'getLaunchTemplateIds',
        'launch_template_names' => 'getLaunchTemplateNames',
        'launch_template_project_name' => 'getLaunchTemplateProjectName',
        'max_results' => 'getMaxResults',
        'next_token' => 'getNextToken',
        'tag_filters' => 'getTagFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['launch_template_ids'] = isset($data['launch_template_ids']) ? $data['launch_template_ids'] : null;
        $this->container['launch_template_names'] = isset($data['launch_template_names']) ? $data['launch_template_names'] : null;
        $this->container['launch_template_project_name'] = isset($data['launch_template_project_name']) ? $data['launch_template_project_name'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets launch_template_ids
     *
     * @return string[]
     */
    public function getLaunchTemplateIds()
    {
        return $this->container['launch_template_ids'];
    }

    /**
     * Sets launch_template_ids
     *
     * @param string[] $launch_template_ids launch_template_ids
     *
     * @return $this
     */
    public function setLaunchTemplateIds($launch_template_ids)
    {
        $this->container['launch_template_ids'] = $launch_template_ids;

        return $this;
    }

    /**
     * Gets launch_template_names
     *
     * @return string[]
     */
    public function getLaunchTemplateNames()
    {
        return $this->container['launch_template_names'];
    }

    /**
     * Sets launch_template_names
     *
     * @param string[] $launch_template_names launch_template_names
     *
     * @return $this
     */
    public function setLaunchTemplateNames($launch_template_names)
    {
        $this->container['launch_template_names'] = $launch_template_names;

        return $this;
    }

    /**
     * Gets launch_template_project_name
     *
     * @return string
     */
    public function getLaunchTemplateProjectName()
    {
        return $this->container['launch_template_project_name'];
    }

    /**
     * Sets launch_template_project_name
     *
     * @param string $launch_template_project_name launch_template_project_name
     *
     * @return $this
     */
    public function setLaunchTemplateProjectName($launch_template_project_name)
    {
        $this->container['launch_template_project_name'] = $launch_template_project_name;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Ecs\Model\TagFilterForDescribeLaunchTemplatesInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Ecs\Model\TagFilterForDescribeLaunchTemplatesInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

