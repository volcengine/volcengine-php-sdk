<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class LaunchTemplateForDescribeLaunchTemplatesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LaunchTemplateForDescribeLaunchTemplatesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_at' => 'string',
        'default_version_number' => 'int',
        'latest_version_number' => 'int',
        'launch_template_id' => 'string',
        'launch_template_name' => 'string',
        'launch_template_project_name' => 'string',
        'launch_template_tags' => '\Volcengine\Ecs\Model\LaunchTemplateTagForDescribeLaunchTemplatesOutput[]',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_at' => null,
        'default_version_number' => 'int32',
        'latest_version_number' => 'int32',
        'launch_template_id' => null,
        'launch_template_name' => null,
        'launch_template_project_name' => null,
        'launch_template_tags' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'CreatedAt',
        'default_version_number' => 'DefaultVersionNumber',
        'latest_version_number' => 'LatestVersionNumber',
        'launch_template_id' => 'LaunchTemplateId',
        'launch_template_name' => 'LaunchTemplateName',
        'launch_template_project_name' => 'LaunchTemplateProjectName',
        'launch_template_tags' => 'LaunchTemplateTags',
        'updated_at' => 'UpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'default_version_number' => 'setDefaultVersionNumber',
        'latest_version_number' => 'setLatestVersionNumber',
        'launch_template_id' => 'setLaunchTemplateId',
        'launch_template_name' => 'setLaunchTemplateName',
        'launch_template_project_name' => 'setLaunchTemplateProjectName',
        'launch_template_tags' => 'setLaunchTemplateTags',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'default_version_number' => 'getDefaultVersionNumber',
        'latest_version_number' => 'getLatestVersionNumber',
        'launch_template_id' => 'getLaunchTemplateId',
        'launch_template_name' => 'getLaunchTemplateName',
        'launch_template_project_name' => 'getLaunchTemplateProjectName',
        'launch_template_tags' => 'getLaunchTemplateTags',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['default_version_number'] = isset($data['default_version_number']) ? $data['default_version_number'] : null;
        $this->container['latest_version_number'] = isset($data['latest_version_number']) ? $data['latest_version_number'] : null;
        $this->container['launch_template_id'] = isset($data['launch_template_id']) ? $data['launch_template_id'] : null;
        $this->container['launch_template_name'] = isset($data['launch_template_name']) ? $data['launch_template_name'] : null;
        $this->container['launch_template_project_name'] = isset($data['launch_template_project_name']) ? $data['launch_template_project_name'] : null;
        $this->container['launch_template_tags'] = isset($data['launch_template_tags']) ? $data['launch_template_tags'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets default_version_number
     *
     * @return int
     */
    public function getDefaultVersionNumber()
    {
        return $this->container['default_version_number'];
    }

    /**
     * Sets default_version_number
     *
     * @param int $default_version_number default_version_number
     *
     * @return $this
     */
    public function setDefaultVersionNumber($default_version_number)
    {
        $this->container['default_version_number'] = $default_version_number;

        return $this;
    }

    /**
     * Gets latest_version_number
     *
     * @return int
     */
    public function getLatestVersionNumber()
    {
        return $this->container['latest_version_number'];
    }

    /**
     * Sets latest_version_number
     *
     * @param int $latest_version_number latest_version_number
     *
     * @return $this
     */
    public function setLatestVersionNumber($latest_version_number)
    {
        $this->container['latest_version_number'] = $latest_version_number;

        return $this;
    }

    /**
     * Gets launch_template_id
     *
     * @return string
     */
    public function getLaunchTemplateId()
    {
        return $this->container['launch_template_id'];
    }

    /**
     * Sets launch_template_id
     *
     * @param string $launch_template_id launch_template_id
     *
     * @return $this
     */
    public function setLaunchTemplateId($launch_template_id)
    {
        $this->container['launch_template_id'] = $launch_template_id;

        return $this;
    }

    /**
     * Gets launch_template_name
     *
     * @return string
     */
    public function getLaunchTemplateName()
    {
        return $this->container['launch_template_name'];
    }

    /**
     * Sets launch_template_name
     *
     * @param string $launch_template_name launch_template_name
     *
     * @return $this
     */
    public function setLaunchTemplateName($launch_template_name)
    {
        $this->container['launch_template_name'] = $launch_template_name;

        return $this;
    }

    /**
     * Gets launch_template_project_name
     *
     * @return string
     */
    public function getLaunchTemplateProjectName()
    {
        return $this->container['launch_template_project_name'];
    }

    /**
     * Sets launch_template_project_name
     *
     * @param string $launch_template_project_name launch_template_project_name
     *
     * @return $this
     */
    public function setLaunchTemplateProjectName($launch_template_project_name)
    {
        $this->container['launch_template_project_name'] = $launch_template_project_name;

        return $this;
    }

    /**
     * Gets launch_template_tags
     *
     * @return \Volcengine\Ecs\Model\LaunchTemplateTagForDescribeLaunchTemplatesOutput[]
     */
    public function getLaunchTemplateTags()
    {
        return $this->container['launch_template_tags'];
    }

    /**
     * Sets launch_template_tags
     *
     * @param \Volcengine\Ecs\Model\LaunchTemplateTagForDescribeLaunchTemplatesOutput[] $launch_template_tags launch_template_tags
     *
     * @return $this
     */
    public function setLaunchTemplateTags($launch_template_tags)
    {
        $this->container['launch_template_tags'] = $launch_template_tags;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

