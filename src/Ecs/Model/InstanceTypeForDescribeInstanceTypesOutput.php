<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceTypeForDescribeInstanceTypesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceTypeForDescribeInstanceTypesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affinity_group_sizes' => 'int[]',
        'baseline_credit' => 'int',
        'gpu' => '\Volcengine\Ecs\Model\GpuForDescribeInstanceTypesOutput',
        'initial_credit' => 'int',
        'instance_type_family' => 'string',
        'instance_type_id' => 'string',
        'is_support_affinity_group' => 'bool',
        'is_support_jumbo_frame' => 'bool',
        'local_volumes' => '\Volcengine\Ecs\Model\LocalVolumeForDescribeInstanceTypesOutput[]',
        'memory' => '\Volcengine\Ecs\Model\MemoryForDescribeInstanceTypesOutput',
        'network' => '\Volcengine\Ecs\Model\NetworkForDescribeInstanceTypesOutput',
        'processor' => '\Volcengine\Ecs\Model\ProcessorForDescribeInstanceTypesOutput',
        'rdma' => '\Volcengine\Ecs\Model\RdmaForDescribeInstanceTypesOutput',
        'volume' => '\Volcengine\Ecs\Model\VolumeForDescribeInstanceTypesOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affinity_group_sizes' => 'int32',
        'baseline_credit' => 'int64',
        'gpu' => null,
        'initial_credit' => 'int64',
        'instance_type_family' => null,
        'instance_type_id' => null,
        'is_support_affinity_group' => null,
        'is_support_jumbo_frame' => null,
        'local_volumes' => null,
        'memory' => null,
        'network' => null,
        'processor' => null,
        'rdma' => null,
        'volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affinity_group_sizes' => 'AffinityGroupSizes',
        'baseline_credit' => 'BaselineCredit',
        'gpu' => 'Gpu',
        'initial_credit' => 'InitialCredit',
        'instance_type_family' => 'InstanceTypeFamily',
        'instance_type_id' => 'InstanceTypeId',
        'is_support_affinity_group' => 'IsSupportAffinityGroup',
        'is_support_jumbo_frame' => 'IsSupportJumboFrame',
        'local_volumes' => 'LocalVolumes',
        'memory' => 'Memory',
        'network' => 'Network',
        'processor' => 'Processor',
        'rdma' => 'Rdma',
        'volume' => 'Volume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affinity_group_sizes' => 'setAffinityGroupSizes',
        'baseline_credit' => 'setBaselineCredit',
        'gpu' => 'setGpu',
        'initial_credit' => 'setInitialCredit',
        'instance_type_family' => 'setInstanceTypeFamily',
        'instance_type_id' => 'setInstanceTypeId',
        'is_support_affinity_group' => 'setIsSupportAffinityGroup',
        'is_support_jumbo_frame' => 'setIsSupportJumboFrame',
        'local_volumes' => 'setLocalVolumes',
        'memory' => 'setMemory',
        'network' => 'setNetwork',
        'processor' => 'setProcessor',
        'rdma' => 'setRdma',
        'volume' => 'setVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affinity_group_sizes' => 'getAffinityGroupSizes',
        'baseline_credit' => 'getBaselineCredit',
        'gpu' => 'getGpu',
        'initial_credit' => 'getInitialCredit',
        'instance_type_family' => 'getInstanceTypeFamily',
        'instance_type_id' => 'getInstanceTypeId',
        'is_support_affinity_group' => 'getIsSupportAffinityGroup',
        'is_support_jumbo_frame' => 'getIsSupportJumboFrame',
        'local_volumes' => 'getLocalVolumes',
        'memory' => 'getMemory',
        'network' => 'getNetwork',
        'processor' => 'getProcessor',
        'rdma' => 'getRdma',
        'volume' => 'getVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affinity_group_sizes'] = isset($data['affinity_group_sizes']) ? $data['affinity_group_sizes'] : null;
        $this->container['baseline_credit'] = isset($data['baseline_credit']) ? $data['baseline_credit'] : null;
        $this->container['gpu'] = isset($data['gpu']) ? $data['gpu'] : null;
        $this->container['initial_credit'] = isset($data['initial_credit']) ? $data['initial_credit'] : null;
        $this->container['instance_type_family'] = isset($data['instance_type_family']) ? $data['instance_type_family'] : null;
        $this->container['instance_type_id'] = isset($data['instance_type_id']) ? $data['instance_type_id'] : null;
        $this->container['is_support_affinity_group'] = isset($data['is_support_affinity_group']) ? $data['is_support_affinity_group'] : null;
        $this->container['is_support_jumbo_frame'] = isset($data['is_support_jumbo_frame']) ? $data['is_support_jumbo_frame'] : null;
        $this->container['local_volumes'] = isset($data['local_volumes']) ? $data['local_volumes'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['processor'] = isset($data['processor']) ? $data['processor'] : null;
        $this->container['rdma'] = isset($data['rdma']) ? $data['rdma'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affinity_group_sizes
     *
     * @return int[]
     */
    public function getAffinityGroupSizes()
    {
        return $this->container['affinity_group_sizes'];
    }

    /**
     * Sets affinity_group_sizes
     *
     * @param int[] $affinity_group_sizes affinity_group_sizes
     *
     * @return $this
     */
    public function setAffinityGroupSizes($affinity_group_sizes)
    {
        $this->container['affinity_group_sizes'] = $affinity_group_sizes;

        return $this;
    }

    /**
     * Gets baseline_credit
     *
     * @return int
     */
    public function getBaselineCredit()
    {
        return $this->container['baseline_credit'];
    }

    /**
     * Sets baseline_credit
     *
     * @param int $baseline_credit baseline_credit
     *
     * @return $this
     */
    public function setBaselineCredit($baseline_credit)
    {
        $this->container['baseline_credit'] = $baseline_credit;

        return $this;
    }

    /**
     * Gets gpu
     *
     * @return \Volcengine\Ecs\Model\GpuForDescribeInstanceTypesOutput
     */
    public function getGpu()
    {
        return $this->container['gpu'];
    }

    /**
     * Sets gpu
     *
     * @param \Volcengine\Ecs\Model\GpuForDescribeInstanceTypesOutput $gpu gpu
     *
     * @return $this
     */
    public function setGpu($gpu)
    {
        $this->container['gpu'] = $gpu;

        return $this;
    }

    /**
     * Gets initial_credit
     *
     * @return int
     */
    public function getInitialCredit()
    {
        return $this->container['initial_credit'];
    }

    /**
     * Sets initial_credit
     *
     * @param int $initial_credit initial_credit
     *
     * @return $this
     */
    public function setInitialCredit($initial_credit)
    {
        $this->container['initial_credit'] = $initial_credit;

        return $this;
    }

    /**
     * Gets instance_type_family
     *
     * @return string
     */
    public function getInstanceTypeFamily()
    {
        return $this->container['instance_type_family'];
    }

    /**
     * Sets instance_type_family
     *
     * @param string $instance_type_family instance_type_family
     *
     * @return $this
     */
    public function setInstanceTypeFamily($instance_type_family)
    {
        $this->container['instance_type_family'] = $instance_type_family;

        return $this;
    }

    /**
     * Gets instance_type_id
     *
     * @return string
     */
    public function getInstanceTypeId()
    {
        return $this->container['instance_type_id'];
    }

    /**
     * Sets instance_type_id
     *
     * @param string $instance_type_id instance_type_id
     *
     * @return $this
     */
    public function setInstanceTypeId($instance_type_id)
    {
        $this->container['instance_type_id'] = $instance_type_id;

        return $this;
    }

    /**
     * Gets is_support_affinity_group
     *
     * @return bool
     */
    public function getIsSupportAffinityGroup()
    {
        return $this->container['is_support_affinity_group'];
    }

    /**
     * Sets is_support_affinity_group
     *
     * @param bool $is_support_affinity_group is_support_affinity_group
     *
     * @return $this
     */
    public function setIsSupportAffinityGroup($is_support_affinity_group)
    {
        $this->container['is_support_affinity_group'] = $is_support_affinity_group;

        return $this;
    }

    /**
     * Gets is_support_jumbo_frame
     *
     * @return bool
     */
    public function getIsSupportJumboFrame()
    {
        return $this->container['is_support_jumbo_frame'];
    }

    /**
     * Sets is_support_jumbo_frame
     *
     * @param bool $is_support_jumbo_frame is_support_jumbo_frame
     *
     * @return $this
     */
    public function setIsSupportJumboFrame($is_support_jumbo_frame)
    {
        $this->container['is_support_jumbo_frame'] = $is_support_jumbo_frame;

        return $this;
    }

    /**
     * Gets local_volumes
     *
     * @return \Volcengine\Ecs\Model\LocalVolumeForDescribeInstanceTypesOutput[]
     */
    public function getLocalVolumes()
    {
        return $this->container['local_volumes'];
    }

    /**
     * Sets local_volumes
     *
     * @param \Volcengine\Ecs\Model\LocalVolumeForDescribeInstanceTypesOutput[] $local_volumes local_volumes
     *
     * @return $this
     */
    public function setLocalVolumes($local_volumes)
    {
        $this->container['local_volumes'] = $local_volumes;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return \Volcengine\Ecs\Model\MemoryForDescribeInstanceTypesOutput
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param \Volcengine\Ecs\Model\MemoryForDescribeInstanceTypesOutput $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Volcengine\Ecs\Model\NetworkForDescribeInstanceTypesOutput
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Volcengine\Ecs\Model\NetworkForDescribeInstanceTypesOutput $network network
     *
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return \Volcengine\Ecs\Model\ProcessorForDescribeInstanceTypesOutput
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param \Volcengine\Ecs\Model\ProcessorForDescribeInstanceTypesOutput $processor processor
     *
     * @return $this
     */
    public function setProcessor($processor)
    {
        $this->container['processor'] = $processor;

        return $this;
    }

    /**
     * Gets rdma
     *
     * @return \Volcengine\Ecs\Model\RdmaForDescribeInstanceTypesOutput
     */
    public function getRdma()
    {
        return $this->container['rdma'];
    }

    /**
     * Sets rdma
     *
     * @param \Volcengine\Ecs\Model\RdmaForDescribeInstanceTypesOutput $rdma rdma
     *
     * @return $this
     */
    public function setRdma($rdma)
    {
        $this->container['rdma'] = $rdma;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return \Volcengine\Ecs\Model\VolumeForDescribeInstanceTypesOutput
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param \Volcengine\Ecs\Model\VolumeForDescribeInstanceTypesOutput $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

