<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SystemEventForDescribeSystemEventsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SystemEventForDescribeSystemEventsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => 'string',
        'created_at' => 'string',
        'extra_info' => 'map[string,string]',
        'id' => 'string',
        'impact_level' => 'string',
        'operated_end_at' => 'string',
        'operated_start_at' => 'string',
        'resource_id' => 'string',
        'status' => 'string',
        'type' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category' => null,
        'created_at' => null,
        'extra_info' => null,
        'id' => null,
        'impact_level' => null,
        'operated_end_at' => null,
        'operated_start_at' => null,
        'resource_id' => null,
        'status' => null,
        'type' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'Category',
        'created_at' => 'CreatedAt',
        'extra_info' => 'ExtraInfo',
        'id' => 'Id',
        'impact_level' => 'ImpactLevel',
        'operated_end_at' => 'OperatedEndAt',
        'operated_start_at' => 'OperatedStartAt',
        'resource_id' => 'ResourceId',
        'status' => 'Status',
        'type' => 'Type',
        'updated_at' => 'UpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'created_at' => 'setCreatedAt',
        'extra_info' => 'setExtraInfo',
        'id' => 'setId',
        'impact_level' => 'setImpactLevel',
        'operated_end_at' => 'setOperatedEndAt',
        'operated_start_at' => 'setOperatedStartAt',
        'resource_id' => 'setResourceId',
        'status' => 'setStatus',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'created_at' => 'getCreatedAt',
        'extra_info' => 'getExtraInfo',
        'id' => 'getId',
        'impact_level' => 'getImpactLevel',
        'operated_end_at' => 'getOperatedEndAt',
        'operated_start_at' => 'getOperatedStartAt',
        'resource_id' => 'getResourceId',
        'status' => 'getStatus',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_UNKNOWN_STATUS = 'UnknownStatus';
    const STATUS_EXECUTING = 'Executing';
    const STATUS_SUCCEEDED = 'Succeeded';
    const STATUS_FAILED = 'Failed';
    const STATUS_INQUIRING = 'Inquiring';
    const STATUS_SCHEDULED = 'Scheduled';
    const STATUS_REJECTED = 'Rejected';
    const STATUS_CANCELED = 'Canceled';
    const STATUS_PENDING = 'Pending';
    const STATUS_RECOVERED = 'Recovered';
    const TYPE_UNKNOWN_TYPE = 'UnknownType';
    const TYPE_SYSTEM_FAILURE_STOP = 'SystemFailure_Stop';
    const TYPE_SYSTEM_FAILURE_REBOOT = 'SystemFailure_Reboot';
    const TYPE_SYSTEM_FAILURE_PLEASE_CHECK = 'SystemFailure_PleaseCheck';
    const TYPE_DISK_ERROR_REDEPLOY = 'DiskError_Redeploy';
    const TYPE_HDD_BAD_SECTOR_REDEPLOY = 'HDDBadSector_Redeploy';
    const TYPE_GPU_ERROR_REDEPLOY = 'GpuError_Redeploy';
    const TYPE_SYSTEM_MAINTENANCE_REDEPLOY = 'SystemMaintenance_Redeploy';
    const TYPE_SYSTEM_FAILURE_REDEPLOY = 'SystemFailure_Redeploy';
    const TYPE_CREATE_INSTANCE = 'CreateInstance';
    const TYPE_RUN_INSTANCE = 'RunInstance';
    const TYPE_STOP_INSTANCE = 'StopInstance';
    const TYPE_DELETE_INSTANCE = 'DeleteInstance';
    const TYPE_SPOT_INSTANCE_INTERRUPTION_DELETE = 'SpotInstanceInterruption_Delete';
    const TYPE_ACCOUNT_UNBALANCED_STOP = 'AccountUnbalanced_Stop';
    const TYPE_ACCOUNT_UNBALANCED_DELETE = 'AccountUnbalanced_Delete';
    const TYPE_INSTANCE_CHARGE_TYPE_CHANGE = 'InstanceChargeType_Change';
    const TYPE_INSTANCE_CONFIGURATION_CHANGE = 'InstanceConfiguration_Change';
    const TYPE_FILE_SYSTEM_READ_ONLY_CHANGE = 'FileSystemReadOnly_Change';
    const TYPE_REBOOT_INSTANCE = 'RebootInstance';
    const TYPE_INSTANCE_FAILURE = 'InstanceFailure';
    const TYPE_APPLICATION_FAILURE = 'ApplicationFailure';
    const TYPE_DEPLOYMENT_SET_MODIFY = 'DeploymentSet_Modify';
    const TYPE_SERVER_MIGRATION_TASK = 'ServerMigrationTask';
    const TYPE_SERVER_MIGRATION_FIRST_SYNC = 'ServerMigration_FirstSync';
    const TYPE_SERVER_MIGRATION_ADDITIONAL_SYNC = 'ServerMigration_AdditionalSync';
    const TYPE_GPU_RISK_DETECTED = 'GpuRiskDetected';
    const TYPE_ELASTIC_SCHEDULED_INSTANCE_CREATE = 'ElasticScheduledInstance_Create';
    const TYPE_ELASTIC_SCHEDULED_INSTANCE_CANCEL = 'ElasticScheduledInstance_Cancel';
    const TYPE_ELASTIC_SCHEDULED_INSTANCE_DELIVER = 'ElasticScheduledInstance_Deliver';
    const TYPE_INFRASTRUCTURE_UPGRADE_REDEPLOY = 'InfrastructureUpgrade_Redeploy';
    const TYPE_DISK_ERROR_DETECTED = 'DiskErrorDetected';
    const TYPE_DISK_ERROR_REPLACE_DISK = 'DiskError_ReplaceDisk';
    const TYPE_MEMORY_RISK_DETECTED = 'MemoryRiskDetected';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN_STATUS,
            self::STATUS_EXECUTING,
            self::STATUS_SUCCEEDED,
            self::STATUS_FAILED,
            self::STATUS_INQUIRING,
            self::STATUS_SCHEDULED,
            self::STATUS_REJECTED,
            self::STATUS_CANCELED,
            self::STATUS_PENDING,
            self::STATUS_RECOVERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN_TYPE,
            self::TYPE_SYSTEM_FAILURE_STOP,
            self::TYPE_SYSTEM_FAILURE_REBOOT,
            self::TYPE_SYSTEM_FAILURE_PLEASE_CHECK,
            self::TYPE_DISK_ERROR_REDEPLOY,
            self::TYPE_HDD_BAD_SECTOR_REDEPLOY,
            self::TYPE_GPU_ERROR_REDEPLOY,
            self::TYPE_SYSTEM_MAINTENANCE_REDEPLOY,
            self::TYPE_SYSTEM_FAILURE_REDEPLOY,
            self::TYPE_CREATE_INSTANCE,
            self::TYPE_RUN_INSTANCE,
            self::TYPE_STOP_INSTANCE,
            self::TYPE_DELETE_INSTANCE,
            self::TYPE_SPOT_INSTANCE_INTERRUPTION_DELETE,
            self::TYPE_ACCOUNT_UNBALANCED_STOP,
            self::TYPE_ACCOUNT_UNBALANCED_DELETE,
            self::TYPE_INSTANCE_CHARGE_TYPE_CHANGE,
            self::TYPE_INSTANCE_CONFIGURATION_CHANGE,
            self::TYPE_FILE_SYSTEM_READ_ONLY_CHANGE,
            self::TYPE_REBOOT_INSTANCE,
            self::TYPE_INSTANCE_FAILURE,
            self::TYPE_APPLICATION_FAILURE,
            self::TYPE_DEPLOYMENT_SET_MODIFY,
            self::TYPE_SERVER_MIGRATION_TASK,
            self::TYPE_SERVER_MIGRATION_FIRST_SYNC,
            self::TYPE_SERVER_MIGRATION_ADDITIONAL_SYNC,
            self::TYPE_GPU_RISK_DETECTED,
            self::TYPE_ELASTIC_SCHEDULED_INSTANCE_CREATE,
            self::TYPE_ELASTIC_SCHEDULED_INSTANCE_CANCEL,
            self::TYPE_ELASTIC_SCHEDULED_INSTANCE_DELIVER,
            self::TYPE_INFRASTRUCTURE_UPGRADE_REDEPLOY,
            self::TYPE_DISK_ERROR_DETECTED,
            self::TYPE_DISK_ERROR_REPLACE_DISK,
            self::TYPE_MEMORY_RISK_DETECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['extra_info'] = isset($data['extra_info']) ? $data['extra_info'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['impact_level'] = isset($data['impact_level']) ? $data['impact_level'] : null;
        $this->container['operated_end_at'] = isset($data['operated_end_at']) ? $data['operated_end_at'] : null;
        $this->container['operated_start_at'] = isset($data['operated_start_at']) ? $data['operated_start_at'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets extra_info
     *
     * @return map[string,string]
     */
    public function getExtraInfo()
    {
        return $this->container['extra_info'];
    }

    /**
     * Sets extra_info
     *
     * @param map[string,string] $extra_info extra_info
     *
     * @return $this
     */
    public function setExtraInfo($extra_info)
    {
        $this->container['extra_info'] = $extra_info;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets impact_level
     *
     * @return string
     */
    public function getImpactLevel()
    {
        return $this->container['impact_level'];
    }

    /**
     * Sets impact_level
     *
     * @param string $impact_level impact_level
     *
     * @return $this
     */
    public function setImpactLevel($impact_level)
    {
        $this->container['impact_level'] = $impact_level;

        return $this;
    }

    /**
     * Gets operated_end_at
     *
     * @return string
     */
    public function getOperatedEndAt()
    {
        return $this->container['operated_end_at'];
    }

    /**
     * Sets operated_end_at
     *
     * @param string $operated_end_at operated_end_at
     *
     * @return $this
     */
    public function setOperatedEndAt($operated_end_at)
    {
        $this->container['operated_end_at'] = $operated_end_at;

        return $this;
    }

    /**
     * Gets operated_start_at
     *
     * @return string
     */
    public function getOperatedStartAt()
    {
        return $this->container['operated_start_at'];
    }

    /**
     * Sets operated_start_at
     *
     * @param string $operated_start_at operated_start_at
     *
     * @return $this
     */
    public function setOperatedStartAt($operated_start_at)
    {
        $this->container['operated_start_at'] = $operated_start_at;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

