<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaasdev\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RunCodeResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RunCodeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'compile_result' => '\Volcengine\Vefaasdev\Model\CompileResultForRunCodeOutput',
        'executor_pod_name' => 'string',
        'files' => '\Volcengine\Vefaasdev\Model\FilesForRunCodeOutput',
        'result' => 'string',
        'run_result' => '\Volcengine\Vefaasdev\Model\RunResultForRunCodeOutput',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'compile_result' => null,
        'executor_pod_name' => null,
        'files' => null,
        'result' => null,
        'run_result' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'compile_result' => 'CompileResult',
        'executor_pod_name' => 'ExecutorPodName',
        'files' => 'Files',
        'result' => 'Result',
        'run_result' => 'RunResult',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'compile_result' => 'setCompileResult',
        'executor_pod_name' => 'setExecutorPodName',
        'files' => 'setFiles',
        'result' => 'setResult',
        'run_result' => 'setRunResult',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'compile_result' => 'getCompileResult',
        'executor_pod_name' => 'getExecutorPodName',
        'files' => 'getFiles',
        'result' => 'getResult',
        'run_result' => 'getRunResult',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['compile_result'] = isset($data['compile_result']) ? $data['compile_result'] : null;
        $this->container['executor_pod_name'] = isset($data['executor_pod_name']) ? $data['executor_pod_name'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['run_result'] = isset($data['run_result']) ? $data['run_result'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets compile_result
     *
     * @return \Volcengine\Vefaasdev\Model\CompileResultForRunCodeOutput
     */
    public function getCompileResult()
    {
        return $this->container['compile_result'];
    }

    /**
     * Sets compile_result
     *
     * @param \Volcengine\Vefaasdev\Model\CompileResultForRunCodeOutput $compile_result compile_result
     *
     * @return $this
     */
    public function setCompileResult($compile_result)
    {
        $this->container['compile_result'] = $compile_result;

        return $this;
    }

    /**
     * Gets executor_pod_name
     *
     * @return string
     */
    public function getExecutorPodName()
    {
        return $this->container['executor_pod_name'];
    }

    /**
     * Sets executor_pod_name
     *
     * @param string $executor_pod_name executor_pod_name
     *
     * @return $this
     */
    public function setExecutorPodName($executor_pod_name)
    {
        $this->container['executor_pod_name'] = $executor_pod_name;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Volcengine\Vefaasdev\Model\FilesForRunCodeOutput
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Volcengine\Vefaasdev\Model\FilesForRunCodeOutput $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets run_result
     *
     * @return \Volcengine\Vefaasdev\Model\RunResultForRunCodeOutput
     */
    public function getRunResult()
    {
        return $this->container['run_result'];
    }

    /**
     * Sets run_result
     *
     * @param \Volcengine\Vefaasdev\Model\RunResultForRunCodeOutput $run_result run_result
     *
     * @return $this
     */
    public function setRunResult($run_result)
    {
        $this->container['run_result'] = $run_result;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

