<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RowForListPhoneTemplateOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RowForListPhoneTemplateOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aosp_version' => 'string',
        'overlay_persist_property' => '\Volcengine\Acep\Model\OverlayPersistPropertyForListPhoneTemplateOutput[]',
        'overlay_property' => '\Volcengine\Acep\Model\OverlayPropertyForListPhoneTemplateOutput[]',
        'overlay_settings' => '\Volcengine\Acep\Model\OverlaySettingForListPhoneTemplateOutput[]',
        'phone_template_id' => 'string',
        'phone_template_name' => 'string',
        'status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aosp_version' => null,
        'overlay_persist_property' => null,
        'overlay_property' => null,
        'overlay_settings' => null,
        'phone_template_id' => null,
        'phone_template_name' => null,
        'status' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aosp_version' => 'AospVersion',
        'overlay_persist_property' => 'OverlayPersistProperty',
        'overlay_property' => 'OverlayProperty',
        'overlay_settings' => 'OverlaySettings',
        'phone_template_id' => 'PhoneTemplateId',
        'phone_template_name' => 'PhoneTemplateName',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aosp_version' => 'setAospVersion',
        'overlay_persist_property' => 'setOverlayPersistProperty',
        'overlay_property' => 'setOverlayProperty',
        'overlay_settings' => 'setOverlaySettings',
        'phone_template_id' => 'setPhoneTemplateId',
        'phone_template_name' => 'setPhoneTemplateName',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aosp_version' => 'getAospVersion',
        'overlay_persist_property' => 'getOverlayPersistProperty',
        'overlay_property' => 'getOverlayProperty',
        'overlay_settings' => 'getOverlaySettings',
        'phone_template_id' => 'getPhoneTemplateId',
        'phone_template_name' => 'getPhoneTemplateName',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aosp_version'] = isset($data['aosp_version']) ? $data['aosp_version'] : null;
        $this->container['overlay_persist_property'] = isset($data['overlay_persist_property']) ? $data['overlay_persist_property'] : null;
        $this->container['overlay_property'] = isset($data['overlay_property']) ? $data['overlay_property'] : null;
        $this->container['overlay_settings'] = isset($data['overlay_settings']) ? $data['overlay_settings'] : null;
        $this->container['phone_template_id'] = isset($data['phone_template_id']) ? $data['phone_template_id'] : null;
        $this->container['phone_template_name'] = isset($data['phone_template_name']) ? $data['phone_template_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aosp_version
     *
     * @return string
     */
    public function getAospVersion()
    {
        return $this->container['aosp_version'];
    }

    /**
     * Sets aosp_version
     *
     * @param string $aosp_version aosp_version
     *
     * @return $this
     */
    public function setAospVersion($aosp_version)
    {
        $this->container['aosp_version'] = $aosp_version;

        return $this;
    }

    /**
     * Gets overlay_persist_property
     *
     * @return \Volcengine\Acep\Model\OverlayPersistPropertyForListPhoneTemplateOutput[]
     */
    public function getOverlayPersistProperty()
    {
        return $this->container['overlay_persist_property'];
    }

    /**
     * Sets overlay_persist_property
     *
     * @param \Volcengine\Acep\Model\OverlayPersistPropertyForListPhoneTemplateOutput[] $overlay_persist_property overlay_persist_property
     *
     * @return $this
     */
    public function setOverlayPersistProperty($overlay_persist_property)
    {
        $this->container['overlay_persist_property'] = $overlay_persist_property;

        return $this;
    }

    /**
     * Gets overlay_property
     *
     * @return \Volcengine\Acep\Model\OverlayPropertyForListPhoneTemplateOutput[]
     */
    public function getOverlayProperty()
    {
        return $this->container['overlay_property'];
    }

    /**
     * Sets overlay_property
     *
     * @param \Volcengine\Acep\Model\OverlayPropertyForListPhoneTemplateOutput[] $overlay_property overlay_property
     *
     * @return $this
     */
    public function setOverlayProperty($overlay_property)
    {
        $this->container['overlay_property'] = $overlay_property;

        return $this;
    }

    /**
     * Gets overlay_settings
     *
     * @return \Volcengine\Acep\Model\OverlaySettingForListPhoneTemplateOutput[]
     */
    public function getOverlaySettings()
    {
        return $this->container['overlay_settings'];
    }

    /**
     * Sets overlay_settings
     *
     * @param \Volcengine\Acep\Model\OverlaySettingForListPhoneTemplateOutput[] $overlay_settings overlay_settings
     *
     * @return $this
     */
    public function setOverlaySettings($overlay_settings)
    {
        $this->container['overlay_settings'] = $overlay_settings;

        return $this;
    }

    /**
     * Gets phone_template_id
     *
     * @return string
     */
    public function getPhoneTemplateId()
    {
        return $this->container['phone_template_id'];
    }

    /**
     * Sets phone_template_id
     *
     * @param string $phone_template_id phone_template_id
     *
     * @return $this
     */
    public function setPhoneTemplateId($phone_template_id)
    {
        $this->container['phone_template_id'] = $phone_template_id;

        return $this;
    }

    /**
     * Gets phone_template_name
     *
     * @return string
     */
    public function getPhoneTemplateName()
    {
        return $this->container['phone_template_name'];
    }

    /**
     * Sets phone_template_name
     *
     * @param string $phone_template_name phone_template_name
     *
     * @return $this
     */
    public function setPhoneTemplateName($phone_template_name)
    {
        $this->container['phone_template_name'] = $phone_template_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

