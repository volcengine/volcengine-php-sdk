<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PortMappingRuleListForListPodOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PortMappingRuleListForListPodOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'port_mapping_rule_id' => 'string',
        'protocol' => 'string',
        'public_ip' => 'string',
        'public_port' => 'int',
        'public_port_info_list' => '\Volcengine\Acep\Model\PublicPortInfoListForListPodOutput[]',
        'source_port' => 'int',
        'status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'port_mapping_rule_id' => null,
        'protocol' => null,
        'public_ip' => null,
        'public_port' => 'int32',
        'public_port_info_list' => null,
        'source_port' => 'int32',
        'status' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'port_mapping_rule_id' => 'PortMappingRuleId',
        'protocol' => 'Protocol',
        'public_ip' => 'PublicIp',
        'public_port' => 'PublicPort',
        'public_port_info_list' => 'PublicPortInfoList',
        'source_port' => 'SourcePort',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'port_mapping_rule_id' => 'setPortMappingRuleId',
        'protocol' => 'setProtocol',
        'public_ip' => 'setPublicIp',
        'public_port' => 'setPublicPort',
        'public_port_info_list' => 'setPublicPortInfoList',
        'source_port' => 'setSourcePort',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'port_mapping_rule_id' => 'getPortMappingRuleId',
        'protocol' => 'getProtocol',
        'public_ip' => 'getPublicIp',
        'public_port' => 'getPublicPort',
        'public_port_info_list' => 'getPublicPortInfoList',
        'source_port' => 'getSourcePort',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['port_mapping_rule_id'] = isset($data['port_mapping_rule_id']) ? $data['port_mapping_rule_id'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['public_ip'] = isset($data['public_ip']) ? $data['public_ip'] : null;
        $this->container['public_port'] = isset($data['public_port']) ? $data['public_port'] : null;
        $this->container['public_port_info_list'] = isset($data['public_port_info_list']) ? $data['public_port_info_list'] : null;
        $this->container['source_port'] = isset($data['source_port']) ? $data['source_port'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets port_mapping_rule_id
     *
     * @return string
     */
    public function getPortMappingRuleId()
    {
        return $this->container['port_mapping_rule_id'];
    }

    /**
     * Sets port_mapping_rule_id
     *
     * @param string $port_mapping_rule_id port_mapping_rule_id
     *
     * @return $this
     */
    public function setPortMappingRuleId($port_mapping_rule_id)
    {
        $this->container['port_mapping_rule_id'] = $port_mapping_rule_id;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string $public_ip public_ip
     *
     * @return $this
     */
    public function setPublicIp($public_ip)
    {
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets public_port
     *
     * @return int
     */
    public function getPublicPort()
    {
        return $this->container['public_port'];
    }

    /**
     * Sets public_port
     *
     * @param int $public_port public_port
     *
     * @return $this
     */
    public function setPublicPort($public_port)
    {
        $this->container['public_port'] = $public_port;

        return $this;
    }

    /**
     * Gets public_port_info_list
     *
     * @return \Volcengine\Acep\Model\PublicPortInfoListForListPodOutput[]
     */
    public function getPublicPortInfoList()
    {
        return $this->container['public_port_info_list'];
    }

    /**
     * Sets public_port_info_list
     *
     * @param \Volcengine\Acep\Model\PublicPortInfoListForListPodOutput[] $public_port_info_list public_port_info_list
     *
     * @return $this
     */
    public function setPublicPortInfoList($public_port_info_list)
    {
        $this->container['public_port_info_list'] = $public_port_info_list;

        return $this;
    }

    /**
     * Gets source_port
     *
     * @return int
     */
    public function getSourcePort()
    {
        return $this->container['source_port'];
    }

    /**
     * Sets source_port
     *
     * @param int $source_port source_port
     *
     * @return $this
     */
    public function setSourcePort($source_port)
    {
        $this->container['source_port'] = $source_port;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

