<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RowForListBackupDataOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RowForListBackupDataOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aosp_version' => 'string',
        'account_id' => 'string',
        'backup_data_id' => 'string',
        'backup_data_name' => 'string',
        'backup_job_id' => 'string',
        'backup_size' => 'int',
        'backup_task_id' => 'string',
        'backup_type' => 'string',
        'completed_time' => 'int',
        'compression_type' => 'string',
        'created_time' => 'int',
        'data_size' => 'int',
        'description' => 'string',
        'detail' => 'string',
        'expire_time' => 'int',
        'finished_time' => 'int',
        'in_use_count' => 'int',
        'md5_sum' => 'string',
        'product_id' => 'string',
        'restore_count' => 'int',
        'size' => 'int',
        'source_pod_id' => 'string',
        'started_time' => 'int',
        'status' => 'string',
        'storage_resource' => 'string',
        'storage_type' => 'string',
        'updated_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aosp_version' => null,
        'account_id' => null,
        'backup_data_id' => null,
        'backup_data_name' => null,
        'backup_job_id' => null,
        'backup_size' => 'int64',
        'backup_task_id' => null,
        'backup_type' => null,
        'completed_time' => 'int64',
        'compression_type' => null,
        'created_time' => 'int64',
        'data_size' => 'int64',
        'description' => null,
        'detail' => null,
        'expire_time' => 'int64',
        'finished_time' => 'int64',
        'in_use_count' => 'int64',
        'md5_sum' => null,
        'product_id' => null,
        'restore_count' => 'int64',
        'size' => 'int64',
        'source_pod_id' => null,
        'started_time' => 'int64',
        'status' => null,
        'storage_resource' => null,
        'storage_type' => null,
        'updated_time' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aosp_version' => 'AOSPVersion',
        'account_id' => 'AccountId',
        'backup_data_id' => 'BackupDataId',
        'backup_data_name' => 'BackupDataName',
        'backup_job_id' => 'BackupJobId',
        'backup_size' => 'BackupSize',
        'backup_task_id' => 'BackupTaskId',
        'backup_type' => 'BackupType',
        'completed_time' => 'CompletedTime',
        'compression_type' => 'CompressionType',
        'created_time' => 'CreatedTime',
        'data_size' => 'DataSize',
        'description' => 'Description',
        'detail' => 'Detail',
        'expire_time' => 'ExpireTime',
        'finished_time' => 'FinishedTime',
        'in_use_count' => 'InUseCount',
        'md5_sum' => 'Md5Sum',
        'product_id' => 'ProductId',
        'restore_count' => 'RestoreCount',
        'size' => 'Size',
        'source_pod_id' => 'SourcePodId',
        'started_time' => 'StartedTime',
        'status' => 'Status',
        'storage_resource' => 'StorageResource',
        'storage_type' => 'StorageType',
        'updated_time' => 'UpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aosp_version' => 'setAospVersion',
        'account_id' => 'setAccountId',
        'backup_data_id' => 'setBackupDataId',
        'backup_data_name' => 'setBackupDataName',
        'backup_job_id' => 'setBackupJobId',
        'backup_size' => 'setBackupSize',
        'backup_task_id' => 'setBackupTaskId',
        'backup_type' => 'setBackupType',
        'completed_time' => 'setCompletedTime',
        'compression_type' => 'setCompressionType',
        'created_time' => 'setCreatedTime',
        'data_size' => 'setDataSize',
        'description' => 'setDescription',
        'detail' => 'setDetail',
        'expire_time' => 'setExpireTime',
        'finished_time' => 'setFinishedTime',
        'in_use_count' => 'setInUseCount',
        'md5_sum' => 'setMd5Sum',
        'product_id' => 'setProductId',
        'restore_count' => 'setRestoreCount',
        'size' => 'setSize',
        'source_pod_id' => 'setSourcePodId',
        'started_time' => 'setStartedTime',
        'status' => 'setStatus',
        'storage_resource' => 'setStorageResource',
        'storage_type' => 'setStorageType',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aosp_version' => 'getAospVersion',
        'account_id' => 'getAccountId',
        'backup_data_id' => 'getBackupDataId',
        'backup_data_name' => 'getBackupDataName',
        'backup_job_id' => 'getBackupJobId',
        'backup_size' => 'getBackupSize',
        'backup_task_id' => 'getBackupTaskId',
        'backup_type' => 'getBackupType',
        'completed_time' => 'getCompletedTime',
        'compression_type' => 'getCompressionType',
        'created_time' => 'getCreatedTime',
        'data_size' => 'getDataSize',
        'description' => 'getDescription',
        'detail' => 'getDetail',
        'expire_time' => 'getExpireTime',
        'finished_time' => 'getFinishedTime',
        'in_use_count' => 'getInUseCount',
        'md5_sum' => 'getMd5Sum',
        'product_id' => 'getProductId',
        'restore_count' => 'getRestoreCount',
        'size' => 'getSize',
        'source_pod_id' => 'getSourcePodId',
        'started_time' => 'getStartedTime',
        'status' => 'getStatus',
        'storage_resource' => 'getStorageResource',
        'storage_type' => 'getStorageType',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aosp_version'] = isset($data['aosp_version']) ? $data['aosp_version'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['backup_data_id'] = isset($data['backup_data_id']) ? $data['backup_data_id'] : null;
        $this->container['backup_data_name'] = isset($data['backup_data_name']) ? $data['backup_data_name'] : null;
        $this->container['backup_job_id'] = isset($data['backup_job_id']) ? $data['backup_job_id'] : null;
        $this->container['backup_size'] = isset($data['backup_size']) ? $data['backup_size'] : null;
        $this->container['backup_task_id'] = isset($data['backup_task_id']) ? $data['backup_task_id'] : null;
        $this->container['backup_type'] = isset($data['backup_type']) ? $data['backup_type'] : null;
        $this->container['completed_time'] = isset($data['completed_time']) ? $data['completed_time'] : null;
        $this->container['compression_type'] = isset($data['compression_type']) ? $data['compression_type'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['data_size'] = isset($data['data_size']) ? $data['data_size'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['detail'] = isset($data['detail']) ? $data['detail'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['finished_time'] = isset($data['finished_time']) ? $data['finished_time'] : null;
        $this->container['in_use_count'] = isset($data['in_use_count']) ? $data['in_use_count'] : null;
        $this->container['md5_sum'] = isset($data['md5_sum']) ? $data['md5_sum'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['restore_count'] = isset($data['restore_count']) ? $data['restore_count'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['source_pod_id'] = isset($data['source_pod_id']) ? $data['source_pod_id'] : null;
        $this->container['started_time'] = isset($data['started_time']) ? $data['started_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['storage_resource'] = isset($data['storage_resource']) ? $data['storage_resource'] : null;
        $this->container['storage_type'] = isset($data['storage_type']) ? $data['storage_type'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aosp_version
     *
     * @return string
     */
    public function getAospVersion()
    {
        return $this->container['aosp_version'];
    }

    /**
     * Sets aosp_version
     *
     * @param string $aosp_version aosp_version
     *
     * @return $this
     */
    public function setAospVersion($aosp_version)
    {
        $this->container['aosp_version'] = $aosp_version;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets backup_data_id
     *
     * @return string
     */
    public function getBackupDataId()
    {
        return $this->container['backup_data_id'];
    }

    /**
     * Sets backup_data_id
     *
     * @param string $backup_data_id backup_data_id
     *
     * @return $this
     */
    public function setBackupDataId($backup_data_id)
    {
        $this->container['backup_data_id'] = $backup_data_id;

        return $this;
    }

    /**
     * Gets backup_data_name
     *
     * @return string
     */
    public function getBackupDataName()
    {
        return $this->container['backup_data_name'];
    }

    /**
     * Sets backup_data_name
     *
     * @param string $backup_data_name backup_data_name
     *
     * @return $this
     */
    public function setBackupDataName($backup_data_name)
    {
        $this->container['backup_data_name'] = $backup_data_name;

        return $this;
    }

    /**
     * Gets backup_job_id
     *
     * @return string
     */
    public function getBackupJobId()
    {
        return $this->container['backup_job_id'];
    }

    /**
     * Sets backup_job_id
     *
     * @param string $backup_job_id backup_job_id
     *
     * @return $this
     */
    public function setBackupJobId($backup_job_id)
    {
        $this->container['backup_job_id'] = $backup_job_id;

        return $this;
    }

    /**
     * Gets backup_size
     *
     * @return int
     */
    public function getBackupSize()
    {
        return $this->container['backup_size'];
    }

    /**
     * Sets backup_size
     *
     * @param int $backup_size backup_size
     *
     * @return $this
     */
    public function setBackupSize($backup_size)
    {
        $this->container['backup_size'] = $backup_size;

        return $this;
    }

    /**
     * Gets backup_task_id
     *
     * @return string
     */
    public function getBackupTaskId()
    {
        return $this->container['backup_task_id'];
    }

    /**
     * Sets backup_task_id
     *
     * @param string $backup_task_id backup_task_id
     *
     * @return $this
     */
    public function setBackupTaskId($backup_task_id)
    {
        $this->container['backup_task_id'] = $backup_task_id;

        return $this;
    }

    /**
     * Gets backup_type
     *
     * @return string
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param string $backup_type backup_type
     *
     * @return $this
     */
    public function setBackupType($backup_type)
    {
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets completed_time
     *
     * @return int
     */
    public function getCompletedTime()
    {
        return $this->container['completed_time'];
    }

    /**
     * Sets completed_time
     *
     * @param int $completed_time completed_time
     *
     * @return $this
     */
    public function setCompletedTime($completed_time)
    {
        $this->container['completed_time'] = $completed_time;

        return $this;
    }

    /**
     * Gets compression_type
     *
     * @return string
     */
    public function getCompressionType()
    {
        return $this->container['compression_type'];
    }

    /**
     * Sets compression_type
     *
     * @param string $compression_type compression_type
     *
     * @return $this
     */
    public function setCompressionType($compression_type)
    {
        $this->container['compression_type'] = $compression_type;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return int
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param int $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets data_size
     *
     * @return int
     */
    public function getDataSize()
    {
        return $this->container['data_size'];
    }

    /**
     * Sets data_size
     *
     * @param int $data_size data_size
     *
     * @return $this
     */
    public function setDataSize($data_size)
    {
        $this->container['data_size'] = $data_size;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets detail
     *
     * @return string
     */
    public function getDetail()
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     *
     * @param string $detail detail
     *
     * @return $this
     */
    public function setDetail($detail)
    {
        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return int
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param int $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets finished_time
     *
     * @return int
     */
    public function getFinishedTime()
    {
        return $this->container['finished_time'];
    }

    /**
     * Sets finished_time
     *
     * @param int $finished_time finished_time
     *
     * @return $this
     */
    public function setFinishedTime($finished_time)
    {
        $this->container['finished_time'] = $finished_time;

        return $this;
    }

    /**
     * Gets in_use_count
     *
     * @return int
     */
    public function getInUseCount()
    {
        return $this->container['in_use_count'];
    }

    /**
     * Sets in_use_count
     *
     * @param int $in_use_count in_use_count
     *
     * @return $this
     */
    public function setInUseCount($in_use_count)
    {
        $this->container['in_use_count'] = $in_use_count;

        return $this;
    }

    /**
     * Gets md5_sum
     *
     * @return string
     */
    public function getMd5Sum()
    {
        return $this->container['md5_sum'];
    }

    /**
     * Sets md5_sum
     *
     * @param string $md5_sum md5_sum
     *
     * @return $this
     */
    public function setMd5Sum($md5_sum)
    {
        $this->container['md5_sum'] = $md5_sum;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets restore_count
     *
     * @return int
     */
    public function getRestoreCount()
    {
        return $this->container['restore_count'];
    }

    /**
     * Sets restore_count
     *
     * @param int $restore_count restore_count
     *
     * @return $this
     */
    public function setRestoreCount($restore_count)
    {
        $this->container['restore_count'] = $restore_count;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets source_pod_id
     *
     * @return string
     */
    public function getSourcePodId()
    {
        return $this->container['source_pod_id'];
    }

    /**
     * Sets source_pod_id
     *
     * @param string $source_pod_id source_pod_id
     *
     * @return $this
     */
    public function setSourcePodId($source_pod_id)
    {
        $this->container['source_pod_id'] = $source_pod_id;

        return $this;
    }

    /**
     * Gets started_time
     *
     * @return int
     */
    public function getStartedTime()
    {
        return $this->container['started_time'];
    }

    /**
     * Sets started_time
     *
     * @param int $started_time started_time
     *
     * @return $this
     */
    public function setStartedTime($started_time)
    {
        $this->container['started_time'] = $started_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storage_resource
     *
     * @return string
     */
    public function getStorageResource()
    {
        return $this->container['storage_resource'];
    }

    /**
     * Sets storage_resource
     *
     * @param string $storage_resource storage_resource
     *
     * @return $this
     */
    public function setStorageResource($storage_resource)
    {
        $this->container['storage_resource'] = $storage_resource;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string $storage_type storage_type
     *
     * @return $this
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return int
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param int $updated_time updated_time
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

