<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AddCustomRouteRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddCustomRouteRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_route_name' => 'string',
        'dst_ip' => 'string',
        'product_id' => 'string',
        'proxy_cipher' => 'string',
        'proxy_password' => 'string',
        'proxy_port' => 'int',
        'proxy_protocol' => 'string',
        'proxy_user_name' => 'string',
        'zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_route_name' => null,
        'dst_ip' => null,
        'product_id' => null,
        'proxy_cipher' => null,
        'proxy_password' => null,
        'proxy_port' => 'int32',
        'proxy_protocol' => null,
        'proxy_user_name' => null,
        'zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_route_name' => 'CustomRouteName',
        'dst_ip' => 'DstIP',
        'product_id' => 'ProductId',
        'proxy_cipher' => 'ProxyCipher',
        'proxy_password' => 'ProxyPassword',
        'proxy_port' => 'ProxyPort',
        'proxy_protocol' => 'ProxyProtocol',
        'proxy_user_name' => 'ProxyUserName',
        'zone' => 'Zone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_route_name' => 'setCustomRouteName',
        'dst_ip' => 'setDstIp',
        'product_id' => 'setProductId',
        'proxy_cipher' => 'setProxyCipher',
        'proxy_password' => 'setProxyPassword',
        'proxy_port' => 'setProxyPort',
        'proxy_protocol' => 'setProxyProtocol',
        'proxy_user_name' => 'setProxyUserName',
        'zone' => 'setZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_route_name' => 'getCustomRouteName',
        'dst_ip' => 'getDstIp',
        'product_id' => 'getProductId',
        'proxy_cipher' => 'getProxyCipher',
        'proxy_password' => 'getProxyPassword',
        'proxy_port' => 'getProxyPort',
        'proxy_protocol' => 'getProxyProtocol',
        'proxy_user_name' => 'getProxyUserName',
        'zone' => 'getZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_route_name'] = isset($data['custom_route_name']) ? $data['custom_route_name'] : null;
        $this->container['dst_ip'] = isset($data['dst_ip']) ? $data['dst_ip'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['proxy_cipher'] = isset($data['proxy_cipher']) ? $data['proxy_cipher'] : null;
        $this->container['proxy_password'] = isset($data['proxy_password']) ? $data['proxy_password'] : null;
        $this->container['proxy_port'] = isset($data['proxy_port']) ? $data['proxy_port'] : null;
        $this->container['proxy_protocol'] = isset($data['proxy_protocol']) ? $data['proxy_protocol'] : null;
        $this->container['proxy_user_name'] = isset($data['proxy_user_name']) ? $data['proxy_user_name'] : null;
        $this->container['zone'] = isset($data['zone']) ? $data['zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dst_ip'] === null) {
            $invalidProperties[] = "'dst_ip' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['proxy_port'] === null) {
            $invalidProperties[] = "'proxy_port' can't be null";
        }
        if ($this->container['proxy_protocol'] === null) {
            $invalidProperties[] = "'proxy_protocol' can't be null";
        }
        if ($this->container['zone'] === null) {
            $invalidProperties[] = "'zone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_route_name
     *
     * @return string
     */
    public function getCustomRouteName()
    {
        return $this->container['custom_route_name'];
    }

    /**
     * Sets custom_route_name
     *
     * @param string $custom_route_name custom_route_name
     *
     * @return $this
     */
    public function setCustomRouteName($custom_route_name)
    {
        $this->container['custom_route_name'] = $custom_route_name;

        return $this;
    }

    /**
     * Gets dst_ip
     *
     * @return string
     */
    public function getDstIp()
    {
        return $this->container['dst_ip'];
    }

    /**
     * Sets dst_ip
     *
     * @param string $dst_ip dst_ip
     *
     * @return $this
     */
    public function setDstIp($dst_ip)
    {
        $this->container['dst_ip'] = $dst_ip;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets proxy_cipher
     *
     * @return string
     */
    public function getProxyCipher()
    {
        return $this->container['proxy_cipher'];
    }

    /**
     * Sets proxy_cipher
     *
     * @param string $proxy_cipher proxy_cipher
     *
     * @return $this
     */
    public function setProxyCipher($proxy_cipher)
    {
        $this->container['proxy_cipher'] = $proxy_cipher;

        return $this;
    }

    /**
     * Gets proxy_password
     *
     * @return string
     */
    public function getProxyPassword()
    {
        return $this->container['proxy_password'];
    }

    /**
     * Sets proxy_password
     *
     * @param string $proxy_password proxy_password
     *
     * @return $this
     */
    public function setProxyPassword($proxy_password)
    {
        $this->container['proxy_password'] = $proxy_password;

        return $this;
    }

    /**
     * Gets proxy_port
     *
     * @return int
     */
    public function getProxyPort()
    {
        return $this->container['proxy_port'];
    }

    /**
     * Sets proxy_port
     *
     * @param int $proxy_port proxy_port
     *
     * @return $this
     */
    public function setProxyPort($proxy_port)
    {
        $this->container['proxy_port'] = $proxy_port;

        return $this;
    }

    /**
     * Gets proxy_protocol
     *
     * @return string
     */
    public function getProxyProtocol()
    {
        return $this->container['proxy_protocol'];
    }

    /**
     * Sets proxy_protocol
     *
     * @param string $proxy_protocol proxy_protocol
     *
     * @return $this
     */
    public function setProxyProtocol($proxy_protocol)
    {
        $this->container['proxy_protocol'] = $proxy_protocol;

        return $this;
    }

    /**
     * Gets proxy_user_name
     *
     * @return string
     */
    public function getProxyUserName()
    {
        return $this->container['proxy_user_name'];
    }

    /**
     * Sets proxy_user_name
     *
     * @param string $proxy_user_name proxy_user_name
     *
     * @return $this
     */
    public function setProxyUserName($proxy_user_name)
    {
        $this->container['proxy_user_name'] = $proxy_user_name;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return string
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param string $zone zone
     *
     * @return $this
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

