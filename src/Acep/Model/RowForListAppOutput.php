<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RowForListAppOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RowForListAppOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_desc' => 'string',
        'app_id' => 'string',
        'app_mode' => 'string',
        'app_name' => 'string',
        'app_status' => 'int',
        'app_type' => 'int',
        'apply_num' => 'int',
        'deploy_status' => 'int',
        'deploy_version_num' => 'int',
        'icon_url' => 'string',
        'latest_version' => '\Volcengine\Acep\Model\LatestVersionForListAppOutput',
        'package_name' => 'string',
        'product_id' => 'string',
        'ready_num' => 'int',
        'rotation' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_desc' => null,
        'app_id' => null,
        'app_mode' => null,
        'app_name' => null,
        'app_status' => 'int32',
        'app_type' => 'int32',
        'apply_num' => 'int64',
        'deploy_status' => 'int32',
        'deploy_version_num' => 'int64',
        'icon_url' => null,
        'latest_version' => null,
        'package_name' => null,
        'product_id' => null,
        'ready_num' => 'int64',
        'rotation' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_desc' => 'AppDesc',
        'app_id' => 'AppId',
        'app_mode' => 'AppMode',
        'app_name' => 'AppName',
        'app_status' => 'AppStatus',
        'app_type' => 'AppType',
        'apply_num' => 'ApplyNum',
        'deploy_status' => 'DeployStatus',
        'deploy_version_num' => 'DeployVersionNum',
        'icon_url' => 'IconUrl',
        'latest_version' => 'LatestVersion',
        'package_name' => 'PackageName',
        'product_id' => 'ProductId',
        'ready_num' => 'ReadyNum',
        'rotation' => 'Rotation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_desc' => 'setAppDesc',
        'app_id' => 'setAppId',
        'app_mode' => 'setAppMode',
        'app_name' => 'setAppName',
        'app_status' => 'setAppStatus',
        'app_type' => 'setAppType',
        'apply_num' => 'setApplyNum',
        'deploy_status' => 'setDeployStatus',
        'deploy_version_num' => 'setDeployVersionNum',
        'icon_url' => 'setIconUrl',
        'latest_version' => 'setLatestVersion',
        'package_name' => 'setPackageName',
        'product_id' => 'setProductId',
        'ready_num' => 'setReadyNum',
        'rotation' => 'setRotation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_desc' => 'getAppDesc',
        'app_id' => 'getAppId',
        'app_mode' => 'getAppMode',
        'app_name' => 'getAppName',
        'app_status' => 'getAppStatus',
        'app_type' => 'getAppType',
        'apply_num' => 'getApplyNum',
        'deploy_status' => 'getDeployStatus',
        'deploy_version_num' => 'getDeployVersionNum',
        'icon_url' => 'getIconUrl',
        'latest_version' => 'getLatestVersion',
        'package_name' => 'getPackageName',
        'product_id' => 'getProductId',
        'ready_num' => 'getReadyNum',
        'rotation' => 'getRotation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_desc'] = isset($data['app_desc']) ? $data['app_desc'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['app_mode'] = isset($data['app_mode']) ? $data['app_mode'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['app_status'] = isset($data['app_status']) ? $data['app_status'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['apply_num'] = isset($data['apply_num']) ? $data['apply_num'] : null;
        $this->container['deploy_status'] = isset($data['deploy_status']) ? $data['deploy_status'] : null;
        $this->container['deploy_version_num'] = isset($data['deploy_version_num']) ? $data['deploy_version_num'] : null;
        $this->container['icon_url'] = isset($data['icon_url']) ? $data['icon_url'] : null;
        $this->container['latest_version'] = isset($data['latest_version']) ? $data['latest_version'] : null;
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['ready_num'] = isset($data['ready_num']) ? $data['ready_num'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_desc
     *
     * @return string
     */
    public function getAppDesc()
    {
        return $this->container['app_desc'];
    }

    /**
     * Sets app_desc
     *
     * @param string $app_desc app_desc
     *
     * @return $this
     */
    public function setAppDesc($app_desc)
    {
        $this->container['app_desc'] = $app_desc;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_mode
     *
     * @return string
     */
    public function getAppMode()
    {
        return $this->container['app_mode'];
    }

    /**
     * Sets app_mode
     *
     * @param string $app_mode app_mode
     *
     * @return $this
     */
    public function setAppMode($app_mode)
    {
        $this->container['app_mode'] = $app_mode;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name app_name
     *
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_status
     *
     * @return int
     */
    public function getAppStatus()
    {
        return $this->container['app_status'];
    }

    /**
     * Sets app_status
     *
     * @param int $app_status app_status
     *
     * @return $this
     */
    public function setAppStatus($app_status)
    {
        $this->container['app_status'] = $app_status;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return int
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param int $app_type app_type
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets apply_num
     *
     * @return int
     */
    public function getApplyNum()
    {
        return $this->container['apply_num'];
    }

    /**
     * Sets apply_num
     *
     * @param int $apply_num apply_num
     *
     * @return $this
     */
    public function setApplyNum($apply_num)
    {
        $this->container['apply_num'] = $apply_num;

        return $this;
    }

    /**
     * Gets deploy_status
     *
     * @return int
     */
    public function getDeployStatus()
    {
        return $this->container['deploy_status'];
    }

    /**
     * Sets deploy_status
     *
     * @param int $deploy_status deploy_status
     *
     * @return $this
     */
    public function setDeployStatus($deploy_status)
    {
        $this->container['deploy_status'] = $deploy_status;

        return $this;
    }

    /**
     * Gets deploy_version_num
     *
     * @return int
     */
    public function getDeployVersionNum()
    {
        return $this->container['deploy_version_num'];
    }

    /**
     * Sets deploy_version_num
     *
     * @param int $deploy_version_num deploy_version_num
     *
     * @return $this
     */
    public function setDeployVersionNum($deploy_version_num)
    {
        $this->container['deploy_version_num'] = $deploy_version_num;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string $icon_url icon_url
     *
     * @return $this
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets latest_version
     *
     * @return \Volcengine\Acep\Model\LatestVersionForListAppOutput
     */
    public function getLatestVersion()
    {
        return $this->container['latest_version'];
    }

    /**
     * Sets latest_version
     *
     * @param \Volcengine\Acep\Model\LatestVersionForListAppOutput $latest_version latest_version
     *
     * @return $this
     */
    public function setLatestVersion($latest_version)
    {
        $this->container['latest_version'] = $latest_version;

        return $this;
    }

    /**
     * Gets package_name
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     *
     * @param string $package_name package_name
     *
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets ready_num
     *
     * @return int
     */
    public function getReadyNum()
    {
        return $this->container['ready_num'];
    }

    /**
     * Sets ready_num
     *
     * @param int $ready_num ready_num
     *
     * @return $this
     */
    public function setReadyNum($ready_num)
    {
        $this->container['ready_num'] = $ready_num;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return int
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param int $rotation rotation
     *
     * @return $this
     */
    public function setRotation($rotation)
    {
        $this->container['rotation'] = $rotation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

