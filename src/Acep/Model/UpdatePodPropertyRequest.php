<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdatePodPropertyRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdatePodPropertyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'phone_template_id' => 'string',
        'pod_id' => 'string',
        'pod_id_list' => 'string[]',
        'pod_persist_properties' => '\Volcengine\Acep\Model\PodPersistPropertyForUpdatePodPropertyInput[]',
        'pod_properties' => '\Volcengine\Acep\Model\PodPropertyForUpdatePodPropertyInput[]',
        'pod_settings' => '\Volcengine\Acep\Model\PodSettingForUpdatePodPropertyInput[]',
        'product_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'phone_template_id' => null,
        'pod_id' => null,
        'pod_id_list' => null,
        'pod_persist_properties' => null,
        'pod_properties' => null,
        'pod_settings' => null,
        'product_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone_template_id' => 'PhoneTemplateId',
        'pod_id' => 'PodId',
        'pod_id_list' => 'PodIdList',
        'pod_persist_properties' => 'PodPersistProperties',
        'pod_properties' => 'PodProperties',
        'pod_settings' => 'PodSettings',
        'product_id' => 'ProductId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone_template_id' => 'setPhoneTemplateId',
        'pod_id' => 'setPodId',
        'pod_id_list' => 'setPodIdList',
        'pod_persist_properties' => 'setPodPersistProperties',
        'pod_properties' => 'setPodProperties',
        'pod_settings' => 'setPodSettings',
        'product_id' => 'setProductId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone_template_id' => 'getPhoneTemplateId',
        'pod_id' => 'getPodId',
        'pod_id_list' => 'getPodIdList',
        'pod_persist_properties' => 'getPodPersistProperties',
        'pod_properties' => 'getPodProperties',
        'pod_settings' => 'getPodSettings',
        'product_id' => 'getProductId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone_template_id'] = isset($data['phone_template_id']) ? $data['phone_template_id'] : null;
        $this->container['pod_id'] = isset($data['pod_id']) ? $data['pod_id'] : null;
        $this->container['pod_id_list'] = isset($data['pod_id_list']) ? $data['pod_id_list'] : null;
        $this->container['pod_persist_properties'] = isset($data['pod_persist_properties']) ? $data['pod_persist_properties'] : null;
        $this->container['pod_properties'] = isset($data['pod_properties']) ? $data['pod_properties'] : null;
        $this->container['pod_settings'] = isset($data['pod_settings']) ? $data['pod_settings'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone_template_id
     *
     * @return string
     */
    public function getPhoneTemplateId()
    {
        return $this->container['phone_template_id'];
    }

    /**
     * Sets phone_template_id
     *
     * @param string $phone_template_id phone_template_id
     *
     * @return $this
     */
    public function setPhoneTemplateId($phone_template_id)
    {
        $this->container['phone_template_id'] = $phone_template_id;

        return $this;
    }

    /**
     * Gets pod_id
     *
     * @return string
     */
    public function getPodId()
    {
        return $this->container['pod_id'];
    }

    /**
     * Sets pod_id
     *
     * @param string $pod_id pod_id
     *
     * @return $this
     */
    public function setPodId($pod_id)
    {
        $this->container['pod_id'] = $pod_id;

        return $this;
    }

    /**
     * Gets pod_id_list
     *
     * @return string[]
     */
    public function getPodIdList()
    {
        return $this->container['pod_id_list'];
    }

    /**
     * Sets pod_id_list
     *
     * @param string[] $pod_id_list pod_id_list
     *
     * @return $this
     */
    public function setPodIdList($pod_id_list)
    {
        $this->container['pod_id_list'] = $pod_id_list;

        return $this;
    }

    /**
     * Gets pod_persist_properties
     *
     * @return \Volcengine\Acep\Model\PodPersistPropertyForUpdatePodPropertyInput[]
     */
    public function getPodPersistProperties()
    {
        return $this->container['pod_persist_properties'];
    }

    /**
     * Sets pod_persist_properties
     *
     * @param \Volcengine\Acep\Model\PodPersistPropertyForUpdatePodPropertyInput[] $pod_persist_properties pod_persist_properties
     *
     * @return $this
     */
    public function setPodPersistProperties($pod_persist_properties)
    {
        $this->container['pod_persist_properties'] = $pod_persist_properties;

        return $this;
    }

    /**
     * Gets pod_properties
     *
     * @return \Volcengine\Acep\Model\PodPropertyForUpdatePodPropertyInput[]
     */
    public function getPodProperties()
    {
        return $this->container['pod_properties'];
    }

    /**
     * Sets pod_properties
     *
     * @param \Volcengine\Acep\Model\PodPropertyForUpdatePodPropertyInput[] $pod_properties pod_properties
     *
     * @return $this
     */
    public function setPodProperties($pod_properties)
    {
        $this->container['pod_properties'] = $pod_properties;

        return $this;
    }

    /**
     * Gets pod_settings
     *
     * @return \Volcengine\Acep\Model\PodSettingForUpdatePodPropertyInput[]
     */
    public function getPodSettings()
    {
        return $this->container['pod_settings'];
    }

    /**
     * Sets pod_settings
     *
     * @param \Volcengine\Acep\Model\PodSettingForUpdatePodPropertyInput[] $pod_settings pod_settings
     *
     * @return $this
     */
    public function setPodSettings($pod_settings)
    {
        $this->container['pod_settings'] = $pod_settings;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

