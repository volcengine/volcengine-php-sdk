<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class StartScreenShotRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StartScreenShotRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duration_limit' => 'int',
        'file_type' => 'string',
        'interval' => 'int',
        'pod_id_list' => 'string[]',
        'product_id' => 'string',
        'quality' => 'int',
        'rotation' => 'int',
        'scale' => 'double',
        'tos_info' => '\Volcengine\Acep\Model\TosInfoForStartScreenShotInput',
        'upload_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duration_limit' => 'int32',
        'file_type' => null,
        'interval' => 'int32',
        'pod_id_list' => null,
        'product_id' => null,
        'quality' => 'int32',
        'rotation' => 'int32',
        'scale' => 'double',
        'tos_info' => null,
        'upload_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration_limit' => 'DurationLimit',
        'file_type' => 'FileType',
        'interval' => 'Interval',
        'pod_id_list' => 'PodIdList',
        'product_id' => 'ProductId',
        'quality' => 'Quality',
        'rotation' => 'Rotation',
        'scale' => 'Scale',
        'tos_info' => 'TosInfo',
        'upload_type' => 'UploadType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration_limit' => 'setDurationLimit',
        'file_type' => 'setFileType',
        'interval' => 'setInterval',
        'pod_id_list' => 'setPodIdList',
        'product_id' => 'setProductId',
        'quality' => 'setQuality',
        'rotation' => 'setRotation',
        'scale' => 'setScale',
        'tos_info' => 'setTosInfo',
        'upload_type' => 'setUploadType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration_limit' => 'getDurationLimit',
        'file_type' => 'getFileType',
        'interval' => 'getInterval',
        'pod_id_list' => 'getPodIdList',
        'product_id' => 'getProductId',
        'quality' => 'getQuality',
        'rotation' => 'getRotation',
        'scale' => 'getScale',
        'tos_info' => 'getTosInfo',
        'upload_type' => 'getUploadType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duration_limit'] = isset($data['duration_limit']) ? $data['duration_limit'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['pod_id_list'] = isset($data['pod_id_list']) ? $data['pod_id_list'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : null;
        $this->container['tos_info'] = isset($data['tos_info']) ? $data['tos_info'] : null;
        $this->container['upload_type'] = isset($data['upload_type']) ? $data['upload_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration_limit
     *
     * @return int
     */
    public function getDurationLimit()
    {
        return $this->container['duration_limit'];
    }

    /**
     * Sets duration_limit
     *
     * @param int $duration_limit duration_limit
     *
     * @return $this
     */
    public function setDurationLimit($duration_limit)
    {
        $this->container['duration_limit'] = $duration_limit;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type file_type
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets pod_id_list
     *
     * @return string[]
     */
    public function getPodIdList()
    {
        return $this->container['pod_id_list'];
    }

    /**
     * Sets pod_id_list
     *
     * @param string[] $pod_id_list pod_id_list
     *
     * @return $this
     */
    public function setPodIdList($pod_id_list)
    {
        $this->container['pod_id_list'] = $pod_id_list;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return int
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param int $quality quality
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return int
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param int $rotation rotation
     *
     * @return $this
     */
    public function setRotation($rotation)
    {
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return double
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param double $scale scale
     *
     * @return $this
     */
    public function setScale($scale)
    {
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets tos_info
     *
     * @return \Volcengine\Acep\Model\TosInfoForStartScreenShotInput
     */
    public function getTosInfo()
    {
        return $this->container['tos_info'];
    }

    /**
     * Sets tos_info
     *
     * @param \Volcengine\Acep\Model\TosInfoForStartScreenShotInput $tos_info tos_info
     *
     * @return $this
     */
    public function setTosInfo($tos_info)
    {
        $this->container['tos_info'] = $tos_info;

        return $this;
    }

    /**
     * Gets upload_type
     *
     * @return int
     */
    public function getUploadType()
    {
        return $this->container['upload_type'];
    }

    /**
     * Sets upload_type
     *
     * @param int $upload_type upload_type
     *
     * @return $this
     */
    public function setUploadType($upload_type)
    {
        $this->container['upload_type'] = $upload_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

