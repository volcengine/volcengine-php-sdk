<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListPodRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListPodRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'archive_status' => 'string',
        'authority_status' => 'int',
        'configuration_code_list' => 'string[]',
        'dnsid' => 'string',
        'dc_list' => 'string[]',
        'host_id' => 'string',
        'max_results' => 'int',
        'next_token' => 'string',
        'online_list' => 'int[]',
        'pod_id_list' => 'string[]',
        'pod_name' => 'string',
        'product_id' => 'string',
        'region_list' => 'string[]',
        'server_type_code' => 'string',
        'stream_status_list' => 'int[]',
        'tag_id_list' => 'string[]',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'archive_status' => null,
        'authority_status' => 'int32',
        'configuration_code_list' => null,
        'dnsid' => null,
        'dc_list' => null,
        'host_id' => null,
        'max_results' => 'int32',
        'next_token' => null,
        'online_list' => 'int32',
        'pod_id_list' => null,
        'pod_name' => null,
        'product_id' => null,
        'region_list' => null,
        'server_type_code' => null,
        'stream_status_list' => 'int32',
        'tag_id_list' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archive_status' => 'ArchiveStatus',
        'authority_status' => 'AuthorityStatus',
        'configuration_code_list' => 'ConfigurationCodeList',
        'dnsid' => 'DNSId',
        'dc_list' => 'DcList',
        'host_id' => 'HostId',
        'max_results' => 'MaxResults',
        'next_token' => 'NextToken',
        'online_list' => 'OnlineList',
        'pod_id_list' => 'PodIdList',
        'pod_name' => 'PodName',
        'product_id' => 'ProductId',
        'region_list' => 'RegionList',
        'server_type_code' => 'ServerTypeCode',
        'stream_status_list' => 'StreamStatusList',
        'tag_id_list' => 'TagIdList',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archive_status' => 'setArchiveStatus',
        'authority_status' => 'setAuthorityStatus',
        'configuration_code_list' => 'setConfigurationCodeList',
        'dnsid' => 'setDnsid',
        'dc_list' => 'setDcList',
        'host_id' => 'setHostId',
        'max_results' => 'setMaxResults',
        'next_token' => 'setNextToken',
        'online_list' => 'setOnlineList',
        'pod_id_list' => 'setPodIdList',
        'pod_name' => 'setPodName',
        'product_id' => 'setProductId',
        'region_list' => 'setRegionList',
        'server_type_code' => 'setServerTypeCode',
        'stream_status_list' => 'setStreamStatusList',
        'tag_id_list' => 'setTagIdList',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archive_status' => 'getArchiveStatus',
        'authority_status' => 'getAuthorityStatus',
        'configuration_code_list' => 'getConfigurationCodeList',
        'dnsid' => 'getDnsid',
        'dc_list' => 'getDcList',
        'host_id' => 'getHostId',
        'max_results' => 'getMaxResults',
        'next_token' => 'getNextToken',
        'online_list' => 'getOnlineList',
        'pod_id_list' => 'getPodIdList',
        'pod_name' => 'getPodName',
        'product_id' => 'getProductId',
        'region_list' => 'getRegionList',
        'server_type_code' => 'getServerTypeCode',
        'stream_status_list' => 'getStreamStatusList',
        'tag_id_list' => 'getTagIdList',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['archive_status'] = isset($data['archive_status']) ? $data['archive_status'] : null;
        $this->container['authority_status'] = isset($data['authority_status']) ? $data['authority_status'] : null;
        $this->container['configuration_code_list'] = isset($data['configuration_code_list']) ? $data['configuration_code_list'] : null;
        $this->container['dnsid'] = isset($data['dnsid']) ? $data['dnsid'] : null;
        $this->container['dc_list'] = isset($data['dc_list']) ? $data['dc_list'] : null;
        $this->container['host_id'] = isset($data['host_id']) ? $data['host_id'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['online_list'] = isset($data['online_list']) ? $data['online_list'] : null;
        $this->container['pod_id_list'] = isset($data['pod_id_list']) ? $data['pod_id_list'] : null;
        $this->container['pod_name'] = isset($data['pod_name']) ? $data['pod_name'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['region_list'] = isset($data['region_list']) ? $data['region_list'] : null;
        $this->container['server_type_code'] = isset($data['server_type_code']) ? $data['server_type_code'] : null;
        $this->container['stream_status_list'] = isset($data['stream_status_list']) ? $data['stream_status_list'] : null;
        $this->container['tag_id_list'] = isset($data['tag_id_list']) ? $data['tag_id_list'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archive_status
     *
     * @return string
     */
    public function getArchiveStatus()
    {
        return $this->container['archive_status'];
    }

    /**
     * Sets archive_status
     *
     * @param string $archive_status archive_status
     *
     * @return $this
     */
    public function setArchiveStatus($archive_status)
    {
        $this->container['archive_status'] = $archive_status;

        return $this;
    }

    /**
     * Gets authority_status
     *
     * @return int
     */
    public function getAuthorityStatus()
    {
        return $this->container['authority_status'];
    }

    /**
     * Sets authority_status
     *
     * @param int $authority_status authority_status
     *
     * @return $this
     */
    public function setAuthorityStatus($authority_status)
    {
        $this->container['authority_status'] = $authority_status;

        return $this;
    }

    /**
     * Gets configuration_code_list
     *
     * @return string[]
     */
    public function getConfigurationCodeList()
    {
        return $this->container['configuration_code_list'];
    }

    /**
     * Sets configuration_code_list
     *
     * @param string[] $configuration_code_list configuration_code_list
     *
     * @return $this
     */
    public function setConfigurationCodeList($configuration_code_list)
    {
        $this->container['configuration_code_list'] = $configuration_code_list;

        return $this;
    }

    /**
     * Gets dnsid
     *
     * @return string
     */
    public function getDnsid()
    {
        return $this->container['dnsid'];
    }

    /**
     * Sets dnsid
     *
     * @param string $dnsid dnsid
     *
     * @return $this
     */
    public function setDnsid($dnsid)
    {
        $this->container['dnsid'] = $dnsid;

        return $this;
    }

    /**
     * Gets dc_list
     *
     * @return string[]
     */
    public function getDcList()
    {
        return $this->container['dc_list'];
    }

    /**
     * Sets dc_list
     *
     * @param string[] $dc_list dc_list
     *
     * @return $this
     */
    public function setDcList($dc_list)
    {
        $this->container['dc_list'] = $dc_list;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string $host_id host_id
     *
     * @return $this
     */
    public function setHostId($host_id)
    {
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets online_list
     *
     * @return int[]
     */
    public function getOnlineList()
    {
        return $this->container['online_list'];
    }

    /**
     * Sets online_list
     *
     * @param int[] $online_list online_list
     *
     * @return $this
     */
    public function setOnlineList($online_list)
    {
        $this->container['online_list'] = $online_list;

        return $this;
    }

    /**
     * Gets pod_id_list
     *
     * @return string[]
     */
    public function getPodIdList()
    {
        return $this->container['pod_id_list'];
    }

    /**
     * Sets pod_id_list
     *
     * @param string[] $pod_id_list pod_id_list
     *
     * @return $this
     */
    public function setPodIdList($pod_id_list)
    {
        $this->container['pod_id_list'] = $pod_id_list;

        return $this;
    }

    /**
     * Gets pod_name
     *
     * @return string
     */
    public function getPodName()
    {
        return $this->container['pod_name'];
    }

    /**
     * Sets pod_name
     *
     * @param string $pod_name pod_name
     *
     * @return $this
     */
    public function setPodName($pod_name)
    {
        $this->container['pod_name'] = $pod_name;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets region_list
     *
     * @return string[]
     */
    public function getRegionList()
    {
        return $this->container['region_list'];
    }

    /**
     * Sets region_list
     *
     * @param string[] $region_list region_list
     *
     * @return $this
     */
    public function setRegionList($region_list)
    {
        $this->container['region_list'] = $region_list;

        return $this;
    }

    /**
     * Gets server_type_code
     *
     * @return string
     */
    public function getServerTypeCode()
    {
        return $this->container['server_type_code'];
    }

    /**
     * Sets server_type_code
     *
     * @param string $server_type_code server_type_code
     *
     * @return $this
     */
    public function setServerTypeCode($server_type_code)
    {
        $this->container['server_type_code'] = $server_type_code;

        return $this;
    }

    /**
     * Gets stream_status_list
     *
     * @return int[]
     */
    public function getStreamStatusList()
    {
        return $this->container['stream_status_list'];
    }

    /**
     * Sets stream_status_list
     *
     * @param int[] $stream_status_list stream_status_list
     *
     * @return $this
     */
    public function setStreamStatusList($stream_status_list)
    {
        $this->container['stream_status_list'] = $stream_status_list;

        return $this;
    }

    /**
     * Gets tag_id_list
     *
     * @return string[]
     */
    public function getTagIdList()
    {
        return $this->container['tag_id_list'];
    }

    /**
     * Sets tag_id_list
     *
     * @param string[] $tag_id_list tag_id_list
     *
     * @return $this
     */
    public function setTagIdList($tag_id_list)
    {
        $this->container['tag_id_list'] = $tag_id_list;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

