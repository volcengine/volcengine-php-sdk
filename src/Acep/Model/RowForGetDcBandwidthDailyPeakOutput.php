<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Acep\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RowForGetDcBandwidthDailyPeakOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RowForGetDcBandwidthDailyPeakOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'date' => 'string',
        'dc_id' => 'string',
        'down_peak_bandwidth' => 'double',
        'product_id' => 'string',
        'up_peak_bandwidth' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'date' => null,
        'dc_id' => null,
        'down_peak_bandwidth' => 'double',
        'product_id' => null,
        'up_peak_bandwidth' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'date' => 'Date',
        'dc_id' => 'DcId',
        'down_peak_bandwidth' => 'DownPeakBandwidth',
        'product_id' => 'ProductId',
        'up_peak_bandwidth' => 'UpPeakBandwidth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'date' => 'setDate',
        'dc_id' => 'setDcId',
        'down_peak_bandwidth' => 'setDownPeakBandwidth',
        'product_id' => 'setProductId',
        'up_peak_bandwidth' => 'setUpPeakBandwidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'date' => 'getDate',
        'dc_id' => 'getDcId',
        'down_peak_bandwidth' => 'getDownPeakBandwidth',
        'product_id' => 'getProductId',
        'up_peak_bandwidth' => 'getUpPeakBandwidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['dc_id'] = isset($data['dc_id']) ? $data['dc_id'] : null;
        $this->container['down_peak_bandwidth'] = isset($data['down_peak_bandwidth']) ? $data['down_peak_bandwidth'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['up_peak_bandwidth'] = isset($data['up_peak_bandwidth']) ? $data['up_peak_bandwidth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets dc_id
     *
     * @return string
     */
    public function getDcId()
    {
        return $this->container['dc_id'];
    }

    /**
     * Sets dc_id
     *
     * @param string $dc_id dc_id
     *
     * @return $this
     */
    public function setDcId($dc_id)
    {
        $this->container['dc_id'] = $dc_id;

        return $this;
    }

    /**
     * Gets down_peak_bandwidth
     *
     * @return double
     */
    public function getDownPeakBandwidth()
    {
        return $this->container['down_peak_bandwidth'];
    }

    /**
     * Sets down_peak_bandwidth
     *
     * @param double $down_peak_bandwidth down_peak_bandwidth
     *
     * @return $this
     */
    public function setDownPeakBandwidth($down_peak_bandwidth)
    {
        $this->container['down_peak_bandwidth'] = $down_peak_bandwidth;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets up_peak_bandwidth
     *
     * @return double
     */
    public function getUpPeakBandwidth()
    {
        return $this->container['up_peak_bandwidth'];
    }

    /**
     * Sets up_peak_bandwidth
     *
     * @param double $up_peak_bandwidth up_peak_bandwidth
     *
     * @return $this
     */
    public function setUpPeakBandwidth($up_peak_bandwidth)
    {
        $this->container['up_peak_bandwidth'] = $up_peak_bandwidth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

