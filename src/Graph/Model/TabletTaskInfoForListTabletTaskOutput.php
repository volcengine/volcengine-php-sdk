<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TabletTaskInfoForListTabletTaskOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TabletTaskInfoForListTabletTaskOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enqueue_time' => 'int',
        'reason' => 'string',
        'replicas_to_close' => '\Volcengine\Graph\Model\ReplicasToCloseForListTabletTaskOutput[]',
        'replicas_to_delete' => '\Volcengine\Graph\Model\ReplicasToDeleteForListTabletTaskOutput[]',
        'replicas_to_failover_by_promote' => '\Volcengine\Graph\Model\ReplicasToFailoverByPromoteForListTabletTaskOutput[]',
        'replicas_to_failover_by_reopen' => '\Volcengine\Graph\Model\ReplicasToFailoverByReopenForListTabletTaskOutput[]',
        'replicas_to_open_or_add' => '\Volcengine\Graph\Model\ReplicasToOpenOrAddForListTabletTaskOutput[]',
        'start_time' => 'int',
        'tablet_to_merge' => '\Volcengine\Graph\Model\TabletToMergeForListTabletTaskOutput',
        'tablet_to_split' => '\Volcengine\Graph\Model\TabletToSplitForListTabletTaskOutput',
        'tablets_to_delete' => '\Volcengine\Graph\Model\TabletsToDeleteForListTabletTaskOutput[]',
        'task_id' => 'int',
        'task_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enqueue_time' => 'int64',
        'reason' => null,
        'replicas_to_close' => null,
        'replicas_to_delete' => null,
        'replicas_to_failover_by_promote' => null,
        'replicas_to_failover_by_reopen' => null,
        'replicas_to_open_or_add' => null,
        'start_time' => 'int64',
        'tablet_to_merge' => null,
        'tablet_to_split' => null,
        'tablets_to_delete' => null,
        'task_id' => 'int64',
        'task_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enqueue_time' => 'EnqueueTime',
        'reason' => 'Reason',
        'replicas_to_close' => 'ReplicasToClose',
        'replicas_to_delete' => 'ReplicasToDelete',
        'replicas_to_failover_by_promote' => 'ReplicasToFailoverByPromote',
        'replicas_to_failover_by_reopen' => 'ReplicasToFailoverByReopen',
        'replicas_to_open_or_add' => 'ReplicasToOpenOrAdd',
        'start_time' => 'StartTime',
        'tablet_to_merge' => 'TabletToMerge',
        'tablet_to_split' => 'TabletToSplit',
        'tablets_to_delete' => 'TabletsToDelete',
        'task_id' => 'TaskId',
        'task_type' => 'TaskType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enqueue_time' => 'setEnqueueTime',
        'reason' => 'setReason',
        'replicas_to_close' => 'setReplicasToClose',
        'replicas_to_delete' => 'setReplicasToDelete',
        'replicas_to_failover_by_promote' => 'setReplicasToFailoverByPromote',
        'replicas_to_failover_by_reopen' => 'setReplicasToFailoverByReopen',
        'replicas_to_open_or_add' => 'setReplicasToOpenOrAdd',
        'start_time' => 'setStartTime',
        'tablet_to_merge' => 'setTabletToMerge',
        'tablet_to_split' => 'setTabletToSplit',
        'tablets_to_delete' => 'setTabletsToDelete',
        'task_id' => 'setTaskId',
        'task_type' => 'setTaskType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enqueue_time' => 'getEnqueueTime',
        'reason' => 'getReason',
        'replicas_to_close' => 'getReplicasToClose',
        'replicas_to_delete' => 'getReplicasToDelete',
        'replicas_to_failover_by_promote' => 'getReplicasToFailoverByPromote',
        'replicas_to_failover_by_reopen' => 'getReplicasToFailoverByReopen',
        'replicas_to_open_or_add' => 'getReplicasToOpenOrAdd',
        'start_time' => 'getStartTime',
        'tablet_to_merge' => 'getTabletToMerge',
        'tablet_to_split' => 'getTabletToSplit',
        'tablets_to_delete' => 'getTabletsToDelete',
        'task_id' => 'getTaskId',
        'task_type' => 'getTaskType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enqueue_time'] = isset($data['enqueue_time']) ? $data['enqueue_time'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['replicas_to_close'] = isset($data['replicas_to_close']) ? $data['replicas_to_close'] : null;
        $this->container['replicas_to_delete'] = isset($data['replicas_to_delete']) ? $data['replicas_to_delete'] : null;
        $this->container['replicas_to_failover_by_promote'] = isset($data['replicas_to_failover_by_promote']) ? $data['replicas_to_failover_by_promote'] : null;
        $this->container['replicas_to_failover_by_reopen'] = isset($data['replicas_to_failover_by_reopen']) ? $data['replicas_to_failover_by_reopen'] : null;
        $this->container['replicas_to_open_or_add'] = isset($data['replicas_to_open_or_add']) ? $data['replicas_to_open_or_add'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['tablet_to_merge'] = isset($data['tablet_to_merge']) ? $data['tablet_to_merge'] : null;
        $this->container['tablet_to_split'] = isset($data['tablet_to_split']) ? $data['tablet_to_split'] : null;
        $this->container['tablets_to_delete'] = isset($data['tablets_to_delete']) ? $data['tablets_to_delete'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enqueue_time
     *
     * @return int
     */
    public function getEnqueueTime()
    {
        return $this->container['enqueue_time'];
    }

    /**
     * Sets enqueue_time
     *
     * @param int $enqueue_time enqueue_time
     *
     * @return $this
     */
    public function setEnqueueTime($enqueue_time)
    {
        $this->container['enqueue_time'] = $enqueue_time;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets replicas_to_close
     *
     * @return \Volcengine\Graph\Model\ReplicasToCloseForListTabletTaskOutput[]
     */
    public function getReplicasToClose()
    {
        return $this->container['replicas_to_close'];
    }

    /**
     * Sets replicas_to_close
     *
     * @param \Volcengine\Graph\Model\ReplicasToCloseForListTabletTaskOutput[] $replicas_to_close replicas_to_close
     *
     * @return $this
     */
    public function setReplicasToClose($replicas_to_close)
    {
        $this->container['replicas_to_close'] = $replicas_to_close;

        return $this;
    }

    /**
     * Gets replicas_to_delete
     *
     * @return \Volcengine\Graph\Model\ReplicasToDeleteForListTabletTaskOutput[]
     */
    public function getReplicasToDelete()
    {
        return $this->container['replicas_to_delete'];
    }

    /**
     * Sets replicas_to_delete
     *
     * @param \Volcengine\Graph\Model\ReplicasToDeleteForListTabletTaskOutput[] $replicas_to_delete replicas_to_delete
     *
     * @return $this
     */
    public function setReplicasToDelete($replicas_to_delete)
    {
        $this->container['replicas_to_delete'] = $replicas_to_delete;

        return $this;
    }

    /**
     * Gets replicas_to_failover_by_promote
     *
     * @return \Volcengine\Graph\Model\ReplicasToFailoverByPromoteForListTabletTaskOutput[]
     */
    public function getReplicasToFailoverByPromote()
    {
        return $this->container['replicas_to_failover_by_promote'];
    }

    /**
     * Sets replicas_to_failover_by_promote
     *
     * @param \Volcengine\Graph\Model\ReplicasToFailoverByPromoteForListTabletTaskOutput[] $replicas_to_failover_by_promote replicas_to_failover_by_promote
     *
     * @return $this
     */
    public function setReplicasToFailoverByPromote($replicas_to_failover_by_promote)
    {
        $this->container['replicas_to_failover_by_promote'] = $replicas_to_failover_by_promote;

        return $this;
    }

    /**
     * Gets replicas_to_failover_by_reopen
     *
     * @return \Volcengine\Graph\Model\ReplicasToFailoverByReopenForListTabletTaskOutput[]
     */
    public function getReplicasToFailoverByReopen()
    {
        return $this->container['replicas_to_failover_by_reopen'];
    }

    /**
     * Sets replicas_to_failover_by_reopen
     *
     * @param \Volcengine\Graph\Model\ReplicasToFailoverByReopenForListTabletTaskOutput[] $replicas_to_failover_by_reopen replicas_to_failover_by_reopen
     *
     * @return $this
     */
    public function setReplicasToFailoverByReopen($replicas_to_failover_by_reopen)
    {
        $this->container['replicas_to_failover_by_reopen'] = $replicas_to_failover_by_reopen;

        return $this;
    }

    /**
     * Gets replicas_to_open_or_add
     *
     * @return \Volcengine\Graph\Model\ReplicasToOpenOrAddForListTabletTaskOutput[]
     */
    public function getReplicasToOpenOrAdd()
    {
        return $this->container['replicas_to_open_or_add'];
    }

    /**
     * Sets replicas_to_open_or_add
     *
     * @param \Volcengine\Graph\Model\ReplicasToOpenOrAddForListTabletTaskOutput[] $replicas_to_open_or_add replicas_to_open_or_add
     *
     * @return $this
     */
    public function setReplicasToOpenOrAdd($replicas_to_open_or_add)
    {
        $this->container['replicas_to_open_or_add'] = $replicas_to_open_or_add;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets tablet_to_merge
     *
     * @return \Volcengine\Graph\Model\TabletToMergeForListTabletTaskOutput
     */
    public function getTabletToMerge()
    {
        return $this->container['tablet_to_merge'];
    }

    /**
     * Sets tablet_to_merge
     *
     * @param \Volcengine\Graph\Model\TabletToMergeForListTabletTaskOutput $tablet_to_merge tablet_to_merge
     *
     * @return $this
     */
    public function setTabletToMerge($tablet_to_merge)
    {
        $this->container['tablet_to_merge'] = $tablet_to_merge;

        return $this;
    }

    /**
     * Gets tablet_to_split
     *
     * @return \Volcengine\Graph\Model\TabletToSplitForListTabletTaskOutput
     */
    public function getTabletToSplit()
    {
        return $this->container['tablet_to_split'];
    }

    /**
     * Sets tablet_to_split
     *
     * @param \Volcengine\Graph\Model\TabletToSplitForListTabletTaskOutput $tablet_to_split tablet_to_split
     *
     * @return $this
     */
    public function setTabletToSplit($tablet_to_split)
    {
        $this->container['tablet_to_split'] = $tablet_to_split;

        return $this;
    }

    /**
     * Gets tablets_to_delete
     *
     * @return \Volcengine\Graph\Model\TabletsToDeleteForListTabletTaskOutput[]
     */
    public function getTabletsToDelete()
    {
        return $this->container['tablets_to_delete'];
    }

    /**
     * Sets tablets_to_delete
     *
     * @param \Volcengine\Graph\Model\TabletsToDeleteForListTabletTaskOutput[] $tablets_to_delete tablets_to_delete
     *
     * @return $this
     */
    public function setTabletsToDelete($tablets_to_delete)
    {
        $this->container['tablets_to_delete'] = $tablets_to_delete;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return int
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param int $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param string $task_type task_type
     *
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

