<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NetworkResourceForGetVegraphNetworkResourceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkResourceForGetVegraphNetworkResourceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_type' => 'string',
        'az' => 'string',
        'id' => 'int',
        'instance_id' => 'string',
        'ip_version_type' => 'string',
        'lbid' => 'string',
        'region' => 'string',
        'resource_name' => 'string',
        'subnet_id' => 'string',
        'vip_v4' => 'string',
        'vip_v6' => 'string',
        'network_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_type' => null,
        'az' => null,
        'id' => 'int64',
        'instance_id' => null,
        'ip_version_type' => null,
        'lbid' => null,
        'region' => null,
        'resource_name' => null,
        'subnet_id' => null,
        'vip_v4' => null,
        'vip_v6' => null,
        'network_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_type' => 'AddressType',
        'az' => 'Az',
        'id' => 'Id',
        'instance_id' => 'InstanceId',
        'ip_version_type' => 'IpVersionType',
        'lbid' => 'LBId',
        'region' => 'Region',
        'resource_name' => 'ResourceName',
        'subnet_id' => 'SubnetId',
        'vip_v4' => 'VipV4',
        'vip_v6' => 'VipV6',
        'network_type' => 'networkType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_type' => 'setAddressType',
        'az' => 'setAz',
        'id' => 'setId',
        'instance_id' => 'setInstanceId',
        'ip_version_type' => 'setIpVersionType',
        'lbid' => 'setLbid',
        'region' => 'setRegion',
        'resource_name' => 'setResourceName',
        'subnet_id' => 'setSubnetId',
        'vip_v4' => 'setVipV4',
        'vip_v6' => 'setVipV6',
        'network_type' => 'setNetworkType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_type' => 'getAddressType',
        'az' => 'getAz',
        'id' => 'getId',
        'instance_id' => 'getInstanceId',
        'ip_version_type' => 'getIpVersionType',
        'lbid' => 'getLbid',
        'region' => 'getRegion',
        'resource_name' => 'getResourceName',
        'subnet_id' => 'getSubnetId',
        'vip_v4' => 'getVipV4',
        'vip_v6' => 'getVipV6',
        'network_type' => 'getNetworkType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_type'] = isset($data['address_type']) ? $data['address_type'] : null;
        $this->container['az'] = isset($data['az']) ? $data['az'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['ip_version_type'] = isset($data['ip_version_type']) ? $data['ip_version_type'] : null;
        $this->container['lbid'] = isset($data['lbid']) ? $data['lbid'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['resource_name'] = isset($data['resource_name']) ? $data['resource_name'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['vip_v4'] = isset($data['vip_v4']) ? $data['vip_v4'] : null;
        $this->container['vip_v6'] = isset($data['vip_v6']) ? $data['vip_v6'] : null;
        $this->container['network_type'] = isset($data['network_type']) ? $data['network_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_type
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['address_type'];
    }

    /**
     * Sets address_type
     *
     * @param string $address_type address_type
     *
     * @return $this
     */
    public function setAddressType($address_type)
    {
        $this->container['address_type'] = $address_type;

        return $this;
    }

    /**
     * Gets az
     *
     * @return string
     */
    public function getAz()
    {
        return $this->container['az'];
    }

    /**
     * Sets az
     *
     * @param string $az az
     *
     * @return $this
     */
    public function setAz($az)
    {
        $this->container['az'] = $az;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets ip_version_type
     *
     * @return string
     */
    public function getIpVersionType()
    {
        return $this->container['ip_version_type'];
    }

    /**
     * Sets ip_version_type
     *
     * @param string $ip_version_type ip_version_type
     *
     * @return $this
     */
    public function setIpVersionType($ip_version_type)
    {
        $this->container['ip_version_type'] = $ip_version_type;

        return $this;
    }

    /**
     * Gets lbid
     *
     * @return string
     */
    public function getLbid()
    {
        return $this->container['lbid'];
    }

    /**
     * Sets lbid
     *
     * @param string $lbid lbid
     *
     * @return $this
     */
    public function setLbid($lbid)
    {
        $this->container['lbid'] = $lbid;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets resource_name
     *
     * @return string
     */
    public function getResourceName()
    {
        return $this->container['resource_name'];
    }

    /**
     * Sets resource_name
     *
     * @param string $resource_name resource_name
     *
     * @return $this
     */
    public function setResourceName($resource_name)
    {
        $this->container['resource_name'] = $resource_name;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets vip_v4
     *
     * @return string
     */
    public function getVipV4()
    {
        return $this->container['vip_v4'];
    }

    /**
     * Sets vip_v4
     *
     * @param string $vip_v4 vip_v4
     *
     * @return $this
     */
    public function setVipV4($vip_v4)
    {
        $this->container['vip_v4'] = $vip_v4;

        return $this;
    }

    /**
     * Gets vip_v6
     *
     * @return string
     */
    public function getVipV6()
    {
        return $this->container['vip_v6'];
    }

    /**
     * Sets vip_v6
     *
     * @param string $vip_v6 vip_v6
     *
     * @return $this
     */
    public function setVipV6($vip_v6)
    {
        $this->container['vip_v6'] = $vip_v6;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string $network_type network_type
     *
     * @return $this
     */
    public function setNetworkType($network_type)
    {
        $this->container['network_type'] = $network_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

