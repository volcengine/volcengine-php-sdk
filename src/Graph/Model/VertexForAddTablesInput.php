<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VertexForAddTablesInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'vertexForAddTablesInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'columns' => '\Volcengine\Graph\Model\ColumnForAddTablesInput[]',
        'label' => 'string',
        'primary_key' => 'string[]',
        'schema_label_type' => 'string',
        'secondary_indices' => '\Volcengine\Graph\Model\SecondaryIndexForAddTablesInput[]',
        'uniq_index' => '\Volcengine\Graph\Model\UniqIndexForAddTablesInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'columns' => null,
        'label' => null,
        'primary_key' => null,
        'schema_label_type' => null,
        'secondary_indices' => null,
        'uniq_index' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'columns' => 'columns',
        'label' => 'label',
        'primary_key' => 'primary_key',
        'schema_label_type' => 'schema_label_type',
        'secondary_indices' => 'secondary_indices',
        'uniq_index' => 'uniq_index'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'columns' => 'setColumns',
        'label' => 'setLabel',
        'primary_key' => 'setPrimaryKey',
        'schema_label_type' => 'setSchemaLabelType',
        'secondary_indices' => 'setSecondaryIndices',
        'uniq_index' => 'setUniqIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'columns' => 'getColumns',
        'label' => 'getLabel',
        'primary_key' => 'getPrimaryKey',
        'schema_label_type' => 'getSchemaLabelType',
        'secondary_indices' => 'getSecondaryIndices',
        'uniq_index' => 'getUniqIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['primary_key'] = isset($data['primary_key']) ? $data['primary_key'] : null;
        $this->container['schema_label_type'] = isset($data['schema_label_type']) ? $data['schema_label_type'] : null;
        $this->container['secondary_indices'] = isset($data['secondary_indices']) ? $data['secondary_indices'] : null;
        $this->container['uniq_index'] = isset($data['uniq_index']) ? $data['uniq_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets columns
     *
     * @return \Volcengine\Graph\Model\ColumnForAddTablesInput[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \Volcengine\Graph\Model\ColumnForAddTablesInput[] $columns columns
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets primary_key
     *
     * @return string[]
     */
    public function getPrimaryKey()
    {
        return $this->container['primary_key'];
    }

    /**
     * Sets primary_key
     *
     * @param string[] $primary_key primary_key
     *
     * @return $this
     */
    public function setPrimaryKey($primary_key)
    {
        $this->container['primary_key'] = $primary_key;

        return $this;
    }

    /**
     * Gets schema_label_type
     *
     * @return string
     */
    public function getSchemaLabelType()
    {
        return $this->container['schema_label_type'];
    }

    /**
     * Sets schema_label_type
     *
     * @param string $schema_label_type schema_label_type
     *
     * @return $this
     */
    public function setSchemaLabelType($schema_label_type)
    {
        $this->container['schema_label_type'] = $schema_label_type;

        return $this;
    }

    /**
     * Gets secondary_indices
     *
     * @return \Volcengine\Graph\Model\SecondaryIndexForAddTablesInput[]
     */
    public function getSecondaryIndices()
    {
        return $this->container['secondary_indices'];
    }

    /**
     * Sets secondary_indices
     *
     * @param \Volcengine\Graph\Model\SecondaryIndexForAddTablesInput[] $secondary_indices secondary_indices
     *
     * @return $this
     */
    public function setSecondaryIndices($secondary_indices)
    {
        $this->container['secondary_indices'] = $secondary_indices;

        return $this;
    }

    /**
     * Gets uniq_index
     *
     * @return \Volcengine\Graph\Model\UniqIndexForAddTablesInput[]
     */
    public function getUniqIndex()
    {
        return $this->container['uniq_index'];
    }

    /**
     * Sets uniq_index
     *
     * @param \Volcengine\Graph\Model\UniqIndexForAddTablesInput[] $uniq_index uniq_index
     *
     * @return $this
     */
    public function setUniqIndex($uniq_index)
    {
        $this->container['uniq_index'] = $uniq_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

