<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListTabletsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListTabletsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
        'region' => 'string',
        'request_tablet_server_addr' => 'string',
        'return_partition_route_info' => 'bool',
        'return_tablet_route_info' => 'bool',
        'table_names' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
        'region' => null,
        'request_tablet_server_addr' => null,
        'return_partition_route_info' => null,
        'return_tablet_route_info' => null,
        'table_names' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'InstanceId',
        'region' => 'Region',
        'request_tablet_server_addr' => 'RequestTabletServerAddr',
        'return_partition_route_info' => 'ReturnPartitionRouteInfo',
        'return_tablet_route_info' => 'ReturnTabletRouteInfo',
        'table_names' => 'TableNames'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
        'region' => 'setRegion',
        'request_tablet_server_addr' => 'setRequestTabletServerAddr',
        'return_partition_route_info' => 'setReturnPartitionRouteInfo',
        'return_tablet_route_info' => 'setReturnTabletRouteInfo',
        'table_names' => 'setTableNames'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
        'region' => 'getRegion',
        'request_tablet_server_addr' => 'getRequestTabletServerAddr',
        'return_partition_route_info' => 'getReturnPartitionRouteInfo',
        'return_tablet_route_info' => 'getReturnTabletRouteInfo',
        'table_names' => 'getTableNames'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['request_tablet_server_addr'] = isset($data['request_tablet_server_addr']) ? $data['request_tablet_server_addr'] : null;
        $this->container['return_partition_route_info'] = isset($data['return_partition_route_info']) ? $data['return_partition_route_info'] : null;
        $this->container['return_tablet_route_info'] = isset($data['return_tablet_route_info']) ? $data['return_tablet_route_info'] : null;
        $this->container['table_names'] = isset($data['table_names']) ? $data['table_names'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets request_tablet_server_addr
     *
     * @return string
     */
    public function getRequestTabletServerAddr()
    {
        return $this->container['request_tablet_server_addr'];
    }

    /**
     * Sets request_tablet_server_addr
     *
     * @param string $request_tablet_server_addr request_tablet_server_addr
     *
     * @return $this
     */
    public function setRequestTabletServerAddr($request_tablet_server_addr)
    {
        $this->container['request_tablet_server_addr'] = $request_tablet_server_addr;

        return $this;
    }

    /**
     * Gets return_partition_route_info
     *
     * @return bool
     */
    public function getReturnPartitionRouteInfo()
    {
        return $this->container['return_partition_route_info'];
    }

    /**
     * Sets return_partition_route_info
     *
     * @param bool $return_partition_route_info return_partition_route_info
     *
     * @return $this
     */
    public function setReturnPartitionRouteInfo($return_partition_route_info)
    {
        $this->container['return_partition_route_info'] = $return_partition_route_info;

        return $this;
    }

    /**
     * Gets return_tablet_route_info
     *
     * @return bool
     */
    public function getReturnTabletRouteInfo()
    {
        return $this->container['return_tablet_route_info'];
    }

    /**
     * Sets return_tablet_route_info
     *
     * @param bool $return_tablet_route_info return_tablet_route_info
     *
     * @return $this
     */
    public function setReturnTabletRouteInfo($return_tablet_route_info)
    {
        $this->container['return_tablet_route_info'] = $return_tablet_route_info;

        return $this;
    }

    /**
     * Gets table_names
     *
     * @return string[]
     */
    public function getTableNames()
    {
        return $this->container['table_names'];
    }

    /**
     * Sets table_names
     *
     * @param string[] $table_names table_names
     *
     * @return $this
     */
    public function setTableNames($table_names)
    {
        $this->container['table_names'] = $table_names;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

