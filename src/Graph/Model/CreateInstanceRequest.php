<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'deletion_protection' => 'string',
        'info' => '\Volcengine\Graph\Model\InfoForCreateInstanceInput',
        'instance_tags' => '\Volcengine\Graph\Model\InstanceTagForCreateInstanceInput[]',
        'network_descriptions' => '\Volcengine\Graph\Model\NetworkDescriptionForCreateInstanceInput[]',
        'one_step' => 'bool',
        'version_set_id' => 'int',
        'with_graph_rag' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'deletion_protection' => null,
        'info' => null,
        'instance_tags' => null,
        'network_descriptions' => null,
        'one_step' => null,
        'version_set_id' => 'int32',
        'with_graph_rag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'deletion_protection' => 'DeletionProtection',
        'info' => 'Info',
        'instance_tags' => 'InstanceTags',
        'network_descriptions' => 'NetworkDescriptions',
        'one_step' => 'OneStep',
        'version_set_id' => 'VersionSetId',
        'with_graph_rag' => 'WithGraphRAG'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'deletion_protection' => 'setDeletionProtection',
        'info' => 'setInfo',
        'instance_tags' => 'setInstanceTags',
        'network_descriptions' => 'setNetworkDescriptions',
        'one_step' => 'setOneStep',
        'version_set_id' => 'setVersionSetId',
        'with_graph_rag' => 'setWithGraphRag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'deletion_protection' => 'getDeletionProtection',
        'info' => 'getInfo',
        'instance_tags' => 'getInstanceTags',
        'network_descriptions' => 'getNetworkDescriptions',
        'one_step' => 'getOneStep',
        'version_set_id' => 'getVersionSetId',
        'with_graph_rag' => 'getWithGraphRag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['instance_tags'] = isset($data['instance_tags']) ? $data['instance_tags'] : null;
        $this->container['network_descriptions'] = isset($data['network_descriptions']) ? $data['network_descriptions'] : null;
        $this->container['one_step'] = isset($data['one_step']) ? $data['one_step'] : null;
        $this->container['version_set_id'] = isset($data['version_set_id']) ? $data['version_set_id'] : null;
        $this->container['with_graph_rag'] = isset($data['with_graph_rag']) ? $data['with_graph_rag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets info
     *
     * @return \Volcengine\Graph\Model\InfoForCreateInstanceInput
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param \Volcengine\Graph\Model\InfoForCreateInstanceInput $info info
     *
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets instance_tags
     *
     * @return \Volcengine\Graph\Model\InstanceTagForCreateInstanceInput[]
     */
    public function getInstanceTags()
    {
        return $this->container['instance_tags'];
    }

    /**
     * Sets instance_tags
     *
     * @param \Volcengine\Graph\Model\InstanceTagForCreateInstanceInput[] $instance_tags instance_tags
     *
     * @return $this
     */
    public function setInstanceTags($instance_tags)
    {
        $this->container['instance_tags'] = $instance_tags;

        return $this;
    }

    /**
     * Gets network_descriptions
     *
     * @return \Volcengine\Graph\Model\NetworkDescriptionForCreateInstanceInput[]
     */
    public function getNetworkDescriptions()
    {
        return $this->container['network_descriptions'];
    }

    /**
     * Sets network_descriptions
     *
     * @param \Volcengine\Graph\Model\NetworkDescriptionForCreateInstanceInput[] $network_descriptions network_descriptions
     *
     * @return $this
     */
    public function setNetworkDescriptions($network_descriptions)
    {
        $this->container['network_descriptions'] = $network_descriptions;

        return $this;
    }

    /**
     * Gets one_step
     *
     * @return bool
     */
    public function getOneStep()
    {
        return $this->container['one_step'];
    }

    /**
     * Sets one_step
     *
     * @param bool $one_step one_step
     *
     * @return $this
     */
    public function setOneStep($one_step)
    {
        $this->container['one_step'] = $one_step;

        return $this;
    }

    /**
     * Gets version_set_id
     *
     * @return int
     */
    public function getVersionSetId()
    {
        return $this->container['version_set_id'];
    }

    /**
     * Sets version_set_id
     *
     * @param int $version_set_id version_set_id
     *
     * @return $this
     */
    public function setVersionSetId($version_set_id)
    {
        $this->container['version_set_id'] = $version_set_id;

        return $this;
    }

    /**
     * Gets with_graph_rag
     *
     * @return bool
     */
    public function getWithGraphRag()
    {
        return $this->container['with_graph_rag'];
    }

    /**
     * Sets with_graph_rag
     *
     * @param bool $with_graph_rag with_graph_rag
     *
     * @return $this
     */
    public function setWithGraphRag($with_graph_rag)
    {
        $this->container['with_graph_rag'] = $with_graph_rag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

