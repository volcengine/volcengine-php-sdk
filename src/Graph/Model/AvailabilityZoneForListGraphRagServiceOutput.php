<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AvailabilityZoneForListGraphRagServiceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AvailabilityZoneForListGraphRagServiceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'availability_zone_id' => 'string',
        'k8s_domain' => 'string',
        'node_num' => 'int',
        'node_pool_name' => 'string',
        'subnet_id' => 'string',
        'subnet_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'availability_zone_id' => null,
        'k8s_domain' => null,
        'node_num' => 'int32',
        'node_pool_name' => null,
        'subnet_id' => null,
        'subnet_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability_zone_id' => 'AvailabilityZoneId',
        'k8s_domain' => 'K8sDomain',
        'node_num' => 'NodeNum',
        'node_pool_name' => 'NodePoolName',
        'subnet_id' => 'SubnetID',
        'subnet_name' => 'SubnetName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availability_zone_id' => 'setAvailabilityZoneId',
        'k8s_domain' => 'setK8sDomain',
        'node_num' => 'setNodeNum',
        'node_pool_name' => 'setNodePoolName',
        'subnet_id' => 'setSubnetId',
        'subnet_name' => 'setSubnetName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability_zone_id' => 'getAvailabilityZoneId',
        'k8s_domain' => 'getK8sDomain',
        'node_num' => 'getNodeNum',
        'node_pool_name' => 'getNodePoolName',
        'subnet_id' => 'getSubnetId',
        'subnet_name' => 'getSubnetName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availability_zone_id'] = isset($data['availability_zone_id']) ? $data['availability_zone_id'] : null;
        $this->container['k8s_domain'] = isset($data['k8s_domain']) ? $data['k8s_domain'] : null;
        $this->container['node_num'] = isset($data['node_num']) ? $data['node_num'] : null;
        $this->container['node_pool_name'] = isset($data['node_pool_name']) ? $data['node_pool_name'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['subnet_name'] = isset($data['subnet_name']) ? $data['subnet_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availability_zone_id
     *
     * @return string
     */
    public function getAvailabilityZoneId()
    {
        return $this->container['availability_zone_id'];
    }

    /**
     * Sets availability_zone_id
     *
     * @param string $availability_zone_id availability_zone_id
     *
     * @return $this
     */
    public function setAvailabilityZoneId($availability_zone_id)
    {
        $this->container['availability_zone_id'] = $availability_zone_id;

        return $this;
    }

    /**
     * Gets k8s_domain
     *
     * @return string
     */
    public function getK8sDomain()
    {
        return $this->container['k8s_domain'];
    }

    /**
     * Sets k8s_domain
     *
     * @param string $k8s_domain k8s_domain
     *
     * @return $this
     */
    public function setK8sDomain($k8s_domain)
    {
        $this->container['k8s_domain'] = $k8s_domain;

        return $this;
    }

    /**
     * Gets node_num
     *
     * @return int
     */
    public function getNodeNum()
    {
        return $this->container['node_num'];
    }

    /**
     * Sets node_num
     *
     * @param int $node_num node_num
     *
     * @return $this
     */
    public function setNodeNum($node_num)
    {
        $this->container['node_num'] = $node_num;

        return $this;
    }

    /**
     * Gets node_pool_name
     *
     * @return string
     */
    public function getNodePoolName()
    {
        return $this->container['node_pool_name'];
    }

    /**
     * Sets node_pool_name
     *
     * @param string $node_pool_name node_pool_name
     *
     * @return $this
     */
    public function setNodePoolName($node_pool_name)
    {
        $this->container['node_pool_name'] = $node_pool_name;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets subnet_name
     *
     * @return string
     */
    public function getSubnetName()
    {
        return $this->container['subnet_name'];
    }

    /**
     * Sets subnet_name
     *
     * @param string $subnet_name subnet_name
     *
     * @return $this
     */
    public function setSubnetName($subnet_name)
    {
        $this->container['subnet_name'] = $subnet_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

