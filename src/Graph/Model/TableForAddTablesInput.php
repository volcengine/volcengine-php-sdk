<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TableForAddTablesInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tableForAddTablesInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_rotate' => 'bool',
        'quotas' => '\Volcengine\Graph\Model\QuotasForAddTablesInput',
        'rotate_size' => 'int',
        'schema' => '\Volcengine\Graph\Model\SchemaForAddTablesInput',
        'table_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_rotate' => null,
        'quotas' => null,
        'rotate_size' => 'int64',
        'schema' => null,
        'table_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_rotate' => 'enable_rotate',
        'quotas' => 'quotas',
        'rotate_size' => 'rotate_size',
        'schema' => 'schema',
        'table_name' => 'table_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_rotate' => 'setEnableRotate',
        'quotas' => 'setQuotas',
        'rotate_size' => 'setRotateSize',
        'schema' => 'setSchema',
        'table_name' => 'setTableName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_rotate' => 'getEnableRotate',
        'quotas' => 'getQuotas',
        'rotate_size' => 'getRotateSize',
        'schema' => 'getSchema',
        'table_name' => 'getTableName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_rotate'] = isset($data['enable_rotate']) ? $data['enable_rotate'] : null;
        $this->container['quotas'] = isset($data['quotas']) ? $data['quotas'] : null;
        $this->container['rotate_size'] = isset($data['rotate_size']) ? $data['rotate_size'] : null;
        $this->container['schema'] = isset($data['schema']) ? $data['schema'] : null;
        $this->container['table_name'] = isset($data['table_name']) ? $data['table_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_rotate
     *
     * @return bool
     */
    public function getEnableRotate()
    {
        return $this->container['enable_rotate'];
    }

    /**
     * Sets enable_rotate
     *
     * @param bool $enable_rotate enable_rotate
     *
     * @return $this
     */
    public function setEnableRotate($enable_rotate)
    {
        $this->container['enable_rotate'] = $enable_rotate;

        return $this;
    }

    /**
     * Gets quotas
     *
     * @return \Volcengine\Graph\Model\QuotasForAddTablesInput
     */
    public function getQuotas()
    {
        return $this->container['quotas'];
    }

    /**
     * Sets quotas
     *
     * @param \Volcengine\Graph\Model\QuotasForAddTablesInput $quotas quotas
     *
     * @return $this
     */
    public function setQuotas($quotas)
    {
        $this->container['quotas'] = $quotas;

        return $this;
    }

    /**
     * Gets rotate_size
     *
     * @return int
     */
    public function getRotateSize()
    {
        return $this->container['rotate_size'];
    }

    /**
     * Sets rotate_size
     *
     * @param int $rotate_size rotate_size
     *
     * @return $this
     */
    public function setRotateSize($rotate_size)
    {
        $this->container['rotate_size'] = $rotate_size;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \Volcengine\Graph\Model\SchemaForAddTablesInput
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \Volcengine\Graph\Model\SchemaForAddTablesInput $schema schema
     *
     * @return $this
     */
    public function setSchema($schema)
    {
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets table_name
     *
     * @return string
     */
    public function getTableName()
    {
        return $this->container['table_name'];
    }

    /**
     * Sets table_name
     *
     * @param string $table_name table_name
     *
     * @return $this
     */
    public function setTableName($table_name)
    {
        $this->container['table_name'] = $table_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

