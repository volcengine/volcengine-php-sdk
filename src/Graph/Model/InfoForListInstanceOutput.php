<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InfoForListInstanceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InfoForListInstanceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'availability_zone_id' => 'string',
        'availability_zones' => '\Volcengine\Graph\Model\AvailabilityZoneForListInstanceOutput[]',
        'bg3_link' => 'string',
        'bg3_links' => '\Volcengine\Graph\Model\Bg3LinkForListInstanceOutput[]',
        'create_time' => 'string',
        'creator' => 'string',
        'deletion_protection' => 'string',
        'disk_space' => 'int',
        'disk_used' => 'int',
        'expire_time' => 'string',
        'graph_version' => 'string',
        'id' => 'string',
        'image_info' => '\Volcengine\Graph\Model\ImageInfoForListInstanceOutput',
        'ins_spec' => '\Volcengine\Graph\Model\InsSpecForListInstanceOutput',
        'k8s_domain' => 'string',
        'maintenance_time' => 'string',
        'mode' => 'string',
        'name' => 'string',
        'node_num' => 'int',
        'project_name' => 'string',
        'region_id' => 'string',
        'status' => 'string',
        'storage_info' => '\Volcengine\Graph\Model\StorageInfoForListInstanceOutput',
        'subnet_id' => 'string',
        'subnet_name' => 'string',
        'tags' => '\Volcengine\Graph\Model\TagForListInstanceOutput[]',
        'trade_no' => 'string',
        'vpc_id' => 'string',
        'vpc_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'availability_zone_id' => null,
        'availability_zones' => null,
        'bg3_link' => null,
        'bg3_links' => null,
        'create_time' => null,
        'creator' => null,
        'deletion_protection' => null,
        'disk_space' => 'int32',
        'disk_used' => 'int64',
        'expire_time' => null,
        'graph_version' => null,
        'id' => null,
        'image_info' => null,
        'ins_spec' => null,
        'k8s_domain' => null,
        'maintenance_time' => null,
        'mode' => null,
        'name' => null,
        'node_num' => 'int32',
        'project_name' => null,
        'region_id' => null,
        'status' => null,
        'storage_info' => null,
        'subnet_id' => null,
        'subnet_name' => null,
        'tags' => null,
        'trade_no' => null,
        'vpc_id' => null,
        'vpc_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability_zone_id' => 'AvailabilityZoneId',
        'availability_zones' => 'AvailabilityZones',
        'bg3_link' => 'Bg3Link',
        'bg3_links' => 'Bg3Links',
        'create_time' => 'CreateTime',
        'creator' => 'Creator',
        'deletion_protection' => 'DeletionProtection',
        'disk_space' => 'DiskSpace',
        'disk_used' => 'DiskUsed',
        'expire_time' => 'ExpireTime',
        'graph_version' => 'GraphVersion',
        'id' => 'Id',
        'image_info' => 'ImageInfo',
        'ins_spec' => 'InsSpec',
        'k8s_domain' => 'K8sDomain',
        'maintenance_time' => 'MaintenanceTime',
        'mode' => 'Mode',
        'name' => 'Name',
        'node_num' => 'NodeNum',
        'project_name' => 'ProjectName',
        'region_id' => 'RegionId',
        'status' => 'Status',
        'storage_info' => 'StorageInfo',
        'subnet_id' => 'SubnetID',
        'subnet_name' => 'SubnetName',
        'tags' => 'Tags',
        'trade_no' => 'TradeNO',
        'vpc_id' => 'VpcId',
        'vpc_name' => 'VpcName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availability_zone_id' => 'setAvailabilityZoneId',
        'availability_zones' => 'setAvailabilityZones',
        'bg3_link' => 'setBg3Link',
        'bg3_links' => 'setBg3Links',
        'create_time' => 'setCreateTime',
        'creator' => 'setCreator',
        'deletion_protection' => 'setDeletionProtection',
        'disk_space' => 'setDiskSpace',
        'disk_used' => 'setDiskUsed',
        'expire_time' => 'setExpireTime',
        'graph_version' => 'setGraphVersion',
        'id' => 'setId',
        'image_info' => 'setImageInfo',
        'ins_spec' => 'setInsSpec',
        'k8s_domain' => 'setK8sDomain',
        'maintenance_time' => 'setMaintenanceTime',
        'mode' => 'setMode',
        'name' => 'setName',
        'node_num' => 'setNodeNum',
        'project_name' => 'setProjectName',
        'region_id' => 'setRegionId',
        'status' => 'setStatus',
        'storage_info' => 'setStorageInfo',
        'subnet_id' => 'setSubnetId',
        'subnet_name' => 'setSubnetName',
        'tags' => 'setTags',
        'trade_no' => 'setTradeNo',
        'vpc_id' => 'setVpcId',
        'vpc_name' => 'setVpcName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability_zone_id' => 'getAvailabilityZoneId',
        'availability_zones' => 'getAvailabilityZones',
        'bg3_link' => 'getBg3Link',
        'bg3_links' => 'getBg3Links',
        'create_time' => 'getCreateTime',
        'creator' => 'getCreator',
        'deletion_protection' => 'getDeletionProtection',
        'disk_space' => 'getDiskSpace',
        'disk_used' => 'getDiskUsed',
        'expire_time' => 'getExpireTime',
        'graph_version' => 'getGraphVersion',
        'id' => 'getId',
        'image_info' => 'getImageInfo',
        'ins_spec' => 'getInsSpec',
        'k8s_domain' => 'getK8sDomain',
        'maintenance_time' => 'getMaintenanceTime',
        'mode' => 'getMode',
        'name' => 'getName',
        'node_num' => 'getNodeNum',
        'project_name' => 'getProjectName',
        'region_id' => 'getRegionId',
        'status' => 'getStatus',
        'storage_info' => 'getStorageInfo',
        'subnet_id' => 'getSubnetId',
        'subnet_name' => 'getSubnetName',
        'tags' => 'getTags',
        'trade_no' => 'getTradeNo',
        'vpc_id' => 'getVpcId',
        'vpc_name' => 'getVpcName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availability_zone_id'] = isset($data['availability_zone_id']) ? $data['availability_zone_id'] : null;
        $this->container['availability_zones'] = isset($data['availability_zones']) ? $data['availability_zones'] : null;
        $this->container['bg3_link'] = isset($data['bg3_link']) ? $data['bg3_link'] : null;
        $this->container['bg3_links'] = isset($data['bg3_links']) ? $data['bg3_links'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['disk_space'] = isset($data['disk_space']) ? $data['disk_space'] : null;
        $this->container['disk_used'] = isset($data['disk_used']) ? $data['disk_used'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['graph_version'] = isset($data['graph_version']) ? $data['graph_version'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_info'] = isset($data['image_info']) ? $data['image_info'] : null;
        $this->container['ins_spec'] = isset($data['ins_spec']) ? $data['ins_spec'] : null;
        $this->container['k8s_domain'] = isset($data['k8s_domain']) ? $data['k8s_domain'] : null;
        $this->container['maintenance_time'] = isset($data['maintenance_time']) ? $data['maintenance_time'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_num'] = isset($data['node_num']) ? $data['node_num'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['storage_info'] = isset($data['storage_info']) ? $data['storage_info'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['subnet_name'] = isset($data['subnet_name']) ? $data['subnet_name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['trade_no'] = isset($data['trade_no']) ? $data['trade_no'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['vpc_name'] = isset($data['vpc_name']) ? $data['vpc_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availability_zone_id
     *
     * @return string
     */
    public function getAvailabilityZoneId()
    {
        return $this->container['availability_zone_id'];
    }

    /**
     * Sets availability_zone_id
     *
     * @param string $availability_zone_id availability_zone_id
     *
     * @return $this
     */
    public function setAvailabilityZoneId($availability_zone_id)
    {
        $this->container['availability_zone_id'] = $availability_zone_id;

        return $this;
    }

    /**
     * Gets availability_zones
     *
     * @return \Volcengine\Graph\Model\AvailabilityZoneForListInstanceOutput[]
     */
    public function getAvailabilityZones()
    {
        return $this->container['availability_zones'];
    }

    /**
     * Sets availability_zones
     *
     * @param \Volcengine\Graph\Model\AvailabilityZoneForListInstanceOutput[] $availability_zones availability_zones
     *
     * @return $this
     */
    public function setAvailabilityZones($availability_zones)
    {
        $this->container['availability_zones'] = $availability_zones;

        return $this;
    }

    /**
     * Gets bg3_link
     *
     * @return string
     */
    public function getBg3Link()
    {
        return $this->container['bg3_link'];
    }

    /**
     * Sets bg3_link
     *
     * @param string $bg3_link bg3_link
     *
     * @return $this
     */
    public function setBg3Link($bg3_link)
    {
        $this->container['bg3_link'] = $bg3_link;

        return $this;
    }

    /**
     * Gets bg3_links
     *
     * @return \Volcengine\Graph\Model\Bg3LinkForListInstanceOutput[]
     */
    public function getBg3Links()
    {
        return $this->container['bg3_links'];
    }

    /**
     * Sets bg3_links
     *
     * @param \Volcengine\Graph\Model\Bg3LinkForListInstanceOutput[] $bg3_links bg3_links
     *
     * @return $this
     */
    public function setBg3Links($bg3_links)
    {
        $this->container['bg3_links'] = $bg3_links;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets disk_space
     *
     * @return int
     */
    public function getDiskSpace()
    {
        return $this->container['disk_space'];
    }

    /**
     * Sets disk_space
     *
     * @param int $disk_space disk_space
     *
     * @return $this
     */
    public function setDiskSpace($disk_space)
    {
        $this->container['disk_space'] = $disk_space;

        return $this;
    }

    /**
     * Gets disk_used
     *
     * @return int
     */
    public function getDiskUsed()
    {
        return $this->container['disk_used'];
    }

    /**
     * Sets disk_used
     *
     * @param int $disk_used disk_used
     *
     * @return $this
     */
    public function setDiskUsed($disk_used)
    {
        $this->container['disk_used'] = $disk_used;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return string
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param string $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets graph_version
     *
     * @return string
     */
    public function getGraphVersion()
    {
        return $this->container['graph_version'];
    }

    /**
     * Sets graph_version
     *
     * @param string $graph_version graph_version
     *
     * @return $this
     */
    public function setGraphVersion($graph_version)
    {
        $this->container['graph_version'] = $graph_version;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_info
     *
     * @return \Volcengine\Graph\Model\ImageInfoForListInstanceOutput
     */
    public function getImageInfo()
    {
        return $this->container['image_info'];
    }

    /**
     * Sets image_info
     *
     * @param \Volcengine\Graph\Model\ImageInfoForListInstanceOutput $image_info image_info
     *
     * @return $this
     */
    public function setImageInfo($image_info)
    {
        $this->container['image_info'] = $image_info;

        return $this;
    }

    /**
     * Gets ins_spec
     *
     * @return \Volcengine\Graph\Model\InsSpecForListInstanceOutput
     */
    public function getInsSpec()
    {
        return $this->container['ins_spec'];
    }

    /**
     * Sets ins_spec
     *
     * @param \Volcengine\Graph\Model\InsSpecForListInstanceOutput $ins_spec ins_spec
     *
     * @return $this
     */
    public function setInsSpec($ins_spec)
    {
        $this->container['ins_spec'] = $ins_spec;

        return $this;
    }

    /**
     * Gets k8s_domain
     *
     * @return string
     */
    public function getK8sDomain()
    {
        return $this->container['k8s_domain'];
    }

    /**
     * Sets k8s_domain
     *
     * @param string $k8s_domain k8s_domain
     *
     * @return $this
     */
    public function setK8sDomain($k8s_domain)
    {
        $this->container['k8s_domain'] = $k8s_domain;

        return $this;
    }

    /**
     * Gets maintenance_time
     *
     * @return string
     */
    public function getMaintenanceTime()
    {
        return $this->container['maintenance_time'];
    }

    /**
     * Sets maintenance_time
     *
     * @param string $maintenance_time maintenance_time
     *
     * @return $this
     */
    public function setMaintenanceTime($maintenance_time)
    {
        $this->container['maintenance_time'] = $maintenance_time;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_num
     *
     * @return int
     */
    public function getNodeNum()
    {
        return $this->container['node_num'];
    }

    /**
     * Sets node_num
     *
     * @param int $node_num node_num
     *
     * @return $this
     */
    public function setNodeNum($node_num)
    {
        $this->container['node_num'] = $node_num;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storage_info
     *
     * @return \Volcengine\Graph\Model\StorageInfoForListInstanceOutput
     */
    public function getStorageInfo()
    {
        return $this->container['storage_info'];
    }

    /**
     * Sets storage_info
     *
     * @param \Volcengine\Graph\Model\StorageInfoForListInstanceOutput $storage_info storage_info
     *
     * @return $this
     */
    public function setStorageInfo($storage_info)
    {
        $this->container['storage_info'] = $storage_info;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets subnet_name
     *
     * @return string
     */
    public function getSubnetName()
    {
        return $this->container['subnet_name'];
    }

    /**
     * Sets subnet_name
     *
     * @param string $subnet_name subnet_name
     *
     * @return $this
     */
    public function setSubnetName($subnet_name)
    {
        $this->container['subnet_name'] = $subnet_name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Graph\Model\TagForListInstanceOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Graph\Model\TagForListInstanceOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets trade_no
     *
     * @return string
     */
    public function getTradeNo()
    {
        return $this->container['trade_no'];
    }

    /**
     * Sets trade_no
     *
     * @param string $trade_no trade_no
     *
     * @return $this
     */
    public function setTradeNo($trade_no)
    {
        $this->container['trade_no'] = $trade_no;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets vpc_name
     *
     * @return string
     */
    public function getVpcName()
    {
        return $this->container['vpc_name'];
    }

    /**
     * Sets vpc_name
     *
     * @param string $vpc_name vpc_name
     *
     * @return $this
     */
    public function setVpcName($vpc_name)
    {
        $this->container['vpc_name'] = $vpc_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

