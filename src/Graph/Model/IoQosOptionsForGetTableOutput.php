<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class IoQosOptionsForGetTableOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IoQosOptionsForGetTableOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iops_limit' => 'int',
        'read_bandwidth_limit_in_bytes' => 'int',
        'storage_capacity_limit_in_bytes' => 'int',
        'write_bandwidth_limit_in_bytes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iops_limit' => 'int64',
        'read_bandwidth_limit_in_bytes' => 'int64',
        'storage_capacity_limit_in_bytes' => 'int64',
        'write_bandwidth_limit_in_bytes' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iops_limit' => 'iops_limit',
        'read_bandwidth_limit_in_bytes' => 'read_bandwidth_limit_in_bytes',
        'storage_capacity_limit_in_bytes' => 'storage_capacity_limit_in_bytes',
        'write_bandwidth_limit_in_bytes' => 'write_bandwidth_limit_in_bytes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iops_limit' => 'setIopsLimit',
        'read_bandwidth_limit_in_bytes' => 'setReadBandwidthLimitInBytes',
        'storage_capacity_limit_in_bytes' => 'setStorageCapacityLimitInBytes',
        'write_bandwidth_limit_in_bytes' => 'setWriteBandwidthLimitInBytes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iops_limit' => 'getIopsLimit',
        'read_bandwidth_limit_in_bytes' => 'getReadBandwidthLimitInBytes',
        'storage_capacity_limit_in_bytes' => 'getStorageCapacityLimitInBytes',
        'write_bandwidth_limit_in_bytes' => 'getWriteBandwidthLimitInBytes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iops_limit'] = isset($data['iops_limit']) ? $data['iops_limit'] : null;
        $this->container['read_bandwidth_limit_in_bytes'] = isset($data['read_bandwidth_limit_in_bytes']) ? $data['read_bandwidth_limit_in_bytes'] : null;
        $this->container['storage_capacity_limit_in_bytes'] = isset($data['storage_capacity_limit_in_bytes']) ? $data['storage_capacity_limit_in_bytes'] : null;
        $this->container['write_bandwidth_limit_in_bytes'] = isset($data['write_bandwidth_limit_in_bytes']) ? $data['write_bandwidth_limit_in_bytes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iops_limit
     *
     * @return int
     */
    public function getIopsLimit()
    {
        return $this->container['iops_limit'];
    }

    /**
     * Sets iops_limit
     *
     * @param int $iops_limit iops_limit
     *
     * @return $this
     */
    public function setIopsLimit($iops_limit)
    {
        $this->container['iops_limit'] = $iops_limit;

        return $this;
    }

    /**
     * Gets read_bandwidth_limit_in_bytes
     *
     * @return int
     */
    public function getReadBandwidthLimitInBytes()
    {
        return $this->container['read_bandwidth_limit_in_bytes'];
    }

    /**
     * Sets read_bandwidth_limit_in_bytes
     *
     * @param int $read_bandwidth_limit_in_bytes read_bandwidth_limit_in_bytes
     *
     * @return $this
     */
    public function setReadBandwidthLimitInBytes($read_bandwidth_limit_in_bytes)
    {
        $this->container['read_bandwidth_limit_in_bytes'] = $read_bandwidth_limit_in_bytes;

        return $this;
    }

    /**
     * Gets storage_capacity_limit_in_bytes
     *
     * @return int
     */
    public function getStorageCapacityLimitInBytes()
    {
        return $this->container['storage_capacity_limit_in_bytes'];
    }

    /**
     * Sets storage_capacity_limit_in_bytes
     *
     * @param int $storage_capacity_limit_in_bytes storage_capacity_limit_in_bytes
     *
     * @return $this
     */
    public function setStorageCapacityLimitInBytes($storage_capacity_limit_in_bytes)
    {
        $this->container['storage_capacity_limit_in_bytes'] = $storage_capacity_limit_in_bytes;

        return $this;
    }

    /**
     * Gets write_bandwidth_limit_in_bytes
     *
     * @return int
     */
    public function getWriteBandwidthLimitInBytes()
    {
        return $this->container['write_bandwidth_limit_in_bytes'];
    }

    /**
     * Sets write_bandwidth_limit_in_bytes
     *
     * @param int $write_bandwidth_limit_in_bytes write_bandwidth_limit_in_bytes
     *
     * @return $this
     */
    public function setWriteBandwidthLimitInBytes($write_bandwidth_limit_in_bytes)
    {
        $this->container['write_bandwidth_limit_in_bytes'] = $write_bandwidth_limit_in_bytes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

