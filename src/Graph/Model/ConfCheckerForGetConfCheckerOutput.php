<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConfCheckerForGetConfCheckerOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfCheckerForGetConfCheckerOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bpm_id' => 'string',
        'conf_checker_python_script' => 'string',
        'description' => 'string',
        'id' => 'int',
        'modify_time' => 'string',
        'name' => 'string',
        'operator' => 'string',
        'psm' => 'string',
        'region' => 'string',
        'test_case' => 'string',
        'type' => 'string',
        'validator_version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bpm_id' => null,
        'conf_checker_python_script' => null,
        'description' => null,
        'id' => 'int64',
        'modify_time' => null,
        'name' => null,
        'operator' => null,
        'psm' => null,
        'region' => null,
        'test_case' => null,
        'type' => null,
        'validator_version' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bpm_id' => 'BpmID',
        'conf_checker_python_script' => 'ConfCheckerPythonScript',
        'description' => 'Description',
        'id' => 'Id',
        'modify_time' => 'ModifyTime',
        'name' => 'Name',
        'operator' => 'Operator',
        'psm' => 'Psm',
        'region' => 'Region',
        'test_case' => 'TestCase',
        'type' => 'Type',
        'validator_version' => 'ValidatorVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bpm_id' => 'setBpmId',
        'conf_checker_python_script' => 'setConfCheckerPythonScript',
        'description' => 'setDescription',
        'id' => 'setId',
        'modify_time' => 'setModifyTime',
        'name' => 'setName',
        'operator' => 'setOperator',
        'psm' => 'setPsm',
        'region' => 'setRegion',
        'test_case' => 'setTestCase',
        'type' => 'setType',
        'validator_version' => 'setValidatorVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bpm_id' => 'getBpmId',
        'conf_checker_python_script' => 'getConfCheckerPythonScript',
        'description' => 'getDescription',
        'id' => 'getId',
        'modify_time' => 'getModifyTime',
        'name' => 'getName',
        'operator' => 'getOperator',
        'psm' => 'getPsm',
        'region' => 'getRegion',
        'test_case' => 'getTestCase',
        'type' => 'getType',
        'validator_version' => 'getValidatorVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bpm_id'] = isset($data['bpm_id']) ? $data['bpm_id'] : null;
        $this->container['conf_checker_python_script'] = isset($data['conf_checker_python_script']) ? $data['conf_checker_python_script'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['modify_time'] = isset($data['modify_time']) ? $data['modify_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['psm'] = isset($data['psm']) ? $data['psm'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['test_case'] = isset($data['test_case']) ? $data['test_case'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['validator_version'] = isset($data['validator_version']) ? $data['validator_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bpm_id
     *
     * @return string
     */
    public function getBpmId()
    {
        return $this->container['bpm_id'];
    }

    /**
     * Sets bpm_id
     *
     * @param string $bpm_id bpm_id
     *
     * @return $this
     */
    public function setBpmId($bpm_id)
    {
        $this->container['bpm_id'] = $bpm_id;

        return $this;
    }

    /**
     * Gets conf_checker_python_script
     *
     * @return string
     */
    public function getConfCheckerPythonScript()
    {
        return $this->container['conf_checker_python_script'];
    }

    /**
     * Sets conf_checker_python_script
     *
     * @param string $conf_checker_python_script conf_checker_python_script
     *
     * @return $this
     */
    public function setConfCheckerPythonScript($conf_checker_python_script)
    {
        $this->container['conf_checker_python_script'] = $conf_checker_python_script;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets modify_time
     *
     * @return string
     */
    public function getModifyTime()
    {
        return $this->container['modify_time'];
    }

    /**
     * Sets modify_time
     *
     * @param string $modify_time modify_time
     *
     * @return $this
     */
    public function setModifyTime($modify_time)
    {
        $this->container['modify_time'] = $modify_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets psm
     *
     * @return string
     */
    public function getPsm()
    {
        return $this->container['psm'];
    }

    /**
     * Sets psm
     *
     * @param string $psm psm
     *
     * @return $this
     */
    public function setPsm($psm)
    {
        $this->container['psm'] = $psm;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets test_case
     *
     * @return string
     */
    public function getTestCase()
    {
        return $this->container['test_case'];
    }

    /**
     * Sets test_case
     *
     * @param string $test_case test_case
     *
     * @return $this
     */
    public function setTestCase($test_case)
    {
        $this->container['test_case'] = $test_case;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets validator_version
     *
     * @return int
     */
    public function getValidatorVersion()
    {
        return $this->container['validator_version'];
    }

    /**
     * Sets validator_version
     *
     * @param int $validator_version validator_version
     *
     * @return $this
     */
    public function setValidatorVersion($validator_version)
    {
        $this->container['validator_version'] = $validator_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

