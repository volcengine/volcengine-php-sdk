<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VsInfosWithComponentInfoForGetVersionSetAndComponentsInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'vsInfosWithComponentInfoForGetVersionSetAndComponentsInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'component_info' => '\Volcengine\Graph\Model\ComponentInfoForGetVersionSetAndComponentsInfoOutput[]',
        'version_set_create_time' => 'string',
        'version_set_id' => 'int',
        'version_set_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'component_info' => null,
        'version_set_create_time' => null,
        'version_set_id' => 'int32',
        'version_set_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'component_info' => 'componentInfo',
        'version_set_create_time' => 'versionSetCreateTime',
        'version_set_id' => 'versionSetId',
        'version_set_name' => 'versionSetName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'component_info' => 'setComponentInfo',
        'version_set_create_time' => 'setVersionSetCreateTime',
        'version_set_id' => 'setVersionSetId',
        'version_set_name' => 'setVersionSetName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'component_info' => 'getComponentInfo',
        'version_set_create_time' => 'getVersionSetCreateTime',
        'version_set_id' => 'getVersionSetId',
        'version_set_name' => 'getVersionSetName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['component_info'] = isset($data['component_info']) ? $data['component_info'] : null;
        $this->container['version_set_create_time'] = isset($data['version_set_create_time']) ? $data['version_set_create_time'] : null;
        $this->container['version_set_id'] = isset($data['version_set_id']) ? $data['version_set_id'] : null;
        $this->container['version_set_name'] = isset($data['version_set_name']) ? $data['version_set_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets component_info
     *
     * @return \Volcengine\Graph\Model\ComponentInfoForGetVersionSetAndComponentsInfoOutput[]
     */
    public function getComponentInfo()
    {
        return $this->container['component_info'];
    }

    /**
     * Sets component_info
     *
     * @param \Volcengine\Graph\Model\ComponentInfoForGetVersionSetAndComponentsInfoOutput[] $component_info component_info
     *
     * @return $this
     */
    public function setComponentInfo($component_info)
    {
        $this->container['component_info'] = $component_info;

        return $this;
    }

    /**
     * Gets version_set_create_time
     *
     * @return string
     */
    public function getVersionSetCreateTime()
    {
        return $this->container['version_set_create_time'];
    }

    /**
     * Sets version_set_create_time
     *
     * @param string $version_set_create_time version_set_create_time
     *
     * @return $this
     */
    public function setVersionSetCreateTime($version_set_create_time)
    {
        $this->container['version_set_create_time'] = $version_set_create_time;

        return $this;
    }

    /**
     * Gets version_set_id
     *
     * @return int
     */
    public function getVersionSetId()
    {
        return $this->container['version_set_id'];
    }

    /**
     * Sets version_set_id
     *
     * @param int $version_set_id version_set_id
     *
     * @return $this
     */
    public function setVersionSetId($version_set_id)
    {
        $this->container['version_set_id'] = $version_set_id;

        return $this;
    }

    /**
     * Gets version_set_name
     *
     * @return string
     */
    public function getVersionSetName()
    {
        return $this->container['version_set_name'];
    }

    /**
     * Sets version_set_name
     *
     * @param string $version_set_name version_set_name
     *
     * @return $this
     */
    public function setVersionSetName($version_set_name)
    {
        $this->container['version_set_name'] = $version_set_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

