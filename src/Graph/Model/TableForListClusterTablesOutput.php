<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Graph\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TableForListClusterTablesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tableForListClusterTablesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_readonly' => 'bool',
        'partition_num' => 'int',
        'table_id' => 'int',
        'table_name' => 'string',
        'tablet_num' => 'int',
        'vdc_replica' => '\Volcengine\Graph\Model\VdcReplicaForListClusterTablesOutput[]',
        'writeable_vdc' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_readonly' => null,
        'partition_num' => 'int64',
        'table_id' => 'int64',
        'table_name' => null,
        'tablet_num' => 'int64',
        'vdc_replica' => null,
        'writeable_vdc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_readonly' => 'is_readonly',
        'partition_num' => 'partition_num',
        'table_id' => 'table_id',
        'table_name' => 'table_name',
        'tablet_num' => 'tablet_num',
        'vdc_replica' => 'vdc_replica',
        'writeable_vdc' => 'writeable_vdc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_readonly' => 'setIsReadonly',
        'partition_num' => 'setPartitionNum',
        'table_id' => 'setTableId',
        'table_name' => 'setTableName',
        'tablet_num' => 'setTabletNum',
        'vdc_replica' => 'setVdcReplica',
        'writeable_vdc' => 'setWriteableVdc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_readonly' => 'getIsReadonly',
        'partition_num' => 'getPartitionNum',
        'table_id' => 'getTableId',
        'table_name' => 'getTableName',
        'tablet_num' => 'getTabletNum',
        'vdc_replica' => 'getVdcReplica',
        'writeable_vdc' => 'getWriteableVdc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_readonly'] = isset($data['is_readonly']) ? $data['is_readonly'] : null;
        $this->container['partition_num'] = isset($data['partition_num']) ? $data['partition_num'] : null;
        $this->container['table_id'] = isset($data['table_id']) ? $data['table_id'] : null;
        $this->container['table_name'] = isset($data['table_name']) ? $data['table_name'] : null;
        $this->container['tablet_num'] = isset($data['tablet_num']) ? $data['tablet_num'] : null;
        $this->container['vdc_replica'] = isset($data['vdc_replica']) ? $data['vdc_replica'] : null;
        $this->container['writeable_vdc'] = isset($data['writeable_vdc']) ? $data['writeable_vdc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_readonly
     *
     * @return bool
     */
    public function getIsReadonly()
    {
        return $this->container['is_readonly'];
    }

    /**
     * Sets is_readonly
     *
     * @param bool $is_readonly is_readonly
     *
     * @return $this
     */
    public function setIsReadonly($is_readonly)
    {
        $this->container['is_readonly'] = $is_readonly;

        return $this;
    }

    /**
     * Gets partition_num
     *
     * @return int
     */
    public function getPartitionNum()
    {
        return $this->container['partition_num'];
    }

    /**
     * Sets partition_num
     *
     * @param int $partition_num partition_num
     *
     * @return $this
     */
    public function setPartitionNum($partition_num)
    {
        $this->container['partition_num'] = $partition_num;

        return $this;
    }

    /**
     * Gets table_id
     *
     * @return int
     */
    public function getTableId()
    {
        return $this->container['table_id'];
    }

    /**
     * Sets table_id
     *
     * @param int $table_id table_id
     *
     * @return $this
     */
    public function setTableId($table_id)
    {
        $this->container['table_id'] = $table_id;

        return $this;
    }

    /**
     * Gets table_name
     *
     * @return string
     */
    public function getTableName()
    {
        return $this->container['table_name'];
    }

    /**
     * Sets table_name
     *
     * @param string $table_name table_name
     *
     * @return $this
     */
    public function setTableName($table_name)
    {
        $this->container['table_name'] = $table_name;

        return $this;
    }

    /**
     * Gets tablet_num
     *
     * @return int
     */
    public function getTabletNum()
    {
        return $this->container['tablet_num'];
    }

    /**
     * Sets tablet_num
     *
     * @param int $tablet_num tablet_num
     *
     * @return $this
     */
    public function setTabletNum($tablet_num)
    {
        $this->container['tablet_num'] = $tablet_num;

        return $this;
    }

    /**
     * Gets vdc_replica
     *
     * @return \Volcengine\Graph\Model\VdcReplicaForListClusterTablesOutput[]
     */
    public function getVdcReplica()
    {
        return $this->container['vdc_replica'];
    }

    /**
     * Sets vdc_replica
     *
     * @param \Volcengine\Graph\Model\VdcReplicaForListClusterTablesOutput[] $vdc_replica vdc_replica
     *
     * @return $this
     */
    public function setVdcReplica($vdc_replica)
    {
        $this->container['vdc_replica'] = $vdc_replica;

        return $this;
    }

    /**
     * Gets writeable_vdc
     *
     * @return string[]
     */
    public function getWriteableVdc()
    {
        return $this->container['writeable_vdc'];
    }

    /**
     * Sets writeable_vdc
     *
     * @param string[] $writeable_vdc writeable_vdc
     *
     * @return $this
     */
    public function setWriteableVdc($writeable_vdc)
    {
        $this->container['writeable_vdc'] = $writeable_vdc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

