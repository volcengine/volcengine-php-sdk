<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyNLBListenerAttributesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyNLBListenerAttributesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ca_certificate_id' => 'string',
        'ca_certificate_source' => 'string',
        'ca_enabled' => 'bool',
        'certificate_id' => 'string',
        'certificate_source' => 'string',
        'connection_timeout' => 'int',
        'description' => 'string',
        'enabled' => 'bool',
        'listener_id' => 'string',
        'listener_name' => 'string',
        'pca_certificate_id' => 'string',
        'security_policy_id' => 'string',
        'security_policy_type' => 'string',
        'server_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ca_certificate_id' => null,
        'ca_certificate_source' => null,
        'ca_enabled' => null,
        'certificate_id' => null,
        'certificate_source' => null,
        'connection_timeout' => null,
        'description' => null,
        'enabled' => null,
        'listener_id' => null,
        'listener_name' => null,
        'pca_certificate_id' => null,
        'security_policy_id' => null,
        'security_policy_type' => null,
        'server_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ca_certificate_id' => 'CACertificateId',
        'ca_certificate_source' => 'CACertificateSource',
        'ca_enabled' => 'CAEnabled',
        'certificate_id' => 'CertificateId',
        'certificate_source' => 'CertificateSource',
        'connection_timeout' => 'ConnectionTimeout',
        'description' => 'Description',
        'enabled' => 'Enabled',
        'listener_id' => 'ListenerId',
        'listener_name' => 'ListenerName',
        'pca_certificate_id' => 'PCACertificateId',
        'security_policy_id' => 'SecurityPolicyId',
        'security_policy_type' => 'SecurityPolicyType',
        'server_group_id' => 'ServerGroupId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ca_certificate_id' => 'setCaCertificateId',
        'ca_certificate_source' => 'setCaCertificateSource',
        'ca_enabled' => 'setCaEnabled',
        'certificate_id' => 'setCertificateId',
        'certificate_source' => 'setCertificateSource',
        'connection_timeout' => 'setConnectionTimeout',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'listener_id' => 'setListenerId',
        'listener_name' => 'setListenerName',
        'pca_certificate_id' => 'setPcaCertificateId',
        'security_policy_id' => 'setSecurityPolicyId',
        'security_policy_type' => 'setSecurityPolicyType',
        'server_group_id' => 'setServerGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ca_certificate_id' => 'getCaCertificateId',
        'ca_certificate_source' => 'getCaCertificateSource',
        'ca_enabled' => 'getCaEnabled',
        'certificate_id' => 'getCertificateId',
        'certificate_source' => 'getCertificateSource',
        'connection_timeout' => 'getConnectionTimeout',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'listener_id' => 'getListenerId',
        'listener_name' => 'getListenerName',
        'pca_certificate_id' => 'getPcaCertificateId',
        'security_policy_id' => 'getSecurityPolicyId',
        'security_policy_type' => 'getSecurityPolicyType',
        'server_group_id' => 'getServerGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ca_certificate_id'] = isset($data['ca_certificate_id']) ? $data['ca_certificate_id'] : null;
        $this->container['ca_certificate_source'] = isset($data['ca_certificate_source']) ? $data['ca_certificate_source'] : null;
        $this->container['ca_enabled'] = isset($data['ca_enabled']) ? $data['ca_enabled'] : null;
        $this->container['certificate_id'] = isset($data['certificate_id']) ? $data['certificate_id'] : null;
        $this->container['certificate_source'] = isset($data['certificate_source']) ? $data['certificate_source'] : null;
        $this->container['connection_timeout'] = isset($data['connection_timeout']) ? $data['connection_timeout'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['listener_id'] = isset($data['listener_id']) ? $data['listener_id'] : null;
        $this->container['listener_name'] = isset($data['listener_name']) ? $data['listener_name'] : null;
        $this->container['pca_certificate_id'] = isset($data['pca_certificate_id']) ? $data['pca_certificate_id'] : null;
        $this->container['security_policy_id'] = isset($data['security_policy_id']) ? $data['security_policy_id'] : null;
        $this->container['security_policy_type'] = isset($data['security_policy_type']) ? $data['security_policy_type'] : null;
        $this->container['server_group_id'] = isset($data['server_group_id']) ? $data['server_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listener_id'] === null) {
            $invalidProperties[] = "'listener_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ca_certificate_id
     *
     * @return string
     */
    public function getCaCertificateId()
    {
        return $this->container['ca_certificate_id'];
    }

    /**
     * Sets ca_certificate_id
     *
     * @param string $ca_certificate_id ca_certificate_id
     *
     * @return $this
     */
    public function setCaCertificateId($ca_certificate_id)
    {
        $this->container['ca_certificate_id'] = $ca_certificate_id;

        return $this;
    }

    /**
     * Gets ca_certificate_source
     *
     * @return string
     */
    public function getCaCertificateSource()
    {
        return $this->container['ca_certificate_source'];
    }

    /**
     * Sets ca_certificate_source
     *
     * @param string $ca_certificate_source ca_certificate_source
     *
     * @return $this
     */
    public function setCaCertificateSource($ca_certificate_source)
    {
        $this->container['ca_certificate_source'] = $ca_certificate_source;

        return $this;
    }

    /**
     * Gets ca_enabled
     *
     * @return bool
     */
    public function getCaEnabled()
    {
        return $this->container['ca_enabled'];
    }

    /**
     * Sets ca_enabled
     *
     * @param bool $ca_enabled ca_enabled
     *
     * @return $this
     */
    public function setCaEnabled($ca_enabled)
    {
        $this->container['ca_enabled'] = $ca_enabled;

        return $this;
    }

    /**
     * Gets certificate_id
     *
     * @return string
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param string $certificate_id certificate_id
     *
     * @return $this
     */
    public function setCertificateId($certificate_id)
    {
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets certificate_source
     *
     * @return string
     */
    public function getCertificateSource()
    {
        return $this->container['certificate_source'];
    }

    /**
     * Sets certificate_source
     *
     * @param string $certificate_source certificate_source
     *
     * @return $this
     */
    public function setCertificateSource($certificate_source)
    {
        $this->container['certificate_source'] = $certificate_source;

        return $this;
    }

    /**
     * Gets connection_timeout
     *
     * @return int
     */
    public function getConnectionTimeout()
    {
        return $this->container['connection_timeout'];
    }

    /**
     * Sets connection_timeout
     *
     * @param int $connection_timeout connection_timeout
     *
     * @return $this
     */
    public function setConnectionTimeout($connection_timeout)
    {
        $this->container['connection_timeout'] = $connection_timeout;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets listener_id
     *
     * @return string
     */
    public function getListenerId()
    {
        return $this->container['listener_id'];
    }

    /**
     * Sets listener_id
     *
     * @param string $listener_id listener_id
     *
     * @return $this
     */
    public function setListenerId($listener_id)
    {
        $this->container['listener_id'] = $listener_id;

        return $this;
    }

    /**
     * Gets listener_name
     *
     * @return string
     */
    public function getListenerName()
    {
        return $this->container['listener_name'];
    }

    /**
     * Sets listener_name
     *
     * @param string $listener_name listener_name
     *
     * @return $this
     */
    public function setListenerName($listener_name)
    {
        $this->container['listener_name'] = $listener_name;

        return $this;
    }

    /**
     * Gets pca_certificate_id
     *
     * @return string
     */
    public function getPcaCertificateId()
    {
        return $this->container['pca_certificate_id'];
    }

    /**
     * Sets pca_certificate_id
     *
     * @param string $pca_certificate_id pca_certificate_id
     *
     * @return $this
     */
    public function setPcaCertificateId($pca_certificate_id)
    {
        $this->container['pca_certificate_id'] = $pca_certificate_id;

        return $this;
    }

    /**
     * Gets security_policy_id
     *
     * @return string
     */
    public function getSecurityPolicyId()
    {
        return $this->container['security_policy_id'];
    }

    /**
     * Sets security_policy_id
     *
     * @param string $security_policy_id security_policy_id
     *
     * @return $this
     */
    public function setSecurityPolicyId($security_policy_id)
    {
        $this->container['security_policy_id'] = $security_policy_id;

        return $this;
    }

    /**
     * Gets security_policy_type
     *
     * @return string
     */
    public function getSecurityPolicyType()
    {
        return $this->container['security_policy_type'];
    }

    /**
     * Sets security_policy_type
     *
     * @param string $security_policy_type security_policy_type
     *
     * @return $this
     */
    public function setSecurityPolicyType($security_policy_type)
    {
        $this->container['security_policy_type'] = $security_policy_type;

        return $this;
    }

    /**
     * Gets server_group_id
     *
     * @return string
     */
    public function getServerGroupId()
    {
        return $this->container['server_group_id'];
    }

    /**
     * Sets server_group_id
     *
     * @param string $server_group_id server_group_id
     *
     * @return $this
     */
    public function setServerGroupId($server_group_id)
    {
        $this->container['server_group_id'] = $server_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

