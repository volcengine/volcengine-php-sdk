<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeLoadBalancersRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeLoadBalancersRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_ip_version' => 'string',
        'eip_address' => 'string',
        'eni_address' => 'string',
        'instance_ids' => 'string[]',
        'instance_ips' => 'string[]',
        'load_balancer_ids' => 'string[]',
        'load_balancer_name' => 'string',
        'master_zone_id' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'status' => 'string',
        'tag_filters' => '\Volcengine\Clb\Model\TagFilterForDescribeLoadBalancersInput[]',
        'type' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_ip_version' => null,
        'eip_address' => null,
        'eni_address' => null,
        'instance_ids' => null,
        'instance_ips' => null,
        'load_balancer_ids' => null,
        'load_balancer_name' => null,
        'master_zone_id' => null,
        'page_number' => null,
        'page_size' => null,
        'project_name' => null,
        'status' => null,
        'tag_filters' => null,
        'type' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_ip_version' => 'AddressIpVersion',
        'eip_address' => 'EipAddress',
        'eni_address' => 'EniAddress',
        'instance_ids' => 'InstanceIds',
        'instance_ips' => 'InstanceIps',
        'load_balancer_ids' => 'LoadBalancerIds',
        'load_balancer_name' => 'LoadBalancerName',
        'master_zone_id' => 'MasterZoneId',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'status' => 'Status',
        'tag_filters' => 'TagFilters',
        'type' => 'Type',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_ip_version' => 'setAddressIpVersion',
        'eip_address' => 'setEipAddress',
        'eni_address' => 'setEniAddress',
        'instance_ids' => 'setInstanceIds',
        'instance_ips' => 'setInstanceIps',
        'load_balancer_ids' => 'setLoadBalancerIds',
        'load_balancer_name' => 'setLoadBalancerName',
        'master_zone_id' => 'setMasterZoneId',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'status' => 'setStatus',
        'tag_filters' => 'setTagFilters',
        'type' => 'setType',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_ip_version' => 'getAddressIpVersion',
        'eip_address' => 'getEipAddress',
        'eni_address' => 'getEniAddress',
        'instance_ids' => 'getInstanceIds',
        'instance_ips' => 'getInstanceIps',
        'load_balancer_ids' => 'getLoadBalancerIds',
        'load_balancer_name' => 'getLoadBalancerName',
        'master_zone_id' => 'getMasterZoneId',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'status' => 'getStatus',
        'tag_filters' => 'getTagFilters',
        'type' => 'getType',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_ip_version'] = isset($data['address_ip_version']) ? $data['address_ip_version'] : null;
        $this->container['eip_address'] = isset($data['eip_address']) ? $data['eip_address'] : null;
        $this->container['eni_address'] = isset($data['eni_address']) ? $data['eni_address'] : null;
        $this->container['instance_ids'] = isset($data['instance_ids']) ? $data['instance_ids'] : null;
        $this->container['instance_ips'] = isset($data['instance_ips']) ? $data['instance_ips'] : null;
        $this->container['load_balancer_ids'] = isset($data['load_balancer_ids']) ? $data['load_balancer_ids'] : null;
        $this->container['load_balancer_name'] = isset($data['load_balancer_name']) ? $data['load_balancer_name'] : null;
        $this->container['master_zone_id'] = isset($data['master_zone_id']) ? $data['master_zone_id'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_ip_version
     *
     * @return string
     */
    public function getAddressIpVersion()
    {
        return $this->container['address_ip_version'];
    }

    /**
     * Sets address_ip_version
     *
     * @param string $address_ip_version address_ip_version
     *
     * @return $this
     */
    public function setAddressIpVersion($address_ip_version)
    {
        $this->container['address_ip_version'] = $address_ip_version;

        return $this;
    }

    /**
     * Gets eip_address
     *
     * @return string
     */
    public function getEipAddress()
    {
        return $this->container['eip_address'];
    }

    /**
     * Sets eip_address
     *
     * @param string $eip_address eip_address
     *
     * @return $this
     */
    public function setEipAddress($eip_address)
    {
        $this->container['eip_address'] = $eip_address;

        return $this;
    }

    /**
     * Gets eni_address
     *
     * @return string
     */
    public function getEniAddress()
    {
        return $this->container['eni_address'];
    }

    /**
     * Sets eni_address
     *
     * @param string $eni_address eni_address
     *
     * @return $this
     */
    public function setEniAddress($eni_address)
    {
        $this->container['eni_address'] = $eni_address;

        return $this;
    }

    /**
     * Gets instance_ids
     *
     * @return string[]
     */
    public function getInstanceIds()
    {
        return $this->container['instance_ids'];
    }

    /**
     * Sets instance_ids
     *
     * @param string[] $instance_ids instance_ids
     *
     * @return $this
     */
    public function setInstanceIds($instance_ids)
    {
        $this->container['instance_ids'] = $instance_ids;

        return $this;
    }

    /**
     * Gets instance_ips
     *
     * @return string[]
     */
    public function getInstanceIps()
    {
        return $this->container['instance_ips'];
    }

    /**
     * Sets instance_ips
     *
     * @param string[] $instance_ips instance_ips
     *
     * @return $this
     */
    public function setInstanceIps($instance_ips)
    {
        $this->container['instance_ips'] = $instance_ips;

        return $this;
    }

    /**
     * Gets load_balancer_ids
     *
     * @return string[]
     */
    public function getLoadBalancerIds()
    {
        return $this->container['load_balancer_ids'];
    }

    /**
     * Sets load_balancer_ids
     *
     * @param string[] $load_balancer_ids load_balancer_ids
     *
     * @return $this
     */
    public function setLoadBalancerIds($load_balancer_ids)
    {
        $this->container['load_balancer_ids'] = $load_balancer_ids;

        return $this;
    }

    /**
     * Gets load_balancer_name
     *
     * @return string
     */
    public function getLoadBalancerName()
    {
        return $this->container['load_balancer_name'];
    }

    /**
     * Sets load_balancer_name
     *
     * @param string $load_balancer_name load_balancer_name
     *
     * @return $this
     */
    public function setLoadBalancerName($load_balancer_name)
    {
        $this->container['load_balancer_name'] = $load_balancer_name;

        return $this;
    }

    /**
     * Gets master_zone_id
     *
     * @return string
     */
    public function getMasterZoneId()
    {
        return $this->container['master_zone_id'];
    }

    /**
     * Sets master_zone_id
     *
     * @param string $master_zone_id master_zone_id
     *
     * @return $this
     */
    public function setMasterZoneId($master_zone_id)
    {
        $this->container['master_zone_id'] = $master_zone_id;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Clb\Model\TagFilterForDescribeLoadBalancersInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Clb\Model\TagFilterForDescribeLoadBalancersInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

