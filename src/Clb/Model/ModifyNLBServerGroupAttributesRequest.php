<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyNLBServerGroupAttributesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyNLBServerGroupAttributesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bypass_security_group_enabled' => 'bool',
        'connection_drain_enabled' => 'bool',
        'connection_drain_timeout' => 'int',
        'description' => 'string',
        'health_check' => '\Volcengine\Clb\Model\HealthCheckForModifyNLBServerGroupAttributesInput',
        'preserve_client_ip_enabled' => 'bool',
        'proxy_protocol_type' => 'string',
        'scheduler' => 'string',
        'server_group_id' => 'string',
        'server_group_name' => 'string',
        'session_persistence_enabled' => 'bool',
        'session_persistence_timeout' => 'int',
        'timestamp_remove_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bypass_security_group_enabled' => null,
        'connection_drain_enabled' => null,
        'connection_drain_timeout' => null,
        'description' => null,
        'health_check' => null,
        'preserve_client_ip_enabled' => null,
        'proxy_protocol_type' => null,
        'scheduler' => null,
        'server_group_id' => null,
        'server_group_name' => null,
        'session_persistence_enabled' => null,
        'session_persistence_timeout' => null,
        'timestamp_remove_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bypass_security_group_enabled' => 'BypassSecurityGroupEnabled',
        'connection_drain_enabled' => 'ConnectionDrainEnabled',
        'connection_drain_timeout' => 'ConnectionDrainTimeout',
        'description' => 'Description',
        'health_check' => 'HealthCheck',
        'preserve_client_ip_enabled' => 'PreserveClientIpEnabled',
        'proxy_protocol_type' => 'ProxyProtocolType',
        'scheduler' => 'Scheduler',
        'server_group_id' => 'ServerGroupId',
        'server_group_name' => 'ServerGroupName',
        'session_persistence_enabled' => 'SessionPersistenceEnabled',
        'session_persistence_timeout' => 'SessionPersistenceTimeout',
        'timestamp_remove_enabled' => 'TimestampRemoveEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bypass_security_group_enabled' => 'setBypassSecurityGroupEnabled',
        'connection_drain_enabled' => 'setConnectionDrainEnabled',
        'connection_drain_timeout' => 'setConnectionDrainTimeout',
        'description' => 'setDescription',
        'health_check' => 'setHealthCheck',
        'preserve_client_ip_enabled' => 'setPreserveClientIpEnabled',
        'proxy_protocol_type' => 'setProxyProtocolType',
        'scheduler' => 'setScheduler',
        'server_group_id' => 'setServerGroupId',
        'server_group_name' => 'setServerGroupName',
        'session_persistence_enabled' => 'setSessionPersistenceEnabled',
        'session_persistence_timeout' => 'setSessionPersistenceTimeout',
        'timestamp_remove_enabled' => 'setTimestampRemoveEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bypass_security_group_enabled' => 'getBypassSecurityGroupEnabled',
        'connection_drain_enabled' => 'getConnectionDrainEnabled',
        'connection_drain_timeout' => 'getConnectionDrainTimeout',
        'description' => 'getDescription',
        'health_check' => 'getHealthCheck',
        'preserve_client_ip_enabled' => 'getPreserveClientIpEnabled',
        'proxy_protocol_type' => 'getProxyProtocolType',
        'scheduler' => 'getScheduler',
        'server_group_id' => 'getServerGroupId',
        'server_group_name' => 'getServerGroupName',
        'session_persistence_enabled' => 'getSessionPersistenceEnabled',
        'session_persistence_timeout' => 'getSessionPersistenceTimeout',
        'timestamp_remove_enabled' => 'getTimestampRemoveEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bypass_security_group_enabled'] = isset($data['bypass_security_group_enabled']) ? $data['bypass_security_group_enabled'] : null;
        $this->container['connection_drain_enabled'] = isset($data['connection_drain_enabled']) ? $data['connection_drain_enabled'] : null;
        $this->container['connection_drain_timeout'] = isset($data['connection_drain_timeout']) ? $data['connection_drain_timeout'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['health_check'] = isset($data['health_check']) ? $data['health_check'] : null;
        $this->container['preserve_client_ip_enabled'] = isset($data['preserve_client_ip_enabled']) ? $data['preserve_client_ip_enabled'] : null;
        $this->container['proxy_protocol_type'] = isset($data['proxy_protocol_type']) ? $data['proxy_protocol_type'] : null;
        $this->container['scheduler'] = isset($data['scheduler']) ? $data['scheduler'] : null;
        $this->container['server_group_id'] = isset($data['server_group_id']) ? $data['server_group_id'] : null;
        $this->container['server_group_name'] = isset($data['server_group_name']) ? $data['server_group_name'] : null;
        $this->container['session_persistence_enabled'] = isset($data['session_persistence_enabled']) ? $data['session_persistence_enabled'] : null;
        $this->container['session_persistence_timeout'] = isset($data['session_persistence_timeout']) ? $data['session_persistence_timeout'] : null;
        $this->container['timestamp_remove_enabled'] = isset($data['timestamp_remove_enabled']) ? $data['timestamp_remove_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['server_group_id'] === null) {
            $invalidProperties[] = "'server_group_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bypass_security_group_enabled
     *
     * @return bool
     */
    public function getBypassSecurityGroupEnabled()
    {
        return $this->container['bypass_security_group_enabled'];
    }

    /**
     * Sets bypass_security_group_enabled
     *
     * @param bool $bypass_security_group_enabled bypass_security_group_enabled
     *
     * @return $this
     */
    public function setBypassSecurityGroupEnabled($bypass_security_group_enabled)
    {
        $this->container['bypass_security_group_enabled'] = $bypass_security_group_enabled;

        return $this;
    }

    /**
     * Gets connection_drain_enabled
     *
     * @return bool
     */
    public function getConnectionDrainEnabled()
    {
        return $this->container['connection_drain_enabled'];
    }

    /**
     * Sets connection_drain_enabled
     *
     * @param bool $connection_drain_enabled connection_drain_enabled
     *
     * @return $this
     */
    public function setConnectionDrainEnabled($connection_drain_enabled)
    {
        $this->container['connection_drain_enabled'] = $connection_drain_enabled;

        return $this;
    }

    /**
     * Gets connection_drain_timeout
     *
     * @return int
     */
    public function getConnectionDrainTimeout()
    {
        return $this->container['connection_drain_timeout'];
    }

    /**
     * Sets connection_drain_timeout
     *
     * @param int $connection_drain_timeout connection_drain_timeout
     *
     * @return $this
     */
    public function setConnectionDrainTimeout($connection_drain_timeout)
    {
        $this->container['connection_drain_timeout'] = $connection_drain_timeout;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets health_check
     *
     * @return \Volcengine\Clb\Model\HealthCheckForModifyNLBServerGroupAttributesInput
     */
    public function getHealthCheck()
    {
        return $this->container['health_check'];
    }

    /**
     * Sets health_check
     *
     * @param \Volcengine\Clb\Model\HealthCheckForModifyNLBServerGroupAttributesInput $health_check health_check
     *
     * @return $this
     */
    public function setHealthCheck($health_check)
    {
        $this->container['health_check'] = $health_check;

        return $this;
    }

    /**
     * Gets preserve_client_ip_enabled
     *
     * @return bool
     */
    public function getPreserveClientIpEnabled()
    {
        return $this->container['preserve_client_ip_enabled'];
    }

    /**
     * Sets preserve_client_ip_enabled
     *
     * @param bool $preserve_client_ip_enabled preserve_client_ip_enabled
     *
     * @return $this
     */
    public function setPreserveClientIpEnabled($preserve_client_ip_enabled)
    {
        $this->container['preserve_client_ip_enabled'] = $preserve_client_ip_enabled;

        return $this;
    }

    /**
     * Gets proxy_protocol_type
     *
     * @return string
     */
    public function getProxyProtocolType()
    {
        return $this->container['proxy_protocol_type'];
    }

    /**
     * Sets proxy_protocol_type
     *
     * @param string $proxy_protocol_type proxy_protocol_type
     *
     * @return $this
     */
    public function setProxyProtocolType($proxy_protocol_type)
    {
        $this->container['proxy_protocol_type'] = $proxy_protocol_type;

        return $this;
    }

    /**
     * Gets scheduler
     *
     * @return string
     */
    public function getScheduler()
    {
        return $this->container['scheduler'];
    }

    /**
     * Sets scheduler
     *
     * @param string $scheduler scheduler
     *
     * @return $this
     */
    public function setScheduler($scheduler)
    {
        $this->container['scheduler'] = $scheduler;

        return $this;
    }

    /**
     * Gets server_group_id
     *
     * @return string
     */
    public function getServerGroupId()
    {
        return $this->container['server_group_id'];
    }

    /**
     * Sets server_group_id
     *
     * @param string $server_group_id server_group_id
     *
     * @return $this
     */
    public function setServerGroupId($server_group_id)
    {
        $this->container['server_group_id'] = $server_group_id;

        return $this;
    }

    /**
     * Gets server_group_name
     *
     * @return string
     */
    public function getServerGroupName()
    {
        return $this->container['server_group_name'];
    }

    /**
     * Sets server_group_name
     *
     * @param string $server_group_name server_group_name
     *
     * @return $this
     */
    public function setServerGroupName($server_group_name)
    {
        $this->container['server_group_name'] = $server_group_name;

        return $this;
    }

    /**
     * Gets session_persistence_enabled
     *
     * @return bool
     */
    public function getSessionPersistenceEnabled()
    {
        return $this->container['session_persistence_enabled'];
    }

    /**
     * Sets session_persistence_enabled
     *
     * @param bool $session_persistence_enabled session_persistence_enabled
     *
     * @return $this
     */
    public function setSessionPersistenceEnabled($session_persistence_enabled)
    {
        $this->container['session_persistence_enabled'] = $session_persistence_enabled;

        return $this;
    }

    /**
     * Gets session_persistence_timeout
     *
     * @return int
     */
    public function getSessionPersistenceTimeout()
    {
        return $this->container['session_persistence_timeout'];
    }

    /**
     * Sets session_persistence_timeout
     *
     * @param int $session_persistence_timeout session_persistence_timeout
     *
     * @return $this
     */
    public function setSessionPersistenceTimeout($session_persistence_timeout)
    {
        $this->container['session_persistence_timeout'] = $session_persistence_timeout;

        return $this;
    }

    /**
     * Gets timestamp_remove_enabled
     *
     * @return bool
     */
    public function getTimestampRemoveEnabled()
    {
        return $this->container['timestamp_remove_enabled'];
    }

    /**
     * Sets timestamp_remove_enabled
     *
     * @param bool $timestamp_remove_enabled timestamp_remove_enabled
     *
     * @return $this
     */
    public function setTimestampRemoveEnabled($timestamp_remove_enabled)
    {
        $this->container['timestamp_remove_enabled'] = $timestamp_remove_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

