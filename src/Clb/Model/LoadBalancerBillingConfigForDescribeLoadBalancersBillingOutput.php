<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class LoadBalancerBillingConfigForDescribeLoadBalancersBillingOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoadBalancerBillingConfigForDescribeLoadBalancersBillingOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_type' => 'int',
        'expired_time' => 'string',
        'instance_status' => 'int',
        'load_balancer_id' => 'string',
        'overdue_reclaim_time' => 'string',
        'overdue_time' => 'string',
        'reclaim_time' => 'string',
        'remain_renew_times' => 'int',
        'renew_period_times' => 'int',
        'renew_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_type' => null,
        'expired_time' => null,
        'instance_status' => null,
        'load_balancer_id' => null,
        'overdue_reclaim_time' => null,
        'overdue_time' => null,
        'reclaim_time' => null,
        'remain_renew_times' => null,
        'renew_period_times' => null,
        'renew_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_type' => 'BillingType',
        'expired_time' => 'ExpiredTime',
        'instance_status' => 'InstanceStatus',
        'load_balancer_id' => 'LoadBalancerId',
        'overdue_reclaim_time' => 'OverdueReclaimTime',
        'overdue_time' => 'OverdueTime',
        'reclaim_time' => 'ReclaimTime',
        'remain_renew_times' => 'RemainRenewTimes',
        'renew_period_times' => 'RenewPeriodTimes',
        'renew_type' => 'RenewType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_type' => 'setBillingType',
        'expired_time' => 'setExpiredTime',
        'instance_status' => 'setInstanceStatus',
        'load_balancer_id' => 'setLoadBalancerId',
        'overdue_reclaim_time' => 'setOverdueReclaimTime',
        'overdue_time' => 'setOverdueTime',
        'reclaim_time' => 'setReclaimTime',
        'remain_renew_times' => 'setRemainRenewTimes',
        'renew_period_times' => 'setRenewPeriodTimes',
        'renew_type' => 'setRenewType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_type' => 'getBillingType',
        'expired_time' => 'getExpiredTime',
        'instance_status' => 'getInstanceStatus',
        'load_balancer_id' => 'getLoadBalancerId',
        'overdue_reclaim_time' => 'getOverdueReclaimTime',
        'overdue_time' => 'getOverdueTime',
        'reclaim_time' => 'getReclaimTime',
        'remain_renew_times' => 'getRemainRenewTimes',
        'renew_period_times' => 'getRenewPeriodTimes',
        'renew_type' => 'getRenewType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['instance_status'] = isset($data['instance_status']) ? $data['instance_status'] : null;
        $this->container['load_balancer_id'] = isset($data['load_balancer_id']) ? $data['load_balancer_id'] : null;
        $this->container['overdue_reclaim_time'] = isset($data['overdue_reclaim_time']) ? $data['overdue_reclaim_time'] : null;
        $this->container['overdue_time'] = isset($data['overdue_time']) ? $data['overdue_time'] : null;
        $this->container['reclaim_time'] = isset($data['reclaim_time']) ? $data['reclaim_time'] : null;
        $this->container['remain_renew_times'] = isset($data['remain_renew_times']) ? $data['remain_renew_times'] : null;
        $this->container['renew_period_times'] = isset($data['renew_period_times']) ? $data['renew_period_times'] : null;
        $this->container['renew_type'] = isset($data['renew_type']) ? $data['renew_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_type
     *
     * @return int
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param int $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets instance_status
     *
     * @return int
     */
    public function getInstanceStatus()
    {
        return $this->container['instance_status'];
    }

    /**
     * Sets instance_status
     *
     * @param int $instance_status instance_status
     *
     * @return $this
     */
    public function setInstanceStatus($instance_status)
    {
        $this->container['instance_status'] = $instance_status;

        return $this;
    }

    /**
     * Gets load_balancer_id
     *
     * @return string
     */
    public function getLoadBalancerId()
    {
        return $this->container['load_balancer_id'];
    }

    /**
     * Sets load_balancer_id
     *
     * @param string $load_balancer_id load_balancer_id
     *
     * @return $this
     */
    public function setLoadBalancerId($load_balancer_id)
    {
        $this->container['load_balancer_id'] = $load_balancer_id;

        return $this;
    }

    /**
     * Gets overdue_reclaim_time
     *
     * @return string
     */
    public function getOverdueReclaimTime()
    {
        return $this->container['overdue_reclaim_time'];
    }

    /**
     * Sets overdue_reclaim_time
     *
     * @param string $overdue_reclaim_time overdue_reclaim_time
     *
     * @return $this
     */
    public function setOverdueReclaimTime($overdue_reclaim_time)
    {
        $this->container['overdue_reclaim_time'] = $overdue_reclaim_time;

        return $this;
    }

    /**
     * Gets overdue_time
     *
     * @return string
     */
    public function getOverdueTime()
    {
        return $this->container['overdue_time'];
    }

    /**
     * Sets overdue_time
     *
     * @param string $overdue_time overdue_time
     *
     * @return $this
     */
    public function setOverdueTime($overdue_time)
    {
        $this->container['overdue_time'] = $overdue_time;

        return $this;
    }

    /**
     * Gets reclaim_time
     *
     * @return string
     */
    public function getReclaimTime()
    {
        return $this->container['reclaim_time'];
    }

    /**
     * Sets reclaim_time
     *
     * @param string $reclaim_time reclaim_time
     *
     * @return $this
     */
    public function setReclaimTime($reclaim_time)
    {
        $this->container['reclaim_time'] = $reclaim_time;

        return $this;
    }

    /**
     * Gets remain_renew_times
     *
     * @return int
     */
    public function getRemainRenewTimes()
    {
        return $this->container['remain_renew_times'];
    }

    /**
     * Sets remain_renew_times
     *
     * @param int $remain_renew_times remain_renew_times
     *
     * @return $this
     */
    public function setRemainRenewTimes($remain_renew_times)
    {
        $this->container['remain_renew_times'] = $remain_renew_times;

        return $this;
    }

    /**
     * Gets renew_period_times
     *
     * @return int
     */
    public function getRenewPeriodTimes()
    {
        return $this->container['renew_period_times'];
    }

    /**
     * Sets renew_period_times
     *
     * @param int $renew_period_times renew_period_times
     *
     * @return $this
     */
    public function setRenewPeriodTimes($renew_period_times)
    {
        $this->container['renew_period_times'] = $renew_period_times;

        return $this;
    }

    /**
     * Gets renew_type
     *
     * @return int
     */
    public function getRenewType()
    {
        return $this->container['renew_type'];
    }

    /**
     * Sets renew_type
     *
     * @param int $renew_type renew_type
     *
     * @return $this
     */
    public function setRenewType($renew_type)
    {
        $this->container['renew_type'] = $renew_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

