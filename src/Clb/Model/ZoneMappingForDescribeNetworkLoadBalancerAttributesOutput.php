<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ZoneMappingForDescribeNetworkLoadBalancerAttributesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZoneMappingForDescribeNetworkLoadBalancerAttributesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eni_id' => 'string',
        'ipv4_address' => 'string',
        'ipv4_eip_address' => 'string',
        'ipv4_eip_id' => 'string',
        'ipv4_hc_status' => 'string',
        'ipv4_local_addresses' => 'string[]',
        'ipv6_address' => 'string',
        'ipv6_eip_id' => 'string',
        'ipv6_hc_status' => 'string',
        'ipv6_local_addresses' => 'string[]',
        'subnet_id' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eni_id' => null,
        'ipv4_address' => null,
        'ipv4_eip_address' => null,
        'ipv4_eip_id' => null,
        'ipv4_hc_status' => null,
        'ipv4_local_addresses' => null,
        'ipv6_address' => null,
        'ipv6_eip_id' => null,
        'ipv6_hc_status' => null,
        'ipv6_local_addresses' => null,
        'subnet_id' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eni_id' => 'EniId',
        'ipv4_address' => 'Ipv4Address',
        'ipv4_eip_address' => 'Ipv4EipAddress',
        'ipv4_eip_id' => 'Ipv4EipId',
        'ipv4_hc_status' => 'Ipv4HcStatus',
        'ipv4_local_addresses' => 'Ipv4LocalAddresses',
        'ipv6_address' => 'Ipv6Address',
        'ipv6_eip_id' => 'Ipv6EipId',
        'ipv6_hc_status' => 'Ipv6HcStatus',
        'ipv6_local_addresses' => 'Ipv6LocalAddresses',
        'subnet_id' => 'SubnetId',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eni_id' => 'setEniId',
        'ipv4_address' => 'setIpv4Address',
        'ipv4_eip_address' => 'setIpv4EipAddress',
        'ipv4_eip_id' => 'setIpv4EipId',
        'ipv4_hc_status' => 'setIpv4HcStatus',
        'ipv4_local_addresses' => 'setIpv4LocalAddresses',
        'ipv6_address' => 'setIpv6Address',
        'ipv6_eip_id' => 'setIpv6EipId',
        'ipv6_hc_status' => 'setIpv6HcStatus',
        'ipv6_local_addresses' => 'setIpv6LocalAddresses',
        'subnet_id' => 'setSubnetId',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eni_id' => 'getEniId',
        'ipv4_address' => 'getIpv4Address',
        'ipv4_eip_address' => 'getIpv4EipAddress',
        'ipv4_eip_id' => 'getIpv4EipId',
        'ipv4_hc_status' => 'getIpv4HcStatus',
        'ipv4_local_addresses' => 'getIpv4LocalAddresses',
        'ipv6_address' => 'getIpv6Address',
        'ipv6_eip_id' => 'getIpv6EipId',
        'ipv6_hc_status' => 'getIpv6HcStatus',
        'ipv6_local_addresses' => 'getIpv6LocalAddresses',
        'subnet_id' => 'getSubnetId',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eni_id'] = isset($data['eni_id']) ? $data['eni_id'] : null;
        $this->container['ipv4_address'] = isset($data['ipv4_address']) ? $data['ipv4_address'] : null;
        $this->container['ipv4_eip_address'] = isset($data['ipv4_eip_address']) ? $data['ipv4_eip_address'] : null;
        $this->container['ipv4_eip_id'] = isset($data['ipv4_eip_id']) ? $data['ipv4_eip_id'] : null;
        $this->container['ipv4_hc_status'] = isset($data['ipv4_hc_status']) ? $data['ipv4_hc_status'] : null;
        $this->container['ipv4_local_addresses'] = isset($data['ipv4_local_addresses']) ? $data['ipv4_local_addresses'] : null;
        $this->container['ipv6_address'] = isset($data['ipv6_address']) ? $data['ipv6_address'] : null;
        $this->container['ipv6_eip_id'] = isset($data['ipv6_eip_id']) ? $data['ipv6_eip_id'] : null;
        $this->container['ipv6_hc_status'] = isset($data['ipv6_hc_status']) ? $data['ipv6_hc_status'] : null;
        $this->container['ipv6_local_addresses'] = isset($data['ipv6_local_addresses']) ? $data['ipv6_local_addresses'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eni_id
     *
     * @return string
     */
    public function getEniId()
    {
        return $this->container['eni_id'];
    }

    /**
     * Sets eni_id
     *
     * @param string $eni_id eni_id
     *
     * @return $this
     */
    public function setEniId($eni_id)
    {
        $this->container['eni_id'] = $eni_id;

        return $this;
    }

    /**
     * Gets ipv4_address
     *
     * @return string
     */
    public function getIpv4Address()
    {
        return $this->container['ipv4_address'];
    }

    /**
     * Sets ipv4_address
     *
     * @param string $ipv4_address ipv4_address
     *
     * @return $this
     */
    public function setIpv4Address($ipv4_address)
    {
        $this->container['ipv4_address'] = $ipv4_address;

        return $this;
    }

    /**
     * Gets ipv4_eip_address
     *
     * @return string
     */
    public function getIpv4EipAddress()
    {
        return $this->container['ipv4_eip_address'];
    }

    /**
     * Sets ipv4_eip_address
     *
     * @param string $ipv4_eip_address ipv4_eip_address
     *
     * @return $this
     */
    public function setIpv4EipAddress($ipv4_eip_address)
    {
        $this->container['ipv4_eip_address'] = $ipv4_eip_address;

        return $this;
    }

    /**
     * Gets ipv4_eip_id
     *
     * @return string
     */
    public function getIpv4EipId()
    {
        return $this->container['ipv4_eip_id'];
    }

    /**
     * Sets ipv4_eip_id
     *
     * @param string $ipv4_eip_id ipv4_eip_id
     *
     * @return $this
     */
    public function setIpv4EipId($ipv4_eip_id)
    {
        $this->container['ipv4_eip_id'] = $ipv4_eip_id;

        return $this;
    }

    /**
     * Gets ipv4_hc_status
     *
     * @return string
     */
    public function getIpv4HcStatus()
    {
        return $this->container['ipv4_hc_status'];
    }

    /**
     * Sets ipv4_hc_status
     *
     * @param string $ipv4_hc_status ipv4_hc_status
     *
     * @return $this
     */
    public function setIpv4HcStatus($ipv4_hc_status)
    {
        $this->container['ipv4_hc_status'] = $ipv4_hc_status;

        return $this;
    }

    /**
     * Gets ipv4_local_addresses
     *
     * @return string[]
     */
    public function getIpv4LocalAddresses()
    {
        return $this->container['ipv4_local_addresses'];
    }

    /**
     * Sets ipv4_local_addresses
     *
     * @param string[] $ipv4_local_addresses ipv4_local_addresses
     *
     * @return $this
     */
    public function setIpv4LocalAddresses($ipv4_local_addresses)
    {
        $this->container['ipv4_local_addresses'] = $ipv4_local_addresses;

        return $this;
    }

    /**
     * Gets ipv6_address
     *
     * @return string
     */
    public function getIpv6Address()
    {
        return $this->container['ipv6_address'];
    }

    /**
     * Sets ipv6_address
     *
     * @param string $ipv6_address ipv6_address
     *
     * @return $this
     */
    public function setIpv6Address($ipv6_address)
    {
        $this->container['ipv6_address'] = $ipv6_address;

        return $this;
    }

    /**
     * Gets ipv6_eip_id
     *
     * @return string
     */
    public function getIpv6EipId()
    {
        return $this->container['ipv6_eip_id'];
    }

    /**
     * Sets ipv6_eip_id
     *
     * @param string $ipv6_eip_id ipv6_eip_id
     *
     * @return $this
     */
    public function setIpv6EipId($ipv6_eip_id)
    {
        $this->container['ipv6_eip_id'] = $ipv6_eip_id;

        return $this;
    }

    /**
     * Gets ipv6_hc_status
     *
     * @return string
     */
    public function getIpv6HcStatus()
    {
        return $this->container['ipv6_hc_status'];
    }

    /**
     * Sets ipv6_hc_status
     *
     * @param string $ipv6_hc_status ipv6_hc_status
     *
     * @return $this
     */
    public function setIpv6HcStatus($ipv6_hc_status)
    {
        $this->container['ipv6_hc_status'] = $ipv6_hc_status;

        return $this;
    }

    /**
     * Gets ipv6_local_addresses
     *
     * @return string[]
     */
    public function getIpv6LocalAddresses()
    {
        return $this->container['ipv6_local_addresses'];
    }

    /**
     * Sets ipv6_local_addresses
     *
     * @param string[] $ipv6_local_addresses ipv6_local_addresses
     *
     * @return $this
     */
    public function setIpv6LocalAddresses($ipv6_local_addresses)
    {
        $this->container['ipv6_local_addresses'] = $ipv6_local_addresses;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

