<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeServerGroupAttributesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeServerGroupAttributesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_ip_version' => 'string',
        'any_port_enabled' => 'string',
        'description' => 'string',
        'listeners' => 'string[]',
        'load_balancer_id' => 'string',
        'request_id' => 'string',
        'server_group_id' => 'string',
        'server_group_name' => 'string',
        'servers' => '\Volcengine\Clb\Model\ServerForDescribeServerGroupAttributesOutput[]',
        'tags' => '\Volcengine\Clb\Model\TagForDescribeServerGroupAttributesOutput[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_ip_version' => null,
        'any_port_enabled' => null,
        'description' => null,
        'listeners' => null,
        'load_balancer_id' => null,
        'request_id' => null,
        'server_group_id' => null,
        'server_group_name' => null,
        'servers' => null,
        'tags' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_ip_version' => 'AddressIpVersion',
        'any_port_enabled' => 'AnyPortEnabled',
        'description' => 'Description',
        'listeners' => 'Listeners',
        'load_balancer_id' => 'LoadBalancerId',
        'request_id' => 'RequestId',
        'server_group_id' => 'ServerGroupId',
        'server_group_name' => 'ServerGroupName',
        'servers' => 'Servers',
        'tags' => 'Tags',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_ip_version' => 'setAddressIpVersion',
        'any_port_enabled' => 'setAnyPortEnabled',
        'description' => 'setDescription',
        'listeners' => 'setListeners',
        'load_balancer_id' => 'setLoadBalancerId',
        'request_id' => 'setRequestId',
        'server_group_id' => 'setServerGroupId',
        'server_group_name' => 'setServerGroupName',
        'servers' => 'setServers',
        'tags' => 'setTags',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_ip_version' => 'getAddressIpVersion',
        'any_port_enabled' => 'getAnyPortEnabled',
        'description' => 'getDescription',
        'listeners' => 'getListeners',
        'load_balancer_id' => 'getLoadBalancerId',
        'request_id' => 'getRequestId',
        'server_group_id' => 'getServerGroupId',
        'server_group_name' => 'getServerGroupName',
        'servers' => 'getServers',
        'tags' => 'getTags',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_ip_version'] = isset($data['address_ip_version']) ? $data['address_ip_version'] : null;
        $this->container['any_port_enabled'] = isset($data['any_port_enabled']) ? $data['any_port_enabled'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['listeners'] = isset($data['listeners']) ? $data['listeners'] : null;
        $this->container['load_balancer_id'] = isset($data['load_balancer_id']) ? $data['load_balancer_id'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['server_group_id'] = isset($data['server_group_id']) ? $data['server_group_id'] : null;
        $this->container['server_group_name'] = isset($data['server_group_name']) ? $data['server_group_name'] : null;
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_ip_version
     *
     * @return string
     */
    public function getAddressIpVersion()
    {
        return $this->container['address_ip_version'];
    }

    /**
     * Sets address_ip_version
     *
     * @param string $address_ip_version address_ip_version
     *
     * @return $this
     */
    public function setAddressIpVersion($address_ip_version)
    {
        $this->container['address_ip_version'] = $address_ip_version;

        return $this;
    }

    /**
     * Gets any_port_enabled
     *
     * @return string
     */
    public function getAnyPortEnabled()
    {
        return $this->container['any_port_enabled'];
    }

    /**
     * Sets any_port_enabled
     *
     * @param string $any_port_enabled any_port_enabled
     *
     * @return $this
     */
    public function setAnyPortEnabled($any_port_enabled)
    {
        $this->container['any_port_enabled'] = $any_port_enabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets listeners
     *
     * @return string[]
     */
    public function getListeners()
    {
        return $this->container['listeners'];
    }

    /**
     * Sets listeners
     *
     * @param string[] $listeners listeners
     *
     * @return $this
     */
    public function setListeners($listeners)
    {
        $this->container['listeners'] = $listeners;

        return $this;
    }

    /**
     * Gets load_balancer_id
     *
     * @return string
     */
    public function getLoadBalancerId()
    {
        return $this->container['load_balancer_id'];
    }

    /**
     * Sets load_balancer_id
     *
     * @param string $load_balancer_id load_balancer_id
     *
     * @return $this
     */
    public function setLoadBalancerId($load_balancer_id)
    {
        $this->container['load_balancer_id'] = $load_balancer_id;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets server_group_id
     *
     * @return string
     */
    public function getServerGroupId()
    {
        return $this->container['server_group_id'];
    }

    /**
     * Sets server_group_id
     *
     * @param string $server_group_id server_group_id
     *
     * @return $this
     */
    public function setServerGroupId($server_group_id)
    {
        $this->container['server_group_id'] = $server_group_id;

        return $this;
    }

    /**
     * Gets server_group_name
     *
     * @return string
     */
    public function getServerGroupName()
    {
        return $this->container['server_group_name'];
    }

    /**
     * Sets server_group_name
     *
     * @param string $server_group_name server_group_name
     *
     * @return $this
     */
    public function setServerGroupName($server_group_name)
    {
        $this->container['server_group_name'] = $server_group_name;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return \Volcengine\Clb\Model\ServerForDescribeServerGroupAttributesOutput[]
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param \Volcengine\Clb\Model\ServerForDescribeServerGroupAttributesOutput[] $servers servers
     *
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Clb\Model\TagForDescribeServerGroupAttributesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Clb\Model\TagForDescribeServerGroupAttributesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

