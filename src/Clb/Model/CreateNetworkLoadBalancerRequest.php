<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateNetworkLoadBalancerRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateNetworkLoadBalancerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'cross_zone_enabled' => 'bool',
        'description' => 'string',
        'ip_address_version' => 'string',
        'ipv4_bandwidth_package_id' => 'string',
        'load_balancer_name' => 'string',
        'modification_protection_status' => 'string',
        'network_type' => 'string',
        'project_name' => 'string',
        'region_id' => 'string',
        'security_group_ids' => 'string[]',
        'tags' => '\Volcengine\Clb\Model\TagForCreateNetworkLoadBalancerInput[]',
        'vpc_id' => 'string',
        'zone_mappings' => '\Volcengine\Clb\Model\ZoneMappingForCreateNetworkLoadBalancerInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'cross_zone_enabled' => null,
        'description' => null,
        'ip_address_version' => null,
        'ipv4_bandwidth_package_id' => null,
        'load_balancer_name' => null,
        'modification_protection_status' => null,
        'network_type' => null,
        'project_name' => null,
        'region_id' => null,
        'security_group_ids' => null,
        'tags' => null,
        'vpc_id' => null,
        'zone_mappings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'cross_zone_enabled' => 'CrossZoneEnabled',
        'description' => 'Description',
        'ip_address_version' => 'IpAddressVersion',
        'ipv4_bandwidth_package_id' => 'Ipv4BandwidthPackageId',
        'load_balancer_name' => 'LoadBalancerName',
        'modification_protection_status' => 'ModificationProtectionStatus',
        'network_type' => 'NetworkType',
        'project_name' => 'ProjectName',
        'region_id' => 'RegionId',
        'security_group_ids' => 'SecurityGroupIds',
        'tags' => 'Tags',
        'vpc_id' => 'VpcId',
        'zone_mappings' => 'ZoneMappings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'cross_zone_enabled' => 'setCrossZoneEnabled',
        'description' => 'setDescription',
        'ip_address_version' => 'setIpAddressVersion',
        'ipv4_bandwidth_package_id' => 'setIpv4BandwidthPackageId',
        'load_balancer_name' => 'setLoadBalancerName',
        'modification_protection_status' => 'setModificationProtectionStatus',
        'network_type' => 'setNetworkType',
        'project_name' => 'setProjectName',
        'region_id' => 'setRegionId',
        'security_group_ids' => 'setSecurityGroupIds',
        'tags' => 'setTags',
        'vpc_id' => 'setVpcId',
        'zone_mappings' => 'setZoneMappings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'cross_zone_enabled' => 'getCrossZoneEnabled',
        'description' => 'getDescription',
        'ip_address_version' => 'getIpAddressVersion',
        'ipv4_bandwidth_package_id' => 'getIpv4BandwidthPackageId',
        'load_balancer_name' => 'getLoadBalancerName',
        'modification_protection_status' => 'getModificationProtectionStatus',
        'network_type' => 'getNetworkType',
        'project_name' => 'getProjectName',
        'region_id' => 'getRegionId',
        'security_group_ids' => 'getSecurityGroupIds',
        'tags' => 'getTags',
        'vpc_id' => 'getVpcId',
        'zone_mappings' => 'getZoneMappings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['cross_zone_enabled'] = isset($data['cross_zone_enabled']) ? $data['cross_zone_enabled'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ip_address_version'] = isset($data['ip_address_version']) ? $data['ip_address_version'] : null;
        $this->container['ipv4_bandwidth_package_id'] = isset($data['ipv4_bandwidth_package_id']) ? $data['ipv4_bandwidth_package_id'] : null;
        $this->container['load_balancer_name'] = isset($data['load_balancer_name']) ? $data['load_balancer_name'] : null;
        $this->container['modification_protection_status'] = isset($data['modification_protection_status']) ? $data['modification_protection_status'] : null;
        $this->container['network_type'] = isset($data['network_type']) ? $data['network_type'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['security_group_ids'] = isset($data['security_group_ids']) ? $data['security_group_ids'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_mappings'] = isset($data['zone_mappings']) ? $data['zone_mappings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['network_type'] === null) {
            $invalidProperties[] = "'network_type' can't be null";
        }
        if ($this->container['region_id'] === null) {
            $invalidProperties[] = "'region_id' can't be null";
        }
        if ($this->container['vpc_id'] === null) {
            $invalidProperties[] = "'vpc_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets cross_zone_enabled
     *
     * @return bool
     */
    public function getCrossZoneEnabled()
    {
        return $this->container['cross_zone_enabled'];
    }

    /**
     * Sets cross_zone_enabled
     *
     * @param bool $cross_zone_enabled cross_zone_enabled
     *
     * @return $this
     */
    public function setCrossZoneEnabled($cross_zone_enabled)
    {
        $this->container['cross_zone_enabled'] = $cross_zone_enabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ip_address_version
     *
     * @return string
     */
    public function getIpAddressVersion()
    {
        return $this->container['ip_address_version'];
    }

    /**
     * Sets ip_address_version
     *
     * @param string $ip_address_version ip_address_version
     *
     * @return $this
     */
    public function setIpAddressVersion($ip_address_version)
    {
        $this->container['ip_address_version'] = $ip_address_version;

        return $this;
    }

    /**
     * Gets ipv4_bandwidth_package_id
     *
     * @return string
     */
    public function getIpv4BandwidthPackageId()
    {
        return $this->container['ipv4_bandwidth_package_id'];
    }

    /**
     * Sets ipv4_bandwidth_package_id
     *
     * @param string $ipv4_bandwidth_package_id ipv4_bandwidth_package_id
     *
     * @return $this
     */
    public function setIpv4BandwidthPackageId($ipv4_bandwidth_package_id)
    {
        $this->container['ipv4_bandwidth_package_id'] = $ipv4_bandwidth_package_id;

        return $this;
    }

    /**
     * Gets load_balancer_name
     *
     * @return string
     */
    public function getLoadBalancerName()
    {
        return $this->container['load_balancer_name'];
    }

    /**
     * Sets load_balancer_name
     *
     * @param string $load_balancer_name load_balancer_name
     *
     * @return $this
     */
    public function setLoadBalancerName($load_balancer_name)
    {
        $this->container['load_balancer_name'] = $load_balancer_name;

        return $this;
    }

    /**
     * Gets modification_protection_status
     *
     * @return string
     */
    public function getModificationProtectionStatus()
    {
        return $this->container['modification_protection_status'];
    }

    /**
     * Sets modification_protection_status
     *
     * @param string $modification_protection_status modification_protection_status
     *
     * @return $this
     */
    public function setModificationProtectionStatus($modification_protection_status)
    {
        $this->container['modification_protection_status'] = $modification_protection_status;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string $network_type network_type
     *
     * @return $this
     */
    public function setNetworkType($network_type)
    {
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets security_group_ids
     *
     * @return string[]
     */
    public function getSecurityGroupIds()
    {
        return $this->container['security_group_ids'];
    }

    /**
     * Sets security_group_ids
     *
     * @param string[] $security_group_ids security_group_ids
     *
     * @return $this
     */
    public function setSecurityGroupIds($security_group_ids)
    {
        $this->container['security_group_ids'] = $security_group_ids;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Clb\Model\TagForCreateNetworkLoadBalancerInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Clb\Model\TagForCreateNetworkLoadBalancerInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_mappings
     *
     * @return \Volcengine\Clb\Model\ZoneMappingForCreateNetworkLoadBalancerInput[]
     */
    public function getZoneMappings()
    {
        return $this->container['zone_mappings'];
    }

    /**
     * Sets zone_mappings
     *
     * @param \Volcengine\Clb\Model\ZoneMappingForCreateNetworkLoadBalancerInput[] $zone_mappings zone_mappings
     *
     * @return $this
     */
    public function setZoneMappings($zone_mappings)
    {
        $this->container['zone_mappings'] = $zone_mappings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

