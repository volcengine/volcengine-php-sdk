<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SecurityPolicyForDescribeNLBSecurityPoliciesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SecurityPolicyForDescribeNLBSecurityPoliciesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'ciphers' => 'string[]',
        'create_time' => 'string',
        'project_name' => 'string',
        'related_listener_ids' => 'string[]',
        'security_policy_id' => 'string',
        'security_policy_name' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Clb\Model\TagForDescribeNLBSecurityPoliciesOutput[]',
        'tls_versions' => 'string[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'ciphers' => null,
        'create_time' => null,
        'project_name' => null,
        'related_listener_ids' => null,
        'security_policy_id' => null,
        'security_policy_name' => null,
        'status' => null,
        'tags' => null,
        'tls_versions' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'ciphers' => 'Ciphers',
        'create_time' => 'CreateTime',
        'project_name' => 'ProjectName',
        'related_listener_ids' => 'RelatedListenerIds',
        'security_policy_id' => 'SecurityPolicyId',
        'security_policy_name' => 'SecurityPolicyName',
        'status' => 'Status',
        'tags' => 'Tags',
        'tls_versions' => 'TlsVersions',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'ciphers' => 'setCiphers',
        'create_time' => 'setCreateTime',
        'project_name' => 'setProjectName',
        'related_listener_ids' => 'setRelatedListenerIds',
        'security_policy_id' => 'setSecurityPolicyId',
        'security_policy_name' => 'setSecurityPolicyName',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'tls_versions' => 'setTlsVersions',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'ciphers' => 'getCiphers',
        'create_time' => 'getCreateTime',
        'project_name' => 'getProjectName',
        'related_listener_ids' => 'getRelatedListenerIds',
        'security_policy_id' => 'getSecurityPolicyId',
        'security_policy_name' => 'getSecurityPolicyName',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'tls_versions' => 'getTlsVersions',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['ciphers'] = isset($data['ciphers']) ? $data['ciphers'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['related_listener_ids'] = isset($data['related_listener_ids']) ? $data['related_listener_ids'] : null;
        $this->container['security_policy_id'] = isset($data['security_policy_id']) ? $data['security_policy_id'] : null;
        $this->container['security_policy_name'] = isset($data['security_policy_name']) ? $data['security_policy_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['tls_versions'] = isset($data['tls_versions']) ? $data['tls_versions'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets ciphers
     *
     * @return string[]
     */
    public function getCiphers()
    {
        return $this->container['ciphers'];
    }

    /**
     * Sets ciphers
     *
     * @param string[] $ciphers ciphers
     *
     * @return $this
     */
    public function setCiphers($ciphers)
    {
        $this->container['ciphers'] = $ciphers;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets related_listener_ids
     *
     * @return string[]
     */
    public function getRelatedListenerIds()
    {
        return $this->container['related_listener_ids'];
    }

    /**
     * Sets related_listener_ids
     *
     * @param string[] $related_listener_ids related_listener_ids
     *
     * @return $this
     */
    public function setRelatedListenerIds($related_listener_ids)
    {
        $this->container['related_listener_ids'] = $related_listener_ids;

        return $this;
    }

    /**
     * Gets security_policy_id
     *
     * @return string
     */
    public function getSecurityPolicyId()
    {
        return $this->container['security_policy_id'];
    }

    /**
     * Sets security_policy_id
     *
     * @param string $security_policy_id security_policy_id
     *
     * @return $this
     */
    public function setSecurityPolicyId($security_policy_id)
    {
        $this->container['security_policy_id'] = $security_policy_id;

        return $this;
    }

    /**
     * Gets security_policy_name
     *
     * @return string
     */
    public function getSecurityPolicyName()
    {
        return $this->container['security_policy_name'];
    }

    /**
     * Sets security_policy_name
     *
     * @param string $security_policy_name security_policy_name
     *
     * @return $this
     */
    public function setSecurityPolicyName($security_policy_name)
    {
        $this->container['security_policy_name'] = $security_policy_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Clb\Model\TagForDescribeNLBSecurityPoliciesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Clb\Model\TagForDescribeNLBSecurityPoliciesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tls_versions
     *
     * @return string[]
     */
    public function getTlsVersions()
    {
        return $this->container['tls_versions'];
    }

    /**
     * Sets tls_versions
     *
     * @param string[] $tls_versions tls_versions
     *
     * @return $this
     */
    public function setTlsVersions($tls_versions)
    {
        $this->container['tls_versions'] = $tls_versions;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

