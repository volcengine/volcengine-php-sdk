<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyNetworkLoadBalancerZonesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyNetworkLoadBalancerZonesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_zone_mappings' => '\Volcengine\Clb\Model\AddZoneMappingForModifyNetworkLoadBalancerZonesInput[]',
        'delete_zone_mappings' => 'string[]',
        'load_balancer_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'add_zone_mappings' => null,
        'delete_zone_mappings' => null,
        'load_balancer_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_zone_mappings' => 'AddZoneMappings',
        'delete_zone_mappings' => 'DeleteZoneMappings',
        'load_balancer_id' => 'LoadBalancerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_zone_mappings' => 'setAddZoneMappings',
        'delete_zone_mappings' => 'setDeleteZoneMappings',
        'load_balancer_id' => 'setLoadBalancerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_zone_mappings' => 'getAddZoneMappings',
        'delete_zone_mappings' => 'getDeleteZoneMappings',
        'load_balancer_id' => 'getLoadBalancerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_zone_mappings'] = isset($data['add_zone_mappings']) ? $data['add_zone_mappings'] : null;
        $this->container['delete_zone_mappings'] = isset($data['delete_zone_mappings']) ? $data['delete_zone_mappings'] : null;
        $this->container['load_balancer_id'] = isset($data['load_balancer_id']) ? $data['load_balancer_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['load_balancer_id'] === null) {
            $invalidProperties[] = "'load_balancer_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_zone_mappings
     *
     * @return \Volcengine\Clb\Model\AddZoneMappingForModifyNetworkLoadBalancerZonesInput[]
     */
    public function getAddZoneMappings()
    {
        return $this->container['add_zone_mappings'];
    }

    /**
     * Sets add_zone_mappings
     *
     * @param \Volcengine\Clb\Model\AddZoneMappingForModifyNetworkLoadBalancerZonesInput[] $add_zone_mappings add_zone_mappings
     *
     * @return $this
     */
    public function setAddZoneMappings($add_zone_mappings)
    {
        $this->container['add_zone_mappings'] = $add_zone_mappings;

        return $this;
    }

    /**
     * Gets delete_zone_mappings
     *
     * @return string[]
     */
    public function getDeleteZoneMappings()
    {
        return $this->container['delete_zone_mappings'];
    }

    /**
     * Sets delete_zone_mappings
     *
     * @param string[] $delete_zone_mappings delete_zone_mappings
     *
     * @return $this
     */
    public function setDeleteZoneMappings($delete_zone_mappings)
    {
        $this->container['delete_zone_mappings'] = $delete_zone_mappings;

        return $this;
    }

    /**
     * Gets load_balancer_id
     *
     * @return string
     */
    public function getLoadBalancerId()
    {
        return $this->container['load_balancer_id'];
    }

    /**
     * Sets load_balancer_id
     *
     * @param string $load_balancer_id load_balancer_id
     *
     * @return $this
     */
    public function setLoadBalancerId($load_balancer_id)
    {
        $this->container['load_balancer_id'] = $load_balancer_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

