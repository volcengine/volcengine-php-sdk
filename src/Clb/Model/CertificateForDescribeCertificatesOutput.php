<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CertificateForDescribeCertificatesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertificateForDescribeCertificatesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certificate_id' => 'string',
        'certificate_name' => 'string',
        'create_time' => 'string',
        'description' => 'string',
        'domain_name' => 'string',
        'expired_at' => 'string',
        'listeners' => 'string[]',
        'project_name' => 'string',
        'service_managed' => 'bool',
        'subject_alternative_names' => 'string[]',
        'tags' => '\Volcengine\Clb\Model\TagForDescribeCertificatesOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'certificate_id' => null,
        'certificate_name' => null,
        'create_time' => null,
        'description' => null,
        'domain_name' => null,
        'expired_at' => null,
        'listeners' => null,
        'project_name' => null,
        'service_managed' => null,
        'subject_alternative_names' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certificate_id' => 'CertificateId',
        'certificate_name' => 'CertificateName',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'domain_name' => 'DomainName',
        'expired_at' => 'ExpiredAt',
        'listeners' => 'Listeners',
        'project_name' => 'ProjectName',
        'service_managed' => 'ServiceManaged',
        'subject_alternative_names' => 'SubjectAlternativeNames',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certificate_id' => 'setCertificateId',
        'certificate_name' => 'setCertificateName',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'domain_name' => 'setDomainName',
        'expired_at' => 'setExpiredAt',
        'listeners' => 'setListeners',
        'project_name' => 'setProjectName',
        'service_managed' => 'setServiceManaged',
        'subject_alternative_names' => 'setSubjectAlternativeNames',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certificate_id' => 'getCertificateId',
        'certificate_name' => 'getCertificateName',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'domain_name' => 'getDomainName',
        'expired_at' => 'getExpiredAt',
        'listeners' => 'getListeners',
        'project_name' => 'getProjectName',
        'service_managed' => 'getServiceManaged',
        'subject_alternative_names' => 'getSubjectAlternativeNames',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certificate_id'] = isset($data['certificate_id']) ? $data['certificate_id'] : null;
        $this->container['certificate_name'] = isset($data['certificate_name']) ? $data['certificate_name'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['domain_name'] = isset($data['domain_name']) ? $data['domain_name'] : null;
        $this->container['expired_at'] = isset($data['expired_at']) ? $data['expired_at'] : null;
        $this->container['listeners'] = isset($data['listeners']) ? $data['listeners'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['service_managed'] = isset($data['service_managed']) ? $data['service_managed'] : null;
        $this->container['subject_alternative_names'] = isset($data['subject_alternative_names']) ? $data['subject_alternative_names'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certificate_id
     *
     * @return string
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param string $certificate_id certificate_id
     *
     * @return $this
     */
    public function setCertificateId($certificate_id)
    {
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets certificate_name
     *
     * @return string
     */
    public function getCertificateName()
    {
        return $this->container['certificate_name'];
    }

    /**
     * Sets certificate_name
     *
     * @param string $certificate_name certificate_name
     *
     * @return $this
     */
    public function setCertificateName($certificate_name)
    {
        $this->container['certificate_name'] = $certificate_name;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string $domain_name domain_name
     *
     * @return $this
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return string
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param string $expired_at expired_at
     *
     * @return $this
     */
    public function setExpiredAt($expired_at)
    {
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets listeners
     *
     * @return string[]
     */
    public function getListeners()
    {
        return $this->container['listeners'];
    }

    /**
     * Sets listeners
     *
     * @param string[] $listeners listeners
     *
     * @return $this
     */
    public function setListeners($listeners)
    {
        $this->container['listeners'] = $listeners;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets service_managed
     *
     * @return bool
     */
    public function getServiceManaged()
    {
        return $this->container['service_managed'];
    }

    /**
     * Sets service_managed
     *
     * @param bool $service_managed service_managed
     *
     * @return $this
     */
    public function setServiceManaged($service_managed)
    {
        $this->container['service_managed'] = $service_managed;

        return $this;
    }

    /**
     * Gets subject_alternative_names
     *
     * @return string[]
     */
    public function getSubjectAlternativeNames()
    {
        return $this->container['subject_alternative_names'];
    }

    /**
     * Sets subject_alternative_names
     *
     * @param string[] $subject_alternative_names subject_alternative_names
     *
     * @return $this
     */
    public function setSubjectAlternativeNames($subject_alternative_names)
    {
        $this->container['subject_alternative_names'] = $subject_alternative_names;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Clb\Model\TagForDescribeCertificatesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Clb\Model\TagForDescribeCertificatesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

