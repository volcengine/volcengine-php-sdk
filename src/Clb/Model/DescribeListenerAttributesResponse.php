<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeListenerAttributesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeListenerAttributesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acl_ids' => 'string[]',
        'acl_status' => 'string',
        'acl_type' => 'string',
        'bandwidth' => 'int',
        'ca_certificate_id' => 'string',
        'ca_enabled' => 'string',
        'cert_center_certificate_id' => 'string',
        'certificate_id' => 'string',
        'certificate_source' => 'string',
        'client_body_timeout' => 'int',
        'client_header_timeout' => 'int',
        'connection_drain_enabled' => 'string',
        'connection_drain_timeout' => 'int',
        'cookie' => 'string',
        'cps' => 'int',
        'create_time' => 'string',
        'description' => 'string',
        'enabled' => 'string',
        'end_port' => 'int',
        'enhanced_scheduler_enable' => 'string',
        'established_timeout' => 'int',
        'health_check' => '\Volcengine\Clb\Model\HealthCheckForDescribeListenerAttributesOutput',
        'http2_enabled' => 'string',
        'keepalive_timeout' => 'int',
        'listener_id' => 'string',
        'listener_name' => 'string',
        'load_balancer_id' => 'string',
        'load_type' => 'string',
        'max_connections' => 'int',
        'persistence_timeout' => 'int',
        'persistence_type' => 'string',
        'port' => 'int',
        'protocol' => 'string',
        'proxy_connect_timeout' => 'int',
        'proxy_protocol_type' => 'string',
        'proxy_read_timeout' => 'int',
        'proxy_send_timeout' => 'int',
        'request_id' => 'string',
        'response_check_enabled' => 'string',
        'scheduler' => 'string',
        'security_policy_id' => 'string',
        'send_timeout' => 'int',
        'server_group_id' => 'string',
        'start_port' => 'int',
        'status' => 'string',
        'tags' => '\Volcengine\Clb\Model\TagForDescribeListenerAttributesOutput[]',
        'update_time' => 'string',
        'waf_protection_enabled' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acl_ids' => null,
        'acl_status' => null,
        'acl_type' => null,
        'bandwidth' => null,
        'ca_certificate_id' => null,
        'ca_enabled' => null,
        'cert_center_certificate_id' => null,
        'certificate_id' => null,
        'certificate_source' => null,
        'client_body_timeout' => null,
        'client_header_timeout' => null,
        'connection_drain_enabled' => null,
        'connection_drain_timeout' => null,
        'cookie' => null,
        'cps' => null,
        'create_time' => null,
        'description' => null,
        'enabled' => null,
        'end_port' => null,
        'enhanced_scheduler_enable' => null,
        'established_timeout' => null,
        'health_check' => null,
        'http2_enabled' => null,
        'keepalive_timeout' => null,
        'listener_id' => null,
        'listener_name' => null,
        'load_balancer_id' => null,
        'load_type' => null,
        'max_connections' => null,
        'persistence_timeout' => null,
        'persistence_type' => null,
        'port' => null,
        'protocol' => null,
        'proxy_connect_timeout' => null,
        'proxy_protocol_type' => null,
        'proxy_read_timeout' => null,
        'proxy_send_timeout' => null,
        'request_id' => null,
        'response_check_enabled' => null,
        'scheduler' => null,
        'security_policy_id' => null,
        'send_timeout' => null,
        'server_group_id' => null,
        'start_port' => null,
        'status' => null,
        'tags' => null,
        'update_time' => null,
        'waf_protection_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acl_ids' => 'AclIds',
        'acl_status' => 'AclStatus',
        'acl_type' => 'AclType',
        'bandwidth' => 'Bandwidth',
        'ca_certificate_id' => 'CACertificateId',
        'ca_enabled' => 'CAEnabled',
        'cert_center_certificate_id' => 'CertCenterCertificateId',
        'certificate_id' => 'CertificateId',
        'certificate_source' => 'CertificateSource',
        'client_body_timeout' => 'ClientBodyTimeout',
        'client_header_timeout' => 'ClientHeaderTimeout',
        'connection_drain_enabled' => 'ConnectionDrainEnabled',
        'connection_drain_timeout' => 'ConnectionDrainTimeout',
        'cookie' => 'Cookie',
        'cps' => 'Cps',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'enabled' => 'Enabled',
        'end_port' => 'EndPort',
        'enhanced_scheduler_enable' => 'EnhancedSchedulerEnable',
        'established_timeout' => 'EstablishedTimeout',
        'health_check' => 'HealthCheck',
        'http2_enabled' => 'Http2Enabled',
        'keepalive_timeout' => 'KeepaliveTimeout',
        'listener_id' => 'ListenerId',
        'listener_name' => 'ListenerName',
        'load_balancer_id' => 'LoadBalancerId',
        'load_type' => 'LoadType',
        'max_connections' => 'MaxConnections',
        'persistence_timeout' => 'PersistenceTimeout',
        'persistence_type' => 'PersistenceType',
        'port' => 'Port',
        'protocol' => 'Protocol',
        'proxy_connect_timeout' => 'ProxyConnectTimeout',
        'proxy_protocol_type' => 'ProxyProtocolType',
        'proxy_read_timeout' => 'ProxyReadTimeout',
        'proxy_send_timeout' => 'ProxySendTimeout',
        'request_id' => 'RequestId',
        'response_check_enabled' => 'ResponseCheckEnabled',
        'scheduler' => 'Scheduler',
        'security_policy_id' => 'SecurityPolicyId',
        'send_timeout' => 'SendTimeout',
        'server_group_id' => 'ServerGroupId',
        'start_port' => 'StartPort',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime',
        'waf_protection_enabled' => 'WafProtectionEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acl_ids' => 'setAclIds',
        'acl_status' => 'setAclStatus',
        'acl_type' => 'setAclType',
        'bandwidth' => 'setBandwidth',
        'ca_certificate_id' => 'setCaCertificateId',
        'ca_enabled' => 'setCaEnabled',
        'cert_center_certificate_id' => 'setCertCenterCertificateId',
        'certificate_id' => 'setCertificateId',
        'certificate_source' => 'setCertificateSource',
        'client_body_timeout' => 'setClientBodyTimeout',
        'client_header_timeout' => 'setClientHeaderTimeout',
        'connection_drain_enabled' => 'setConnectionDrainEnabled',
        'connection_drain_timeout' => 'setConnectionDrainTimeout',
        'cookie' => 'setCookie',
        'cps' => 'setCps',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'end_port' => 'setEndPort',
        'enhanced_scheduler_enable' => 'setEnhancedSchedulerEnable',
        'established_timeout' => 'setEstablishedTimeout',
        'health_check' => 'setHealthCheck',
        'http2_enabled' => 'setHttp2Enabled',
        'keepalive_timeout' => 'setKeepaliveTimeout',
        'listener_id' => 'setListenerId',
        'listener_name' => 'setListenerName',
        'load_balancer_id' => 'setLoadBalancerId',
        'load_type' => 'setLoadType',
        'max_connections' => 'setMaxConnections',
        'persistence_timeout' => 'setPersistenceTimeout',
        'persistence_type' => 'setPersistenceType',
        'port' => 'setPort',
        'protocol' => 'setProtocol',
        'proxy_connect_timeout' => 'setProxyConnectTimeout',
        'proxy_protocol_type' => 'setProxyProtocolType',
        'proxy_read_timeout' => 'setProxyReadTimeout',
        'proxy_send_timeout' => 'setProxySendTimeout',
        'request_id' => 'setRequestId',
        'response_check_enabled' => 'setResponseCheckEnabled',
        'scheduler' => 'setScheduler',
        'security_policy_id' => 'setSecurityPolicyId',
        'send_timeout' => 'setSendTimeout',
        'server_group_id' => 'setServerGroupId',
        'start_port' => 'setStartPort',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime',
        'waf_protection_enabled' => 'setWafProtectionEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acl_ids' => 'getAclIds',
        'acl_status' => 'getAclStatus',
        'acl_type' => 'getAclType',
        'bandwidth' => 'getBandwidth',
        'ca_certificate_id' => 'getCaCertificateId',
        'ca_enabled' => 'getCaEnabled',
        'cert_center_certificate_id' => 'getCertCenterCertificateId',
        'certificate_id' => 'getCertificateId',
        'certificate_source' => 'getCertificateSource',
        'client_body_timeout' => 'getClientBodyTimeout',
        'client_header_timeout' => 'getClientHeaderTimeout',
        'connection_drain_enabled' => 'getConnectionDrainEnabled',
        'connection_drain_timeout' => 'getConnectionDrainTimeout',
        'cookie' => 'getCookie',
        'cps' => 'getCps',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'end_port' => 'getEndPort',
        'enhanced_scheduler_enable' => 'getEnhancedSchedulerEnable',
        'established_timeout' => 'getEstablishedTimeout',
        'health_check' => 'getHealthCheck',
        'http2_enabled' => 'getHttp2Enabled',
        'keepalive_timeout' => 'getKeepaliveTimeout',
        'listener_id' => 'getListenerId',
        'listener_name' => 'getListenerName',
        'load_balancer_id' => 'getLoadBalancerId',
        'load_type' => 'getLoadType',
        'max_connections' => 'getMaxConnections',
        'persistence_timeout' => 'getPersistenceTimeout',
        'persistence_type' => 'getPersistenceType',
        'port' => 'getPort',
        'protocol' => 'getProtocol',
        'proxy_connect_timeout' => 'getProxyConnectTimeout',
        'proxy_protocol_type' => 'getProxyProtocolType',
        'proxy_read_timeout' => 'getProxyReadTimeout',
        'proxy_send_timeout' => 'getProxySendTimeout',
        'request_id' => 'getRequestId',
        'response_check_enabled' => 'getResponseCheckEnabled',
        'scheduler' => 'getScheduler',
        'security_policy_id' => 'getSecurityPolicyId',
        'send_timeout' => 'getSendTimeout',
        'server_group_id' => 'getServerGroupId',
        'start_port' => 'getStartPort',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime',
        'waf_protection_enabled' => 'getWafProtectionEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acl_ids'] = isset($data['acl_ids']) ? $data['acl_ids'] : null;
        $this->container['acl_status'] = isset($data['acl_status']) ? $data['acl_status'] : null;
        $this->container['acl_type'] = isset($data['acl_type']) ? $data['acl_type'] : null;
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['ca_certificate_id'] = isset($data['ca_certificate_id']) ? $data['ca_certificate_id'] : null;
        $this->container['ca_enabled'] = isset($data['ca_enabled']) ? $data['ca_enabled'] : null;
        $this->container['cert_center_certificate_id'] = isset($data['cert_center_certificate_id']) ? $data['cert_center_certificate_id'] : null;
        $this->container['certificate_id'] = isset($data['certificate_id']) ? $data['certificate_id'] : null;
        $this->container['certificate_source'] = isset($data['certificate_source']) ? $data['certificate_source'] : null;
        $this->container['client_body_timeout'] = isset($data['client_body_timeout']) ? $data['client_body_timeout'] : null;
        $this->container['client_header_timeout'] = isset($data['client_header_timeout']) ? $data['client_header_timeout'] : null;
        $this->container['connection_drain_enabled'] = isset($data['connection_drain_enabled']) ? $data['connection_drain_enabled'] : null;
        $this->container['connection_drain_timeout'] = isset($data['connection_drain_timeout']) ? $data['connection_drain_timeout'] : null;
        $this->container['cookie'] = isset($data['cookie']) ? $data['cookie'] : null;
        $this->container['cps'] = isset($data['cps']) ? $data['cps'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['end_port'] = isset($data['end_port']) ? $data['end_port'] : null;
        $this->container['enhanced_scheduler_enable'] = isset($data['enhanced_scheduler_enable']) ? $data['enhanced_scheduler_enable'] : null;
        $this->container['established_timeout'] = isset($data['established_timeout']) ? $data['established_timeout'] : null;
        $this->container['health_check'] = isset($data['health_check']) ? $data['health_check'] : null;
        $this->container['http2_enabled'] = isset($data['http2_enabled']) ? $data['http2_enabled'] : null;
        $this->container['keepalive_timeout'] = isset($data['keepalive_timeout']) ? $data['keepalive_timeout'] : null;
        $this->container['listener_id'] = isset($data['listener_id']) ? $data['listener_id'] : null;
        $this->container['listener_name'] = isset($data['listener_name']) ? $data['listener_name'] : null;
        $this->container['load_balancer_id'] = isset($data['load_balancer_id']) ? $data['load_balancer_id'] : null;
        $this->container['load_type'] = isset($data['load_type']) ? $data['load_type'] : null;
        $this->container['max_connections'] = isset($data['max_connections']) ? $data['max_connections'] : null;
        $this->container['persistence_timeout'] = isset($data['persistence_timeout']) ? $data['persistence_timeout'] : null;
        $this->container['persistence_type'] = isset($data['persistence_type']) ? $data['persistence_type'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['proxy_connect_timeout'] = isset($data['proxy_connect_timeout']) ? $data['proxy_connect_timeout'] : null;
        $this->container['proxy_protocol_type'] = isset($data['proxy_protocol_type']) ? $data['proxy_protocol_type'] : null;
        $this->container['proxy_read_timeout'] = isset($data['proxy_read_timeout']) ? $data['proxy_read_timeout'] : null;
        $this->container['proxy_send_timeout'] = isset($data['proxy_send_timeout']) ? $data['proxy_send_timeout'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['response_check_enabled'] = isset($data['response_check_enabled']) ? $data['response_check_enabled'] : null;
        $this->container['scheduler'] = isset($data['scheduler']) ? $data['scheduler'] : null;
        $this->container['security_policy_id'] = isset($data['security_policy_id']) ? $data['security_policy_id'] : null;
        $this->container['send_timeout'] = isset($data['send_timeout']) ? $data['send_timeout'] : null;
        $this->container['server_group_id'] = isset($data['server_group_id']) ? $data['server_group_id'] : null;
        $this->container['start_port'] = isset($data['start_port']) ? $data['start_port'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['waf_protection_enabled'] = isset($data['waf_protection_enabled']) ? $data['waf_protection_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acl_ids
     *
     * @return string[]
     */
    public function getAclIds()
    {
        return $this->container['acl_ids'];
    }

    /**
     * Sets acl_ids
     *
     * @param string[] $acl_ids acl_ids
     *
     * @return $this
     */
    public function setAclIds($acl_ids)
    {
        $this->container['acl_ids'] = $acl_ids;

        return $this;
    }

    /**
     * Gets acl_status
     *
     * @return string
     */
    public function getAclStatus()
    {
        return $this->container['acl_status'];
    }

    /**
     * Sets acl_status
     *
     * @param string $acl_status acl_status
     *
     * @return $this
     */
    public function setAclStatus($acl_status)
    {
        $this->container['acl_status'] = $acl_status;

        return $this;
    }

    /**
     * Gets acl_type
     *
     * @return string
     */
    public function getAclType()
    {
        return $this->container['acl_type'];
    }

    /**
     * Sets acl_type
     *
     * @param string $acl_type acl_type
     *
     * @return $this
     */
    public function setAclType($acl_type)
    {
        $this->container['acl_type'] = $acl_type;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets ca_certificate_id
     *
     * @return string
     */
    public function getCaCertificateId()
    {
        return $this->container['ca_certificate_id'];
    }

    /**
     * Sets ca_certificate_id
     *
     * @param string $ca_certificate_id ca_certificate_id
     *
     * @return $this
     */
    public function setCaCertificateId($ca_certificate_id)
    {
        $this->container['ca_certificate_id'] = $ca_certificate_id;

        return $this;
    }

    /**
     * Gets ca_enabled
     *
     * @return string
     */
    public function getCaEnabled()
    {
        return $this->container['ca_enabled'];
    }

    /**
     * Sets ca_enabled
     *
     * @param string $ca_enabled ca_enabled
     *
     * @return $this
     */
    public function setCaEnabled($ca_enabled)
    {
        $this->container['ca_enabled'] = $ca_enabled;

        return $this;
    }

    /**
     * Gets cert_center_certificate_id
     *
     * @return string
     */
    public function getCertCenterCertificateId()
    {
        return $this->container['cert_center_certificate_id'];
    }

    /**
     * Sets cert_center_certificate_id
     *
     * @param string $cert_center_certificate_id cert_center_certificate_id
     *
     * @return $this
     */
    public function setCertCenterCertificateId($cert_center_certificate_id)
    {
        $this->container['cert_center_certificate_id'] = $cert_center_certificate_id;

        return $this;
    }

    /**
     * Gets certificate_id
     *
     * @return string
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param string $certificate_id certificate_id
     *
     * @return $this
     */
    public function setCertificateId($certificate_id)
    {
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets certificate_source
     *
     * @return string
     */
    public function getCertificateSource()
    {
        return $this->container['certificate_source'];
    }

    /**
     * Sets certificate_source
     *
     * @param string $certificate_source certificate_source
     *
     * @return $this
     */
    public function setCertificateSource($certificate_source)
    {
        $this->container['certificate_source'] = $certificate_source;

        return $this;
    }

    /**
     * Gets client_body_timeout
     *
     * @return int
     */
    public function getClientBodyTimeout()
    {
        return $this->container['client_body_timeout'];
    }

    /**
     * Sets client_body_timeout
     *
     * @param int $client_body_timeout client_body_timeout
     *
     * @return $this
     */
    public function setClientBodyTimeout($client_body_timeout)
    {
        $this->container['client_body_timeout'] = $client_body_timeout;

        return $this;
    }

    /**
     * Gets client_header_timeout
     *
     * @return int
     */
    public function getClientHeaderTimeout()
    {
        return $this->container['client_header_timeout'];
    }

    /**
     * Sets client_header_timeout
     *
     * @param int $client_header_timeout client_header_timeout
     *
     * @return $this
     */
    public function setClientHeaderTimeout($client_header_timeout)
    {
        $this->container['client_header_timeout'] = $client_header_timeout;

        return $this;
    }

    /**
     * Gets connection_drain_enabled
     *
     * @return string
     */
    public function getConnectionDrainEnabled()
    {
        return $this->container['connection_drain_enabled'];
    }

    /**
     * Sets connection_drain_enabled
     *
     * @param string $connection_drain_enabled connection_drain_enabled
     *
     * @return $this
     */
    public function setConnectionDrainEnabled($connection_drain_enabled)
    {
        $this->container['connection_drain_enabled'] = $connection_drain_enabled;

        return $this;
    }

    /**
     * Gets connection_drain_timeout
     *
     * @return int
     */
    public function getConnectionDrainTimeout()
    {
        return $this->container['connection_drain_timeout'];
    }

    /**
     * Sets connection_drain_timeout
     *
     * @param int $connection_drain_timeout connection_drain_timeout
     *
     * @return $this
     */
    public function setConnectionDrainTimeout($connection_drain_timeout)
    {
        $this->container['connection_drain_timeout'] = $connection_drain_timeout;

        return $this;
    }

    /**
     * Gets cookie
     *
     * @return string
     */
    public function getCookie()
    {
        return $this->container['cookie'];
    }

    /**
     * Sets cookie
     *
     * @param string $cookie cookie
     *
     * @return $this
     */
    public function setCookie($cookie)
    {
        $this->container['cookie'] = $cookie;

        return $this;
    }

    /**
     * Gets cps
     *
     * @return int
     */
    public function getCps()
    {
        return $this->container['cps'];
    }

    /**
     * Sets cps
     *
     * @param int $cps cps
     *
     * @return $this
     */
    public function setCps($cps)
    {
        $this->container['cps'] = $cps;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return string
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param string $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets end_port
     *
     * @return int
     */
    public function getEndPort()
    {
        return $this->container['end_port'];
    }

    /**
     * Sets end_port
     *
     * @param int $end_port end_port
     *
     * @return $this
     */
    public function setEndPort($end_port)
    {
        $this->container['end_port'] = $end_port;

        return $this;
    }

    /**
     * Gets enhanced_scheduler_enable
     *
     * @return string
     */
    public function getEnhancedSchedulerEnable()
    {
        return $this->container['enhanced_scheduler_enable'];
    }

    /**
     * Sets enhanced_scheduler_enable
     *
     * @param string $enhanced_scheduler_enable enhanced_scheduler_enable
     *
     * @return $this
     */
    public function setEnhancedSchedulerEnable($enhanced_scheduler_enable)
    {
        $this->container['enhanced_scheduler_enable'] = $enhanced_scheduler_enable;

        return $this;
    }

    /**
     * Gets established_timeout
     *
     * @return int
     */
    public function getEstablishedTimeout()
    {
        return $this->container['established_timeout'];
    }

    /**
     * Sets established_timeout
     *
     * @param int $established_timeout established_timeout
     *
     * @return $this
     */
    public function setEstablishedTimeout($established_timeout)
    {
        $this->container['established_timeout'] = $established_timeout;

        return $this;
    }

    /**
     * Gets health_check
     *
     * @return \Volcengine\Clb\Model\HealthCheckForDescribeListenerAttributesOutput
     */
    public function getHealthCheck()
    {
        return $this->container['health_check'];
    }

    /**
     * Sets health_check
     *
     * @param \Volcengine\Clb\Model\HealthCheckForDescribeListenerAttributesOutput $health_check health_check
     *
     * @return $this
     */
    public function setHealthCheck($health_check)
    {
        $this->container['health_check'] = $health_check;

        return $this;
    }

    /**
     * Gets http2_enabled
     *
     * @return string
     */
    public function getHttp2Enabled()
    {
        return $this->container['http2_enabled'];
    }

    /**
     * Sets http2_enabled
     *
     * @param string $http2_enabled http2_enabled
     *
     * @return $this
     */
    public function setHttp2Enabled($http2_enabled)
    {
        $this->container['http2_enabled'] = $http2_enabled;

        return $this;
    }

    /**
     * Gets keepalive_timeout
     *
     * @return int
     */
    public function getKeepaliveTimeout()
    {
        return $this->container['keepalive_timeout'];
    }

    /**
     * Sets keepalive_timeout
     *
     * @param int $keepalive_timeout keepalive_timeout
     *
     * @return $this
     */
    public function setKeepaliveTimeout($keepalive_timeout)
    {
        $this->container['keepalive_timeout'] = $keepalive_timeout;

        return $this;
    }

    /**
     * Gets listener_id
     *
     * @return string
     */
    public function getListenerId()
    {
        return $this->container['listener_id'];
    }

    /**
     * Sets listener_id
     *
     * @param string $listener_id listener_id
     *
     * @return $this
     */
    public function setListenerId($listener_id)
    {
        $this->container['listener_id'] = $listener_id;

        return $this;
    }

    /**
     * Gets listener_name
     *
     * @return string
     */
    public function getListenerName()
    {
        return $this->container['listener_name'];
    }

    /**
     * Sets listener_name
     *
     * @param string $listener_name listener_name
     *
     * @return $this
     */
    public function setListenerName($listener_name)
    {
        $this->container['listener_name'] = $listener_name;

        return $this;
    }

    /**
     * Gets load_balancer_id
     *
     * @return string
     */
    public function getLoadBalancerId()
    {
        return $this->container['load_balancer_id'];
    }

    /**
     * Sets load_balancer_id
     *
     * @param string $load_balancer_id load_balancer_id
     *
     * @return $this
     */
    public function setLoadBalancerId($load_balancer_id)
    {
        $this->container['load_balancer_id'] = $load_balancer_id;

        return $this;
    }

    /**
     * Gets load_type
     *
     * @return string
     */
    public function getLoadType()
    {
        return $this->container['load_type'];
    }

    /**
     * Sets load_type
     *
     * @param string $load_type load_type
     *
     * @return $this
     */
    public function setLoadType($load_type)
    {
        $this->container['load_type'] = $load_type;

        return $this;
    }

    /**
     * Gets max_connections
     *
     * @return int
     */
    public function getMaxConnections()
    {
        return $this->container['max_connections'];
    }

    /**
     * Sets max_connections
     *
     * @param int $max_connections max_connections
     *
     * @return $this
     */
    public function setMaxConnections($max_connections)
    {
        $this->container['max_connections'] = $max_connections;

        return $this;
    }

    /**
     * Gets persistence_timeout
     *
     * @return int
     */
    public function getPersistenceTimeout()
    {
        return $this->container['persistence_timeout'];
    }

    /**
     * Sets persistence_timeout
     *
     * @param int $persistence_timeout persistence_timeout
     *
     * @return $this
     */
    public function setPersistenceTimeout($persistence_timeout)
    {
        $this->container['persistence_timeout'] = $persistence_timeout;

        return $this;
    }

    /**
     * Gets persistence_type
     *
     * @return string
     */
    public function getPersistenceType()
    {
        return $this->container['persistence_type'];
    }

    /**
     * Sets persistence_type
     *
     * @param string $persistence_type persistence_type
     *
     * @return $this
     */
    public function setPersistenceType($persistence_type)
    {
        $this->container['persistence_type'] = $persistence_type;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets proxy_connect_timeout
     *
     * @return int
     */
    public function getProxyConnectTimeout()
    {
        return $this->container['proxy_connect_timeout'];
    }

    /**
     * Sets proxy_connect_timeout
     *
     * @param int $proxy_connect_timeout proxy_connect_timeout
     *
     * @return $this
     */
    public function setProxyConnectTimeout($proxy_connect_timeout)
    {
        $this->container['proxy_connect_timeout'] = $proxy_connect_timeout;

        return $this;
    }

    /**
     * Gets proxy_protocol_type
     *
     * @return string
     */
    public function getProxyProtocolType()
    {
        return $this->container['proxy_protocol_type'];
    }

    /**
     * Sets proxy_protocol_type
     *
     * @param string $proxy_protocol_type proxy_protocol_type
     *
     * @return $this
     */
    public function setProxyProtocolType($proxy_protocol_type)
    {
        $this->container['proxy_protocol_type'] = $proxy_protocol_type;

        return $this;
    }

    /**
     * Gets proxy_read_timeout
     *
     * @return int
     */
    public function getProxyReadTimeout()
    {
        return $this->container['proxy_read_timeout'];
    }

    /**
     * Sets proxy_read_timeout
     *
     * @param int $proxy_read_timeout proxy_read_timeout
     *
     * @return $this
     */
    public function setProxyReadTimeout($proxy_read_timeout)
    {
        $this->container['proxy_read_timeout'] = $proxy_read_timeout;

        return $this;
    }

    /**
     * Gets proxy_send_timeout
     *
     * @return int
     */
    public function getProxySendTimeout()
    {
        return $this->container['proxy_send_timeout'];
    }

    /**
     * Sets proxy_send_timeout
     *
     * @param int $proxy_send_timeout proxy_send_timeout
     *
     * @return $this
     */
    public function setProxySendTimeout($proxy_send_timeout)
    {
        $this->container['proxy_send_timeout'] = $proxy_send_timeout;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets response_check_enabled
     *
     * @return string
     */
    public function getResponseCheckEnabled()
    {
        return $this->container['response_check_enabled'];
    }

    /**
     * Sets response_check_enabled
     *
     * @param string $response_check_enabled response_check_enabled
     *
     * @return $this
     */
    public function setResponseCheckEnabled($response_check_enabled)
    {
        $this->container['response_check_enabled'] = $response_check_enabled;

        return $this;
    }

    /**
     * Gets scheduler
     *
     * @return string
     */
    public function getScheduler()
    {
        return $this->container['scheduler'];
    }

    /**
     * Sets scheduler
     *
     * @param string $scheduler scheduler
     *
     * @return $this
     */
    public function setScheduler($scheduler)
    {
        $this->container['scheduler'] = $scheduler;

        return $this;
    }

    /**
     * Gets security_policy_id
     *
     * @return string
     */
    public function getSecurityPolicyId()
    {
        return $this->container['security_policy_id'];
    }

    /**
     * Sets security_policy_id
     *
     * @param string $security_policy_id security_policy_id
     *
     * @return $this
     */
    public function setSecurityPolicyId($security_policy_id)
    {
        $this->container['security_policy_id'] = $security_policy_id;

        return $this;
    }

    /**
     * Gets send_timeout
     *
     * @return int
     */
    public function getSendTimeout()
    {
        return $this->container['send_timeout'];
    }

    /**
     * Sets send_timeout
     *
     * @param int $send_timeout send_timeout
     *
     * @return $this
     */
    public function setSendTimeout($send_timeout)
    {
        $this->container['send_timeout'] = $send_timeout;

        return $this;
    }

    /**
     * Gets server_group_id
     *
     * @return string
     */
    public function getServerGroupId()
    {
        return $this->container['server_group_id'];
    }

    /**
     * Sets server_group_id
     *
     * @param string $server_group_id server_group_id
     *
     * @return $this
     */
    public function setServerGroupId($server_group_id)
    {
        $this->container['server_group_id'] = $server_group_id;

        return $this;
    }

    /**
     * Gets start_port
     *
     * @return int
     */
    public function getStartPort()
    {
        return $this->container['start_port'];
    }

    /**
     * Sets start_port
     *
     * @param int $start_port start_port
     *
     * @return $this
     */
    public function setStartPort($start_port)
    {
        $this->container['start_port'] = $start_port;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Clb\Model\TagForDescribeListenerAttributesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Clb\Model\TagForDescribeListenerAttributesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets waf_protection_enabled
     *
     * @return string
     */
    public function getWafProtectionEnabled()
    {
        return $this->container['waf_protection_enabled'];
    }

    /**
     * Sets waf_protection_enabled
     *
     * @param string $waf_protection_enabled waf_protection_enabled
     *
     * @return $this
     */
    public function setWafProtectionEnabled($waf_protection_enabled)
    {
        $this->container['waf_protection_enabled'] = $waf_protection_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

