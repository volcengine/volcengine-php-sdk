<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HealthCheckForDescribeListenerAttributesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HealthCheckForDescribeListenerAttributesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain' => 'string',
        'enabled' => 'string',
        'healthy_threshold' => 'int',
        'http_code' => 'string',
        'interval' => 'int',
        'method' => 'string',
        'port' => 'int',
        'timeout' => 'int',
        'udp_expect' => 'string',
        'udp_request' => 'string',
        'un_healthy_threshold' => 'int',
        'uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain' => null,
        'enabled' => null,
        'healthy_threshold' => null,
        'http_code' => null,
        'interval' => null,
        'method' => null,
        'port' => null,
        'timeout' => null,
        'udp_expect' => null,
        'udp_request' => null,
        'un_healthy_threshold' => null,
        'uri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'Domain',
        'enabled' => 'Enabled',
        'healthy_threshold' => 'HealthyThreshold',
        'http_code' => 'HttpCode',
        'interval' => 'Interval',
        'method' => 'Method',
        'port' => 'Port',
        'timeout' => 'Timeout',
        'udp_expect' => 'UdpExpect',
        'udp_request' => 'UdpRequest',
        'un_healthy_threshold' => 'UnHealthyThreshold',
        'uri' => 'Uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'enabled' => 'setEnabled',
        'healthy_threshold' => 'setHealthyThreshold',
        'http_code' => 'setHttpCode',
        'interval' => 'setInterval',
        'method' => 'setMethod',
        'port' => 'setPort',
        'timeout' => 'setTimeout',
        'udp_expect' => 'setUdpExpect',
        'udp_request' => 'setUdpRequest',
        'un_healthy_threshold' => 'setUnHealthyThreshold',
        'uri' => 'setUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'enabled' => 'getEnabled',
        'healthy_threshold' => 'getHealthyThreshold',
        'http_code' => 'getHttpCode',
        'interval' => 'getInterval',
        'method' => 'getMethod',
        'port' => 'getPort',
        'timeout' => 'getTimeout',
        'udp_expect' => 'getUdpExpect',
        'udp_request' => 'getUdpRequest',
        'un_healthy_threshold' => 'getUnHealthyThreshold',
        'uri' => 'getUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['healthy_threshold'] = isset($data['healthy_threshold']) ? $data['healthy_threshold'] : null;
        $this->container['http_code'] = isset($data['http_code']) ? $data['http_code'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
        $this->container['udp_expect'] = isset($data['udp_expect']) ? $data['udp_expect'] : null;
        $this->container['udp_request'] = isset($data['udp_request']) ? $data['udp_request'] : null;
        $this->container['un_healthy_threshold'] = isset($data['un_healthy_threshold']) ? $data['un_healthy_threshold'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return string
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param string $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets healthy_threshold
     *
     * @return int
     */
    public function getHealthyThreshold()
    {
        return $this->container['healthy_threshold'];
    }

    /**
     * Sets healthy_threshold
     *
     * @param int $healthy_threshold healthy_threshold
     *
     * @return $this
     */
    public function setHealthyThreshold($healthy_threshold)
    {
        $this->container['healthy_threshold'] = $healthy_threshold;

        return $this;
    }

    /**
     * Gets http_code
     *
     * @return string
     */
    public function getHttpCode()
    {
        return $this->container['http_code'];
    }

    /**
     * Sets http_code
     *
     * @param string $http_code http_code
     *
     * @return $this
     */
    public function setHttpCode($http_code)
    {
        $this->container['http_code'] = $http_code;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout timeout
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets udp_expect
     *
     * @return string
     */
    public function getUdpExpect()
    {
        return $this->container['udp_expect'];
    }

    /**
     * Sets udp_expect
     *
     * @param string $udp_expect udp_expect
     *
     * @return $this
     */
    public function setUdpExpect($udp_expect)
    {
        $this->container['udp_expect'] = $udp_expect;

        return $this;
    }

    /**
     * Gets udp_request
     *
     * @return string
     */
    public function getUdpRequest()
    {
        return $this->container['udp_request'];
    }

    /**
     * Sets udp_request
     *
     * @param string $udp_request udp_request
     *
     * @return $this
     */
    public function setUdpRequest($udp_request)
    {
        $this->container['udp_request'] = $udp_request;

        return $this;
    }

    /**
     * Gets un_healthy_threshold
     *
     * @return int
     */
    public function getUnHealthyThreshold()
    {
        return $this->container['un_healthy_threshold'];
    }

    /**
     * Sets un_healthy_threshold
     *
     * @param int $un_healthy_threshold un_healthy_threshold
     *
     * @return $this
     */
    public function setUnHealthyThreshold($un_healthy_threshold)
    {
        $this->container['un_healthy_threshold'] = $un_healthy_threshold;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri uri
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

