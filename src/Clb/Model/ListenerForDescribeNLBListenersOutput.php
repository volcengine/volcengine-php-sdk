<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Clb\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListenerForDescribeNLBListenersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListenerForDescribeNLBListenersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'certificate_id' => 'string',
        'connection_timeout' => 'int',
        'create_time' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'end_port' => 'int',
        'listener_id' => 'string',
        'listener_name' => 'string',
        'load_balancer_id' => 'string',
        'port' => 'int',
        'protocol' => 'string',
        'security_policy_id' => 'string',
        'security_policy_type' => 'string',
        'server_group_id' => 'string',
        'start_port' => 'int',
        'status' => 'string',
        'tags' => '\Volcengine\Clb\Model\TagForDescribeNLBListenersOutput[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'certificate_id' => null,
        'connection_timeout' => null,
        'create_time' => null,
        'description' => null,
        'enabled' => null,
        'end_port' => null,
        'listener_id' => null,
        'listener_name' => null,
        'load_balancer_id' => null,
        'port' => null,
        'protocol' => null,
        'security_policy_id' => null,
        'security_policy_type' => null,
        'server_group_id' => null,
        'start_port' => null,
        'status' => null,
        'tags' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'certificate_id' => 'CertificateId',
        'connection_timeout' => 'ConnectionTimeout',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'enabled' => 'Enabled',
        'end_port' => 'EndPort',
        'listener_id' => 'ListenerId',
        'listener_name' => 'ListenerName',
        'load_balancer_id' => 'LoadBalancerId',
        'port' => 'Port',
        'protocol' => 'Protocol',
        'security_policy_id' => 'SecurityPolicyId',
        'security_policy_type' => 'SecurityPolicyType',
        'server_group_id' => 'ServerGroupId',
        'start_port' => 'StartPort',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'certificate_id' => 'setCertificateId',
        'connection_timeout' => 'setConnectionTimeout',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'end_port' => 'setEndPort',
        'listener_id' => 'setListenerId',
        'listener_name' => 'setListenerName',
        'load_balancer_id' => 'setLoadBalancerId',
        'port' => 'setPort',
        'protocol' => 'setProtocol',
        'security_policy_id' => 'setSecurityPolicyId',
        'security_policy_type' => 'setSecurityPolicyType',
        'server_group_id' => 'setServerGroupId',
        'start_port' => 'setStartPort',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'certificate_id' => 'getCertificateId',
        'connection_timeout' => 'getConnectionTimeout',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'end_port' => 'getEndPort',
        'listener_id' => 'getListenerId',
        'listener_name' => 'getListenerName',
        'load_balancer_id' => 'getLoadBalancerId',
        'port' => 'getPort',
        'protocol' => 'getProtocol',
        'security_policy_id' => 'getSecurityPolicyId',
        'security_policy_type' => 'getSecurityPolicyType',
        'server_group_id' => 'getServerGroupId',
        'start_port' => 'getStartPort',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['certificate_id'] = isset($data['certificate_id']) ? $data['certificate_id'] : null;
        $this->container['connection_timeout'] = isset($data['connection_timeout']) ? $data['connection_timeout'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['end_port'] = isset($data['end_port']) ? $data['end_port'] : null;
        $this->container['listener_id'] = isset($data['listener_id']) ? $data['listener_id'] : null;
        $this->container['listener_name'] = isset($data['listener_name']) ? $data['listener_name'] : null;
        $this->container['load_balancer_id'] = isset($data['load_balancer_id']) ? $data['load_balancer_id'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['security_policy_id'] = isset($data['security_policy_id']) ? $data['security_policy_id'] : null;
        $this->container['security_policy_type'] = isset($data['security_policy_type']) ? $data['security_policy_type'] : null;
        $this->container['server_group_id'] = isset($data['server_group_id']) ? $data['server_group_id'] : null;
        $this->container['start_port'] = isset($data['start_port']) ? $data['start_port'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets certificate_id
     *
     * @return string
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param string $certificate_id certificate_id
     *
     * @return $this
     */
    public function setCertificateId($certificate_id)
    {
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets connection_timeout
     *
     * @return int
     */
    public function getConnectionTimeout()
    {
        return $this->container['connection_timeout'];
    }

    /**
     * Sets connection_timeout
     *
     * @param int $connection_timeout connection_timeout
     *
     * @return $this
     */
    public function setConnectionTimeout($connection_timeout)
    {
        $this->container['connection_timeout'] = $connection_timeout;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets end_port
     *
     * @return int
     */
    public function getEndPort()
    {
        return $this->container['end_port'];
    }

    /**
     * Sets end_port
     *
     * @param int $end_port end_port
     *
     * @return $this
     */
    public function setEndPort($end_port)
    {
        $this->container['end_port'] = $end_port;

        return $this;
    }

    /**
     * Gets listener_id
     *
     * @return string
     */
    public function getListenerId()
    {
        return $this->container['listener_id'];
    }

    /**
     * Sets listener_id
     *
     * @param string $listener_id listener_id
     *
     * @return $this
     */
    public function setListenerId($listener_id)
    {
        $this->container['listener_id'] = $listener_id;

        return $this;
    }

    /**
     * Gets listener_name
     *
     * @return string
     */
    public function getListenerName()
    {
        return $this->container['listener_name'];
    }

    /**
     * Sets listener_name
     *
     * @param string $listener_name listener_name
     *
     * @return $this
     */
    public function setListenerName($listener_name)
    {
        $this->container['listener_name'] = $listener_name;

        return $this;
    }

    /**
     * Gets load_balancer_id
     *
     * @return string
     */
    public function getLoadBalancerId()
    {
        return $this->container['load_balancer_id'];
    }

    /**
     * Sets load_balancer_id
     *
     * @param string $load_balancer_id load_balancer_id
     *
     * @return $this
     */
    public function setLoadBalancerId($load_balancer_id)
    {
        $this->container['load_balancer_id'] = $load_balancer_id;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets security_policy_id
     *
     * @return string
     */
    public function getSecurityPolicyId()
    {
        return $this->container['security_policy_id'];
    }

    /**
     * Sets security_policy_id
     *
     * @param string $security_policy_id security_policy_id
     *
     * @return $this
     */
    public function setSecurityPolicyId($security_policy_id)
    {
        $this->container['security_policy_id'] = $security_policy_id;

        return $this;
    }

    /**
     * Gets security_policy_type
     *
     * @return string
     */
    public function getSecurityPolicyType()
    {
        return $this->container['security_policy_type'];
    }

    /**
     * Sets security_policy_type
     *
     * @param string $security_policy_type security_policy_type
     *
     * @return $this
     */
    public function setSecurityPolicyType($security_policy_type)
    {
        $this->container['security_policy_type'] = $security_policy_type;

        return $this;
    }

    /**
     * Gets server_group_id
     *
     * @return string
     */
    public function getServerGroupId()
    {
        return $this->container['server_group_id'];
    }

    /**
     * Sets server_group_id
     *
     * @param string $server_group_id server_group_id
     *
     * @return $this
     */
    public function setServerGroupId($server_group_id)
    {
        $this->container['server_group_id'] = $server_group_id;

        return $this;
    }

    /**
     * Gets start_port
     *
     * @return int
     */
    public function getStartPort()
    {
        return $this->container['start_port'];
    }

    /**
     * Sets start_port
     *
     * @param int $start_port start_port
     *
     * @return $this
     */
    public function setStartPort($start_port)
    {
        $this->container['start_port'] = $start_port;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Clb\Model\TagForDescribeNLBListenersOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Clb\Model\TagForDescribeNLBListenersOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

