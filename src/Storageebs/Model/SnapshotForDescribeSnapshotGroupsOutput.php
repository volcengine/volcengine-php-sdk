<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Storageebs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SnapshotForDescribeSnapshotGroupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SnapshotForDescribeSnapshotGroupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_time' => 'string',
        'description' => 'string',
        'image_id' => 'string',
        'instant_access' => 'bool',
        'progress' => 'int',
        'project_name' => 'string',
        'retention_days' => 'int',
        'shared' => 'bool',
        'snapshot_group_id' => 'string',
        'snapshot_id' => 'string',
        'snapshot_name' => 'string',
        'snapshot_type' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Storageebs\Model\TagForDescribeSnapshotGroupsOutput[]',
        'volume_id' => 'string',
        'volume_kind' => 'string',
        'volume_name' => 'string',
        'volume_size' => 'int',
        'volume_status' => 'string',
        'volume_type' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_time' => null,
        'description' => null,
        'image_id' => null,
        'instant_access' => null,
        'progress' => 'int32',
        'project_name' => null,
        'retention_days' => 'int32',
        'shared' => null,
        'snapshot_group_id' => null,
        'snapshot_id' => null,
        'snapshot_name' => null,
        'snapshot_type' => null,
        'status' => null,
        'tags' => null,
        'volume_id' => null,
        'volume_kind' => null,
        'volume_name' => null,
        'volume_size' => 'int64',
        'volume_status' => null,
        'volume_type' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_time' => 'CreationTime',
        'description' => 'Description',
        'image_id' => 'ImageId',
        'instant_access' => 'InstantAccess',
        'progress' => 'Progress',
        'project_name' => 'ProjectName',
        'retention_days' => 'RetentionDays',
        'shared' => 'Shared',
        'snapshot_group_id' => 'SnapshotGroupId',
        'snapshot_id' => 'SnapshotId',
        'snapshot_name' => 'SnapshotName',
        'snapshot_type' => 'SnapshotType',
        'status' => 'Status',
        'tags' => 'Tags',
        'volume_id' => 'VolumeId',
        'volume_kind' => 'VolumeKind',
        'volume_name' => 'VolumeName',
        'volume_size' => 'VolumeSize',
        'volume_status' => 'VolumeStatus',
        'volume_type' => 'VolumeType',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_time' => 'setCreationTime',
        'description' => 'setDescription',
        'image_id' => 'setImageId',
        'instant_access' => 'setInstantAccess',
        'progress' => 'setProgress',
        'project_name' => 'setProjectName',
        'retention_days' => 'setRetentionDays',
        'shared' => 'setShared',
        'snapshot_group_id' => 'setSnapshotGroupId',
        'snapshot_id' => 'setSnapshotId',
        'snapshot_name' => 'setSnapshotName',
        'snapshot_type' => 'setSnapshotType',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'volume_id' => 'setVolumeId',
        'volume_kind' => 'setVolumeKind',
        'volume_name' => 'setVolumeName',
        'volume_size' => 'setVolumeSize',
        'volume_status' => 'setVolumeStatus',
        'volume_type' => 'setVolumeType',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_time' => 'getCreationTime',
        'description' => 'getDescription',
        'image_id' => 'getImageId',
        'instant_access' => 'getInstantAccess',
        'progress' => 'getProgress',
        'project_name' => 'getProjectName',
        'retention_days' => 'getRetentionDays',
        'shared' => 'getShared',
        'snapshot_group_id' => 'getSnapshotGroupId',
        'snapshot_id' => 'getSnapshotId',
        'snapshot_name' => 'getSnapshotName',
        'snapshot_type' => 'getSnapshotType',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'volume_id' => 'getVolumeId',
        'volume_kind' => 'getVolumeKind',
        'volume_name' => 'getVolumeName',
        'volume_size' => 'getVolumeSize',
        'volume_status' => 'getVolumeStatus',
        'volume_type' => 'getVolumeType',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['instant_access'] = isset($data['instant_access']) ? $data['instant_access'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['retention_days'] = isset($data['retention_days']) ? $data['retention_days'] : null;
        $this->container['shared'] = isset($data['shared']) ? $data['shared'] : null;
        $this->container['snapshot_group_id'] = isset($data['snapshot_group_id']) ? $data['snapshot_group_id'] : null;
        $this->container['snapshot_id'] = isset($data['snapshot_id']) ? $data['snapshot_id'] : null;
        $this->container['snapshot_name'] = isset($data['snapshot_name']) ? $data['snapshot_name'] : null;
        $this->container['snapshot_type'] = isset($data['snapshot_type']) ? $data['snapshot_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['volume_id'] = isset($data['volume_id']) ? $data['volume_id'] : null;
        $this->container['volume_kind'] = isset($data['volume_kind']) ? $data['volume_kind'] : null;
        $this->container['volume_name'] = isset($data['volume_name']) ? $data['volume_name'] : null;
        $this->container['volume_size'] = isset($data['volume_size']) ? $data['volume_size'] : null;
        $this->container['volume_status'] = isset($data['volume_status']) ? $data['volume_status'] : null;
        $this->container['volume_type'] = isset($data['volume_type']) ? $data['volume_type'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets instant_access
     *
     * @return bool
     */
    public function getInstantAccess()
    {
        return $this->container['instant_access'];
    }

    /**
     * Sets instant_access
     *
     * @param bool $instant_access instant_access
     *
     * @return $this
     */
    public function setInstantAccess($instant_access)
    {
        $this->container['instant_access'] = $instant_access;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int $progress progress
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets retention_days
     *
     * @return int
     */
    public function getRetentionDays()
    {
        return $this->container['retention_days'];
    }

    /**
     * Sets retention_days
     *
     * @param int $retention_days retention_days
     *
     * @return $this
     */
    public function setRetentionDays($retention_days)
    {
        $this->container['retention_days'] = $retention_days;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool $shared shared
     *
     * @return $this
     */
    public function setShared($shared)
    {
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets snapshot_group_id
     *
     * @return string
     */
    public function getSnapshotGroupId()
    {
        return $this->container['snapshot_group_id'];
    }

    /**
     * Sets snapshot_group_id
     *
     * @param string $snapshot_group_id snapshot_group_id
     *
     * @return $this
     */
    public function setSnapshotGroupId($snapshot_group_id)
    {
        $this->container['snapshot_group_id'] = $snapshot_group_id;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return string
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param string $snapshot_id snapshot_id
     *
     * @return $this
     */
    public function setSnapshotId($snapshot_id)
    {
        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets snapshot_name
     *
     * @return string
     */
    public function getSnapshotName()
    {
        return $this->container['snapshot_name'];
    }

    /**
     * Sets snapshot_name
     *
     * @param string $snapshot_name snapshot_name
     *
     * @return $this
     */
    public function setSnapshotName($snapshot_name)
    {
        $this->container['snapshot_name'] = $snapshot_name;

        return $this;
    }

    /**
     * Gets snapshot_type
     *
     * @return string
     */
    public function getSnapshotType()
    {
        return $this->container['snapshot_type'];
    }

    /**
     * Sets snapshot_type
     *
     * @param string $snapshot_type snapshot_type
     *
     * @return $this
     */
    public function setSnapshotType($snapshot_type)
    {
        $this->container['snapshot_type'] = $snapshot_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Storageebs\Model\TagForDescribeSnapshotGroupsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Storageebs\Model\TagForDescribeSnapshotGroupsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets volume_id
     *
     * @return string
     */
    public function getVolumeId()
    {
        return $this->container['volume_id'];
    }

    /**
     * Sets volume_id
     *
     * @param string $volume_id volume_id
     *
     * @return $this
     */
    public function setVolumeId($volume_id)
    {
        $this->container['volume_id'] = $volume_id;

        return $this;
    }

    /**
     * Gets volume_kind
     *
     * @return string
     */
    public function getVolumeKind()
    {
        return $this->container['volume_kind'];
    }

    /**
     * Sets volume_kind
     *
     * @param string $volume_kind volume_kind
     *
     * @return $this
     */
    public function setVolumeKind($volume_kind)
    {
        $this->container['volume_kind'] = $volume_kind;

        return $this;
    }

    /**
     * Gets volume_name
     *
     * @return string
     */
    public function getVolumeName()
    {
        return $this->container['volume_name'];
    }

    /**
     * Sets volume_name
     *
     * @param string $volume_name volume_name
     *
     * @return $this
     */
    public function setVolumeName($volume_name)
    {
        $this->container['volume_name'] = $volume_name;

        return $this;
    }

    /**
     * Gets volume_size
     *
     * @return int
     */
    public function getVolumeSize()
    {
        return $this->container['volume_size'];
    }

    /**
     * Sets volume_size
     *
     * @param int $volume_size volume_size
     *
     * @return $this
     */
    public function setVolumeSize($volume_size)
    {
        $this->container['volume_size'] = $volume_size;

        return $this;
    }

    /**
     * Gets volume_status
     *
     * @return string
     */
    public function getVolumeStatus()
    {
        return $this->container['volume_status'];
    }

    /**
     * Sets volume_status
     *
     * @param string $volume_status volume_status
     *
     * @return $this
     */
    public function setVolumeStatus($volume_status)
    {
        $this->container['volume_status'] = $volume_status;

        return $this;
    }

    /**
     * Gets volume_type
     *
     * @return string
     */
    public function getVolumeType()
    {
        return $this->container['volume_type'];
    }

    /**
     * Sets volume_type
     *
     * @param string $volume_type volume_type
     *
     * @return $this
     */
    public function setVolumeType($volume_type)
    {
        $this->container['volume_type'] = $volume_type;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

