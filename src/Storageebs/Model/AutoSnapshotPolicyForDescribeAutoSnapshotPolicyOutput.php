<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Storageebs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AutoSnapshotPolicyForDescribeAutoSnapshotPolicyOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AutoSnapshotPolicyForDescribeAutoSnapshotPolicyOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_snapshot_policy_id' => 'string',
        'auto_snapshot_policy_name' => 'string',
        'created_at' => 'string',
        'destination_region' => 'string',
        'destination_retention_days' => 'int',
        'enable_copy' => 'bool',
        'project_name' => 'string',
        'repeat_days' => 'int',
        'repeat_weekdays' => 'string[]',
        'retention_days' => 'int',
        'status' => 'string',
        'tags' => '\Volcengine\Storageebs\Model\TagForDescribeAutoSnapshotPolicyOutput[]',
        'time_points' => 'string[]',
        'updated_at' => 'string',
        'volume_nums' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_snapshot_policy_id' => null,
        'auto_snapshot_policy_name' => null,
        'created_at' => null,
        'destination_region' => null,
        'destination_retention_days' => 'int32',
        'enable_copy' => null,
        'project_name' => null,
        'repeat_days' => 'int32',
        'repeat_weekdays' => null,
        'retention_days' => 'int32',
        'status' => null,
        'tags' => null,
        'time_points' => null,
        'updated_at' => null,
        'volume_nums' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_snapshot_policy_id' => 'AutoSnapshotPolicyId',
        'auto_snapshot_policy_name' => 'AutoSnapshotPolicyName',
        'created_at' => 'CreatedAt',
        'destination_region' => 'DestinationRegion',
        'destination_retention_days' => 'DestinationRetentionDays',
        'enable_copy' => 'EnableCopy',
        'project_name' => 'ProjectName',
        'repeat_days' => 'RepeatDays',
        'repeat_weekdays' => 'RepeatWeekdays',
        'retention_days' => 'RetentionDays',
        'status' => 'Status',
        'tags' => 'Tags',
        'time_points' => 'TimePoints',
        'updated_at' => 'UpdatedAt',
        'volume_nums' => 'VolumeNums'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_snapshot_policy_id' => 'setAutoSnapshotPolicyId',
        'auto_snapshot_policy_name' => 'setAutoSnapshotPolicyName',
        'created_at' => 'setCreatedAt',
        'destination_region' => 'setDestinationRegion',
        'destination_retention_days' => 'setDestinationRetentionDays',
        'enable_copy' => 'setEnableCopy',
        'project_name' => 'setProjectName',
        'repeat_days' => 'setRepeatDays',
        'repeat_weekdays' => 'setRepeatWeekdays',
        'retention_days' => 'setRetentionDays',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'time_points' => 'setTimePoints',
        'updated_at' => 'setUpdatedAt',
        'volume_nums' => 'setVolumeNums'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_snapshot_policy_id' => 'getAutoSnapshotPolicyId',
        'auto_snapshot_policy_name' => 'getAutoSnapshotPolicyName',
        'created_at' => 'getCreatedAt',
        'destination_region' => 'getDestinationRegion',
        'destination_retention_days' => 'getDestinationRetentionDays',
        'enable_copy' => 'getEnableCopy',
        'project_name' => 'getProjectName',
        'repeat_days' => 'getRepeatDays',
        'repeat_weekdays' => 'getRepeatWeekdays',
        'retention_days' => 'getRetentionDays',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'time_points' => 'getTimePoints',
        'updated_at' => 'getUpdatedAt',
        'volume_nums' => 'getVolumeNums'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_snapshot_policy_id'] = isset($data['auto_snapshot_policy_id']) ? $data['auto_snapshot_policy_id'] : null;
        $this->container['auto_snapshot_policy_name'] = isset($data['auto_snapshot_policy_name']) ? $data['auto_snapshot_policy_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['destination_region'] = isset($data['destination_region']) ? $data['destination_region'] : null;
        $this->container['destination_retention_days'] = isset($data['destination_retention_days']) ? $data['destination_retention_days'] : null;
        $this->container['enable_copy'] = isset($data['enable_copy']) ? $data['enable_copy'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['repeat_days'] = isset($data['repeat_days']) ? $data['repeat_days'] : null;
        $this->container['repeat_weekdays'] = isset($data['repeat_weekdays']) ? $data['repeat_weekdays'] : null;
        $this->container['retention_days'] = isset($data['retention_days']) ? $data['retention_days'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['time_points'] = isset($data['time_points']) ? $data['time_points'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['volume_nums'] = isset($data['volume_nums']) ? $data['volume_nums'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_snapshot_policy_id
     *
     * @return string
     */
    public function getAutoSnapshotPolicyId()
    {
        return $this->container['auto_snapshot_policy_id'];
    }

    /**
     * Sets auto_snapshot_policy_id
     *
     * @param string $auto_snapshot_policy_id auto_snapshot_policy_id
     *
     * @return $this
     */
    public function setAutoSnapshotPolicyId($auto_snapshot_policy_id)
    {
        $this->container['auto_snapshot_policy_id'] = $auto_snapshot_policy_id;

        return $this;
    }

    /**
     * Gets auto_snapshot_policy_name
     *
     * @return string
     */
    public function getAutoSnapshotPolicyName()
    {
        return $this->container['auto_snapshot_policy_name'];
    }

    /**
     * Sets auto_snapshot_policy_name
     *
     * @param string $auto_snapshot_policy_name auto_snapshot_policy_name
     *
     * @return $this
     */
    public function setAutoSnapshotPolicyName($auto_snapshot_policy_name)
    {
        $this->container['auto_snapshot_policy_name'] = $auto_snapshot_policy_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets destination_region
     *
     * @return string
     */
    public function getDestinationRegion()
    {
        return $this->container['destination_region'];
    }

    /**
     * Sets destination_region
     *
     * @param string $destination_region destination_region
     *
     * @return $this
     */
    public function setDestinationRegion($destination_region)
    {
        $this->container['destination_region'] = $destination_region;

        return $this;
    }

    /**
     * Gets destination_retention_days
     *
     * @return int
     */
    public function getDestinationRetentionDays()
    {
        return $this->container['destination_retention_days'];
    }

    /**
     * Sets destination_retention_days
     *
     * @param int $destination_retention_days destination_retention_days
     *
     * @return $this
     */
    public function setDestinationRetentionDays($destination_retention_days)
    {
        $this->container['destination_retention_days'] = $destination_retention_days;

        return $this;
    }

    /**
     * Gets enable_copy
     *
     * @return bool
     */
    public function getEnableCopy()
    {
        return $this->container['enable_copy'];
    }

    /**
     * Sets enable_copy
     *
     * @param bool $enable_copy enable_copy
     *
     * @return $this
     */
    public function setEnableCopy($enable_copy)
    {
        $this->container['enable_copy'] = $enable_copy;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets repeat_days
     *
     * @return int
     */
    public function getRepeatDays()
    {
        return $this->container['repeat_days'];
    }

    /**
     * Sets repeat_days
     *
     * @param int $repeat_days repeat_days
     *
     * @return $this
     */
    public function setRepeatDays($repeat_days)
    {
        $this->container['repeat_days'] = $repeat_days;

        return $this;
    }

    /**
     * Gets repeat_weekdays
     *
     * @return string[]
     */
    public function getRepeatWeekdays()
    {
        return $this->container['repeat_weekdays'];
    }

    /**
     * Sets repeat_weekdays
     *
     * @param string[] $repeat_weekdays repeat_weekdays
     *
     * @return $this
     */
    public function setRepeatWeekdays($repeat_weekdays)
    {
        $this->container['repeat_weekdays'] = $repeat_weekdays;

        return $this;
    }

    /**
     * Gets retention_days
     *
     * @return int
     */
    public function getRetentionDays()
    {
        return $this->container['retention_days'];
    }

    /**
     * Sets retention_days
     *
     * @param int $retention_days retention_days
     *
     * @return $this
     */
    public function setRetentionDays($retention_days)
    {
        $this->container['retention_days'] = $retention_days;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Storageebs\Model\TagForDescribeAutoSnapshotPolicyOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Storageebs\Model\TagForDescribeAutoSnapshotPolicyOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets time_points
     *
     * @return string[]
     */
    public function getTimePoints()
    {
        return $this->container['time_points'];
    }

    /**
     * Sets time_points
     *
     * @param string[] $time_points time_points
     *
     * @return $this
     */
    public function setTimePoints($time_points)
    {
        $this->container['time_points'] = $time_points;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets volume_nums
     *
     * @return int
     */
    public function getVolumeNums()
    {
        return $this->container['volume_nums'];
    }

    /**
     * Sets volume_nums
     *
     * @param int $volume_nums volume_nums
     *
     * @return $this
     */
    public function setVolumeNums($volume_nums)
    {
        $this->container['volume_nums'] = $volume_nums;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

