<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Storageebs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyVolumeExtraPerformanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyVolumeExtraPerformanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'extra_performance_iops' => 'int',
        'extra_performance_throughput_mb' => 'int',
        'extra_performance_type_id' => 'string',
        'volume_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'extra_performance_iops' => 'int32',
        'extra_performance_throughput_mb' => 'int32',
        'extra_performance_type_id' => null,
        'volume_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extra_performance_iops' => 'ExtraPerformanceIOPS',
        'extra_performance_throughput_mb' => 'ExtraPerformanceThroughputMB',
        'extra_performance_type_id' => 'ExtraPerformanceTypeId',
        'volume_id' => 'VolumeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extra_performance_iops' => 'setExtraPerformanceIops',
        'extra_performance_throughput_mb' => 'setExtraPerformanceThroughputMb',
        'extra_performance_type_id' => 'setExtraPerformanceTypeId',
        'volume_id' => 'setVolumeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extra_performance_iops' => 'getExtraPerformanceIops',
        'extra_performance_throughput_mb' => 'getExtraPerformanceThroughputMb',
        'extra_performance_type_id' => 'getExtraPerformanceTypeId',
        'volume_id' => 'getVolumeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXTRA_PERFORMANCE_TYPE_ID_IOPS = 'IOPS';
    const EXTRA_PERFORMANCE_TYPE_ID_BALANCE = 'Balance';
    const EXTRA_PERFORMANCE_TYPE_ID_THROUGHPUT = 'Throughput';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtraPerformanceTypeIdAllowableValues()
    {
        return [
            self::EXTRA_PERFORMANCE_TYPE_ID_IOPS,
            self::EXTRA_PERFORMANCE_TYPE_ID_BALANCE,
            self::EXTRA_PERFORMANCE_TYPE_ID_THROUGHPUT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extra_performance_iops'] = isset($data['extra_performance_iops']) ? $data['extra_performance_iops'] : null;
        $this->container['extra_performance_throughput_mb'] = isset($data['extra_performance_throughput_mb']) ? $data['extra_performance_throughput_mb'] : null;
        $this->container['extra_performance_type_id'] = isset($data['extra_performance_type_id']) ? $data['extra_performance_type_id'] : null;
        $this->container['volume_id'] = isset($data['volume_id']) ? $data['volume_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['extra_performance_type_id'] === null) {
            $invalidProperties[] = "'extra_performance_type_id' can't be null";
        }
        $allowedValues = $this->getExtraPerformanceTypeIdAllowableValues();
        if (!is_null($this->container['extra_performance_type_id']) && !in_array($this->container['extra_performance_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'extra_performance_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['volume_id'] === null) {
            $invalidProperties[] = "'volume_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extra_performance_iops
     *
     * @return int
     */
    public function getExtraPerformanceIops()
    {
        return $this->container['extra_performance_iops'];
    }

    /**
     * Sets extra_performance_iops
     *
     * @param int $extra_performance_iops extra_performance_iops
     *
     * @return $this
     */
    public function setExtraPerformanceIops($extra_performance_iops)
    {
        $this->container['extra_performance_iops'] = $extra_performance_iops;

        return $this;
    }

    /**
     * Gets extra_performance_throughput_mb
     *
     * @return int
     */
    public function getExtraPerformanceThroughputMb()
    {
        return $this->container['extra_performance_throughput_mb'];
    }

    /**
     * Sets extra_performance_throughput_mb
     *
     * @param int $extra_performance_throughput_mb extra_performance_throughput_mb
     *
     * @return $this
     */
    public function setExtraPerformanceThroughputMb($extra_performance_throughput_mb)
    {
        $this->container['extra_performance_throughput_mb'] = $extra_performance_throughput_mb;

        return $this;
    }

    /**
     * Gets extra_performance_type_id
     *
     * @return string
     */
    public function getExtraPerformanceTypeId()
    {
        return $this->container['extra_performance_type_id'];
    }

    /**
     * Sets extra_performance_type_id
     *
     * @param string $extra_performance_type_id extra_performance_type_id
     *
     * @return $this
     */
    public function setExtraPerformanceTypeId($extra_performance_type_id)
    {
        $allowedValues = $this->getExtraPerformanceTypeIdAllowableValues();
        if (!in_array($extra_performance_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'extra_performance_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extra_performance_type_id'] = $extra_performance_type_id;

        return $this;
    }

    /**
     * Gets volume_id
     *
     * @return string
     */
    public function getVolumeId()
    {
        return $this->container['volume_id'];
    }

    /**
     * Sets volume_id
     *
     * @param string $volume_id volume_id
     *
     * @return $this
     */
    public function setVolumeId($volume_id)
    {
        $this->container['volume_id'] = $volume_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

