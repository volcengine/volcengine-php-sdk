<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Storageebs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateVolumeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateVolumeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'description' => 'string',
        'extra_performance_iops' => 'int',
        'extra_performance_throughput_mb' => 'int',
        'extra_performance_type_id' => 'string',
        'instance_id' => 'string',
        'kind' => 'string',
        'placement_group_id' => 'string',
        'project_name' => 'string',
        'size' => 'string',
        'snapshot_id' => 'string',
        'subgroup_number' => 'int',
        'tags' => '\Volcengine\Storageebs\Model\TagForCreateVolumeInput[]',
        'volume_charge_type' => 'string',
        'volume_name' => 'string',
        'volume_type' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'description' => null,
        'extra_performance_iops' => 'int32',
        'extra_performance_throughput_mb' => 'int32',
        'extra_performance_type_id' => null,
        'instance_id' => null,
        'kind' => null,
        'placement_group_id' => null,
        'project_name' => null,
        'size' => 'json_number',
        'snapshot_id' => null,
        'subgroup_number' => 'int32',
        'tags' => null,
        'volume_charge_type' => null,
        'volume_name' => null,
        'volume_type' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'description' => 'Description',
        'extra_performance_iops' => 'ExtraPerformanceIOPS',
        'extra_performance_throughput_mb' => 'ExtraPerformanceThroughputMB',
        'extra_performance_type_id' => 'ExtraPerformanceTypeId',
        'instance_id' => 'InstanceId',
        'kind' => 'Kind',
        'placement_group_id' => 'PlacementGroupId',
        'project_name' => 'ProjectName',
        'size' => 'Size',
        'snapshot_id' => 'SnapshotId',
        'subgroup_number' => 'SubgroupNumber',
        'tags' => 'Tags',
        'volume_charge_type' => 'VolumeChargeType',
        'volume_name' => 'VolumeName',
        'volume_type' => 'VolumeType',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'description' => 'setDescription',
        'extra_performance_iops' => 'setExtraPerformanceIops',
        'extra_performance_throughput_mb' => 'setExtraPerformanceThroughputMb',
        'extra_performance_type_id' => 'setExtraPerformanceTypeId',
        'instance_id' => 'setInstanceId',
        'kind' => 'setKind',
        'placement_group_id' => 'setPlacementGroupId',
        'project_name' => 'setProjectName',
        'size' => 'setSize',
        'snapshot_id' => 'setSnapshotId',
        'subgroup_number' => 'setSubgroupNumber',
        'tags' => 'setTags',
        'volume_charge_type' => 'setVolumeChargeType',
        'volume_name' => 'setVolumeName',
        'volume_type' => 'setVolumeType',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'description' => 'getDescription',
        'extra_performance_iops' => 'getExtraPerformanceIops',
        'extra_performance_throughput_mb' => 'getExtraPerformanceThroughputMb',
        'extra_performance_type_id' => 'getExtraPerformanceTypeId',
        'instance_id' => 'getInstanceId',
        'kind' => 'getKind',
        'placement_group_id' => 'getPlacementGroupId',
        'project_name' => 'getProjectName',
        'size' => 'getSize',
        'snapshot_id' => 'getSnapshotId',
        'subgroup_number' => 'getSubgroupNumber',
        'tags' => 'getTags',
        'volume_charge_type' => 'getVolumeChargeType',
        'volume_name' => 'getVolumeName',
        'volume_type' => 'getVolumeType',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['extra_performance_iops'] = isset($data['extra_performance_iops']) ? $data['extra_performance_iops'] : null;
        $this->container['extra_performance_throughput_mb'] = isset($data['extra_performance_throughput_mb']) ? $data['extra_performance_throughput_mb'] : null;
        $this->container['extra_performance_type_id'] = isset($data['extra_performance_type_id']) ? $data['extra_performance_type_id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['placement_group_id'] = isset($data['placement_group_id']) ? $data['placement_group_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['snapshot_id'] = isset($data['snapshot_id']) ? $data['snapshot_id'] : null;
        $this->container['subgroup_number'] = isset($data['subgroup_number']) ? $data['subgroup_number'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['volume_charge_type'] = isset($data['volume_charge_type']) ? $data['volume_charge_type'] : null;
        $this->container['volume_name'] = isset($data['volume_name']) ? $data['volume_name'] : null;
        $this->container['volume_type'] = isset($data['volume_type']) ? $data['volume_type'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['volume_name'] === null) {
            $invalidProperties[] = "'volume_name' can't be null";
        }
        if ($this->container['volume_type'] === null) {
            $invalidProperties[] = "'volume_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets extra_performance_iops
     *
     * @return int
     */
    public function getExtraPerformanceIops()
    {
        return $this->container['extra_performance_iops'];
    }

    /**
     * Sets extra_performance_iops
     *
     * @param int $extra_performance_iops extra_performance_iops
     *
     * @return $this
     */
    public function setExtraPerformanceIops($extra_performance_iops)
    {
        $this->container['extra_performance_iops'] = $extra_performance_iops;

        return $this;
    }

    /**
     * Gets extra_performance_throughput_mb
     *
     * @return int
     */
    public function getExtraPerformanceThroughputMb()
    {
        return $this->container['extra_performance_throughput_mb'];
    }

    /**
     * Sets extra_performance_throughput_mb
     *
     * @param int $extra_performance_throughput_mb extra_performance_throughput_mb
     *
     * @return $this
     */
    public function setExtraPerformanceThroughputMb($extra_performance_throughput_mb)
    {
        $this->container['extra_performance_throughput_mb'] = $extra_performance_throughput_mb;

        return $this;
    }

    /**
     * Gets extra_performance_type_id
     *
     * @return string
     */
    public function getExtraPerformanceTypeId()
    {
        return $this->container['extra_performance_type_id'];
    }

    /**
     * Sets extra_performance_type_id
     *
     * @param string $extra_performance_type_id extra_performance_type_id
     *
     * @return $this
     */
    public function setExtraPerformanceTypeId($extra_performance_type_id)
    {
        $this->container['extra_performance_type_id'] = $extra_performance_type_id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind kind
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets placement_group_id
     *
     * @return string
     */
    public function getPlacementGroupId()
    {
        return $this->container['placement_group_id'];
    }

    /**
     * Sets placement_group_id
     *
     * @param string $placement_group_id placement_group_id
     *
     * @return $this
     */
    public function setPlacementGroupId($placement_group_id)
    {
        $this->container['placement_group_id'] = $placement_group_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return string
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param string $snapshot_id snapshot_id
     *
     * @return $this
     */
    public function setSnapshotId($snapshot_id)
    {
        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets subgroup_number
     *
     * @return int
     */
    public function getSubgroupNumber()
    {
        return $this->container['subgroup_number'];
    }

    /**
     * Sets subgroup_number
     *
     * @param int $subgroup_number subgroup_number
     *
     * @return $this
     */
    public function setSubgroupNumber($subgroup_number)
    {
        $this->container['subgroup_number'] = $subgroup_number;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Storageebs\Model\TagForCreateVolumeInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Storageebs\Model\TagForCreateVolumeInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets volume_charge_type
     *
     * @return string
     */
    public function getVolumeChargeType()
    {
        return $this->container['volume_charge_type'];
    }

    /**
     * Sets volume_charge_type
     *
     * @param string $volume_charge_type volume_charge_type
     *
     * @return $this
     */
    public function setVolumeChargeType($volume_charge_type)
    {
        $this->container['volume_charge_type'] = $volume_charge_type;

        return $this;
    }

    /**
     * Gets volume_name
     *
     * @return string
     */
    public function getVolumeName()
    {
        return $this->container['volume_name'];
    }

    /**
     * Sets volume_name
     *
     * @param string $volume_name volume_name
     *
     * @return $this
     */
    public function setVolumeName($volume_name)
    {
        $this->container['volume_name'] = $volume_name;

        return $this;
    }

    /**
     * Gets volume_type
     *
     * @return string
     */
    public function getVolumeType()
    {
        return $this->container['volume_type'];
    }

    /**
     * Sets volume_type
     *
     * @param string $volume_type volume_type
     *
     * @return $this
     */
    public function setVolumeType($volume_type)
    {
        $this->container['volume_type'] = $volume_type;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

