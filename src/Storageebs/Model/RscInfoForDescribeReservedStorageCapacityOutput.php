<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Storageebs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RscInfoForDescribeReservedStorageCapacityOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RscInfoForDescribeReservedStorageCapacityOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'expired_time' => 'string',
        'id' => 'string',
        'name' => 'string',
        'rsc_auto_renew_period' => 'int',
        'remaining_size' => 'int',
        'renewal_status' => 'string',
        'size' => 'int',
        'status' => 'string',
        'take_effect_time' => 'string',
        'type' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'expired_time' => null,
        'id' => null,
        'name' => null,
        'rsc_auto_renew_period' => 'int32',
        'remaining_size' => 'int32',
        'renewal_status' => null,
        'size' => 'int64',
        'status' => null,
        'take_effect_time' => null,
        'type' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'expired_time' => 'ExpiredTime',
        'id' => 'Id',
        'name' => 'Name',
        'rsc_auto_renew_period' => 'RSCAutoRenewPeriod',
        'remaining_size' => 'RemainingSize',
        'renewal_status' => 'RenewalStatus',
        'size' => 'Size',
        'status' => 'Status',
        'take_effect_time' => 'TakeEffectTime',
        'type' => 'Type',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'expired_time' => 'setExpiredTime',
        'id' => 'setId',
        'name' => 'setName',
        'rsc_auto_renew_period' => 'setRscAutoRenewPeriod',
        'remaining_size' => 'setRemainingSize',
        'renewal_status' => 'setRenewalStatus',
        'size' => 'setSize',
        'status' => 'setStatus',
        'take_effect_time' => 'setTakeEffectTime',
        'type' => 'setType',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'expired_time' => 'getExpiredTime',
        'id' => 'getId',
        'name' => 'getName',
        'rsc_auto_renew_period' => 'getRscAutoRenewPeriod',
        'remaining_size' => 'getRemainingSize',
        'renewal_status' => 'getRenewalStatus',
        'size' => 'getSize',
        'status' => 'getStatus',
        'take_effect_time' => 'getTakeEffectTime',
        'type' => 'getType',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rsc_auto_renew_period'] = isset($data['rsc_auto_renew_period']) ? $data['rsc_auto_renew_period'] : null;
        $this->container['remaining_size'] = isset($data['remaining_size']) ? $data['remaining_size'] : null;
        $this->container['renewal_status'] = isset($data['renewal_status']) ? $data['renewal_status'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['take_effect_time'] = isset($data['take_effect_time']) ? $data['take_effect_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rsc_auto_renew_period
     *
     * @return int
     */
    public function getRscAutoRenewPeriod()
    {
        return $this->container['rsc_auto_renew_period'];
    }

    /**
     * Sets rsc_auto_renew_period
     *
     * @param int $rsc_auto_renew_period rsc_auto_renew_period
     *
     * @return $this
     */
    public function setRscAutoRenewPeriod($rsc_auto_renew_period)
    {
        $this->container['rsc_auto_renew_period'] = $rsc_auto_renew_period;

        return $this;
    }

    /**
     * Gets remaining_size
     *
     * @return int
     */
    public function getRemainingSize()
    {
        return $this->container['remaining_size'];
    }

    /**
     * Sets remaining_size
     *
     * @param int $remaining_size remaining_size
     *
     * @return $this
     */
    public function setRemainingSize($remaining_size)
    {
        $this->container['remaining_size'] = $remaining_size;

        return $this;
    }

    /**
     * Gets renewal_status
     *
     * @return string
     */
    public function getRenewalStatus()
    {
        return $this->container['renewal_status'];
    }

    /**
     * Sets renewal_status
     *
     * @param string $renewal_status renewal_status
     *
     * @return $this
     */
    public function setRenewalStatus($renewal_status)
    {
        $this->container['renewal_status'] = $renewal_status;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets take_effect_time
     *
     * @return string
     */
    public function getTakeEffectTime()
    {
        return $this->container['take_effect_time'];
    }

    /**
     * Sets take_effect_time
     *
     * @param string $take_effect_time take_effect_time
     *
     * @return $this
     */
    public function setTakeEffectTime($take_effect_time)
    {
        $this->container['take_effect_time'] = $take_effect_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

