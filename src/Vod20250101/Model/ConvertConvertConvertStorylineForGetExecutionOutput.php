<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConvertConvertConvertStorylineForGetExecutionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConvertConvertConvertStorylineForGetExecutionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'all_tags' => '\Volcengine\Vod20250101\Model\AllTagForGetExecutionOutput[]',
        'clips' => '\Volcengine\Vod20250101\Model\ConvertClipForGetExecutionOutput[]',
        'duration' => 'double',
        'storylines' => '\Volcengine\Vod20250101\Model\ConvertConvertStorylineForGetExecutionOutput[]',
        'summaries' => 'string[]',
        'titles' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'all_tags' => null,
        'clips' => null,
        'duration' => 'double',
        'storylines' => null,
        'summaries' => null,
        'titles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_tags' => 'AllTags',
        'clips' => 'Clips',
        'duration' => 'Duration',
        'storylines' => 'Storylines',
        'summaries' => 'Summaries',
        'titles' => 'Titles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_tags' => 'setAllTags',
        'clips' => 'setClips',
        'duration' => 'setDuration',
        'storylines' => 'setStorylines',
        'summaries' => 'setSummaries',
        'titles' => 'setTitles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_tags' => 'getAllTags',
        'clips' => 'getClips',
        'duration' => 'getDuration',
        'storylines' => 'getStorylines',
        'summaries' => 'getSummaries',
        'titles' => 'getTitles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['all_tags'] = isset($data['all_tags']) ? $data['all_tags'] : null;
        $this->container['clips'] = isset($data['clips']) ? $data['clips'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['storylines'] = isset($data['storylines']) ? $data['storylines'] : null;
        $this->container['summaries'] = isset($data['summaries']) ? $data['summaries'] : null;
        $this->container['titles'] = isset($data['titles']) ? $data['titles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_tags
     *
     * @return \Volcengine\Vod20250101\Model\AllTagForGetExecutionOutput[]
     */
    public function getAllTags()
    {
        return $this->container['all_tags'];
    }

    /**
     * Sets all_tags
     *
     * @param \Volcengine\Vod20250101\Model\AllTagForGetExecutionOutput[] $all_tags all_tags
     *
     * @return $this
     */
    public function setAllTags($all_tags)
    {
        $this->container['all_tags'] = $all_tags;

        return $this;
    }

    /**
     * Gets clips
     *
     * @return \Volcengine\Vod20250101\Model\ConvertClipForGetExecutionOutput[]
     */
    public function getClips()
    {
        return $this->container['clips'];
    }

    /**
     * Sets clips
     *
     * @param \Volcengine\Vod20250101\Model\ConvertClipForGetExecutionOutput[] $clips clips
     *
     * @return $this
     */
    public function setClips($clips)
    {
        $this->container['clips'] = $clips;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return double
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param double $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets storylines
     *
     * @return \Volcengine\Vod20250101\Model\ConvertConvertStorylineForGetExecutionOutput[]
     */
    public function getStorylines()
    {
        return $this->container['storylines'];
    }

    /**
     * Sets storylines
     *
     * @param \Volcengine\Vod20250101\Model\ConvertConvertStorylineForGetExecutionOutput[] $storylines storylines
     *
     * @return $this
     */
    public function setStorylines($storylines)
    {
        $this->container['storylines'] = $storylines;

        return $this;
    }

    /**
     * Gets summaries
     *
     * @return string[]
     */
    public function getSummaries()
    {
        return $this->container['summaries'];
    }

    /**
     * Sets summaries
     *
     * @param string[] $summaries summaries
     *
     * @return $this
     */
    public function setSummaries($summaries)
    {
        $this->container['summaries'] = $summaries;

        return $this;
    }

    /**
     * Gets titles
     *
     * @return string[]
     */
    public function getTitles()
    {
        return $this->container['titles'];
    }

    /**
     * Sets titles
     *
     * @param string[] $titles titles
     *
     * @return $this
     */
    public function setTitles($titles)
    {
        $this->container['titles'] = $titles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

