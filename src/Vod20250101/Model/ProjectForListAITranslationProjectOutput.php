<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ProjectForListAITranslationProjectOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectForListAITranslationProjectOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_at' => 'string',
        'error_code' => 'int',
        'error_msg' => 'string',
        'input_video' => '\Volcengine\Vod20250101\Model\InputVideoForListAITranslationProjectOutput',
        'input_video_title' => 'string',
        'operator_config' => '\Volcengine\Vod20250101\Model\OperatorConfigForListAITranslationProjectOutput',
        'output_video' => '\Volcengine\Vod20250101\Model\OutputVideoForListAITranslationProjectOutput',
        'project_id' => 'string',
        'project_version' => 'string',
        'source_blueprints' => '\Volcengine\Vod20250101\Model\SourceBlueprintForListAITranslationProjectOutput[]',
        'status' => 'string',
        'target_blueprints' => '\Volcengine\Vod20250101\Model\TargetBlueprintForListAITranslationProjectOutput[]',
        'translation_type_list' => 'string[]',
        'updated_at' => 'string',
        'workflow_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_at' => null,
        'error_code' => 'int32',
        'error_msg' => null,
        'input_video' => null,
        'input_video_title' => null,
        'operator_config' => null,
        'output_video' => null,
        'project_id' => null,
        'project_version' => null,
        'source_blueprints' => null,
        'status' => null,
        'target_blueprints' => null,
        'translation_type_list' => null,
        'updated_at' => null,
        'workflow_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'CreatedAt',
        'error_code' => 'ErrorCode',
        'error_msg' => 'ErrorMsg',
        'input_video' => 'InputVideo',
        'input_video_title' => 'InputVideoTitle',
        'operator_config' => 'OperatorConfig',
        'output_video' => 'OutputVideo',
        'project_id' => 'ProjectId',
        'project_version' => 'ProjectVersion',
        'source_blueprints' => 'SourceBlueprints',
        'status' => 'Status',
        'target_blueprints' => 'TargetBlueprints',
        'translation_type_list' => 'TranslationTypeList',
        'updated_at' => 'UpdatedAt',
        'workflow_id' => 'WorkflowId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'error_code' => 'setErrorCode',
        'error_msg' => 'setErrorMsg',
        'input_video' => 'setInputVideo',
        'input_video_title' => 'setInputVideoTitle',
        'operator_config' => 'setOperatorConfig',
        'output_video' => 'setOutputVideo',
        'project_id' => 'setProjectId',
        'project_version' => 'setProjectVersion',
        'source_blueprints' => 'setSourceBlueprints',
        'status' => 'setStatus',
        'target_blueprints' => 'setTargetBlueprints',
        'translation_type_list' => 'setTranslationTypeList',
        'updated_at' => 'setUpdatedAt',
        'workflow_id' => 'setWorkflowId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'error_code' => 'getErrorCode',
        'error_msg' => 'getErrorMsg',
        'input_video' => 'getInputVideo',
        'input_video_title' => 'getInputVideoTitle',
        'operator_config' => 'getOperatorConfig',
        'output_video' => 'getOutputVideo',
        'project_id' => 'getProjectId',
        'project_version' => 'getProjectVersion',
        'source_blueprints' => 'getSourceBlueprints',
        'status' => 'getStatus',
        'target_blueprints' => 'getTargetBlueprints',
        'translation_type_list' => 'getTranslationTypeList',
        'updated_at' => 'getUpdatedAt',
        'workflow_id' => 'getWorkflowId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_msg'] = isset($data['error_msg']) ? $data['error_msg'] : null;
        $this->container['input_video'] = isset($data['input_video']) ? $data['input_video'] : null;
        $this->container['input_video_title'] = isset($data['input_video_title']) ? $data['input_video_title'] : null;
        $this->container['operator_config'] = isset($data['operator_config']) ? $data['operator_config'] : null;
        $this->container['output_video'] = isset($data['output_video']) ? $data['output_video'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_version'] = isset($data['project_version']) ? $data['project_version'] : null;
        $this->container['source_blueprints'] = isset($data['source_blueprints']) ? $data['source_blueprints'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['target_blueprints'] = isset($data['target_blueprints']) ? $data['target_blueprints'] : null;
        $this->container['translation_type_list'] = isset($data['translation_type_list']) ? $data['translation_type_list'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['workflow_id'] = isset($data['workflow_id']) ? $data['workflow_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_msg
     *
     * @return string
     */
    public function getErrorMsg()
    {
        return $this->container['error_msg'];
    }

    /**
     * Sets error_msg
     *
     * @param string $error_msg error_msg
     *
     * @return $this
     */
    public function setErrorMsg($error_msg)
    {
        $this->container['error_msg'] = $error_msg;

        return $this;
    }

    /**
     * Gets input_video
     *
     * @return \Volcengine\Vod20250101\Model\InputVideoForListAITranslationProjectOutput
     */
    public function getInputVideo()
    {
        return $this->container['input_video'];
    }

    /**
     * Sets input_video
     *
     * @param \Volcengine\Vod20250101\Model\InputVideoForListAITranslationProjectOutput $input_video input_video
     *
     * @return $this
     */
    public function setInputVideo($input_video)
    {
        $this->container['input_video'] = $input_video;

        return $this;
    }

    /**
     * Gets input_video_title
     *
     * @return string
     */
    public function getInputVideoTitle()
    {
        return $this->container['input_video_title'];
    }

    /**
     * Sets input_video_title
     *
     * @param string $input_video_title input_video_title
     *
     * @return $this
     */
    public function setInputVideoTitle($input_video_title)
    {
        $this->container['input_video_title'] = $input_video_title;

        return $this;
    }

    /**
     * Gets operator_config
     *
     * @return \Volcengine\Vod20250101\Model\OperatorConfigForListAITranslationProjectOutput
     */
    public function getOperatorConfig()
    {
        return $this->container['operator_config'];
    }

    /**
     * Sets operator_config
     *
     * @param \Volcengine\Vod20250101\Model\OperatorConfigForListAITranslationProjectOutput $operator_config operator_config
     *
     * @return $this
     */
    public function setOperatorConfig($operator_config)
    {
        $this->container['operator_config'] = $operator_config;

        return $this;
    }

    /**
     * Gets output_video
     *
     * @return \Volcengine\Vod20250101\Model\OutputVideoForListAITranslationProjectOutput
     */
    public function getOutputVideo()
    {
        return $this->container['output_video'];
    }

    /**
     * Sets output_video
     *
     * @param \Volcengine\Vod20250101\Model\OutputVideoForListAITranslationProjectOutput $output_video output_video
     *
     * @return $this
     */
    public function setOutputVideo($output_video)
    {
        $this->container['output_video'] = $output_video;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_version
     *
     * @return string
     */
    public function getProjectVersion()
    {
        return $this->container['project_version'];
    }

    /**
     * Sets project_version
     *
     * @param string $project_version project_version
     *
     * @return $this
     */
    public function setProjectVersion($project_version)
    {
        $this->container['project_version'] = $project_version;

        return $this;
    }

    /**
     * Gets source_blueprints
     *
     * @return \Volcengine\Vod20250101\Model\SourceBlueprintForListAITranslationProjectOutput[]
     */
    public function getSourceBlueprints()
    {
        return $this->container['source_blueprints'];
    }

    /**
     * Sets source_blueprints
     *
     * @param \Volcengine\Vod20250101\Model\SourceBlueprintForListAITranslationProjectOutput[] $source_blueprints source_blueprints
     *
     * @return $this
     */
    public function setSourceBlueprints($source_blueprints)
    {
        $this->container['source_blueprints'] = $source_blueprints;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets target_blueprints
     *
     * @return \Volcengine\Vod20250101\Model\TargetBlueprintForListAITranslationProjectOutput[]
     */
    public function getTargetBlueprints()
    {
        return $this->container['target_blueprints'];
    }

    /**
     * Sets target_blueprints
     *
     * @param \Volcengine\Vod20250101\Model\TargetBlueprintForListAITranslationProjectOutput[] $target_blueprints target_blueprints
     *
     * @return $this
     */
    public function setTargetBlueprints($target_blueprints)
    {
        $this->container['target_blueprints'] = $target_blueprints;

        return $this;
    }

    /**
     * Gets translation_type_list
     *
     * @return string[]
     */
    public function getTranslationTypeList()
    {
        return $this->container['translation_type_list'];
    }

    /**
     * Sets translation_type_list
     *
     * @param string[] $translation_type_list translation_type_list
     *
     * @return $this
     */
    public function setTranslationTypeList($translation_type_list)
    {
        $this->container['translation_type_list'] = $translation_type_list;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return string
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param string $workflow_id workflow_id
     *
     * @return $this
     */
    public function setWorkflowId($workflow_id)
    {
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

