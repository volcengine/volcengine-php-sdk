<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HighlightCutsForStartExecutionInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HighlightCutsForStartExecutionInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_duration' => 'double',
        'max_number' => 'int',
        'min_duration' => 'double',
        'with_storyboard' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_duration' => 'double',
        'max_number' => 'int32',
        'min_duration' => 'double',
        'with_storyboard' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_duration' => 'MaxDuration',
        'max_number' => 'MaxNumber',
        'min_duration' => 'MinDuration',
        'with_storyboard' => 'WithStoryboard'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_duration' => 'setMaxDuration',
        'max_number' => 'setMaxNumber',
        'min_duration' => 'setMinDuration',
        'with_storyboard' => 'setWithStoryboard'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_duration' => 'getMaxDuration',
        'max_number' => 'getMaxNumber',
        'min_duration' => 'getMinDuration',
        'with_storyboard' => 'getWithStoryboard'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_duration'] = isset($data['max_duration']) ? $data['max_duration'] : null;
        $this->container['max_number'] = isset($data['max_number']) ? $data['max_number'] : null;
        $this->container['min_duration'] = isset($data['min_duration']) ? $data['min_duration'] : null;
        $this->container['with_storyboard'] = isset($data['with_storyboard']) ? $data['with_storyboard'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_duration
     *
     * @return double
     */
    public function getMaxDuration()
    {
        return $this->container['max_duration'];
    }

    /**
     * Sets max_duration
     *
     * @param double $max_duration max_duration
     *
     * @return $this
     */
    public function setMaxDuration($max_duration)
    {
        $this->container['max_duration'] = $max_duration;

        return $this;
    }

    /**
     * Gets max_number
     *
     * @return int
     */
    public function getMaxNumber()
    {
        return $this->container['max_number'];
    }

    /**
     * Sets max_number
     *
     * @param int $max_number max_number
     *
     * @return $this
     */
    public function setMaxNumber($max_number)
    {
        $this->container['max_number'] = $max_number;

        return $this;
    }

    /**
     * Gets min_duration
     *
     * @return double
     */
    public function getMinDuration()
    {
        return $this->container['min_duration'];
    }

    /**
     * Sets min_duration
     *
     * @param double $min_duration min_duration
     *
     * @return $this
     */
    public function setMinDuration($min_duration)
    {
        $this->container['min_duration'] = $min_duration;

        return $this;
    }

    /**
     * Gets with_storyboard
     *
     * @return bool
     */
    public function getWithStoryboard()
    {
        return $this->container['with_storyboard'];
    }

    /**
     * Sets with_storyboard
     *
     * @param bool $with_storyboard with_storyboard
     *
     * @return $this
     */
    public function setWithStoryboard($with_storyboard)
    {
        $this->container['with_storyboard'] = $with_storyboard;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

