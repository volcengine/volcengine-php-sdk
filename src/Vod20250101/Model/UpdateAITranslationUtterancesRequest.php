<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateAITranslationUtterancesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateAITranslationUtterancesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'input_subtitle_file_name' => 'string',
        'output_subtitle_file_name' => 'string',
        'project_id' => 'string',
        'space_name' => 'string',
        'update_type' => 'string',
        'utterances' => '\Volcengine\Vod20250101\Model\UtteranceForUpdateAITranslationUtterancesInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'input_subtitle_file_name' => null,
        'output_subtitle_file_name' => null,
        'project_id' => null,
        'space_name' => null,
        'update_type' => null,
        'utterances' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input_subtitle_file_name' => 'InputSubtitleFileName',
        'output_subtitle_file_name' => 'OutputSubtitleFileName',
        'project_id' => 'ProjectId',
        'space_name' => 'SpaceName',
        'update_type' => 'UpdateType',
        'utterances' => 'Utterances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input_subtitle_file_name' => 'setInputSubtitleFileName',
        'output_subtitle_file_name' => 'setOutputSubtitleFileName',
        'project_id' => 'setProjectId',
        'space_name' => 'setSpaceName',
        'update_type' => 'setUpdateType',
        'utterances' => 'setUtterances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input_subtitle_file_name' => 'getInputSubtitleFileName',
        'output_subtitle_file_name' => 'getOutputSubtitleFileName',
        'project_id' => 'getProjectId',
        'space_name' => 'getSpaceName',
        'update_type' => 'getUpdateType',
        'utterances' => 'getUtterances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input_subtitle_file_name'] = isset($data['input_subtitle_file_name']) ? $data['input_subtitle_file_name'] : null;
        $this->container['output_subtitle_file_name'] = isset($data['output_subtitle_file_name']) ? $data['output_subtitle_file_name'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['space_name'] = isset($data['space_name']) ? $data['space_name'] : null;
        $this->container['update_type'] = isset($data['update_type']) ? $data['update_type'] : null;
        $this->container['utterances'] = isset($data['utterances']) ? $data['utterances'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['space_name'] === null) {
            $invalidProperties[] = "'space_name' can't be null";
        }
        if ($this->container['update_type'] === null) {
            $invalidProperties[] = "'update_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input_subtitle_file_name
     *
     * @return string
     */
    public function getInputSubtitleFileName()
    {
        return $this->container['input_subtitle_file_name'];
    }

    /**
     * Sets input_subtitle_file_name
     *
     * @param string $input_subtitle_file_name input_subtitle_file_name
     *
     * @return $this
     */
    public function setInputSubtitleFileName($input_subtitle_file_name)
    {
        $this->container['input_subtitle_file_name'] = $input_subtitle_file_name;

        return $this;
    }

    /**
     * Gets output_subtitle_file_name
     *
     * @return string
     */
    public function getOutputSubtitleFileName()
    {
        return $this->container['output_subtitle_file_name'];
    }

    /**
     * Sets output_subtitle_file_name
     *
     * @param string $output_subtitle_file_name output_subtitle_file_name
     *
     * @return $this
     */
    public function setOutputSubtitleFileName($output_subtitle_file_name)
    {
        $this->container['output_subtitle_file_name'] = $output_subtitle_file_name;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets space_name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->container['space_name'];
    }

    /**
     * Sets space_name
     *
     * @param string $space_name space_name
     *
     * @return $this
     */
    public function setSpaceName($space_name)
    {
        $this->container['space_name'] = $space_name;

        return $this;
    }

    /**
     * Gets update_type
     *
     * @return string
     */
    public function getUpdateType()
    {
        return $this->container['update_type'];
    }

    /**
     * Sets update_type
     *
     * @param string $update_type update_type
     *
     * @return $this
     */
    public function setUpdateType($update_type)
    {
        $this->container['update_type'] = $update_type;

        return $this;
    }

    /**
     * Gets utterances
     *
     * @return \Volcengine\Vod20250101\Model\UtteranceForUpdateAITranslationUtterancesInput[]
     */
    public function getUtterances()
    {
        return $this->container['utterances'];
    }

    /**
     * Sets utterances
     *
     * @param \Volcengine\Vod20250101\Model\UtteranceForUpdateAITranslationUtterancesInput[] $utterances utterances
     *
     * @return $this
     */
    public function setUtterances($utterances)
    {
        $this->container['utterances'] = $utterances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

