<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VideoSummaryForGetExecutionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VideoSummaryForGetExecutionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'best_segment_duration' => 'int',
        'extra_description' => 'string',
        'only_timeline' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'best_segment_duration' => 'int32',
        'extra_description' => null,
        'only_timeline' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'best_segment_duration' => 'BestSegmentDuration',
        'extra_description' => 'ExtraDescription',
        'only_timeline' => 'OnlyTimeline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'best_segment_duration' => 'setBestSegmentDuration',
        'extra_description' => 'setExtraDescription',
        'only_timeline' => 'setOnlyTimeline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'best_segment_duration' => 'getBestSegmentDuration',
        'extra_description' => 'getExtraDescription',
        'only_timeline' => 'getOnlyTimeline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['best_segment_duration'] = isset($data['best_segment_duration']) ? $data['best_segment_duration'] : null;
        $this->container['extra_description'] = isset($data['extra_description']) ? $data['extra_description'] : null;
        $this->container['only_timeline'] = isset($data['only_timeline']) ? $data['only_timeline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets best_segment_duration
     *
     * @return int
     */
    public function getBestSegmentDuration()
    {
        return $this->container['best_segment_duration'];
    }

    /**
     * Sets best_segment_duration
     *
     * @param int $best_segment_duration best_segment_duration
     *
     * @return $this
     */
    public function setBestSegmentDuration($best_segment_duration)
    {
        $this->container['best_segment_duration'] = $best_segment_duration;

        return $this;
    }

    /**
     * Gets extra_description
     *
     * @return string
     */
    public function getExtraDescription()
    {
        return $this->container['extra_description'];
    }

    /**
     * Sets extra_description
     *
     * @param string $extra_description extra_description
     *
     * @return $this
     */
    public function setExtraDescription($extra_description)
    {
        $this->container['extra_description'] = $extra_description;

        return $this;
    }

    /**
     * Gets only_timeline
     *
     * @return bool
     */
    public function getOnlyTimeline()
    {
        return $this->container['only_timeline'];
    }

    /**
     * Sets only_timeline
     *
     * @param bool $only_timeline only_timeline
     *
     * @return $this
     */
    public function setOnlyTimeline($only_timeline)
    {
        $this->container['only_timeline'] = $only_timeline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

