<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SubtitleConfigForSubmitAITranslationWorkflowInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubtitleConfigForSubmitAITranslationWorkflowInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'font_size' => 'int',
        'is_erase_source' => 'bool',
        'is_hard_subtitle' => 'bool',
        'margin_l' => 'double',
        'margin_r' => 'double',
        'margin_v' => 'double',
        'show_lines' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'font_size' => 'int32',
        'is_erase_source' => null,
        'is_hard_subtitle' => null,
        'margin_l' => 'double',
        'margin_r' => 'double',
        'margin_v' => 'double',
        'show_lines' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'font_size' => 'FontSize',
        'is_erase_source' => 'IsEraseSource',
        'is_hard_subtitle' => 'IsHardSubtitle',
        'margin_l' => 'MarginL',
        'margin_r' => 'MarginR',
        'margin_v' => 'MarginV',
        'show_lines' => 'ShowLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'font_size' => 'setFontSize',
        'is_erase_source' => 'setIsEraseSource',
        'is_hard_subtitle' => 'setIsHardSubtitle',
        'margin_l' => 'setMarginL',
        'margin_r' => 'setMarginR',
        'margin_v' => 'setMarginV',
        'show_lines' => 'setShowLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'font_size' => 'getFontSize',
        'is_erase_source' => 'getIsEraseSource',
        'is_hard_subtitle' => 'getIsHardSubtitle',
        'margin_l' => 'getMarginL',
        'margin_r' => 'getMarginR',
        'margin_v' => 'getMarginV',
        'show_lines' => 'getShowLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['font_size'] = isset($data['font_size']) ? $data['font_size'] : null;
        $this->container['is_erase_source'] = isset($data['is_erase_source']) ? $data['is_erase_source'] : null;
        $this->container['is_hard_subtitle'] = isset($data['is_hard_subtitle']) ? $data['is_hard_subtitle'] : null;
        $this->container['margin_l'] = isset($data['margin_l']) ? $data['margin_l'] : null;
        $this->container['margin_r'] = isset($data['margin_r']) ? $data['margin_r'] : null;
        $this->container['margin_v'] = isset($data['margin_v']) ? $data['margin_v'] : null;
        $this->container['show_lines'] = isset($data['show_lines']) ? $data['show_lines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets font_size
     *
     * @return int
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param int $font_size font_size
     *
     * @return $this
     */
    public function setFontSize($font_size)
    {
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets is_erase_source
     *
     * @return bool
     */
    public function getIsEraseSource()
    {
        return $this->container['is_erase_source'];
    }

    /**
     * Sets is_erase_source
     *
     * @param bool $is_erase_source is_erase_source
     *
     * @return $this
     */
    public function setIsEraseSource($is_erase_source)
    {
        $this->container['is_erase_source'] = $is_erase_source;

        return $this;
    }

    /**
     * Gets is_hard_subtitle
     *
     * @return bool
     */
    public function getIsHardSubtitle()
    {
        return $this->container['is_hard_subtitle'];
    }

    /**
     * Sets is_hard_subtitle
     *
     * @param bool $is_hard_subtitle is_hard_subtitle
     *
     * @return $this
     */
    public function setIsHardSubtitle($is_hard_subtitle)
    {
        $this->container['is_hard_subtitle'] = $is_hard_subtitle;

        return $this;
    }

    /**
     * Gets margin_l
     *
     * @return double
     */
    public function getMarginL()
    {
        return $this->container['margin_l'];
    }

    /**
     * Sets margin_l
     *
     * @param double $margin_l margin_l
     *
     * @return $this
     */
    public function setMarginL($margin_l)
    {
        $this->container['margin_l'] = $margin_l;

        return $this;
    }

    /**
     * Gets margin_r
     *
     * @return double
     */
    public function getMarginR()
    {
        return $this->container['margin_r'];
    }

    /**
     * Sets margin_r
     *
     * @param double $margin_r margin_r
     *
     * @return $this
     */
    public function setMarginR($margin_r)
    {
        $this->container['margin_r'] = $margin_r;

        return $this;
    }

    /**
     * Gets margin_v
     *
     * @return double
     */
    public function getMarginV()
    {
        return $this->container['margin_v'];
    }

    /**
     * Sets margin_v
     *
     * @param double $margin_v margin_v
     *
     * @return $this
     */
    public function setMarginV($margin_v)
    {
        $this->container['margin_v'] = $margin_v;

        return $this;
    }

    /**
     * Gets show_lines
     *
     * @return int
     */
    public function getShowLines()
    {
        return $this->container['show_lines'];
    }

    /**
     * Sets show_lines
     *
     * @param int $show_lines show_lines
     *
     * @return $this
     */
    public function setShowLines($show_lines)
    {
        $this->container['show_lines'] = $show_lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

