<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VisionForStartExecutionInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VisionForStartExecutionInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'model' => '\Volcengine\Vod20250101\Model\ModelForStartExecutionInput',
        'need_asr_speaker' => 'bool',
        'prompt' => 'string',
        'response_format_type' => 'string',
        'segment' => '\Volcengine\Vod20250101\Model\ConvertSegmentForStartExecutionInput',
        'snapshot_param' => '\Volcengine\Vod20250101\Model\SnapshotParamForStartExecutionInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'model' => null,
        'need_asr_speaker' => null,
        'prompt' => null,
        'response_format_type' => null,
        'segment' => null,
        'snapshot_param' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model' => 'Model',
        'need_asr_speaker' => 'NeedAsrSpeaker',
        'prompt' => 'Prompt',
        'response_format_type' => 'ResponseFormatType',
        'segment' => 'Segment',
        'snapshot_param' => 'SnapshotParam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model' => 'setModel',
        'need_asr_speaker' => 'setNeedAsrSpeaker',
        'prompt' => 'setPrompt',
        'response_format_type' => 'setResponseFormatType',
        'segment' => 'setSegment',
        'snapshot_param' => 'setSnapshotParam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model' => 'getModel',
        'need_asr_speaker' => 'getNeedAsrSpeaker',
        'prompt' => 'getPrompt',
        'response_format_type' => 'getResponseFormatType',
        'segment' => 'getSegment',
        'snapshot_param' => 'getSnapshotParam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['need_asr_speaker'] = isset($data['need_asr_speaker']) ? $data['need_asr_speaker'] : null;
        $this->container['prompt'] = isset($data['prompt']) ? $data['prompt'] : null;
        $this->container['response_format_type'] = isset($data['response_format_type']) ? $data['response_format_type'] : null;
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['snapshot_param'] = isset($data['snapshot_param']) ? $data['snapshot_param'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model
     *
     * @return \Volcengine\Vod20250101\Model\ModelForStartExecutionInput
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Volcengine\Vod20250101\Model\ModelForStartExecutionInput $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets need_asr_speaker
     *
     * @return bool
     */
    public function getNeedAsrSpeaker()
    {
        return $this->container['need_asr_speaker'];
    }

    /**
     * Sets need_asr_speaker
     *
     * @param bool $need_asr_speaker need_asr_speaker
     *
     * @return $this
     */
    public function setNeedAsrSpeaker($need_asr_speaker)
    {
        $this->container['need_asr_speaker'] = $need_asr_speaker;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string $prompt prompt
     *
     * @return $this
     */
    public function setPrompt($prompt)
    {
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets response_format_type
     *
     * @return string
     */
    public function getResponseFormatType()
    {
        return $this->container['response_format_type'];
    }

    /**
     * Sets response_format_type
     *
     * @param string $response_format_type response_format_type
     *
     * @return $this
     */
    public function setResponseFormatType($response_format_type)
    {
        $this->container['response_format_type'] = $response_format_type;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return \Volcengine\Vod20250101\Model\ConvertSegmentForStartExecutionInput
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \Volcengine\Vod20250101\Model\ConvertSegmentForStartExecutionInput $segment segment
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets snapshot_param
     *
     * @return \Volcengine\Vod20250101\Model\SnapshotParamForStartExecutionInput
     */
    public function getSnapshotParam()
    {
        return $this->container['snapshot_param'];
    }

    /**
     * Sets snapshot_param
     *
     * @param \Volcengine\Vod20250101\Model\SnapshotParamForStartExecutionInput $snapshot_param snapshot_param
     *
     * @return $this
     */
    public function setSnapshotParam($snapshot_param)
    {
        $this->container['snapshot_param'] = $snapshot_param;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

