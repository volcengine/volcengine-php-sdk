<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TargetClipForGetAITranslationProjectOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TargetClipForGetAITranslationProjectOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip_audio' => '\Volcengine\Vod20250101\Model\PreviewVideoMutedForGetAITranslationProjectOutput',
        'clip_video' => '\Volcengine\Vod20250101\Model\PreviewVideoMutedForGetAITranslationProjectOutput',
        'id' => 'string',
        'track_id' => 'string',
        'translation_type' => 'string',
        'trim' => '\Volcengine\Vod20250101\Model\TrimForGetAITranslationProjectOutput',
        'volume' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip_audio' => null,
        'clip_video' => null,
        'id' => null,
        'track_id' => null,
        'translation_type' => null,
        'trim' => null,
        'volume' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip_audio' => 'ClipAudio',
        'clip_video' => 'ClipVideo',
        'id' => 'Id',
        'track_id' => 'TrackId',
        'translation_type' => 'TranslationType',
        'trim' => 'Trim',
        'volume' => 'Volume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip_audio' => 'setClipAudio',
        'clip_video' => 'setClipVideo',
        'id' => 'setId',
        'track_id' => 'setTrackId',
        'translation_type' => 'setTranslationType',
        'trim' => 'setTrim',
        'volume' => 'setVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip_audio' => 'getClipAudio',
        'clip_video' => 'getClipVideo',
        'id' => 'getId',
        'track_id' => 'getTrackId',
        'translation_type' => 'getTranslationType',
        'trim' => 'getTrim',
        'volume' => 'getVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip_audio'] = isset($data['clip_audio']) ? $data['clip_audio'] : null;
        $this->container['clip_video'] = isset($data['clip_video']) ? $data['clip_video'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['track_id'] = isset($data['track_id']) ? $data['track_id'] : null;
        $this->container['translation_type'] = isset($data['translation_type']) ? $data['translation_type'] : null;
        $this->container['trim'] = isset($data['trim']) ? $data['trim'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip_audio
     *
     * @return \Volcengine\Vod20250101\Model\PreviewVideoMutedForGetAITranslationProjectOutput
     */
    public function getClipAudio()
    {
        return $this->container['clip_audio'];
    }

    /**
     * Sets clip_audio
     *
     * @param \Volcengine\Vod20250101\Model\PreviewVideoMutedForGetAITranslationProjectOutput $clip_audio clip_audio
     *
     * @return $this
     */
    public function setClipAudio($clip_audio)
    {
        $this->container['clip_audio'] = $clip_audio;

        return $this;
    }

    /**
     * Gets clip_video
     *
     * @return \Volcengine\Vod20250101\Model\PreviewVideoMutedForGetAITranslationProjectOutput
     */
    public function getClipVideo()
    {
        return $this->container['clip_video'];
    }

    /**
     * Sets clip_video
     *
     * @param \Volcengine\Vod20250101\Model\PreviewVideoMutedForGetAITranslationProjectOutput $clip_video clip_video
     *
     * @return $this
     */
    public function setClipVideo($clip_video)
    {
        $this->container['clip_video'] = $clip_video;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets track_id
     *
     * @return string
     */
    public function getTrackId()
    {
        return $this->container['track_id'];
    }

    /**
     * Sets track_id
     *
     * @param string $track_id track_id
     *
     * @return $this
     */
    public function setTrackId($track_id)
    {
        $this->container['track_id'] = $track_id;

        return $this;
    }

    /**
     * Gets translation_type
     *
     * @return string
     */
    public function getTranslationType()
    {
        return $this->container['translation_type'];
    }

    /**
     * Sets translation_type
     *
     * @param string $translation_type translation_type
     *
     * @return $this
     */
    public function setTranslationType($translation_type)
    {
        $this->container['translation_type'] = $translation_type;

        return $this;
    }

    /**
     * Gets trim
     *
     * @return \Volcengine\Vod20250101\Model\TrimForGetAITranslationProjectOutput
     */
    public function getTrim()
    {
        return $this->container['trim'];
    }

    /**
     * Sets trim
     *
     * @param \Volcengine\Vod20250101\Model\TrimForGetAITranslationProjectOutput $trim trim
     *
     * @return $this
     */
    public function setTrim($trim)
    {
        $this->container['trim'] = $trim;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return int
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param int $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

