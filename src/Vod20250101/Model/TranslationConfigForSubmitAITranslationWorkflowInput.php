<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TranslationConfigForSubmitAITranslationWorkflowInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TranslationConfigForSubmitAITranslationWorkflowInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'source_language' => 'string',
        'target_language' => 'string',
        'termbase_config' => '\Volcengine\Vod20250101\Model\TermbaseConfigForSubmitAITranslationWorkflowInput',
        'translation_type_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'source_language' => null,
        'target_language' => null,
        'termbase_config' => null,
        'translation_type_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_language' => 'SourceLanguage',
        'target_language' => 'TargetLanguage',
        'termbase_config' => 'TermbaseConfig',
        'translation_type_list' => 'TranslationTypeList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_language' => 'setSourceLanguage',
        'target_language' => 'setTargetLanguage',
        'termbase_config' => 'setTermbaseConfig',
        'translation_type_list' => 'setTranslationTypeList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_language' => 'getSourceLanguage',
        'target_language' => 'getTargetLanguage',
        'termbase_config' => 'getTermbaseConfig',
        'translation_type_list' => 'getTranslationTypeList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['source_language'] = isset($data['source_language']) ? $data['source_language'] : null;
        $this->container['target_language'] = isset($data['target_language']) ? $data['target_language'] : null;
        $this->container['termbase_config'] = isset($data['termbase_config']) ? $data['termbase_config'] : null;
        $this->container['translation_type_list'] = isset($data['translation_type_list']) ? $data['translation_type_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_language
     *
     * @return string
     */
    public function getSourceLanguage()
    {
        return $this->container['source_language'];
    }

    /**
     * Sets source_language
     *
     * @param string $source_language source_language
     *
     * @return $this
     */
    public function setSourceLanguage($source_language)
    {
        $this->container['source_language'] = $source_language;

        return $this;
    }

    /**
     * Gets target_language
     *
     * @return string
     */
    public function getTargetLanguage()
    {
        return $this->container['target_language'];
    }

    /**
     * Sets target_language
     *
     * @param string $target_language target_language
     *
     * @return $this
     */
    public function setTargetLanguage($target_language)
    {
        $this->container['target_language'] = $target_language;

        return $this;
    }

    /**
     * Gets termbase_config
     *
     * @return \Volcengine\Vod20250101\Model\TermbaseConfigForSubmitAITranslationWorkflowInput
     */
    public function getTermbaseConfig()
    {
        return $this->container['termbase_config'];
    }

    /**
     * Sets termbase_config
     *
     * @param \Volcengine\Vod20250101\Model\TermbaseConfigForSubmitAITranslationWorkflowInput $termbase_config termbase_config
     *
     * @return $this
     */
    public function setTermbaseConfig($termbase_config)
    {
        $this->container['termbase_config'] = $termbase_config;

        return $this;
    }

    /**
     * Gets translation_type_list
     *
     * @return string[]
     */
    public function getTranslationTypeList()
    {
        return $this->container['translation_type_list'];
    }

    /**
     * Sets translation_type_list
     *
     * @param string[] $translation_type_list translation_type_list
     *
     * @return $this
     */
    public function setTranslationTypeList($translation_type_list)
    {
        $this->container['translation_type_list'] = $translation_type_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

