<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConvertModelForGetExecutionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConvertModelForGetExecutionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doubao_input_tokens' => 'int',
        'doubao_output_tokens' => 'int',
        'doubao_text_input_tokens' => 'int',
        'doubao_text_output_tokens' => 'int',
        'doubao_text_total_tokens' => 'int',
        'doubao_total_tokens' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'doubao_input_tokens' => 'int32',
        'doubao_output_tokens' => 'int32',
        'doubao_text_input_tokens' => 'int32',
        'doubao_text_output_tokens' => 'int32',
        'doubao_text_total_tokens' => 'int32',
        'doubao_total_tokens' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doubao_input_tokens' => 'DoubaoInputTokens',
        'doubao_output_tokens' => 'DoubaoOutputTokens',
        'doubao_text_input_tokens' => 'DoubaoTextInputTokens',
        'doubao_text_output_tokens' => 'DoubaoTextOutputTokens',
        'doubao_text_total_tokens' => 'DoubaoTextTotalTokens',
        'doubao_total_tokens' => 'DoubaoTotalTokens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doubao_input_tokens' => 'setDoubaoInputTokens',
        'doubao_output_tokens' => 'setDoubaoOutputTokens',
        'doubao_text_input_tokens' => 'setDoubaoTextInputTokens',
        'doubao_text_output_tokens' => 'setDoubaoTextOutputTokens',
        'doubao_text_total_tokens' => 'setDoubaoTextTotalTokens',
        'doubao_total_tokens' => 'setDoubaoTotalTokens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doubao_input_tokens' => 'getDoubaoInputTokens',
        'doubao_output_tokens' => 'getDoubaoOutputTokens',
        'doubao_text_input_tokens' => 'getDoubaoTextInputTokens',
        'doubao_text_output_tokens' => 'getDoubaoTextOutputTokens',
        'doubao_text_total_tokens' => 'getDoubaoTextTotalTokens',
        'doubao_total_tokens' => 'getDoubaoTotalTokens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doubao_input_tokens'] = isset($data['doubao_input_tokens']) ? $data['doubao_input_tokens'] : null;
        $this->container['doubao_output_tokens'] = isset($data['doubao_output_tokens']) ? $data['doubao_output_tokens'] : null;
        $this->container['doubao_text_input_tokens'] = isset($data['doubao_text_input_tokens']) ? $data['doubao_text_input_tokens'] : null;
        $this->container['doubao_text_output_tokens'] = isset($data['doubao_text_output_tokens']) ? $data['doubao_text_output_tokens'] : null;
        $this->container['doubao_text_total_tokens'] = isset($data['doubao_text_total_tokens']) ? $data['doubao_text_total_tokens'] : null;
        $this->container['doubao_total_tokens'] = isset($data['doubao_total_tokens']) ? $data['doubao_total_tokens'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doubao_input_tokens
     *
     * @return int
     */
    public function getDoubaoInputTokens()
    {
        return $this->container['doubao_input_tokens'];
    }

    /**
     * Sets doubao_input_tokens
     *
     * @param int $doubao_input_tokens doubao_input_tokens
     *
     * @return $this
     */
    public function setDoubaoInputTokens($doubao_input_tokens)
    {
        $this->container['doubao_input_tokens'] = $doubao_input_tokens;

        return $this;
    }

    /**
     * Gets doubao_output_tokens
     *
     * @return int
     */
    public function getDoubaoOutputTokens()
    {
        return $this->container['doubao_output_tokens'];
    }

    /**
     * Sets doubao_output_tokens
     *
     * @param int $doubao_output_tokens doubao_output_tokens
     *
     * @return $this
     */
    public function setDoubaoOutputTokens($doubao_output_tokens)
    {
        $this->container['doubao_output_tokens'] = $doubao_output_tokens;

        return $this;
    }

    /**
     * Gets doubao_text_input_tokens
     *
     * @return int
     */
    public function getDoubaoTextInputTokens()
    {
        return $this->container['doubao_text_input_tokens'];
    }

    /**
     * Sets doubao_text_input_tokens
     *
     * @param int $doubao_text_input_tokens doubao_text_input_tokens
     *
     * @return $this
     */
    public function setDoubaoTextInputTokens($doubao_text_input_tokens)
    {
        $this->container['doubao_text_input_tokens'] = $doubao_text_input_tokens;

        return $this;
    }

    /**
     * Gets doubao_text_output_tokens
     *
     * @return int
     */
    public function getDoubaoTextOutputTokens()
    {
        return $this->container['doubao_text_output_tokens'];
    }

    /**
     * Sets doubao_text_output_tokens
     *
     * @param int $doubao_text_output_tokens doubao_text_output_tokens
     *
     * @return $this
     */
    public function setDoubaoTextOutputTokens($doubao_text_output_tokens)
    {
        $this->container['doubao_text_output_tokens'] = $doubao_text_output_tokens;

        return $this;
    }

    /**
     * Gets doubao_text_total_tokens
     *
     * @return int
     */
    public function getDoubaoTextTotalTokens()
    {
        return $this->container['doubao_text_total_tokens'];
    }

    /**
     * Sets doubao_text_total_tokens
     *
     * @param int $doubao_text_total_tokens doubao_text_total_tokens
     *
     * @return $this
     */
    public function setDoubaoTextTotalTokens($doubao_text_total_tokens)
    {
        $this->container['doubao_text_total_tokens'] = $doubao_text_total_tokens;

        return $this;
    }

    /**
     * Gets doubao_total_tokens
     *
     * @return int
     */
    public function getDoubaoTotalTokens()
    {
        return $this->container['doubao_total_tokens'];
    }

    /**
     * Sets doubao_total_tokens
     *
     * @param int $doubao_total_tokens doubao_total_tokens
     *
     * @return $this
     */
    public function setDoubaoTotalTokens($doubao_total_tokens)
    {
        $this->container['doubao_total_tokens'] = $doubao_total_tokens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

