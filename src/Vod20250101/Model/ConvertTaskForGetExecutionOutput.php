<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConvertTaskForGetExecutionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConvertTaskForGetExecutionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ad_audit' => '\Volcengine\Vod20250101\Model\ConvertAdAuditForGetExecutionOutput',
        'asr' => '\Volcengine\Vod20250101\Model\ConvertAsrForGetExecutionOutput',
        'audio_extract' => '\Volcengine\Vod20250101\Model\ConvertAudioExtractForGetExecutionOutput',
        'highlight' => '\Volcengine\Vod20250101\Model\ConvertHighlightForGetExecutionOutput',
        'ocr' => '\Volcengine\Vod20250101\Model\ConvertOcrForGetExecutionOutput',
        'segment' => '\Volcengine\Vod20250101\Model\ConvertConvertSegmentForGetExecutionOutput',
        'storyline' => '\Volcengine\Vod20250101\Model\ConvertConvertStorylineForGetExecutionOutput',
        'type' => 'string',
        'vision' => '\Volcengine\Vod20250101\Model\ConvertVisionForGetExecutionOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ad_audit' => null,
        'asr' => null,
        'audio_extract' => null,
        'highlight' => null,
        'ocr' => null,
        'segment' => null,
        'storyline' => null,
        'type' => null,
        'vision' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ad_audit' => 'AdAudit',
        'asr' => 'Asr',
        'audio_extract' => 'AudioExtract',
        'highlight' => 'Highlight',
        'ocr' => 'Ocr',
        'segment' => 'Segment',
        'storyline' => 'Storyline',
        'type' => 'Type',
        'vision' => 'Vision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ad_audit' => 'setAdAudit',
        'asr' => 'setAsr',
        'audio_extract' => 'setAudioExtract',
        'highlight' => 'setHighlight',
        'ocr' => 'setOcr',
        'segment' => 'setSegment',
        'storyline' => 'setStoryline',
        'type' => 'setType',
        'vision' => 'setVision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ad_audit' => 'getAdAudit',
        'asr' => 'getAsr',
        'audio_extract' => 'getAudioExtract',
        'highlight' => 'getHighlight',
        'ocr' => 'getOcr',
        'segment' => 'getSegment',
        'storyline' => 'getStoryline',
        'type' => 'getType',
        'vision' => 'getVision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ad_audit'] = isset($data['ad_audit']) ? $data['ad_audit'] : null;
        $this->container['asr'] = isset($data['asr']) ? $data['asr'] : null;
        $this->container['audio_extract'] = isset($data['audio_extract']) ? $data['audio_extract'] : null;
        $this->container['highlight'] = isset($data['highlight']) ? $data['highlight'] : null;
        $this->container['ocr'] = isset($data['ocr']) ? $data['ocr'] : null;
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['storyline'] = isset($data['storyline']) ? $data['storyline'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vision'] = isset($data['vision']) ? $data['vision'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ad_audit
     *
     * @return \Volcengine\Vod20250101\Model\ConvertAdAuditForGetExecutionOutput
     */
    public function getAdAudit()
    {
        return $this->container['ad_audit'];
    }

    /**
     * Sets ad_audit
     *
     * @param \Volcengine\Vod20250101\Model\ConvertAdAuditForGetExecutionOutput $ad_audit ad_audit
     *
     * @return $this
     */
    public function setAdAudit($ad_audit)
    {
        $this->container['ad_audit'] = $ad_audit;

        return $this;
    }

    /**
     * Gets asr
     *
     * @return \Volcengine\Vod20250101\Model\ConvertAsrForGetExecutionOutput
     */
    public function getAsr()
    {
        return $this->container['asr'];
    }

    /**
     * Sets asr
     *
     * @param \Volcengine\Vod20250101\Model\ConvertAsrForGetExecutionOutput $asr asr
     *
     * @return $this
     */
    public function setAsr($asr)
    {
        $this->container['asr'] = $asr;

        return $this;
    }

    /**
     * Gets audio_extract
     *
     * @return \Volcengine\Vod20250101\Model\ConvertAudioExtractForGetExecutionOutput
     */
    public function getAudioExtract()
    {
        return $this->container['audio_extract'];
    }

    /**
     * Sets audio_extract
     *
     * @param \Volcengine\Vod20250101\Model\ConvertAudioExtractForGetExecutionOutput $audio_extract audio_extract
     *
     * @return $this
     */
    public function setAudioExtract($audio_extract)
    {
        $this->container['audio_extract'] = $audio_extract;

        return $this;
    }

    /**
     * Gets highlight
     *
     * @return \Volcengine\Vod20250101\Model\ConvertHighlightForGetExecutionOutput
     */
    public function getHighlight()
    {
        return $this->container['highlight'];
    }

    /**
     * Sets highlight
     *
     * @param \Volcengine\Vod20250101\Model\ConvertHighlightForGetExecutionOutput $highlight highlight
     *
     * @return $this
     */
    public function setHighlight($highlight)
    {
        $this->container['highlight'] = $highlight;

        return $this;
    }

    /**
     * Gets ocr
     *
     * @return \Volcengine\Vod20250101\Model\ConvertOcrForGetExecutionOutput
     */
    public function getOcr()
    {
        return $this->container['ocr'];
    }

    /**
     * Sets ocr
     *
     * @param \Volcengine\Vod20250101\Model\ConvertOcrForGetExecutionOutput $ocr ocr
     *
     * @return $this
     */
    public function setOcr($ocr)
    {
        $this->container['ocr'] = $ocr;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return \Volcengine\Vod20250101\Model\ConvertConvertSegmentForGetExecutionOutput
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \Volcengine\Vod20250101\Model\ConvertConvertSegmentForGetExecutionOutput $segment segment
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets storyline
     *
     * @return \Volcengine\Vod20250101\Model\ConvertConvertStorylineForGetExecutionOutput
     */
    public function getStoryline()
    {
        return $this->container['storyline'];
    }

    /**
     * Sets storyline
     *
     * @param \Volcengine\Vod20250101\Model\ConvertConvertStorylineForGetExecutionOutput $storyline storyline
     *
     * @return $this
     */
    public function setStoryline($storyline)
    {
        $this->container['storyline'] = $storyline;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vision
     *
     * @return \Volcengine\Vod20250101\Model\ConvertVisionForGetExecutionOutput
     */
    public function getVision()
    {
        return $this->container['vision'];
    }

    /**
     * Sets vision
     *
     * @param \Volcengine\Vod20250101\Model\ConvertVisionForGetExecutionOutput $vision vision
     *
     * @return $this
     */
    public function setVision($vision)
    {
        $this->container['vision'] = $vision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

