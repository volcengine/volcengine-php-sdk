<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TargetUtteranceForGetAITranslationProjectOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TargetUtteranceForGetAITranslationProjectOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'blueprint_id' => 'string',
        'clip_id' => 'string',
        'id' => 'string',
        'is_facial_translation' => 'bool',
        'project_id' => 'string',
        'source_id' => 'string',
        'speaker_id' => 'string',
        'status' => 'string',
        'text' => 'string',
        'translation_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'blueprint_id' => null,
        'clip_id' => null,
        'id' => null,
        'is_facial_translation' => null,
        'project_id' => null,
        'source_id' => null,
        'speaker_id' => null,
        'status' => null,
        'text' => null,
        'translation_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blueprint_id' => 'BlueprintId',
        'clip_id' => 'ClipId',
        'id' => 'Id',
        'is_facial_translation' => 'IsFacialTranslation',
        'project_id' => 'ProjectId',
        'source_id' => 'SourceId',
        'speaker_id' => 'SpeakerId',
        'status' => 'Status',
        'text' => 'Text',
        'translation_type' => 'TranslationType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blueprint_id' => 'setBlueprintId',
        'clip_id' => 'setClipId',
        'id' => 'setId',
        'is_facial_translation' => 'setIsFacialTranslation',
        'project_id' => 'setProjectId',
        'source_id' => 'setSourceId',
        'speaker_id' => 'setSpeakerId',
        'status' => 'setStatus',
        'text' => 'setText',
        'translation_type' => 'setTranslationType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blueprint_id' => 'getBlueprintId',
        'clip_id' => 'getClipId',
        'id' => 'getId',
        'is_facial_translation' => 'getIsFacialTranslation',
        'project_id' => 'getProjectId',
        'source_id' => 'getSourceId',
        'speaker_id' => 'getSpeakerId',
        'status' => 'getStatus',
        'text' => 'getText',
        'translation_type' => 'getTranslationType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blueprint_id'] = isset($data['blueprint_id']) ? $data['blueprint_id'] : null;
        $this->container['clip_id'] = isset($data['clip_id']) ? $data['clip_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_facial_translation'] = isset($data['is_facial_translation']) ? $data['is_facial_translation'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['speaker_id'] = isset($data['speaker_id']) ? $data['speaker_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['translation_type'] = isset($data['translation_type']) ? $data['translation_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blueprint_id
     *
     * @return string
     */
    public function getBlueprintId()
    {
        return $this->container['blueprint_id'];
    }

    /**
     * Sets blueprint_id
     *
     * @param string $blueprint_id blueprint_id
     *
     * @return $this
     */
    public function setBlueprintId($blueprint_id)
    {
        $this->container['blueprint_id'] = $blueprint_id;

        return $this;
    }

    /**
     * Gets clip_id
     *
     * @return string
     */
    public function getClipId()
    {
        return $this->container['clip_id'];
    }

    /**
     * Sets clip_id
     *
     * @param string $clip_id clip_id
     *
     * @return $this
     */
    public function setClipId($clip_id)
    {
        $this->container['clip_id'] = $clip_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_facial_translation
     *
     * @return bool
     */
    public function getIsFacialTranslation()
    {
        return $this->container['is_facial_translation'];
    }

    /**
     * Sets is_facial_translation
     *
     * @param bool $is_facial_translation is_facial_translation
     *
     * @return $this
     */
    public function setIsFacialTranslation($is_facial_translation)
    {
        $this->container['is_facial_translation'] = $is_facial_translation;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets speaker_id
     *
     * @return string
     */
    public function getSpeakerId()
    {
        return $this->container['speaker_id'];
    }

    /**
     * Sets speaker_id
     *
     * @param string $speaker_id speaker_id
     *
     * @return $this
     */
    public function setSpeakerId($speaker_id)
    {
        $this->container['speaker_id'] = $speaker_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets translation_type
     *
     * @return string
     */
    public function getTranslationType()
    {
        return $this->container['translation_type'];
    }

    /**
     * Sets translation_type
     *
     * @param string $translation_type translation_type
     *
     * @return $this
     */
    public function setTranslationType($translation_type)
    {
        $this->container['translation_type'] = $translation_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

