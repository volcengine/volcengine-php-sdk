<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class StartExecutionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StartExecutionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'control' => '\Volcengine\Vod20250101\Model\ControlForStartExecutionInput',
        'input' => '\Volcengine\Vod20250101\Model\InputForStartExecutionInput',
        'multi_inputs' => '\Volcengine\Vod20250101\Model\MultiInputForStartExecutionInput[]',
        'operation' => '\Volcengine\Vod20250101\Model\ConvertOperationForStartExecutionInput',
        'space_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'control' => null,
        'input' => null,
        'multi_inputs' => null,
        'operation' => null,
        'space_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'control' => 'Control',
        'input' => 'Input',
        'multi_inputs' => 'MultiInputs',
        'operation' => 'Operation',
        'space_name' => 'SpaceName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'control' => 'setControl',
        'input' => 'setInput',
        'multi_inputs' => 'setMultiInputs',
        'operation' => 'setOperation',
        'space_name' => 'setSpaceName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'control' => 'getControl',
        'input' => 'getInput',
        'multi_inputs' => 'getMultiInputs',
        'operation' => 'getOperation',
        'space_name' => 'getSpaceName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['control'] = isset($data['control']) ? $data['control'] : null;
        $this->container['input'] = isset($data['input']) ? $data['input'] : null;
        $this->container['multi_inputs'] = isset($data['multi_inputs']) ? $data['multi_inputs'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['space_name'] = isset($data['space_name']) ? $data['space_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets control
     *
     * @return \Volcengine\Vod20250101\Model\ControlForStartExecutionInput
     */
    public function getControl()
    {
        return $this->container['control'];
    }

    /**
     * Sets control
     *
     * @param \Volcengine\Vod20250101\Model\ControlForStartExecutionInput $control control
     *
     * @return $this
     */
    public function setControl($control)
    {
        $this->container['control'] = $control;

        return $this;
    }

    /**
     * Gets input
     *
     * @return \Volcengine\Vod20250101\Model\InputForStartExecutionInput
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param \Volcengine\Vod20250101\Model\InputForStartExecutionInput $input input
     *
     * @return $this
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets multi_inputs
     *
     * @return \Volcengine\Vod20250101\Model\MultiInputForStartExecutionInput[]
     */
    public function getMultiInputs()
    {
        return $this->container['multi_inputs'];
    }

    /**
     * Sets multi_inputs
     *
     * @param \Volcengine\Vod20250101\Model\MultiInputForStartExecutionInput[] $multi_inputs multi_inputs
     *
     * @return $this
     */
    public function setMultiInputs($multi_inputs)
    {
        $this->container['multi_inputs'] = $multi_inputs;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return \Volcengine\Vod20250101\Model\ConvertOperationForStartExecutionInput
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param \Volcengine\Vod20250101\Model\ConvertOperationForStartExecutionInput $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets space_name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->container['space_name'];
    }

    /**
     * Sets space_name
     *
     * @param string $space_name space_name
     *
     * @return $this
     */
    public function setSpaceName($space_name)
    {
        $this->container['space_name'] = $space_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

