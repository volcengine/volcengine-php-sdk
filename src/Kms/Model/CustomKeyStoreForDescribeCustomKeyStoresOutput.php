<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Kms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CustomKeyStoreForDescribeCustomKeyStoresOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomKeyStoreForDescribeCustomKeyStoresOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connection_error_code' => 'string',
        'connection_state' => 'string',
        'creation_date' => 'int',
        'custom_key_store_name' => 'string',
        'custom_key_store_type' => 'string',
        'id' => 'string',
        'trust_anchor_certificate' => 'string',
        'uid' => 'string',
        'update_date' => 'int',
        'xks_proxy_configuration' => '\Volcengine\Kms\Model\XksProxyConfigurationForDescribeCustomKeyStoresOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connection_error_code' => null,
        'connection_state' => null,
        'creation_date' => 'int64',
        'custom_key_store_name' => null,
        'custom_key_store_type' => null,
        'id' => null,
        'trust_anchor_certificate' => null,
        'uid' => null,
        'update_date' => 'int64',
        'xks_proxy_configuration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_error_code' => 'ConnectionErrorCode',
        'connection_state' => 'ConnectionState',
        'creation_date' => 'CreationDate',
        'custom_key_store_name' => 'CustomKeyStoreName',
        'custom_key_store_type' => 'CustomKeyStoreType',
        'id' => 'ID',
        'trust_anchor_certificate' => 'TrustAnchorCertificate',
        'uid' => 'UID',
        'update_date' => 'UpdateDate',
        'xks_proxy_configuration' => 'XksProxyConfiguration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_error_code' => 'setConnectionErrorCode',
        'connection_state' => 'setConnectionState',
        'creation_date' => 'setCreationDate',
        'custom_key_store_name' => 'setCustomKeyStoreName',
        'custom_key_store_type' => 'setCustomKeyStoreType',
        'id' => 'setId',
        'trust_anchor_certificate' => 'setTrustAnchorCertificate',
        'uid' => 'setUid',
        'update_date' => 'setUpdateDate',
        'xks_proxy_configuration' => 'setXksProxyConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_error_code' => 'getConnectionErrorCode',
        'connection_state' => 'getConnectionState',
        'creation_date' => 'getCreationDate',
        'custom_key_store_name' => 'getCustomKeyStoreName',
        'custom_key_store_type' => 'getCustomKeyStoreType',
        'id' => 'getId',
        'trust_anchor_certificate' => 'getTrustAnchorCertificate',
        'uid' => 'getUid',
        'update_date' => 'getUpdateDate',
        'xks_proxy_configuration' => 'getXksProxyConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONNECTION_STATE_CONNECTED = 'CONNECTED';
    const CONNECTION_STATE_CONNECTING = 'CONNECTING';
    const CONNECTION_STATE_FAILED = 'FAILED';
    const CONNECTION_STATE_DISCONNECTED = 'DISCONNECTED';
    const CONNECTION_STATE_DISCONNECTING = 'DISCONNECTING';
    const CUSTOM_KEY_STORE_TYPE_EXTERNAL_KEY_STORE = 'ExternalKeyStore';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionStateAllowableValues()
    {
        return [
            self::CONNECTION_STATE_CONNECTED,
            self::CONNECTION_STATE_CONNECTING,
            self::CONNECTION_STATE_FAILED,
            self::CONNECTION_STATE_DISCONNECTED,
            self::CONNECTION_STATE_DISCONNECTING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomKeyStoreTypeAllowableValues()
    {
        return [
            self::CUSTOM_KEY_STORE_TYPE_EXTERNAL_KEY_STORE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection_error_code'] = isset($data['connection_error_code']) ? $data['connection_error_code'] : null;
        $this->container['connection_state'] = isset($data['connection_state']) ? $data['connection_state'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['custom_key_store_name'] = isset($data['custom_key_store_name']) ? $data['custom_key_store_name'] : null;
        $this->container['custom_key_store_type'] = isset($data['custom_key_store_type']) ? $data['custom_key_store_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['trust_anchor_certificate'] = isset($data['trust_anchor_certificate']) ? $data['trust_anchor_certificate'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['xks_proxy_configuration'] = isset($data['xks_proxy_configuration']) ? $data['xks_proxy_configuration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getConnectionStateAllowableValues();
        if (!is_null($this->container['connection_state']) && !in_array($this->container['connection_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'connection_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomKeyStoreTypeAllowableValues();
        if (!is_null($this->container['custom_key_store_type']) && !in_array($this->container['custom_key_store_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'custom_key_store_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection_error_code
     *
     * @return string
     */
    public function getConnectionErrorCode()
    {
        return $this->container['connection_error_code'];
    }

    /**
     * Sets connection_error_code
     *
     * @param string $connection_error_code connection_error_code
     *
     * @return $this
     */
    public function setConnectionErrorCode($connection_error_code)
    {
        $this->container['connection_error_code'] = $connection_error_code;

        return $this;
    }

    /**
     * Gets connection_state
     *
     * @return string
     */
    public function getConnectionState()
    {
        return $this->container['connection_state'];
    }

    /**
     * Sets connection_state
     *
     * @param string $connection_state connection_state
     *
     * @return $this
     */
    public function setConnectionState($connection_state)
    {
        $allowedValues = $this->getConnectionStateAllowableValues();
        if (!is_null($connection_state) && !in_array($connection_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'connection_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connection_state'] = $connection_state;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets custom_key_store_name
     *
     * @return string
     */
    public function getCustomKeyStoreName()
    {
        return $this->container['custom_key_store_name'];
    }

    /**
     * Sets custom_key_store_name
     *
     * @param string $custom_key_store_name custom_key_store_name
     *
     * @return $this
     */
    public function setCustomKeyStoreName($custom_key_store_name)
    {
        $this->container['custom_key_store_name'] = $custom_key_store_name;

        return $this;
    }

    /**
     * Gets custom_key_store_type
     *
     * @return string
     */
    public function getCustomKeyStoreType()
    {
        return $this->container['custom_key_store_type'];
    }

    /**
     * Sets custom_key_store_type
     *
     * @param string $custom_key_store_type custom_key_store_type
     *
     * @return $this
     */
    public function setCustomKeyStoreType($custom_key_store_type)
    {
        $allowedValues = $this->getCustomKeyStoreTypeAllowableValues();
        if (!is_null($custom_key_store_type) && !in_array($custom_key_store_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'custom_key_store_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['custom_key_store_type'] = $custom_key_store_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets trust_anchor_certificate
     *
     * @return string
     */
    public function getTrustAnchorCertificate()
    {
        return $this->container['trust_anchor_certificate'];
    }

    /**
     * Sets trust_anchor_certificate
     *
     * @param string $trust_anchor_certificate trust_anchor_certificate
     *
     * @return $this
     */
    public function setTrustAnchorCertificate($trust_anchor_certificate)
    {
        $this->container['trust_anchor_certificate'] = $trust_anchor_certificate;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return int
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param int $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets xks_proxy_configuration
     *
     * @return \Volcengine\Kms\Model\XksProxyConfigurationForDescribeCustomKeyStoresOutput
     */
    public function getXksProxyConfiguration()
    {
        return $this->container['xks_proxy_configuration'];
    }

    /**
     * Sets xks_proxy_configuration
     *
     * @param \Volcengine\Kms\Model\XksProxyConfigurationForDescribeCustomKeyStoresOutput $xks_proxy_configuration xks_proxy_configuration
     *
     * @return $this
     */
    public function setXksProxyConfiguration($xks_proxy_configuration)
    {
        $this->container['xks_proxy_configuration'] = $xks_proxy_configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

