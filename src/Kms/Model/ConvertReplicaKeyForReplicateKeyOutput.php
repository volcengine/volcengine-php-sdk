<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Kms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConvertReplicaKeyForReplicateKeyOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConvertReplicaKeyForReplicateKeyOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_date' => 'int',
        'custom_key_store_id' => 'string',
        'description' => 'string',
        'id' => 'string',
        'key_material_expire_time' => 'string',
        'key_name' => 'string',
        'key_spec' => 'string',
        'key_state' => 'string',
        'key_usage' => 'string',
        'last_rotation_time' => 'string',
        'multi_region' => 'bool',
        'multi_region_configuration' => '\Volcengine\Kms\Model\MultiRegionConfigurationForReplicateKeyOutput',
        'origin' => 'string',
        'protection_level' => 'string',
        'rotation_state' => 'string',
        'schedule_delete_time' => 'string',
        'schedule_rotation_time' => 'string',
        'tags' => '\Volcengine\Kms\Model\TagForReplicateKeyOutput[]',
        'trn' => 'string',
        'update_date' => 'int',
        'xks_key_configuration' => '\Volcengine\Kms\Model\XksKeyConfigurationForReplicateKeyOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_date' => 'int64',
        'custom_key_store_id' => null,
        'description' => null,
        'id' => null,
        'key_material_expire_time' => null,
        'key_name' => null,
        'key_spec' => null,
        'key_state' => null,
        'key_usage' => null,
        'last_rotation_time' => null,
        'multi_region' => null,
        'multi_region_configuration' => null,
        'origin' => null,
        'protection_level' => null,
        'rotation_state' => null,
        'schedule_delete_time' => null,
        'schedule_rotation_time' => null,
        'tags' => null,
        'trn' => null,
        'update_date' => 'int64',
        'xks_key_configuration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_date' => 'CreationDate',
        'custom_key_store_id' => 'CustomKeyStoreID',
        'description' => 'Description',
        'id' => 'ID',
        'key_material_expire_time' => 'KeyMaterialExpireTime',
        'key_name' => 'KeyName',
        'key_spec' => 'KeySpec',
        'key_state' => 'KeyState',
        'key_usage' => 'KeyUsage',
        'last_rotation_time' => 'LastRotationTime',
        'multi_region' => 'MultiRegion',
        'multi_region_configuration' => 'MultiRegionConfiguration',
        'origin' => 'Origin',
        'protection_level' => 'ProtectionLevel',
        'rotation_state' => 'RotationState',
        'schedule_delete_time' => 'ScheduleDeleteTime',
        'schedule_rotation_time' => 'ScheduleRotationTime',
        'tags' => 'Tags',
        'trn' => 'Trn',
        'update_date' => 'UpdateDate',
        'xks_key_configuration' => 'XksKeyConfiguration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_date' => 'setCreationDate',
        'custom_key_store_id' => 'setCustomKeyStoreId',
        'description' => 'setDescription',
        'id' => 'setId',
        'key_material_expire_time' => 'setKeyMaterialExpireTime',
        'key_name' => 'setKeyName',
        'key_spec' => 'setKeySpec',
        'key_state' => 'setKeyState',
        'key_usage' => 'setKeyUsage',
        'last_rotation_time' => 'setLastRotationTime',
        'multi_region' => 'setMultiRegion',
        'multi_region_configuration' => 'setMultiRegionConfiguration',
        'origin' => 'setOrigin',
        'protection_level' => 'setProtectionLevel',
        'rotation_state' => 'setRotationState',
        'schedule_delete_time' => 'setScheduleDeleteTime',
        'schedule_rotation_time' => 'setScheduleRotationTime',
        'tags' => 'setTags',
        'trn' => 'setTrn',
        'update_date' => 'setUpdateDate',
        'xks_key_configuration' => 'setXksKeyConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_date' => 'getCreationDate',
        'custom_key_store_id' => 'getCustomKeyStoreId',
        'description' => 'getDescription',
        'id' => 'getId',
        'key_material_expire_time' => 'getKeyMaterialExpireTime',
        'key_name' => 'getKeyName',
        'key_spec' => 'getKeySpec',
        'key_state' => 'getKeyState',
        'key_usage' => 'getKeyUsage',
        'last_rotation_time' => 'getLastRotationTime',
        'multi_region' => 'getMultiRegion',
        'multi_region_configuration' => 'getMultiRegionConfiguration',
        'origin' => 'getOrigin',
        'protection_level' => 'getProtectionLevel',
        'rotation_state' => 'getRotationState',
        'schedule_delete_time' => 'getScheduleDeleteTime',
        'schedule_rotation_time' => 'getScheduleRotationTime',
        'tags' => 'getTags',
        'trn' => 'getTrn',
        'update_date' => 'getUpdateDate',
        'xks_key_configuration' => 'getXksKeyConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['custom_key_store_id'] = isset($data['custom_key_store_id']) ? $data['custom_key_store_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['key_material_expire_time'] = isset($data['key_material_expire_time']) ? $data['key_material_expire_time'] : null;
        $this->container['key_name'] = isset($data['key_name']) ? $data['key_name'] : null;
        $this->container['key_spec'] = isset($data['key_spec']) ? $data['key_spec'] : null;
        $this->container['key_state'] = isset($data['key_state']) ? $data['key_state'] : null;
        $this->container['key_usage'] = isset($data['key_usage']) ? $data['key_usage'] : null;
        $this->container['last_rotation_time'] = isset($data['last_rotation_time']) ? $data['last_rotation_time'] : null;
        $this->container['multi_region'] = isset($data['multi_region']) ? $data['multi_region'] : null;
        $this->container['multi_region_configuration'] = isset($data['multi_region_configuration']) ? $data['multi_region_configuration'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['protection_level'] = isset($data['protection_level']) ? $data['protection_level'] : null;
        $this->container['rotation_state'] = isset($data['rotation_state']) ? $data['rotation_state'] : null;
        $this->container['schedule_delete_time'] = isset($data['schedule_delete_time']) ? $data['schedule_delete_time'] : null;
        $this->container['schedule_rotation_time'] = isset($data['schedule_rotation_time']) ? $data['schedule_rotation_time'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['xks_key_configuration'] = isset($data['xks_key_configuration']) ? $data['xks_key_configuration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_date
     *
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets custom_key_store_id
     *
     * @return string
     */
    public function getCustomKeyStoreId()
    {
        return $this->container['custom_key_store_id'];
    }

    /**
     * Sets custom_key_store_id
     *
     * @param string $custom_key_store_id custom_key_store_id
     *
     * @return $this
     */
    public function setCustomKeyStoreId($custom_key_store_id)
    {
        $this->container['custom_key_store_id'] = $custom_key_store_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key_material_expire_time
     *
     * @return string
     */
    public function getKeyMaterialExpireTime()
    {
        return $this->container['key_material_expire_time'];
    }

    /**
     * Sets key_material_expire_time
     *
     * @param string $key_material_expire_time key_material_expire_time
     *
     * @return $this
     */
    public function setKeyMaterialExpireTime($key_material_expire_time)
    {
        $this->container['key_material_expire_time'] = $key_material_expire_time;

        return $this;
    }

    /**
     * Gets key_name
     *
     * @return string
     */
    public function getKeyName()
    {
        return $this->container['key_name'];
    }

    /**
     * Sets key_name
     *
     * @param string $key_name key_name
     *
     * @return $this
     */
    public function setKeyName($key_name)
    {
        $this->container['key_name'] = $key_name;

        return $this;
    }

    /**
     * Gets key_spec
     *
     * @return string
     */
    public function getKeySpec()
    {
        return $this->container['key_spec'];
    }

    /**
     * Sets key_spec
     *
     * @param string $key_spec key_spec
     *
     * @return $this
     */
    public function setKeySpec($key_spec)
    {
        $this->container['key_spec'] = $key_spec;

        return $this;
    }

    /**
     * Gets key_state
     *
     * @return string
     */
    public function getKeyState()
    {
        return $this->container['key_state'];
    }

    /**
     * Sets key_state
     *
     * @param string $key_state key_state
     *
     * @return $this
     */
    public function setKeyState($key_state)
    {
        $this->container['key_state'] = $key_state;

        return $this;
    }

    /**
     * Gets key_usage
     *
     * @return string
     */
    public function getKeyUsage()
    {
        return $this->container['key_usage'];
    }

    /**
     * Sets key_usage
     *
     * @param string $key_usage key_usage
     *
     * @return $this
     */
    public function setKeyUsage($key_usage)
    {
        $this->container['key_usage'] = $key_usage;

        return $this;
    }

    /**
     * Gets last_rotation_time
     *
     * @return string
     */
    public function getLastRotationTime()
    {
        return $this->container['last_rotation_time'];
    }

    /**
     * Sets last_rotation_time
     *
     * @param string $last_rotation_time last_rotation_time
     *
     * @return $this
     */
    public function setLastRotationTime($last_rotation_time)
    {
        $this->container['last_rotation_time'] = $last_rotation_time;

        return $this;
    }

    /**
     * Gets multi_region
     *
     * @return bool
     */
    public function getMultiRegion()
    {
        return $this->container['multi_region'];
    }

    /**
     * Sets multi_region
     *
     * @param bool $multi_region multi_region
     *
     * @return $this
     */
    public function setMultiRegion($multi_region)
    {
        $this->container['multi_region'] = $multi_region;

        return $this;
    }

    /**
     * Gets multi_region_configuration
     *
     * @return \Volcengine\Kms\Model\MultiRegionConfigurationForReplicateKeyOutput
     */
    public function getMultiRegionConfiguration()
    {
        return $this->container['multi_region_configuration'];
    }

    /**
     * Sets multi_region_configuration
     *
     * @param \Volcengine\Kms\Model\MultiRegionConfigurationForReplicateKeyOutput $multi_region_configuration multi_region_configuration
     *
     * @return $this
     */
    public function setMultiRegionConfiguration($multi_region_configuration)
    {
        $this->container['multi_region_configuration'] = $multi_region_configuration;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets protection_level
     *
     * @return string
     */
    public function getProtectionLevel()
    {
        return $this->container['protection_level'];
    }

    /**
     * Sets protection_level
     *
     * @param string $protection_level protection_level
     *
     * @return $this
     */
    public function setProtectionLevel($protection_level)
    {
        $this->container['protection_level'] = $protection_level;

        return $this;
    }

    /**
     * Gets rotation_state
     *
     * @return string
     */
    public function getRotationState()
    {
        return $this->container['rotation_state'];
    }

    /**
     * Sets rotation_state
     *
     * @param string $rotation_state rotation_state
     *
     * @return $this
     */
    public function setRotationState($rotation_state)
    {
        $this->container['rotation_state'] = $rotation_state;

        return $this;
    }

    /**
     * Gets schedule_delete_time
     *
     * @return string
     */
    public function getScheduleDeleteTime()
    {
        return $this->container['schedule_delete_time'];
    }

    /**
     * Sets schedule_delete_time
     *
     * @param string $schedule_delete_time schedule_delete_time
     *
     * @return $this
     */
    public function setScheduleDeleteTime($schedule_delete_time)
    {
        $this->container['schedule_delete_time'] = $schedule_delete_time;

        return $this;
    }

    /**
     * Gets schedule_rotation_time
     *
     * @return string
     */
    public function getScheduleRotationTime()
    {
        return $this->container['schedule_rotation_time'];
    }

    /**
     * Sets schedule_rotation_time
     *
     * @param string $schedule_rotation_time schedule_rotation_time
     *
     * @return $this
     */
    public function setScheduleRotationTime($schedule_rotation_time)
    {
        $this->container['schedule_rotation_time'] = $schedule_rotation_time;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Kms\Model\TagForReplicateKeyOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Kms\Model\TagForReplicateKeyOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn trn
     *
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return int
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param int $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets xks_key_configuration
     *
     * @return \Volcengine\Kms\Model\XksKeyConfigurationForReplicateKeyOutput
     */
    public function getXksKeyConfiguration()
    {
        return $this->container['xks_key_configuration'];
    }

    /**
     * Sets xks_key_configuration
     *
     * @param \Volcengine\Kms\Model\XksKeyConfigurationForReplicateKeyOutput $xks_key_configuration xks_key_configuration
     *
     * @return $this
     */
    public function setXksKeyConfiguration($xks_key_configuration)
    {
        $this->container['xks_key_configuration'] = $xks_key_configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

