<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Kms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateCustomKeyStoreRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateCustomKeyStoreRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_key_store_id' => 'string',
        'new_custom_key_store_name' => 'string',
        'trust_anchor_certificate' => 'string',
        'xks_access_key' => 'string',
        'xks_proxy_connectivity' => 'string',
        'xks_proxy_uri_endpoint' => 'string',
        'xks_proxy_uri_path' => 'string',
        'xks_proxy_vpc_endpoint_service_name' => 'string',
        'xks_secret_access_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_key_store_id' => null,
        'new_custom_key_store_name' => null,
        'trust_anchor_certificate' => null,
        'xks_access_key' => null,
        'xks_proxy_connectivity' => null,
        'xks_proxy_uri_endpoint' => null,
        'xks_proxy_uri_path' => null,
        'xks_proxy_vpc_endpoint_service_name' => null,
        'xks_secret_access_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_key_store_id' => 'CustomKeyStoreID',
        'new_custom_key_store_name' => 'NewCustomKeyStoreName',
        'trust_anchor_certificate' => 'TrustAnchorCertificate',
        'xks_access_key' => 'XksAccessKey',
        'xks_proxy_connectivity' => 'XksProxyConnectivity',
        'xks_proxy_uri_endpoint' => 'XksProxyUriEndpoint',
        'xks_proxy_uri_path' => 'XksProxyUriPath',
        'xks_proxy_vpc_endpoint_service_name' => 'XksProxyVpcEndpointServiceName',
        'xks_secret_access_key' => 'XksSecretAccessKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_key_store_id' => 'setCustomKeyStoreId',
        'new_custom_key_store_name' => 'setNewCustomKeyStoreName',
        'trust_anchor_certificate' => 'setTrustAnchorCertificate',
        'xks_access_key' => 'setXksAccessKey',
        'xks_proxy_connectivity' => 'setXksProxyConnectivity',
        'xks_proxy_uri_endpoint' => 'setXksProxyUriEndpoint',
        'xks_proxy_uri_path' => 'setXksProxyUriPath',
        'xks_proxy_vpc_endpoint_service_name' => 'setXksProxyVpcEndpointServiceName',
        'xks_secret_access_key' => 'setXksSecretAccessKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_key_store_id' => 'getCustomKeyStoreId',
        'new_custom_key_store_name' => 'getNewCustomKeyStoreName',
        'trust_anchor_certificate' => 'getTrustAnchorCertificate',
        'xks_access_key' => 'getXksAccessKey',
        'xks_proxy_connectivity' => 'getXksProxyConnectivity',
        'xks_proxy_uri_endpoint' => 'getXksProxyUriEndpoint',
        'xks_proxy_uri_path' => 'getXksProxyUriPath',
        'xks_proxy_vpc_endpoint_service_name' => 'getXksProxyVpcEndpointServiceName',
        'xks_secret_access_key' => 'getXksSecretAccessKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const XKS_PROXY_CONNECTIVITY_PUBLIC_ENDPOINT = 'PUBLIC_ENDPOINT';
    const XKS_PROXY_CONNECTIVITY_VPC_ENDPOINT_SERVICE = 'VPC_ENDPOINT_SERVICE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getXksProxyConnectivityAllowableValues()
    {
        return [
            self::XKS_PROXY_CONNECTIVITY_PUBLIC_ENDPOINT,
            self::XKS_PROXY_CONNECTIVITY_VPC_ENDPOINT_SERVICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_key_store_id'] = isset($data['custom_key_store_id']) ? $data['custom_key_store_id'] : null;
        $this->container['new_custom_key_store_name'] = isset($data['new_custom_key_store_name']) ? $data['new_custom_key_store_name'] : null;
        $this->container['trust_anchor_certificate'] = isset($data['trust_anchor_certificate']) ? $data['trust_anchor_certificate'] : null;
        $this->container['xks_access_key'] = isset($data['xks_access_key']) ? $data['xks_access_key'] : null;
        $this->container['xks_proxy_connectivity'] = isset($data['xks_proxy_connectivity']) ? $data['xks_proxy_connectivity'] : null;
        $this->container['xks_proxy_uri_endpoint'] = isset($data['xks_proxy_uri_endpoint']) ? $data['xks_proxy_uri_endpoint'] : null;
        $this->container['xks_proxy_uri_path'] = isset($data['xks_proxy_uri_path']) ? $data['xks_proxy_uri_path'] : null;
        $this->container['xks_proxy_vpc_endpoint_service_name'] = isset($data['xks_proxy_vpc_endpoint_service_name']) ? $data['xks_proxy_vpc_endpoint_service_name'] : null;
        $this->container['xks_secret_access_key'] = isset($data['xks_secret_access_key']) ? $data['xks_secret_access_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['custom_key_store_id'] === null) {
            $invalidProperties[] = "'custom_key_store_id' can't be null";
        }
        $allowedValues = $this->getXksProxyConnectivityAllowableValues();
        if (!is_null($this->container['xks_proxy_connectivity']) && !in_array($this->container['xks_proxy_connectivity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'xks_proxy_connectivity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_key_store_id
     *
     * @return string
     */
    public function getCustomKeyStoreId()
    {
        return $this->container['custom_key_store_id'];
    }

    /**
     * Sets custom_key_store_id
     *
     * @param string $custom_key_store_id custom_key_store_id
     *
     * @return $this
     */
    public function setCustomKeyStoreId($custom_key_store_id)
    {
        $this->container['custom_key_store_id'] = $custom_key_store_id;

        return $this;
    }

    /**
     * Gets new_custom_key_store_name
     *
     * @return string
     */
    public function getNewCustomKeyStoreName()
    {
        return $this->container['new_custom_key_store_name'];
    }

    /**
     * Sets new_custom_key_store_name
     *
     * @param string $new_custom_key_store_name new_custom_key_store_name
     *
     * @return $this
     */
    public function setNewCustomKeyStoreName($new_custom_key_store_name)
    {
        $this->container['new_custom_key_store_name'] = $new_custom_key_store_name;

        return $this;
    }

    /**
     * Gets trust_anchor_certificate
     *
     * @return string
     */
    public function getTrustAnchorCertificate()
    {
        return $this->container['trust_anchor_certificate'];
    }

    /**
     * Sets trust_anchor_certificate
     *
     * @param string $trust_anchor_certificate trust_anchor_certificate
     *
     * @return $this
     */
    public function setTrustAnchorCertificate($trust_anchor_certificate)
    {
        $this->container['trust_anchor_certificate'] = $trust_anchor_certificate;

        return $this;
    }

    /**
     * Gets xks_access_key
     *
     * @return string
     */
    public function getXksAccessKey()
    {
        return $this->container['xks_access_key'];
    }

    /**
     * Sets xks_access_key
     *
     * @param string $xks_access_key xks_access_key
     *
     * @return $this
     */
    public function setXksAccessKey($xks_access_key)
    {
        $this->container['xks_access_key'] = $xks_access_key;

        return $this;
    }

    /**
     * Gets xks_proxy_connectivity
     *
     * @return string
     */
    public function getXksProxyConnectivity()
    {
        return $this->container['xks_proxy_connectivity'];
    }

    /**
     * Sets xks_proxy_connectivity
     *
     * @param string $xks_proxy_connectivity xks_proxy_connectivity
     *
     * @return $this
     */
    public function setXksProxyConnectivity($xks_proxy_connectivity)
    {
        $allowedValues = $this->getXksProxyConnectivityAllowableValues();
        if (!is_null($xks_proxy_connectivity) && !in_array($xks_proxy_connectivity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'xks_proxy_connectivity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['xks_proxy_connectivity'] = $xks_proxy_connectivity;

        return $this;
    }

    /**
     * Gets xks_proxy_uri_endpoint
     *
     * @return string
     */
    public function getXksProxyUriEndpoint()
    {
        return $this->container['xks_proxy_uri_endpoint'];
    }

    /**
     * Sets xks_proxy_uri_endpoint
     *
     * @param string $xks_proxy_uri_endpoint xks_proxy_uri_endpoint
     *
     * @return $this
     */
    public function setXksProxyUriEndpoint($xks_proxy_uri_endpoint)
    {
        $this->container['xks_proxy_uri_endpoint'] = $xks_proxy_uri_endpoint;

        return $this;
    }

    /**
     * Gets xks_proxy_uri_path
     *
     * @return string
     */
    public function getXksProxyUriPath()
    {
        return $this->container['xks_proxy_uri_path'];
    }

    /**
     * Sets xks_proxy_uri_path
     *
     * @param string $xks_proxy_uri_path xks_proxy_uri_path
     *
     * @return $this
     */
    public function setXksProxyUriPath($xks_proxy_uri_path)
    {
        $this->container['xks_proxy_uri_path'] = $xks_proxy_uri_path;

        return $this;
    }

    /**
     * Gets xks_proxy_vpc_endpoint_service_name
     *
     * @return string
     */
    public function getXksProxyVpcEndpointServiceName()
    {
        return $this->container['xks_proxy_vpc_endpoint_service_name'];
    }

    /**
     * Sets xks_proxy_vpc_endpoint_service_name
     *
     * @param string $xks_proxy_vpc_endpoint_service_name xks_proxy_vpc_endpoint_service_name
     *
     * @return $this
     */
    public function setXksProxyVpcEndpointServiceName($xks_proxy_vpc_endpoint_service_name)
    {
        $this->container['xks_proxy_vpc_endpoint_service_name'] = $xks_proxy_vpc_endpoint_service_name;

        return $this;
    }

    /**
     * Gets xks_secret_access_key
     *
     * @return string
     */
    public function getXksSecretAccessKey()
    {
        return $this->container['xks_secret_access_key'];
    }

    /**
     * Sets xks_secret_access_key
     *
     * @param string $xks_secret_access_key xks_secret_access_key
     *
     * @return $this
     */
    public function setXksSecretAccessKey($xks_secret_access_key)
    {
        $this->container['xks_secret_access_key'] = $xks_secret_access_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

