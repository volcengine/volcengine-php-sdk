<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Kms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateKeyRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateKeyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_key_store_id' => 'string',
        'description' => 'string',
        'key_name' => 'string',
        'key_spec' => 'string',
        'key_usage' => 'string',
        'keyring_name' => 'string',
        'multi_region' => 'bool',
        'origin' => 'string',
        'protection_level' => 'string',
        'rotate_state' => 'string',
        'tags' => '\Volcengine\Kms\Model\TagForCreateKeyInput[]',
        'xks_key_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_key_store_id' => null,
        'description' => null,
        'key_name' => null,
        'key_spec' => null,
        'key_usage' => null,
        'keyring_name' => null,
        'multi_region' => null,
        'origin' => null,
        'protection_level' => null,
        'rotate_state' => null,
        'tags' => null,
        'xks_key_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_key_store_id' => 'CustomKeyStoreID',
        'description' => 'Description',
        'key_name' => 'KeyName',
        'key_spec' => 'KeySpec',
        'key_usage' => 'KeyUsage',
        'keyring_name' => 'KeyringName',
        'multi_region' => 'MultiRegion',
        'origin' => 'Origin',
        'protection_level' => 'ProtectionLevel',
        'rotate_state' => 'RotateState',
        'tags' => 'Tags',
        'xks_key_id' => 'XksKeyID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_key_store_id' => 'setCustomKeyStoreId',
        'description' => 'setDescription',
        'key_name' => 'setKeyName',
        'key_spec' => 'setKeySpec',
        'key_usage' => 'setKeyUsage',
        'keyring_name' => 'setKeyringName',
        'multi_region' => 'setMultiRegion',
        'origin' => 'setOrigin',
        'protection_level' => 'setProtectionLevel',
        'rotate_state' => 'setRotateState',
        'tags' => 'setTags',
        'xks_key_id' => 'setXksKeyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_key_store_id' => 'getCustomKeyStoreId',
        'description' => 'getDescription',
        'key_name' => 'getKeyName',
        'key_spec' => 'getKeySpec',
        'key_usage' => 'getKeyUsage',
        'keyring_name' => 'getKeyringName',
        'multi_region' => 'getMultiRegion',
        'origin' => 'getOrigin',
        'protection_level' => 'getProtectionLevel',
        'rotate_state' => 'getRotateState',
        'tags' => 'getTags',
        'xks_key_id' => 'getXksKeyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_key_store_id'] = isset($data['custom_key_store_id']) ? $data['custom_key_store_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['key_name'] = isset($data['key_name']) ? $data['key_name'] : null;
        $this->container['key_spec'] = isset($data['key_spec']) ? $data['key_spec'] : null;
        $this->container['key_usage'] = isset($data['key_usage']) ? $data['key_usage'] : null;
        $this->container['keyring_name'] = isset($data['keyring_name']) ? $data['keyring_name'] : null;
        $this->container['multi_region'] = isset($data['multi_region']) ? $data['multi_region'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['protection_level'] = isset($data['protection_level']) ? $data['protection_level'] : null;
        $this->container['rotate_state'] = isset($data['rotate_state']) ? $data['rotate_state'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['xks_key_id'] = isset($data['xks_key_id']) ? $data['xks_key_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key_name'] === null) {
            $invalidProperties[] = "'key_name' can't be null";
        }
        if ($this->container['keyring_name'] === null) {
            $invalidProperties[] = "'keyring_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_key_store_id
     *
     * @return string
     */
    public function getCustomKeyStoreId()
    {
        return $this->container['custom_key_store_id'];
    }

    /**
     * Sets custom_key_store_id
     *
     * @param string $custom_key_store_id custom_key_store_id
     *
     * @return $this
     */
    public function setCustomKeyStoreId($custom_key_store_id)
    {
        $this->container['custom_key_store_id'] = $custom_key_store_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets key_name
     *
     * @return string
     */
    public function getKeyName()
    {
        return $this->container['key_name'];
    }

    /**
     * Sets key_name
     *
     * @param string $key_name key_name
     *
     * @return $this
     */
    public function setKeyName($key_name)
    {
        $this->container['key_name'] = $key_name;

        return $this;
    }

    /**
     * Gets key_spec
     *
     * @return string
     */
    public function getKeySpec()
    {
        return $this->container['key_spec'];
    }

    /**
     * Sets key_spec
     *
     * @param string $key_spec key_spec
     *
     * @return $this
     */
    public function setKeySpec($key_spec)
    {
        $this->container['key_spec'] = $key_spec;

        return $this;
    }

    /**
     * Gets key_usage
     *
     * @return string
     */
    public function getKeyUsage()
    {
        return $this->container['key_usage'];
    }

    /**
     * Sets key_usage
     *
     * @param string $key_usage key_usage
     *
     * @return $this
     */
    public function setKeyUsage($key_usage)
    {
        $this->container['key_usage'] = $key_usage;

        return $this;
    }

    /**
     * Gets keyring_name
     *
     * @return string
     */
    public function getKeyringName()
    {
        return $this->container['keyring_name'];
    }

    /**
     * Sets keyring_name
     *
     * @param string $keyring_name keyring_name
     *
     * @return $this
     */
    public function setKeyringName($keyring_name)
    {
        $this->container['keyring_name'] = $keyring_name;

        return $this;
    }

    /**
     * Gets multi_region
     *
     * @return bool
     */
    public function getMultiRegion()
    {
        return $this->container['multi_region'];
    }

    /**
     * Sets multi_region
     *
     * @param bool $multi_region multi_region
     *
     * @return $this
     */
    public function setMultiRegion($multi_region)
    {
        $this->container['multi_region'] = $multi_region;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets protection_level
     *
     * @return string
     */
    public function getProtectionLevel()
    {
        return $this->container['protection_level'];
    }

    /**
     * Sets protection_level
     *
     * @param string $protection_level protection_level
     *
     * @return $this
     */
    public function setProtectionLevel($protection_level)
    {
        $this->container['protection_level'] = $protection_level;

        return $this;
    }

    /**
     * Gets rotate_state
     *
     * @return string
     */
    public function getRotateState()
    {
        return $this->container['rotate_state'];
    }

    /**
     * Sets rotate_state
     *
     * @param string $rotate_state rotate_state
     *
     * @return $this
     */
    public function setRotateState($rotate_state)
    {
        $this->container['rotate_state'] = $rotate_state;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Kms\Model\TagForCreateKeyInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Kms\Model\TagForCreateKeyInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets xks_key_id
     *
     * @return string
     */
    public function getXksKeyId()
    {
        return $this->container['xks_key_id'];
    }

    /**
     * Sets xks_key_id
     *
     * @param string $xks_key_id xks_key_id
     *
     * @return $this
     */
    public function setXksKeyId($xks_key_id)
    {
        $this->container['xks_key_id'] = $xks_key_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

