<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Kms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class XksProxyConfigurationForCreateCustomKeyStoreOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XksProxyConfigurationForCreateCustomKeyStoreOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_key' => 'string',
        'connectivity' => 'string',
        'uri_endpoint' => 'string',
        'uri_path' => 'string',
        'vpc_endpoint_service_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_key' => null,
        'connectivity' => null,
        'uri_endpoint' => null,
        'uri_path' => null,
        'vpc_endpoint_service_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_key' => 'AccessKey',
        'connectivity' => 'Connectivity',
        'uri_endpoint' => 'UriEndpoint',
        'uri_path' => 'UriPath',
        'vpc_endpoint_service_name' => 'VpcEndpointServiceName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_key' => 'setAccessKey',
        'connectivity' => 'setConnectivity',
        'uri_endpoint' => 'setUriEndpoint',
        'uri_path' => 'setUriPath',
        'vpc_endpoint_service_name' => 'setVpcEndpointServiceName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_key' => 'getAccessKey',
        'connectivity' => 'getConnectivity',
        'uri_endpoint' => 'getUriEndpoint',
        'uri_path' => 'getUriPath',
        'vpc_endpoint_service_name' => 'getVpcEndpointServiceName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['connectivity'] = isset($data['connectivity']) ? $data['connectivity'] : null;
        $this->container['uri_endpoint'] = isset($data['uri_endpoint']) ? $data['uri_endpoint'] : null;
        $this->container['uri_path'] = isset($data['uri_path']) ? $data['uri_path'] : null;
        $this->container['vpc_endpoint_service_name'] = isset($data['vpc_endpoint_service_name']) ? $data['vpc_endpoint_service_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_key
     *
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string $access_key access_key
     *
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets connectivity
     *
     * @return string
     */
    public function getConnectivity()
    {
        return $this->container['connectivity'];
    }

    /**
     * Sets connectivity
     *
     * @param string $connectivity connectivity
     *
     * @return $this
     */
    public function setConnectivity($connectivity)
    {
        $this->container['connectivity'] = $connectivity;

        return $this;
    }

    /**
     * Gets uri_endpoint
     *
     * @return string
     */
    public function getUriEndpoint()
    {
        return $this->container['uri_endpoint'];
    }

    /**
     * Sets uri_endpoint
     *
     * @param string $uri_endpoint uri_endpoint
     *
     * @return $this
     */
    public function setUriEndpoint($uri_endpoint)
    {
        $this->container['uri_endpoint'] = $uri_endpoint;

        return $this;
    }

    /**
     * Gets uri_path
     *
     * @return string
     */
    public function getUriPath()
    {
        return $this->container['uri_path'];
    }

    /**
     * Sets uri_path
     *
     * @param string $uri_path uri_path
     *
     * @return $this
     */
    public function setUriPath($uri_path)
    {
        $this->container['uri_path'] = $uri_path;

        return $this;
    }

    /**
     * Gets vpc_endpoint_service_name
     *
     * @return string
     */
    public function getVpcEndpointServiceName()
    {
        return $this->container['vpc_endpoint_service_name'];
    }

    /**
     * Sets vpc_endpoint_service_name
     *
     * @param string $vpc_endpoint_service_name vpc_endpoint_service_name
     *
     * @return $this
     */
    public function setVpcEndpointServiceName($vpc_endpoint_service_name)
    {
        $this->container['vpc_endpoint_service_name'] = $vpc_endpoint_service_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

