<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Metakms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SecretForDescribeSecretOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SecretForDescribeSecretOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_date' => 'int',
        'description' => 'string',
        'encryption_key' => 'string',
        'extended_config' => 'string',
        'id' => 'string',
        'last_rotation_time' => 'string',
        'managed' => 'bool',
        'project_name' => 'string',
        'rotation_interval' => 'int',
        'rotation_state' => 'string',
        'schedule_delete_time' => 'string',
        'schedule_rotation_time' => 'string',
        'secret_name' => 'string',
        'secret_state' => 'string',
        'secret_type' => 'string',
        'trn' => 'string',
        'uid' => 'string',
        'update_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_date' => 'int64',
        'description' => null,
        'encryption_key' => null,
        'extended_config' => null,
        'id' => null,
        'last_rotation_time' => null,
        'managed' => null,
        'project_name' => null,
        'rotation_interval' => 'int32',
        'rotation_state' => null,
        'schedule_delete_time' => null,
        'schedule_rotation_time' => null,
        'secret_name' => null,
        'secret_state' => null,
        'secret_type' => null,
        'trn' => null,
        'uid' => null,
        'update_date' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_date' => 'CreationDate',
        'description' => 'Description',
        'encryption_key' => 'EncryptionKey',
        'extended_config' => 'ExtendedConfig',
        'id' => 'ID',
        'last_rotation_time' => 'LastRotationTime',
        'managed' => 'Managed',
        'project_name' => 'ProjectName',
        'rotation_interval' => 'RotationInterval',
        'rotation_state' => 'RotationState',
        'schedule_delete_time' => 'ScheduleDeleteTime',
        'schedule_rotation_time' => 'ScheduleRotationTime',
        'secret_name' => 'SecretName',
        'secret_state' => 'SecretState',
        'secret_type' => 'SecretType',
        'trn' => 'Trn',
        'uid' => 'UID',
        'update_date' => 'UpdateDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_date' => 'setCreationDate',
        'description' => 'setDescription',
        'encryption_key' => 'setEncryptionKey',
        'extended_config' => 'setExtendedConfig',
        'id' => 'setId',
        'last_rotation_time' => 'setLastRotationTime',
        'managed' => 'setManaged',
        'project_name' => 'setProjectName',
        'rotation_interval' => 'setRotationInterval',
        'rotation_state' => 'setRotationState',
        'schedule_delete_time' => 'setScheduleDeleteTime',
        'schedule_rotation_time' => 'setScheduleRotationTime',
        'secret_name' => 'setSecretName',
        'secret_state' => 'setSecretState',
        'secret_type' => 'setSecretType',
        'trn' => 'setTrn',
        'uid' => 'setUid',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_date' => 'getCreationDate',
        'description' => 'getDescription',
        'encryption_key' => 'getEncryptionKey',
        'extended_config' => 'getExtendedConfig',
        'id' => 'getId',
        'last_rotation_time' => 'getLastRotationTime',
        'managed' => 'getManaged',
        'project_name' => 'getProjectName',
        'rotation_interval' => 'getRotationInterval',
        'rotation_state' => 'getRotationState',
        'schedule_delete_time' => 'getScheduleDeleteTime',
        'schedule_rotation_time' => 'getScheduleRotationTime',
        'secret_name' => 'getSecretName',
        'secret_state' => 'getSecretState',
        'secret_type' => 'getSecretType',
        'trn' => 'getTrn',
        'uid' => 'getUid',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SECRET_STATE_ENABLE = 'Enable';
    const SECRET_STATE_DISABLE = 'Disable';
    const SECRET_STATE_PENDING_DELETE = 'PendingDelete';
    const SECRET_TYPE_GENERIC = 'Generic';
    const SECRET_TYPE_IAM = 'IAM';
    const SECRET_TYPE_RDS = 'RDS';
    const SECRET_TYPE_REDIS = 'Redis';
    const SECRET_TYPE_ECS = 'ECS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecretStateAllowableValues()
    {
        return [
            self::SECRET_STATE_ENABLE,
            self::SECRET_STATE_DISABLE,
            self::SECRET_STATE_PENDING_DELETE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecretTypeAllowableValues()
    {
        return [
            self::SECRET_TYPE_GENERIC,
            self::SECRET_TYPE_IAM,
            self::SECRET_TYPE_RDS,
            self::SECRET_TYPE_REDIS,
            self::SECRET_TYPE_ECS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['encryption_key'] = isset($data['encryption_key']) ? $data['encryption_key'] : null;
        $this->container['extended_config'] = isset($data['extended_config']) ? $data['extended_config'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_rotation_time'] = isset($data['last_rotation_time']) ? $data['last_rotation_time'] : null;
        $this->container['managed'] = isset($data['managed']) ? $data['managed'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['rotation_interval'] = isset($data['rotation_interval']) ? $data['rotation_interval'] : null;
        $this->container['rotation_state'] = isset($data['rotation_state']) ? $data['rotation_state'] : null;
        $this->container['schedule_delete_time'] = isset($data['schedule_delete_time']) ? $data['schedule_delete_time'] : null;
        $this->container['schedule_rotation_time'] = isset($data['schedule_rotation_time']) ? $data['schedule_rotation_time'] : null;
        $this->container['secret_name'] = isset($data['secret_name']) ? $data['secret_name'] : null;
        $this->container['secret_state'] = isset($data['secret_state']) ? $data['secret_state'] : null;
        $this->container['secret_type'] = isset($data['secret_type']) ? $data['secret_type'] : null;
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSecretStateAllowableValues();
        if (!is_null($this->container['secret_state']) && !in_array($this->container['secret_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secret_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecretTypeAllowableValues();
        if (!is_null($this->container['secret_type']) && !in_array($this->container['secret_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secret_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_date
     *
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets encryption_key
     *
     * @return string
     */
    public function getEncryptionKey()
    {
        return $this->container['encryption_key'];
    }

    /**
     * Sets encryption_key
     *
     * @param string $encryption_key encryption_key
     *
     * @return $this
     */
    public function setEncryptionKey($encryption_key)
    {
        $this->container['encryption_key'] = $encryption_key;

        return $this;
    }

    /**
     * Gets extended_config
     *
     * @return string
     */
    public function getExtendedConfig()
    {
        return $this->container['extended_config'];
    }

    /**
     * Sets extended_config
     *
     * @param string $extended_config extended_config
     *
     * @return $this
     */
    public function setExtendedConfig($extended_config)
    {
        $this->container['extended_config'] = $extended_config;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_rotation_time
     *
     * @return string
     */
    public function getLastRotationTime()
    {
        return $this->container['last_rotation_time'];
    }

    /**
     * Sets last_rotation_time
     *
     * @param string $last_rotation_time last_rotation_time
     *
     * @return $this
     */
    public function setLastRotationTime($last_rotation_time)
    {
        $this->container['last_rotation_time'] = $last_rotation_time;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return bool
     */
    public function getManaged()
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param bool $managed managed
     *
     * @return $this
     */
    public function setManaged($managed)
    {
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets rotation_interval
     *
     * @return int
     */
    public function getRotationInterval()
    {
        return $this->container['rotation_interval'];
    }

    /**
     * Sets rotation_interval
     *
     * @param int $rotation_interval rotation_interval
     *
     * @return $this
     */
    public function setRotationInterval($rotation_interval)
    {
        $this->container['rotation_interval'] = $rotation_interval;

        return $this;
    }

    /**
     * Gets rotation_state
     *
     * @return string
     */
    public function getRotationState()
    {
        return $this->container['rotation_state'];
    }

    /**
     * Sets rotation_state
     *
     * @param string $rotation_state rotation_state
     *
     * @return $this
     */
    public function setRotationState($rotation_state)
    {
        $this->container['rotation_state'] = $rotation_state;

        return $this;
    }

    /**
     * Gets schedule_delete_time
     *
     * @return string
     */
    public function getScheduleDeleteTime()
    {
        return $this->container['schedule_delete_time'];
    }

    /**
     * Sets schedule_delete_time
     *
     * @param string $schedule_delete_time schedule_delete_time
     *
     * @return $this
     */
    public function setScheduleDeleteTime($schedule_delete_time)
    {
        $this->container['schedule_delete_time'] = $schedule_delete_time;

        return $this;
    }

    /**
     * Gets schedule_rotation_time
     *
     * @return string
     */
    public function getScheduleRotationTime()
    {
        return $this->container['schedule_rotation_time'];
    }

    /**
     * Sets schedule_rotation_time
     *
     * @param string $schedule_rotation_time schedule_rotation_time
     *
     * @return $this
     */
    public function setScheduleRotationTime($schedule_rotation_time)
    {
        $this->container['schedule_rotation_time'] = $schedule_rotation_time;

        return $this;
    }

    /**
     * Gets secret_name
     *
     * @return string
     */
    public function getSecretName()
    {
        return $this->container['secret_name'];
    }

    /**
     * Sets secret_name
     *
     * @param string $secret_name secret_name
     *
     * @return $this
     */
    public function setSecretName($secret_name)
    {
        $this->container['secret_name'] = $secret_name;

        return $this;
    }

    /**
     * Gets secret_state
     *
     * @return string
     */
    public function getSecretState()
    {
        return $this->container['secret_state'];
    }

    /**
     * Sets secret_state
     *
     * @param string $secret_state secret_state
     *
     * @return $this
     */
    public function setSecretState($secret_state)
    {
        $allowedValues = $this->getSecretStateAllowableValues();
        if (!is_null($secret_state) && !in_array($secret_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secret_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secret_state'] = $secret_state;

        return $this;
    }

    /**
     * Gets secret_type
     *
     * @return string
     */
    public function getSecretType()
    {
        return $this->container['secret_type'];
    }

    /**
     * Sets secret_type
     *
     * @param string $secret_type secret_type
     *
     * @return $this
     */
    public function setSecretType($secret_type)
    {
        $allowedValues = $this->getSecretTypeAllowableValues();
        if (!is_null($secret_type) && !in_array($secret_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secret_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secret_type'] = $secret_type;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn trn
     *
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return int
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param int $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

