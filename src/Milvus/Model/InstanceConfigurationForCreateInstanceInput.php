<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Milvus\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceConfigurationForCreateInstanceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceConfigurationForCreateInstanceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'admin_password' => 'string',
        'component_spec_list' => '\Volcengine\Milvus\Model\ComponentSpecListForCreateInstanceInput[]',
        'ha_enabled' => 'bool',
        'instance_name' => 'string',
        'instance_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'admin_password' => null,
        'component_spec_list' => null,
        'ha_enabled' => null,
        'instance_name' => null,
        'instance_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_password' => 'AdminPassword',
        'component_spec_list' => 'ComponentSpecList',
        'ha_enabled' => 'HaEnabled',
        'instance_name' => 'InstanceName',
        'instance_version' => 'InstanceVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_password' => 'setAdminPassword',
        'component_spec_list' => 'setComponentSpecList',
        'ha_enabled' => 'setHaEnabled',
        'instance_name' => 'setInstanceName',
        'instance_version' => 'setInstanceVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_password' => 'getAdminPassword',
        'component_spec_list' => 'getComponentSpecList',
        'ha_enabled' => 'getHaEnabled',
        'instance_name' => 'getInstanceName',
        'instance_version' => 'getInstanceVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admin_password'] = isset($data['admin_password']) ? $data['admin_password'] : null;
        $this->container['component_spec_list'] = isset($data['component_spec_list']) ? $data['component_spec_list'] : null;
        $this->container['ha_enabled'] = isset($data['ha_enabled']) ? $data['ha_enabled'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_version'] = isset($data['instance_version']) ? $data['instance_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_password
     *
     * @return string
     */
    public function getAdminPassword()
    {
        return $this->container['admin_password'];
    }

    /**
     * Sets admin_password
     *
     * @param string $admin_password admin_password
     *
     * @return $this
     */
    public function setAdminPassword($admin_password)
    {
        $this->container['admin_password'] = $admin_password;

        return $this;
    }

    /**
     * Gets component_spec_list
     *
     * @return \Volcengine\Milvus\Model\ComponentSpecListForCreateInstanceInput[]
     */
    public function getComponentSpecList()
    {
        return $this->container['component_spec_list'];
    }

    /**
     * Sets component_spec_list
     *
     * @param \Volcengine\Milvus\Model\ComponentSpecListForCreateInstanceInput[] $component_spec_list component_spec_list
     *
     * @return $this
     */
    public function setComponentSpecList($component_spec_list)
    {
        $this->container['component_spec_list'] = $component_spec_list;

        return $this;
    }

    /**
     * Gets ha_enabled
     *
     * @return bool
     */
    public function getHaEnabled()
    {
        return $this->container['ha_enabled'];
    }

    /**
     * Sets ha_enabled
     *
     * @param bool $ha_enabled ha_enabled
     *
     * @return $this
     */
    public function setHaEnabled($ha_enabled)
    {
        $this->container['ha_enabled'] = $ha_enabled;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_version
     *
     * @return string
     */
    public function getInstanceVersion()
    {
        return $this->container['instance_version'];
    }

    /**
     * Sets instance_version
     *
     * @param string $instance_version instance_version
     *
     * @return $this
     */
    public function setInstanceVersion($instance_version)
    {
        $this->container['instance_version'] = $instance_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

