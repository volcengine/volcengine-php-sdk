<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Milvus\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodePriceListForDescribePriceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodePriceListForDescribePriceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_item_code' => 'string',
        'charge_item_num' => 'float',
        'discount_amount' => 'float',
        'node_cu_type' => 'string',
        'node_num' => 'float',
        'node_type' => 'string',
        'original_amount' => 'float',
        'payable_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_item_code' => null,
        'charge_item_num' => 'float',
        'discount_amount' => 'float',
        'node_cu_type' => null,
        'node_num' => 'float',
        'node_type' => null,
        'original_amount' => 'float',
        'payable_amount' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_item_code' => 'ChargeItemCode',
        'charge_item_num' => 'ChargeItemNum',
        'discount_amount' => 'DiscountAmount',
        'node_cu_type' => 'NodeCUType',
        'node_num' => 'NodeNum',
        'node_type' => 'NodeType',
        'original_amount' => 'OriginalAmount',
        'payable_amount' => 'PayableAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_item_code' => 'setChargeItemCode',
        'charge_item_num' => 'setChargeItemNum',
        'discount_amount' => 'setDiscountAmount',
        'node_cu_type' => 'setNodeCuType',
        'node_num' => 'setNodeNum',
        'node_type' => 'setNodeType',
        'original_amount' => 'setOriginalAmount',
        'payable_amount' => 'setPayableAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_item_code' => 'getChargeItemCode',
        'charge_item_num' => 'getChargeItemNum',
        'discount_amount' => 'getDiscountAmount',
        'node_cu_type' => 'getNodeCuType',
        'node_num' => 'getNodeNum',
        'node_type' => 'getNodeType',
        'original_amount' => 'getOriginalAmount',
        'payable_amount' => 'getPayableAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_item_code'] = isset($data['charge_item_code']) ? $data['charge_item_code'] : null;
        $this->container['charge_item_num'] = isset($data['charge_item_num']) ? $data['charge_item_num'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['node_cu_type'] = isset($data['node_cu_type']) ? $data['node_cu_type'] : null;
        $this->container['node_num'] = isset($data['node_num']) ? $data['node_num'] : null;
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['original_amount'] = isset($data['original_amount']) ? $data['original_amount'] : null;
        $this->container['payable_amount'] = isset($data['payable_amount']) ? $data['payable_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_item_code
     *
     * @return string
     */
    public function getChargeItemCode()
    {
        return $this->container['charge_item_code'];
    }

    /**
     * Sets charge_item_code
     *
     * @param string $charge_item_code charge_item_code
     *
     * @return $this
     */
    public function setChargeItemCode($charge_item_code)
    {
        $this->container['charge_item_code'] = $charge_item_code;

        return $this;
    }

    /**
     * Gets charge_item_num
     *
     * @return float
     */
    public function getChargeItemNum()
    {
        return $this->container['charge_item_num'];
    }

    /**
     * Sets charge_item_num
     *
     * @param float $charge_item_num charge_item_num
     *
     * @return $this
     */
    public function setChargeItemNum($charge_item_num)
    {
        $this->container['charge_item_num'] = $charge_item_num;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param float $discount_amount discount_amount
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets node_cu_type
     *
     * @return string
     */
    public function getNodeCuType()
    {
        return $this->container['node_cu_type'];
    }

    /**
     * Sets node_cu_type
     *
     * @param string $node_cu_type node_cu_type
     *
     * @return $this
     */
    public function setNodeCuType($node_cu_type)
    {
        $this->container['node_cu_type'] = $node_cu_type;

        return $this;
    }

    /**
     * Gets node_num
     *
     * @return float
     */
    public function getNodeNum()
    {
        return $this->container['node_num'];
    }

    /**
     * Sets node_num
     *
     * @param float $node_num node_num
     *
     * @return $this
     */
    public function setNodeNum($node_num)
    {
        $this->container['node_num'] = $node_num;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return float
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param float $original_amount original_amount
     *
     * @return $this
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets payable_amount
     *
     * @return float
     */
    public function getPayableAmount()
    {
        return $this->container['payable_amount'];
    }

    /**
     * Sets payable_amount
     *
     * @param float $payable_amount payable_amount
     *
     * @return $this
     */
    public function setPayableAmount($payable_amount)
    {
        $this->container['payable_amount'] = $payable_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

