<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Milvus\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceInfoForDescribeInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceInfoForDescribeInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_config' => '\Volcengine\Milvus\Model\ChargeConfigForDescribeInstancesOutput',
        'create_time' => 'string',
        'delete_protect_enabled' => 'bool',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'instance_version' => 'string',
        'network_config' => '\Volcengine\Milvus\Model\NetworkConfigForDescribeInstancesOutput',
        'project_name' => 'string',
        'region' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Milvus\Model\TagForDescribeInstancesOutput[]',
        'zones' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_config' => null,
        'create_time' => null,
        'delete_protect_enabled' => null,
        'instance_id' => null,
        'instance_name' => null,
        'instance_version' => null,
        'network_config' => null,
        'project_name' => null,
        'region' => null,
        'status' => null,
        'tags' => null,
        'zones' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_config' => 'ChargeConfig',
        'create_time' => 'CreateTime',
        'delete_protect_enabled' => 'DeleteProtectEnabled',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'instance_version' => 'InstanceVersion',
        'network_config' => 'NetworkConfig',
        'project_name' => 'ProjectName',
        'region' => 'Region',
        'status' => 'Status',
        'tags' => 'Tags',
        'zones' => 'Zones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_config' => 'setChargeConfig',
        'create_time' => 'setCreateTime',
        'delete_protect_enabled' => 'setDeleteProtectEnabled',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'instance_version' => 'setInstanceVersion',
        'network_config' => 'setNetworkConfig',
        'project_name' => 'setProjectName',
        'region' => 'setRegion',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'zones' => 'setZones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_config' => 'getChargeConfig',
        'create_time' => 'getCreateTime',
        'delete_protect_enabled' => 'getDeleteProtectEnabled',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'instance_version' => 'getInstanceVersion',
        'network_config' => 'getNetworkConfig',
        'project_name' => 'getProjectName',
        'region' => 'getRegion',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'zones' => 'getZones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_config'] = isset($data['charge_config']) ? $data['charge_config'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['delete_protect_enabled'] = isset($data['delete_protect_enabled']) ? $data['delete_protect_enabled'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_version'] = isset($data['instance_version']) ? $data['instance_version'] : null;
        $this->container['network_config'] = isset($data['network_config']) ? $data['network_config'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_config
     *
     * @return \Volcengine\Milvus\Model\ChargeConfigForDescribeInstancesOutput
     */
    public function getChargeConfig()
    {
        return $this->container['charge_config'];
    }

    /**
     * Sets charge_config
     *
     * @param \Volcengine\Milvus\Model\ChargeConfigForDescribeInstancesOutput $charge_config charge_config
     *
     * @return $this
     */
    public function setChargeConfig($charge_config)
    {
        $this->container['charge_config'] = $charge_config;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets delete_protect_enabled
     *
     * @return bool
     */
    public function getDeleteProtectEnabled()
    {
        return $this->container['delete_protect_enabled'];
    }

    /**
     * Sets delete_protect_enabled
     *
     * @param bool $delete_protect_enabled delete_protect_enabled
     *
     * @return $this
     */
    public function setDeleteProtectEnabled($delete_protect_enabled)
    {
        $this->container['delete_protect_enabled'] = $delete_protect_enabled;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_version
     *
     * @return string
     */
    public function getInstanceVersion()
    {
        return $this->container['instance_version'];
    }

    /**
     * Sets instance_version
     *
     * @param string $instance_version instance_version
     *
     * @return $this
     */
    public function setInstanceVersion($instance_version)
    {
        $this->container['instance_version'] = $instance_version;

        return $this;
    }

    /**
     * Gets network_config
     *
     * @return \Volcengine\Milvus\Model\NetworkConfigForDescribeInstancesOutput
     */
    public function getNetworkConfig()
    {
        return $this->container['network_config'];
    }

    /**
     * Sets network_config
     *
     * @param \Volcengine\Milvus\Model\NetworkConfigForDescribeInstancesOutput $network_config network_config
     *
     * @return $this
     */
    public function setNetworkConfig($network_config)
    {
        $this->container['network_config'] = $network_config;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Milvus\Model\TagForDescribeInstancesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Milvus\Model\TagForDescribeInstancesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return string[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param string[] $zones zones
     *
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

