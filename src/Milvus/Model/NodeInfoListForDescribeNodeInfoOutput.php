<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Milvus\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeInfoListForDescribeNodeInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeInfoListForDescribeNodeInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'display_name' => 'string',
        'node_name' => 'string',
        'node_type' => 'string',
        'status' => 'string',
        'total_cpu' => 'string',
        'total_mem_in_bytes' => 'string',
        'update_time' => 'string',
        'used_cpu' => 'string',
        'used_mem_in_bytes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'display_name' => null,
        'node_name' => null,
        'node_type' => null,
        'status' => null,
        'total_cpu' => null,
        'total_mem_in_bytes' => null,
        'update_time' => null,
        'used_cpu' => null,
        'used_mem_in_bytes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'CreateTime',
        'display_name' => 'DisplayName',
        'node_name' => 'NodeName',
        'node_type' => 'NodeType',
        'status' => 'Status',
        'total_cpu' => 'TotalCpu',
        'total_mem_in_bytes' => 'TotalMemInBytes',
        'update_time' => 'UpdateTime',
        'used_cpu' => 'UsedCpu',
        'used_mem_in_bytes' => 'UsedMemInBytes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'display_name' => 'setDisplayName',
        'node_name' => 'setNodeName',
        'node_type' => 'setNodeType',
        'status' => 'setStatus',
        'total_cpu' => 'setTotalCpu',
        'total_mem_in_bytes' => 'setTotalMemInBytes',
        'update_time' => 'setUpdateTime',
        'used_cpu' => 'setUsedCpu',
        'used_mem_in_bytes' => 'setUsedMemInBytes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'display_name' => 'getDisplayName',
        'node_name' => 'getNodeName',
        'node_type' => 'getNodeType',
        'status' => 'getStatus',
        'total_cpu' => 'getTotalCpu',
        'total_mem_in_bytes' => 'getTotalMemInBytes',
        'update_time' => 'getUpdateTime',
        'used_cpu' => 'getUsedCpu',
        'used_mem_in_bytes' => 'getUsedMemInBytes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['total_cpu'] = isset($data['total_cpu']) ? $data['total_cpu'] : null;
        $this->container['total_mem_in_bytes'] = isset($data['total_mem_in_bytes']) ? $data['total_mem_in_bytes'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['used_cpu'] = isset($data['used_cpu']) ? $data['used_cpu'] : null;
        $this->container['used_mem_in_bytes'] = isset($data['used_mem_in_bytes']) ? $data['used_mem_in_bytes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name node_name
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets total_cpu
     *
     * @return string
     */
    public function getTotalCpu()
    {
        return $this->container['total_cpu'];
    }

    /**
     * Sets total_cpu
     *
     * @param string $total_cpu total_cpu
     *
     * @return $this
     */
    public function setTotalCpu($total_cpu)
    {
        $this->container['total_cpu'] = $total_cpu;

        return $this;
    }

    /**
     * Gets total_mem_in_bytes
     *
     * @return string
     */
    public function getTotalMemInBytes()
    {
        return $this->container['total_mem_in_bytes'];
    }

    /**
     * Sets total_mem_in_bytes
     *
     * @param string $total_mem_in_bytes total_mem_in_bytes
     *
     * @return $this
     */
    public function setTotalMemInBytes($total_mem_in_bytes)
    {
        $this->container['total_mem_in_bytes'] = $total_mem_in_bytes;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets used_cpu
     *
     * @return string
     */
    public function getUsedCpu()
    {
        return $this->container['used_cpu'];
    }

    /**
     * Sets used_cpu
     *
     * @param string $used_cpu used_cpu
     *
     * @return $this
     */
    public function setUsedCpu($used_cpu)
    {
        $this->container['used_cpu'] = $used_cpu;

        return $this;
    }

    /**
     * Gets used_mem_in_bytes
     *
     * @return string
     */
    public function getUsedMemInBytes()
    {
        return $this->container['used_mem_in_bytes'];
    }

    /**
     * Sets used_mem_in_bytes
     *
     * @param string $used_mem_in_bytes used_mem_in_bytes
     *
     * @return $this
     */
    public function setUsedMemInBytes($used_mem_in_bytes)
    {
        $this->container['used_mem_in_bytes'] = $used_mem_in_bytes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

