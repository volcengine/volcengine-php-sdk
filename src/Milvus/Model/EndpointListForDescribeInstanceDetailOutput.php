<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Milvus\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class EndpointListForDescribeInstanceDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EndpointListForDescribeInstanceDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_group_list' => '\Volcengine\Milvus\Model\AllowGroupListForDescribeInstanceDetailOutput[]',
        'allow_list' => 'string[]',
        'domain' => 'string',
        'eip' => 'string',
        'eip_id' => 'string',
        'ip' => 'string',
        'private_domain_publish_enabled' => 'bool',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_group_list' => null,
        'allow_list' => null,
        'domain' => null,
        'eip' => null,
        'eip_id' => null,
        'ip' => null,
        'private_domain_publish_enabled' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_group_list' => 'AllowGroupList',
        'allow_list' => 'AllowList',
        'domain' => 'Domain',
        'eip' => 'Eip',
        'eip_id' => 'EipId',
        'ip' => 'Ip',
        'private_domain_publish_enabled' => 'PrivateDomainPublishEnabled',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_group_list' => 'setAllowGroupList',
        'allow_list' => 'setAllowList',
        'domain' => 'setDomain',
        'eip' => 'setEip',
        'eip_id' => 'setEipId',
        'ip' => 'setIp',
        'private_domain_publish_enabled' => 'setPrivateDomainPublishEnabled',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_group_list' => 'getAllowGroupList',
        'allow_list' => 'getAllowList',
        'domain' => 'getDomain',
        'eip' => 'getEip',
        'eip_id' => 'getEipId',
        'ip' => 'getIp',
        'private_domain_publish_enabled' => 'getPrivateDomainPublishEnabled',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_group_list'] = isset($data['allow_group_list']) ? $data['allow_group_list'] : null;
        $this->container['allow_list'] = isset($data['allow_list']) ? $data['allow_list'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['eip'] = isset($data['eip']) ? $data['eip'] : null;
        $this->container['eip_id'] = isset($data['eip_id']) ? $data['eip_id'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['private_domain_publish_enabled'] = isset($data['private_domain_publish_enabled']) ? $data['private_domain_publish_enabled'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_group_list
     *
     * @return \Volcengine\Milvus\Model\AllowGroupListForDescribeInstanceDetailOutput[]
     */
    public function getAllowGroupList()
    {
        return $this->container['allow_group_list'];
    }

    /**
     * Sets allow_group_list
     *
     * @param \Volcengine\Milvus\Model\AllowGroupListForDescribeInstanceDetailOutput[] $allow_group_list allow_group_list
     *
     * @return $this
     */
    public function setAllowGroupList($allow_group_list)
    {
        $this->container['allow_group_list'] = $allow_group_list;

        return $this;
    }

    /**
     * Gets allow_list
     *
     * @return string[]
     */
    public function getAllowList()
    {
        return $this->container['allow_list'];
    }

    /**
     * Sets allow_list
     *
     * @param string[] $allow_list allow_list
     *
     * @return $this
     */
    public function setAllowList($allow_list)
    {
        $this->container['allow_list'] = $allow_list;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets eip
     *
     * @return string
     */
    public function getEip()
    {
        return $this->container['eip'];
    }

    /**
     * Sets eip
     *
     * @param string $eip eip
     *
     * @return $this
     */
    public function setEip($eip)
    {
        $this->container['eip'] = $eip;

        return $this;
    }

    /**
     * Gets eip_id
     *
     * @return string
     */
    public function getEipId()
    {
        return $this->container['eip_id'];
    }

    /**
     * Sets eip_id
     *
     * @param string $eip_id eip_id
     *
     * @return $this
     */
    public function setEipId($eip_id)
    {
        $this->container['eip_id'] = $eip_id;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets private_domain_publish_enabled
     *
     * @return bool
     */
    public function getPrivateDomainPublishEnabled()
    {
        return $this->container['private_domain_publish_enabled'];
    }

    /**
     * Sets private_domain_publish_enabled
     *
     * @param bool $private_domain_publish_enabled private_domain_publish_enabled
     *
     * @return $this
     */
    public function setPrivateDomainPublishEnabled($private_domain_publish_enabled)
    {
        $this->container['private_domain_publish_enabled'] = $private_domain_publish_enabled;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

