<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Milvus\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConfigurationForDescribeInstanceConfigOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigurationForDescribeInstanceConfigOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'config_key' => 'string',
        'cur_value' => 'string',
        'default_value' => 'string',
        'description' => 'string',
        'hot_update_enabled' => 'bool',
        'module' => 'string',
        'unit' => 'string',
        'value_range' => 'string',
        'value_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'config_key' => null,
        'cur_value' => null,
        'default_value' => null,
        'description' => null,
        'hot_update_enabled' => null,
        'module' => null,
        'unit' => null,
        'value_range' => null,
        'value_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'config_key' => 'ConfigKey',
        'cur_value' => 'CurValue',
        'default_value' => 'DefaultValue',
        'description' => 'Description',
        'hot_update_enabled' => 'HotUpdateEnabled',
        'module' => 'Module',
        'unit' => 'Unit',
        'value_range' => 'ValueRange',
        'value_type' => 'ValueType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'config_key' => 'setConfigKey',
        'cur_value' => 'setCurValue',
        'default_value' => 'setDefaultValue',
        'description' => 'setDescription',
        'hot_update_enabled' => 'setHotUpdateEnabled',
        'module' => 'setModule',
        'unit' => 'setUnit',
        'value_range' => 'setValueRange',
        'value_type' => 'setValueType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'config_key' => 'getConfigKey',
        'cur_value' => 'getCurValue',
        'default_value' => 'getDefaultValue',
        'description' => 'getDescription',
        'hot_update_enabled' => 'getHotUpdateEnabled',
        'module' => 'getModule',
        'unit' => 'getUnit',
        'value_range' => 'getValueRange',
        'value_type' => 'getValueType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config_key'] = isset($data['config_key']) ? $data['config_key'] : null;
        $this->container['cur_value'] = isset($data['cur_value']) ? $data['cur_value'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hot_update_enabled'] = isset($data['hot_update_enabled']) ? $data['hot_update_enabled'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['value_range'] = isset($data['value_range']) ? $data['value_range'] : null;
        $this->container['value_type'] = isset($data['value_type']) ? $data['value_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config_key
     *
     * @return string
     */
    public function getConfigKey()
    {
        return $this->container['config_key'];
    }

    /**
     * Sets config_key
     *
     * @param string $config_key config_key
     *
     * @return $this
     */
    public function setConfigKey($config_key)
    {
        $this->container['config_key'] = $config_key;

        return $this;
    }

    /**
     * Gets cur_value
     *
     * @return string
     */
    public function getCurValue()
    {
        return $this->container['cur_value'];
    }

    /**
     * Sets cur_value
     *
     * @param string $cur_value cur_value
     *
     * @return $this
     */
    public function setCurValue($cur_value)
    {
        $this->container['cur_value'] = $cur_value;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hot_update_enabled
     *
     * @return bool
     */
    public function getHotUpdateEnabled()
    {
        return $this->container['hot_update_enabled'];
    }

    /**
     * Sets hot_update_enabled
     *
     * @param bool $hot_update_enabled hot_update_enabled
     *
     * @return $this
     */
    public function setHotUpdateEnabled($hot_update_enabled)
    {
        $this->container['hot_update_enabled'] = $hot_update_enabled;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string $module module
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets value_range
     *
     * @return string
     */
    public function getValueRange()
    {
        return $this->container['value_range'];
    }

    /**
     * Sets value_range
     *
     * @param string $value_range value_range
     *
     * @return $this
     */
    public function setValueRange($value_range)
    {
        $this->container['value_range'] = $value_range;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string $value_type value_type
     *
     * @return $this
     */
    public function setValueType($value_type)
    {
        $this->container['value_type'] = $value_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

