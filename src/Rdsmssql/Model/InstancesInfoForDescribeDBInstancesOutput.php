<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstancesInfoForDescribeDBInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstancesInfoForDescribeDBInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_detail' => '\Volcengine\Rdsmssql\Model\ChargeDetailForDescribeDBInstancesOutput',
        'create_time' => 'string',
        'db_engine_version' => 'string',
        'instance_category' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'instance_status' => 'string',
        'instance_type' => 'string',
        'maintenance_time' => 'string',
        'node_detail_info' => '\Volcengine\Rdsmssql\Model\NodeDetailInfoForDescribeDBInstancesOutput[]',
        'node_spec' => 'string',
        'port' => 'string',
        'primary_instance_id' => 'string',
        'project_name' => 'string',
        'read_only_number' => 'int',
        'region_id' => 'string',
        'server_collation' => 'string',
        'storage_space' => 'int',
        'storage_type' => 'string',
        'subnet_id' => 'string',
        'tags' => '\Volcengine\Rdsmssql\Model\TagForDescribeDBInstancesOutput[]',
        'time_zone' => 'string',
        'vpc_id' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_detail' => null,
        'create_time' => null,
        'db_engine_version' => null,
        'instance_category' => null,
        'instance_id' => null,
        'instance_name' => null,
        'instance_status' => null,
        'instance_type' => null,
        'maintenance_time' => null,
        'node_detail_info' => null,
        'node_spec' => null,
        'port' => null,
        'primary_instance_id' => null,
        'project_name' => null,
        'read_only_number' => 'int32',
        'region_id' => null,
        'server_collation' => null,
        'storage_space' => 'int32',
        'storage_type' => null,
        'subnet_id' => null,
        'tags' => null,
        'time_zone' => null,
        'vpc_id' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_detail' => 'ChargeDetail',
        'create_time' => 'CreateTime',
        'db_engine_version' => 'DBEngineVersion',
        'instance_category' => 'InstanceCategory',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'instance_status' => 'InstanceStatus',
        'instance_type' => 'InstanceType',
        'maintenance_time' => 'MaintenanceTime',
        'node_detail_info' => 'NodeDetailInfo',
        'node_spec' => 'NodeSpec',
        'port' => 'Port',
        'primary_instance_id' => 'PrimaryInstanceId',
        'project_name' => 'ProjectName',
        'read_only_number' => 'ReadOnlyNumber',
        'region_id' => 'RegionId',
        'server_collation' => 'ServerCollation',
        'storage_space' => 'StorageSpace',
        'storage_type' => 'StorageType',
        'subnet_id' => 'SubnetId',
        'tags' => 'Tags',
        'time_zone' => 'TimeZone',
        'vpc_id' => 'VpcId',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_detail' => 'setChargeDetail',
        'create_time' => 'setCreateTime',
        'db_engine_version' => 'setDbEngineVersion',
        'instance_category' => 'setInstanceCategory',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'instance_status' => 'setInstanceStatus',
        'instance_type' => 'setInstanceType',
        'maintenance_time' => 'setMaintenanceTime',
        'node_detail_info' => 'setNodeDetailInfo',
        'node_spec' => 'setNodeSpec',
        'port' => 'setPort',
        'primary_instance_id' => 'setPrimaryInstanceId',
        'project_name' => 'setProjectName',
        'read_only_number' => 'setReadOnlyNumber',
        'region_id' => 'setRegionId',
        'server_collation' => 'setServerCollation',
        'storage_space' => 'setStorageSpace',
        'storage_type' => 'setStorageType',
        'subnet_id' => 'setSubnetId',
        'tags' => 'setTags',
        'time_zone' => 'setTimeZone',
        'vpc_id' => 'setVpcId',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_detail' => 'getChargeDetail',
        'create_time' => 'getCreateTime',
        'db_engine_version' => 'getDbEngineVersion',
        'instance_category' => 'getInstanceCategory',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'instance_status' => 'getInstanceStatus',
        'instance_type' => 'getInstanceType',
        'maintenance_time' => 'getMaintenanceTime',
        'node_detail_info' => 'getNodeDetailInfo',
        'node_spec' => 'getNodeSpec',
        'port' => 'getPort',
        'primary_instance_id' => 'getPrimaryInstanceId',
        'project_name' => 'getProjectName',
        'read_only_number' => 'getReadOnlyNumber',
        'region_id' => 'getRegionId',
        'server_collation' => 'getServerCollation',
        'storage_space' => 'getStorageSpace',
        'storage_type' => 'getStorageType',
        'subnet_id' => 'getSubnetId',
        'tags' => 'getTags',
        'time_zone' => 'getTimeZone',
        'vpc_id' => 'getVpcId',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_detail'] = isset($data['charge_detail']) ? $data['charge_detail'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['instance_category'] = isset($data['instance_category']) ? $data['instance_category'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_status'] = isset($data['instance_status']) ? $data['instance_status'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['maintenance_time'] = isset($data['maintenance_time']) ? $data['maintenance_time'] : null;
        $this->container['node_detail_info'] = isset($data['node_detail_info']) ? $data['node_detail_info'] : null;
        $this->container['node_spec'] = isset($data['node_spec']) ? $data['node_spec'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['primary_instance_id'] = isset($data['primary_instance_id']) ? $data['primary_instance_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['read_only_number'] = isset($data['read_only_number']) ? $data['read_only_number'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['server_collation'] = isset($data['server_collation']) ? $data['server_collation'] : null;
        $this->container['storage_space'] = isset($data['storage_space']) ? $data['storage_space'] : null;
        $this->container['storage_type'] = isset($data['storage_type']) ? $data['storage_type'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_detail
     *
     * @return \Volcengine\Rdsmssql\Model\ChargeDetailForDescribeDBInstancesOutput
     */
    public function getChargeDetail()
    {
        return $this->container['charge_detail'];
    }

    /**
     * Sets charge_detail
     *
     * @param \Volcengine\Rdsmssql\Model\ChargeDetailForDescribeDBInstancesOutput $charge_detail charge_detail
     *
     * @return $this
     */
    public function setChargeDetail($charge_detail)
    {
        $this->container['charge_detail'] = $charge_detail;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets instance_category
     *
     * @return string
     */
    public function getInstanceCategory()
    {
        return $this->container['instance_category'];
    }

    /**
     * Sets instance_category
     *
     * @param string $instance_category instance_category
     *
     * @return $this
     */
    public function setInstanceCategory($instance_category)
    {
        $this->container['instance_category'] = $instance_category;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_status
     *
     * @return string
     */
    public function getInstanceStatus()
    {
        return $this->container['instance_status'];
    }

    /**
     * Sets instance_status
     *
     * @param string $instance_status instance_status
     *
     * @return $this
     */
    public function setInstanceStatus($instance_status)
    {
        $this->container['instance_status'] = $instance_status;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets maintenance_time
     *
     * @return string
     */
    public function getMaintenanceTime()
    {
        return $this->container['maintenance_time'];
    }

    /**
     * Sets maintenance_time
     *
     * @param string $maintenance_time maintenance_time
     *
     * @return $this
     */
    public function setMaintenanceTime($maintenance_time)
    {
        $this->container['maintenance_time'] = $maintenance_time;

        return $this;
    }

    /**
     * Gets node_detail_info
     *
     * @return \Volcengine\Rdsmssql\Model\NodeDetailInfoForDescribeDBInstancesOutput[]
     */
    public function getNodeDetailInfo()
    {
        return $this->container['node_detail_info'];
    }

    /**
     * Sets node_detail_info
     *
     * @param \Volcengine\Rdsmssql\Model\NodeDetailInfoForDescribeDBInstancesOutput[] $node_detail_info node_detail_info
     *
     * @return $this
     */
    public function setNodeDetailInfo($node_detail_info)
    {
        $this->container['node_detail_info'] = $node_detail_info;

        return $this;
    }

    /**
     * Gets node_spec
     *
     * @return string
     */
    public function getNodeSpec()
    {
        return $this->container['node_spec'];
    }

    /**
     * Sets node_spec
     *
     * @param string $node_spec node_spec
     *
     * @return $this
     */
    public function setNodeSpec($node_spec)
    {
        $this->container['node_spec'] = $node_spec;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets primary_instance_id
     *
     * @return string
     */
    public function getPrimaryInstanceId()
    {
        return $this->container['primary_instance_id'];
    }

    /**
     * Sets primary_instance_id
     *
     * @param string $primary_instance_id primary_instance_id
     *
     * @return $this
     */
    public function setPrimaryInstanceId($primary_instance_id)
    {
        $this->container['primary_instance_id'] = $primary_instance_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets read_only_number
     *
     * @return int
     */
    public function getReadOnlyNumber()
    {
        return $this->container['read_only_number'];
    }

    /**
     * Sets read_only_number
     *
     * @param int $read_only_number read_only_number
     *
     * @return $this
     */
    public function setReadOnlyNumber($read_only_number)
    {
        $this->container['read_only_number'] = $read_only_number;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets server_collation
     *
     * @return string
     */
    public function getServerCollation()
    {
        return $this->container['server_collation'];
    }

    /**
     * Sets server_collation
     *
     * @param string $server_collation server_collation
     *
     * @return $this
     */
    public function setServerCollation($server_collation)
    {
        $this->container['server_collation'] = $server_collation;

        return $this;
    }

    /**
     * Gets storage_space
     *
     * @return int
     */
    public function getStorageSpace()
    {
        return $this->container['storage_space'];
    }

    /**
     * Sets storage_space
     *
     * @param int $storage_space storage_space
     *
     * @return $this
     */
    public function setStorageSpace($storage_space)
    {
        $this->container['storage_space'] = $storage_space;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string $storage_type storage_type
     *
     * @return $this
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Rdsmssql\Model\TagForDescribeDBInstancesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Rdsmssql\Model\TagForDescribeDBInstancesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

