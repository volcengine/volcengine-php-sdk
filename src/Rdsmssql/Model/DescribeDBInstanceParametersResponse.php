<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBInstanceParametersResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBInstanceParametersResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'db_engine' => 'string',
        'db_engine_version' => 'string',
        'instance_id' => 'string',
        'instance_parameters' => '\Volcengine\Rdsmssql\Model\InstanceParameterForDescribeDBInstanceParametersOutput[]',
        'parameter_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'db_engine' => null,
        'db_engine_version' => null,
        'instance_id' => null,
        'instance_parameters' => null,
        'parameter_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'db_engine' => 'DBEngine',
        'db_engine_version' => 'DBEngineVersion',
        'instance_id' => 'InstanceId',
        'instance_parameters' => 'InstanceParameters',
        'parameter_count' => 'ParameterCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'db_engine' => 'setDbEngine',
        'db_engine_version' => 'setDbEngineVersion',
        'instance_id' => 'setInstanceId',
        'instance_parameters' => 'setInstanceParameters',
        'parameter_count' => 'setParameterCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'db_engine' => 'getDbEngine',
        'db_engine_version' => 'getDbEngineVersion',
        'instance_id' => 'getInstanceId',
        'instance_parameters' => 'getInstanceParameters',
        'parameter_count' => 'getParameterCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['db_engine'] = isset($data['db_engine']) ? $data['db_engine'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_parameters'] = isset($data['instance_parameters']) ? $data['instance_parameters'] : null;
        $this->container['parameter_count'] = isset($data['parameter_count']) ? $data['parameter_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets db_engine
     *
     * @return string
     */
    public function getDbEngine()
    {
        return $this->container['db_engine'];
    }

    /**
     * Sets db_engine
     *
     * @param string $db_engine db_engine
     *
     * @return $this
     */
    public function setDbEngine($db_engine)
    {
        $this->container['db_engine'] = $db_engine;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_parameters
     *
     * @return \Volcengine\Rdsmssql\Model\InstanceParameterForDescribeDBInstanceParametersOutput[]
     */
    public function getInstanceParameters()
    {
        return $this->container['instance_parameters'];
    }

    /**
     * Sets instance_parameters
     *
     * @param \Volcengine\Rdsmssql\Model\InstanceParameterForDescribeDBInstanceParametersOutput[] $instance_parameters instance_parameters
     *
     * @return $this
     */
    public function setInstanceParameters($instance_parameters)
    {
        $this->container['instance_parameters'] = $instance_parameters;

        return $this;
    }

    /**
     * Gets parameter_count
     *
     * @return int
     */
    public function getParameterCount()
    {
        return $this->container['parameter_count'];
    }

    /**
     * Sets parameter_count
     *
     * @param int $parameter_count parameter_count
     *
     * @return $this
     */
    public function setParameterCount($parameter_count)
    {
        $this->container['parameter_count'] = $parameter_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

