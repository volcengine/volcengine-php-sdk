<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyBackupPolicyRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyBackupPolicyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_retention_period' => 'int',
        'backup_time' => 'string',
        'full_backup_period' => 'string',
        'instance_id' => 'string',
        'log_backup_interval' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_retention_period' => 'int32',
        'backup_time' => null,
        'full_backup_period' => null,
        'instance_id' => null,
        'log_backup_interval' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_retention_period' => 'BackupRetentionPeriod',
        'backup_time' => 'BackupTime',
        'full_backup_period' => 'FullBackupPeriod',
        'instance_id' => 'InstanceId',
        'log_backup_interval' => 'LogBackupInterval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_retention_period' => 'setBackupRetentionPeriod',
        'backup_time' => 'setBackupTime',
        'full_backup_period' => 'setFullBackupPeriod',
        'instance_id' => 'setInstanceId',
        'log_backup_interval' => 'setLogBackupInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_retention_period' => 'getBackupRetentionPeriod',
        'backup_time' => 'getBackupTime',
        'full_backup_period' => 'getFullBackupPeriod',
        'instance_id' => 'getInstanceId',
        'log_backup_interval' => 'getLogBackupInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_retention_period'] = isset($data['backup_retention_period']) ? $data['backup_retention_period'] : null;
        $this->container['backup_time'] = isset($data['backup_time']) ? $data['backup_time'] : null;
        $this->container['full_backup_period'] = isset($data['full_backup_period']) ? $data['full_backup_period'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['log_backup_interval'] = isset($data['log_backup_interval']) ? $data['log_backup_interval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['backup_retention_period'] === null) {
            $invalidProperties[] = "'backup_retention_period' can't be null";
        }
        if ($this->container['backup_time'] === null) {
            $invalidProperties[] = "'backup_time' can't be null";
        }
        if ($this->container['full_backup_period'] === null) {
            $invalidProperties[] = "'full_backup_period' can't be null";
        }
        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_retention_period
     *
     * @return int
     */
    public function getBackupRetentionPeriod()
    {
        return $this->container['backup_retention_period'];
    }

    /**
     * Sets backup_retention_period
     *
     * @param int $backup_retention_period backup_retention_period
     *
     * @return $this
     */
    public function setBackupRetentionPeriod($backup_retention_period)
    {
        $this->container['backup_retention_period'] = $backup_retention_period;

        return $this;
    }

    /**
     * Gets backup_time
     *
     * @return string
     */
    public function getBackupTime()
    {
        return $this->container['backup_time'];
    }

    /**
     * Sets backup_time
     *
     * @param string $backup_time backup_time
     *
     * @return $this
     */
    public function setBackupTime($backup_time)
    {
        $this->container['backup_time'] = $backup_time;

        return $this;
    }

    /**
     * Gets full_backup_period
     *
     * @return string
     */
    public function getFullBackupPeriod()
    {
        return $this->container['full_backup_period'];
    }

    /**
     * Sets full_backup_period
     *
     * @param string $full_backup_period full_backup_period
     *
     * @return $this
     */
    public function setFullBackupPeriod($full_backup_period)
    {
        $this->container['full_backup_period'] = $full_backup_period;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets log_backup_interval
     *
     * @return int
     */
    public function getLogBackupInterval()
    {
        return $this->container['log_backup_interval'];
    }

    /**
     * Sets log_backup_interval
     *
     * @param int $log_backup_interval log_backup_interval
     *
     * @return $this
     */
    public function setLogBackupInterval($log_backup_interval)
    {
        $this->container['log_backup_interval'] = $log_backup_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

