<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RestoreTaskDetailForDescribeTosRestoreTaskDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RestoreTaskDetailForDescribeTosRestoreTaskDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_type' => 'string',
        'db_name' => 'string',
        'new_db_name' => 'string',
        'restore_desc' => 'string',
        'restore_end_time' => 'string',
        'restore_file_name' => 'string',
        'restore_file_size' => 'string',
        'restore_start_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_type' => null,
        'db_name' => null,
        'new_db_name' => null,
        'restore_desc' => null,
        'restore_end_time' => null,
        'restore_file_name' => null,
        'restore_file_size' => null,
        'restore_start_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_type' => 'BackupType',
        'db_name' => 'DBName',
        'new_db_name' => 'NewDBName',
        'restore_desc' => 'RestoreDesc',
        'restore_end_time' => 'RestoreEndTime',
        'restore_file_name' => 'RestoreFileName',
        'restore_file_size' => 'RestoreFileSize',
        'restore_start_time' => 'RestoreStartTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_type' => 'setBackupType',
        'db_name' => 'setDbName',
        'new_db_name' => 'setNewDbName',
        'restore_desc' => 'setRestoreDesc',
        'restore_end_time' => 'setRestoreEndTime',
        'restore_file_name' => 'setRestoreFileName',
        'restore_file_size' => 'setRestoreFileSize',
        'restore_start_time' => 'setRestoreStartTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_type' => 'getBackupType',
        'db_name' => 'getDbName',
        'new_db_name' => 'getNewDbName',
        'restore_desc' => 'getRestoreDesc',
        'restore_end_time' => 'getRestoreEndTime',
        'restore_file_name' => 'getRestoreFileName',
        'restore_file_size' => 'getRestoreFileSize',
        'restore_start_time' => 'getRestoreStartTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_type'] = isset($data['backup_type']) ? $data['backup_type'] : null;
        $this->container['db_name'] = isset($data['db_name']) ? $data['db_name'] : null;
        $this->container['new_db_name'] = isset($data['new_db_name']) ? $data['new_db_name'] : null;
        $this->container['restore_desc'] = isset($data['restore_desc']) ? $data['restore_desc'] : null;
        $this->container['restore_end_time'] = isset($data['restore_end_time']) ? $data['restore_end_time'] : null;
        $this->container['restore_file_name'] = isset($data['restore_file_name']) ? $data['restore_file_name'] : null;
        $this->container['restore_file_size'] = isset($data['restore_file_size']) ? $data['restore_file_size'] : null;
        $this->container['restore_start_time'] = isset($data['restore_start_time']) ? $data['restore_start_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_type
     *
     * @return string
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param string $backup_type backup_type
     *
     * @return $this
     */
    public function setBackupType($backup_type)
    {
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets db_name
     *
     * @return string
     */
    public function getDbName()
    {
        return $this->container['db_name'];
    }

    /**
     * Sets db_name
     *
     * @param string $db_name db_name
     *
     * @return $this
     */
    public function setDbName($db_name)
    {
        $this->container['db_name'] = $db_name;

        return $this;
    }

    /**
     * Gets new_db_name
     *
     * @return string
     */
    public function getNewDbName()
    {
        return $this->container['new_db_name'];
    }

    /**
     * Sets new_db_name
     *
     * @param string $new_db_name new_db_name
     *
     * @return $this
     */
    public function setNewDbName($new_db_name)
    {
        $this->container['new_db_name'] = $new_db_name;

        return $this;
    }

    /**
     * Gets restore_desc
     *
     * @return string
     */
    public function getRestoreDesc()
    {
        return $this->container['restore_desc'];
    }

    /**
     * Sets restore_desc
     *
     * @param string $restore_desc restore_desc
     *
     * @return $this
     */
    public function setRestoreDesc($restore_desc)
    {
        $this->container['restore_desc'] = $restore_desc;

        return $this;
    }

    /**
     * Gets restore_end_time
     *
     * @return string
     */
    public function getRestoreEndTime()
    {
        return $this->container['restore_end_time'];
    }

    /**
     * Sets restore_end_time
     *
     * @param string $restore_end_time restore_end_time
     *
     * @return $this
     */
    public function setRestoreEndTime($restore_end_time)
    {
        $this->container['restore_end_time'] = $restore_end_time;

        return $this;
    }

    /**
     * Gets restore_file_name
     *
     * @return string
     */
    public function getRestoreFileName()
    {
        return $this->container['restore_file_name'];
    }

    /**
     * Sets restore_file_name
     *
     * @param string $restore_file_name restore_file_name
     *
     * @return $this
     */
    public function setRestoreFileName($restore_file_name)
    {
        $this->container['restore_file_name'] = $restore_file_name;

        return $this;
    }

    /**
     * Gets restore_file_size
     *
     * @return string
     */
    public function getRestoreFileSize()
    {
        return $this->container['restore_file_size'];
    }

    /**
     * Sets restore_file_size
     *
     * @param string $restore_file_size restore_file_size
     *
     * @return $this
     */
    public function setRestoreFileSize($restore_file_size)
    {
        $this->container['restore_file_size'] = $restore_file_size;

        return $this;
    }

    /**
     * Gets restore_start_time
     *
     * @return string
     */
    public function getRestoreStartTime()
    {
        return $this->container['restore_start_time'];
    }

    /**
     * Sets restore_start_time
     *
     * @param string $restore_start_time restore_start_time
     *
     * @return $this
     */
    public function setRestoreStartTime($restore_start_time)
    {
        $this->container['restore_start_time'] = $restore_start_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

