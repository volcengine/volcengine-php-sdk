<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceParameterForDescribeDBInstanceParametersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceParameterForDescribeDBInstanceParametersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checking_code' => 'string',
        'force_modify' => 'bool',
        'force_restart' => 'bool',
        'parameter_default_value' => 'string',
        'parameter_description' => 'string',
        'parameter_name' => 'string',
        'parameter_type' => 'string',
        'parameter_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checking_code' => null,
        'force_modify' => null,
        'force_restart' => null,
        'parameter_default_value' => null,
        'parameter_description' => null,
        'parameter_name' => null,
        'parameter_type' => null,
        'parameter_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checking_code' => 'CheckingCode',
        'force_modify' => 'ForceModify',
        'force_restart' => 'ForceRestart',
        'parameter_default_value' => 'ParameterDefaultValue',
        'parameter_description' => 'ParameterDescription',
        'parameter_name' => 'ParameterName',
        'parameter_type' => 'ParameterType',
        'parameter_value' => 'ParameterValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checking_code' => 'setCheckingCode',
        'force_modify' => 'setForceModify',
        'force_restart' => 'setForceRestart',
        'parameter_default_value' => 'setParameterDefaultValue',
        'parameter_description' => 'setParameterDescription',
        'parameter_name' => 'setParameterName',
        'parameter_type' => 'setParameterType',
        'parameter_value' => 'setParameterValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checking_code' => 'getCheckingCode',
        'force_modify' => 'getForceModify',
        'force_restart' => 'getForceRestart',
        'parameter_default_value' => 'getParameterDefaultValue',
        'parameter_description' => 'getParameterDescription',
        'parameter_name' => 'getParameterName',
        'parameter_type' => 'getParameterType',
        'parameter_value' => 'getParameterValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checking_code'] = isset($data['checking_code']) ? $data['checking_code'] : null;
        $this->container['force_modify'] = isset($data['force_modify']) ? $data['force_modify'] : null;
        $this->container['force_restart'] = isset($data['force_restart']) ? $data['force_restart'] : null;
        $this->container['parameter_default_value'] = isset($data['parameter_default_value']) ? $data['parameter_default_value'] : null;
        $this->container['parameter_description'] = isset($data['parameter_description']) ? $data['parameter_description'] : null;
        $this->container['parameter_name'] = isset($data['parameter_name']) ? $data['parameter_name'] : null;
        $this->container['parameter_type'] = isset($data['parameter_type']) ? $data['parameter_type'] : null;
        $this->container['parameter_value'] = isset($data['parameter_value']) ? $data['parameter_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checking_code
     *
     * @return string
     */
    public function getCheckingCode()
    {
        return $this->container['checking_code'];
    }

    /**
     * Sets checking_code
     *
     * @param string $checking_code checking_code
     *
     * @return $this
     */
    public function setCheckingCode($checking_code)
    {
        $this->container['checking_code'] = $checking_code;

        return $this;
    }

    /**
     * Gets force_modify
     *
     * @return bool
     */
    public function getForceModify()
    {
        return $this->container['force_modify'];
    }

    /**
     * Sets force_modify
     *
     * @param bool $force_modify force_modify
     *
     * @return $this
     */
    public function setForceModify($force_modify)
    {
        $this->container['force_modify'] = $force_modify;

        return $this;
    }

    /**
     * Gets force_restart
     *
     * @return bool
     */
    public function getForceRestart()
    {
        return $this->container['force_restart'];
    }

    /**
     * Sets force_restart
     *
     * @param bool $force_restart force_restart
     *
     * @return $this
     */
    public function setForceRestart($force_restart)
    {
        $this->container['force_restart'] = $force_restart;

        return $this;
    }

    /**
     * Gets parameter_default_value
     *
     * @return string
     */
    public function getParameterDefaultValue()
    {
        return $this->container['parameter_default_value'];
    }

    /**
     * Sets parameter_default_value
     *
     * @param string $parameter_default_value parameter_default_value
     *
     * @return $this
     */
    public function setParameterDefaultValue($parameter_default_value)
    {
        $this->container['parameter_default_value'] = $parameter_default_value;

        return $this;
    }

    /**
     * Gets parameter_description
     *
     * @return string
     */
    public function getParameterDescription()
    {
        return $this->container['parameter_description'];
    }

    /**
     * Sets parameter_description
     *
     * @param string $parameter_description parameter_description
     *
     * @return $this
     */
    public function setParameterDescription($parameter_description)
    {
        $this->container['parameter_description'] = $parameter_description;

        return $this;
    }

    /**
     * Gets parameter_name
     *
     * @return string
     */
    public function getParameterName()
    {
        return $this->container['parameter_name'];
    }

    /**
     * Sets parameter_name
     *
     * @param string $parameter_name parameter_name
     *
     * @return $this
     */
    public function setParameterName($parameter_name)
    {
        $this->container['parameter_name'] = $parameter_name;

        return $this;
    }

    /**
     * Gets parameter_type
     *
     * @return string
     */
    public function getParameterType()
    {
        return $this->container['parameter_type'];
    }

    /**
     * Sets parameter_type
     *
     * @param string $parameter_type parameter_type
     *
     * @return $this
     */
    public function setParameterType($parameter_type)
    {
        $this->container['parameter_type'] = $parameter_type;

        return $this;
    }

    /**
     * Gets parameter_value
     *
     * @return string
     */
    public function getParameterValue()
    {
        return $this->container['parameter_value'];
    }

    /**
     * Sets parameter_value
     *
     * @param string $parameter_value parameter_value
     *
     * @return $this
     */
    public function setParameterValue($parameter_value)
    {
        $this->container['parameter_value'] = $parameter_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

