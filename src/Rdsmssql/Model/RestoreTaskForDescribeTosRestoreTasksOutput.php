<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RestoreTaskForDescribeTosRestoreTasksOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RestoreTaskForDescribeTosRestoreTasksOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
        'instance_name' => 'string',
        'is_replace' => 'bool',
        'restore_task_id' => 'string',
        'restore_type' => 'string',
        'task_desc' => 'string',
        'task_end_time' => 'string',
        'task_start_time' => 'string',
        'task_status' => 'string',
        'task_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
        'instance_name' => null,
        'is_replace' => null,
        'restore_task_id' => null,
        'restore_type' => null,
        'task_desc' => null,
        'task_end_time' => null,
        'task_start_time' => null,
        'task_status' => null,
        'task_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'is_replace' => 'IsReplace',
        'restore_task_id' => 'RestoreTaskId',
        'restore_type' => 'RestoreType',
        'task_desc' => 'TaskDesc',
        'task_end_time' => 'TaskEndTime',
        'task_start_time' => 'TaskStartTime',
        'task_status' => 'TaskStatus',
        'task_type' => 'TaskType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'is_replace' => 'setIsReplace',
        'restore_task_id' => 'setRestoreTaskId',
        'restore_type' => 'setRestoreType',
        'task_desc' => 'setTaskDesc',
        'task_end_time' => 'setTaskEndTime',
        'task_start_time' => 'setTaskStartTime',
        'task_status' => 'setTaskStatus',
        'task_type' => 'setTaskType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'is_replace' => 'getIsReplace',
        'restore_task_id' => 'getRestoreTaskId',
        'restore_type' => 'getRestoreType',
        'task_desc' => 'getTaskDesc',
        'task_end_time' => 'getTaskEndTime',
        'task_start_time' => 'getTaskStartTime',
        'task_status' => 'getTaskStatus',
        'task_type' => 'getTaskType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['is_replace'] = isset($data['is_replace']) ? $data['is_replace'] : null;
        $this->container['restore_task_id'] = isset($data['restore_task_id']) ? $data['restore_task_id'] : null;
        $this->container['restore_type'] = isset($data['restore_type']) ? $data['restore_type'] : null;
        $this->container['task_desc'] = isset($data['task_desc']) ? $data['task_desc'] : null;
        $this->container['task_end_time'] = isset($data['task_end_time']) ? $data['task_end_time'] : null;
        $this->container['task_start_time'] = isset($data['task_start_time']) ? $data['task_start_time'] : null;
        $this->container['task_status'] = isset($data['task_status']) ? $data['task_status'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets is_replace
     *
     * @return bool
     */
    public function getIsReplace()
    {
        return $this->container['is_replace'];
    }

    /**
     * Sets is_replace
     *
     * @param bool $is_replace is_replace
     *
     * @return $this
     */
    public function setIsReplace($is_replace)
    {
        $this->container['is_replace'] = $is_replace;

        return $this;
    }

    /**
     * Gets restore_task_id
     *
     * @return string
     */
    public function getRestoreTaskId()
    {
        return $this->container['restore_task_id'];
    }

    /**
     * Sets restore_task_id
     *
     * @param string $restore_task_id restore_task_id
     *
     * @return $this
     */
    public function setRestoreTaskId($restore_task_id)
    {
        $this->container['restore_task_id'] = $restore_task_id;

        return $this;
    }

    /**
     * Gets restore_type
     *
     * @return string
     */
    public function getRestoreType()
    {
        return $this->container['restore_type'];
    }

    /**
     * Sets restore_type
     *
     * @param string $restore_type restore_type
     *
     * @return $this
     */
    public function setRestoreType($restore_type)
    {
        $this->container['restore_type'] = $restore_type;

        return $this;
    }

    /**
     * Gets task_desc
     *
     * @return string
     */
    public function getTaskDesc()
    {
        return $this->container['task_desc'];
    }

    /**
     * Sets task_desc
     *
     * @param string $task_desc task_desc
     *
     * @return $this
     */
    public function setTaskDesc($task_desc)
    {
        $this->container['task_desc'] = $task_desc;

        return $this;
    }

    /**
     * Gets task_end_time
     *
     * @return string
     */
    public function getTaskEndTime()
    {
        return $this->container['task_end_time'];
    }

    /**
     * Sets task_end_time
     *
     * @param string $task_end_time task_end_time
     *
     * @return $this
     */
    public function setTaskEndTime($task_end_time)
    {
        $this->container['task_end_time'] = $task_end_time;

        return $this;
    }

    /**
     * Gets task_start_time
     *
     * @return string
     */
    public function getTaskStartTime()
    {
        return $this->container['task_start_time'];
    }

    /**
     * Sets task_start_time
     *
     * @param string $task_start_time task_start_time
     *
     * @return $this
     */
    public function setTaskStartTime($task_start_time)
    {
        $this->container['task_start_time'] = $task_start_time;

        return $this;
    }

    /**
     * Gets task_status
     *
     * @return string
     */
    public function getTaskStatus()
    {
        return $this->container['task_status'];
    }

    /**
     * Sets task_status
     *
     * @param string $task_status task_status
     *
     * @return $this
     */
    public function setTaskStatus($task_status)
    {
        $this->container['task_status'] = $task_status;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param string $task_type task_type
     *
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

