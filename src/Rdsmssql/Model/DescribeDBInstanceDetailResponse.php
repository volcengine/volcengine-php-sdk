<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBInstanceDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBInstanceDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'basic_info' => '\Volcengine\Rdsmssql\Model\BasicInfoForDescribeDBInstanceDetailOutput',
        'charge_detail' => '\Volcengine\Rdsmssql\Model\ChargeDetailForDescribeDBInstanceDetailOutput',
        'connection_info' => '\Volcengine\Rdsmssql\Model\ConnectionInfoForDescribeDBInstanceDetailOutput[]',
        'node_detail_info' => '\Volcengine\Rdsmssql\Model\NodeDetailInfoForDescribeDBInstanceDetailOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'basic_info' => null,
        'charge_detail' => null,
        'connection_info' => null,
        'node_detail_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'basic_info' => 'BasicInfo',
        'charge_detail' => 'ChargeDetail',
        'connection_info' => 'ConnectionInfo',
        'node_detail_info' => 'NodeDetailInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'basic_info' => 'setBasicInfo',
        'charge_detail' => 'setChargeDetail',
        'connection_info' => 'setConnectionInfo',
        'node_detail_info' => 'setNodeDetailInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'basic_info' => 'getBasicInfo',
        'charge_detail' => 'getChargeDetail',
        'connection_info' => 'getConnectionInfo',
        'node_detail_info' => 'getNodeDetailInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['basic_info'] = isset($data['basic_info']) ? $data['basic_info'] : null;
        $this->container['charge_detail'] = isset($data['charge_detail']) ? $data['charge_detail'] : null;
        $this->container['connection_info'] = isset($data['connection_info']) ? $data['connection_info'] : null;
        $this->container['node_detail_info'] = isset($data['node_detail_info']) ? $data['node_detail_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basic_info
     *
     * @return \Volcengine\Rdsmssql\Model\BasicInfoForDescribeDBInstanceDetailOutput
     */
    public function getBasicInfo()
    {
        return $this->container['basic_info'];
    }

    /**
     * Sets basic_info
     *
     * @param \Volcengine\Rdsmssql\Model\BasicInfoForDescribeDBInstanceDetailOutput $basic_info basic_info
     *
     * @return $this
     */
    public function setBasicInfo($basic_info)
    {
        $this->container['basic_info'] = $basic_info;

        return $this;
    }

    /**
     * Gets charge_detail
     *
     * @return \Volcengine\Rdsmssql\Model\ChargeDetailForDescribeDBInstanceDetailOutput
     */
    public function getChargeDetail()
    {
        return $this->container['charge_detail'];
    }

    /**
     * Sets charge_detail
     *
     * @param \Volcengine\Rdsmssql\Model\ChargeDetailForDescribeDBInstanceDetailOutput $charge_detail charge_detail
     *
     * @return $this
     */
    public function setChargeDetail($charge_detail)
    {
        $this->container['charge_detail'] = $charge_detail;

        return $this;
    }

    /**
     * Gets connection_info
     *
     * @return \Volcengine\Rdsmssql\Model\ConnectionInfoForDescribeDBInstanceDetailOutput[]
     */
    public function getConnectionInfo()
    {
        return $this->container['connection_info'];
    }

    /**
     * Sets connection_info
     *
     * @param \Volcengine\Rdsmssql\Model\ConnectionInfoForDescribeDBInstanceDetailOutput[] $connection_info connection_info
     *
     * @return $this
     */
    public function setConnectionInfo($connection_info)
    {
        $this->container['connection_info'] = $connection_info;

        return $this;
    }

    /**
     * Gets node_detail_info
     *
     * @return \Volcengine\Rdsmssql\Model\NodeDetailInfoForDescribeDBInstanceDetailOutput[]
     */
    public function getNodeDetailInfo()
    {
        return $this->container['node_detail_info'];
    }

    /**
     * Sets node_detail_info
     *
     * @param \Volcengine\Rdsmssql\Model\NodeDetailInfoForDescribeDBInstanceDetailOutput[] $node_detail_info node_detail_info
     *
     * @return $this
     */
    public function setNodeDetailInfo($node_detail_info)
    {
        $this->container['node_detail_info'] = $node_detail_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

