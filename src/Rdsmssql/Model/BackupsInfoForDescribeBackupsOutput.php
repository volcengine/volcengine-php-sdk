<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmssql\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BackupsInfoForDescribeBackupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BackupsInfoForDescribeBackupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_database_detail' => '\Volcengine\Rdsmssql\Model\BackupDatabaseDetailForDescribeBackupsOutput[]',
        'backup_end_time' => 'string',
        'backup_file_size' => 'int',
        'backup_id' => 'string',
        'backup_method' => 'string',
        'backup_start_time' => 'string',
        'backup_status' => 'string',
        'backup_type' => 'string',
        'create_type' => 'string',
        'download_progress' => 'int',
        'download_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_database_detail' => null,
        'backup_end_time' => null,
        'backup_file_size' => 'int64',
        'backup_id' => null,
        'backup_method' => null,
        'backup_start_time' => null,
        'backup_status' => null,
        'backup_type' => null,
        'create_type' => null,
        'download_progress' => 'int32',
        'download_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_database_detail' => 'BackupDatabaseDetail',
        'backup_end_time' => 'BackupEndTime',
        'backup_file_size' => 'BackupFileSize',
        'backup_id' => 'BackupId',
        'backup_method' => 'BackupMethod',
        'backup_start_time' => 'BackupStartTime',
        'backup_status' => 'BackupStatus',
        'backup_type' => 'BackupType',
        'create_type' => 'CreateType',
        'download_progress' => 'DownloadProgress',
        'download_status' => 'DownloadStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_database_detail' => 'setBackupDatabaseDetail',
        'backup_end_time' => 'setBackupEndTime',
        'backup_file_size' => 'setBackupFileSize',
        'backup_id' => 'setBackupId',
        'backup_method' => 'setBackupMethod',
        'backup_start_time' => 'setBackupStartTime',
        'backup_status' => 'setBackupStatus',
        'backup_type' => 'setBackupType',
        'create_type' => 'setCreateType',
        'download_progress' => 'setDownloadProgress',
        'download_status' => 'setDownloadStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_database_detail' => 'getBackupDatabaseDetail',
        'backup_end_time' => 'getBackupEndTime',
        'backup_file_size' => 'getBackupFileSize',
        'backup_id' => 'getBackupId',
        'backup_method' => 'getBackupMethod',
        'backup_start_time' => 'getBackupStartTime',
        'backup_status' => 'getBackupStatus',
        'backup_type' => 'getBackupType',
        'create_type' => 'getCreateType',
        'download_progress' => 'getDownloadProgress',
        'download_status' => 'getDownloadStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_database_detail'] = isset($data['backup_database_detail']) ? $data['backup_database_detail'] : null;
        $this->container['backup_end_time'] = isset($data['backup_end_time']) ? $data['backup_end_time'] : null;
        $this->container['backup_file_size'] = isset($data['backup_file_size']) ? $data['backup_file_size'] : null;
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['backup_method'] = isset($data['backup_method']) ? $data['backup_method'] : null;
        $this->container['backup_start_time'] = isset($data['backup_start_time']) ? $data['backup_start_time'] : null;
        $this->container['backup_status'] = isset($data['backup_status']) ? $data['backup_status'] : null;
        $this->container['backup_type'] = isset($data['backup_type']) ? $data['backup_type'] : null;
        $this->container['create_type'] = isset($data['create_type']) ? $data['create_type'] : null;
        $this->container['download_progress'] = isset($data['download_progress']) ? $data['download_progress'] : null;
        $this->container['download_status'] = isset($data['download_status']) ? $data['download_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_database_detail
     *
     * @return \Volcengine\Rdsmssql\Model\BackupDatabaseDetailForDescribeBackupsOutput[]
     */
    public function getBackupDatabaseDetail()
    {
        return $this->container['backup_database_detail'];
    }

    /**
     * Sets backup_database_detail
     *
     * @param \Volcengine\Rdsmssql\Model\BackupDatabaseDetailForDescribeBackupsOutput[] $backup_database_detail backup_database_detail
     *
     * @return $this
     */
    public function setBackupDatabaseDetail($backup_database_detail)
    {
        $this->container['backup_database_detail'] = $backup_database_detail;

        return $this;
    }

    /**
     * Gets backup_end_time
     *
     * @return string
     */
    public function getBackupEndTime()
    {
        return $this->container['backup_end_time'];
    }

    /**
     * Sets backup_end_time
     *
     * @param string $backup_end_time backup_end_time
     *
     * @return $this
     */
    public function setBackupEndTime($backup_end_time)
    {
        $this->container['backup_end_time'] = $backup_end_time;

        return $this;
    }

    /**
     * Gets backup_file_size
     *
     * @return int
     */
    public function getBackupFileSize()
    {
        return $this->container['backup_file_size'];
    }

    /**
     * Sets backup_file_size
     *
     * @param int $backup_file_size backup_file_size
     *
     * @return $this
     */
    public function setBackupFileSize($backup_file_size)
    {
        $this->container['backup_file_size'] = $backup_file_size;

        return $this;
    }

    /**
     * Gets backup_id
     *
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     *
     * @param string $backup_id backup_id
     *
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets backup_method
     *
     * @return string
     */
    public function getBackupMethod()
    {
        return $this->container['backup_method'];
    }

    /**
     * Sets backup_method
     *
     * @param string $backup_method backup_method
     *
     * @return $this
     */
    public function setBackupMethod($backup_method)
    {
        $this->container['backup_method'] = $backup_method;

        return $this;
    }

    /**
     * Gets backup_start_time
     *
     * @return string
     */
    public function getBackupStartTime()
    {
        return $this->container['backup_start_time'];
    }

    /**
     * Sets backup_start_time
     *
     * @param string $backup_start_time backup_start_time
     *
     * @return $this
     */
    public function setBackupStartTime($backup_start_time)
    {
        $this->container['backup_start_time'] = $backup_start_time;

        return $this;
    }

    /**
     * Gets backup_status
     *
     * @return string
     */
    public function getBackupStatus()
    {
        return $this->container['backup_status'];
    }

    /**
     * Sets backup_status
     *
     * @param string $backup_status backup_status
     *
     * @return $this
     */
    public function setBackupStatus($backup_status)
    {
        $this->container['backup_status'] = $backup_status;

        return $this;
    }

    /**
     * Gets backup_type
     *
     * @return string
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param string $backup_type backup_type
     *
     * @return $this
     */
    public function setBackupType($backup_type)
    {
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets create_type
     *
     * @return string
     */
    public function getCreateType()
    {
        return $this->container['create_type'];
    }

    /**
     * Sets create_type
     *
     * @param string $create_type create_type
     *
     * @return $this
     */
    public function setCreateType($create_type)
    {
        $this->container['create_type'] = $create_type;

        return $this;
    }

    /**
     * Gets download_progress
     *
     * @return int
     */
    public function getDownloadProgress()
    {
        return $this->container['download_progress'];
    }

    /**
     * Sets download_progress
     *
     * @param int $download_progress download_progress
     *
     * @return $this
     */
    public function setDownloadProgress($download_progress)
    {
        $this->container['download_progress'] = $download_progress;

        return $this;
    }

    /**
     * Gets download_status
     *
     * @return string
     */
    public function getDownloadStatus()
    {
        return $this->container['download_status'];
    }

    /**
     * Sets download_status
     *
     * @param string $download_status download_status
     *
     * @return $this
     */
    public function setDownloadStatus($download_status)
    {
        $this->container['download_status'] = $download_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

