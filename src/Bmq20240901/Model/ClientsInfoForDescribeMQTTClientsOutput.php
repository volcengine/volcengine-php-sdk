<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq20240901\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ClientsInfoForDescribeMQTTClientsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientsInfoForDescribeMQTTClientsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
        'connected_time' => 'string',
        'connection_state' => 'string',
        'disconnected_time' => 'string',
        'heart_beat_interval' => 'string',
        'ip_address' => 'string',
        'port' => 'string',
        'session_expire_interval' => 'string',
        'subscriptions_count' => 'string',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
        'connected_time' => null,
        'connection_state' => null,
        'disconnected_time' => null,
        'heart_beat_interval' => null,
        'ip_address' => null,
        'port' => null,
        'session_expire_interval' => null,
        'subscriptions_count' => null,
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'ClientId',
        'connected_time' => 'ConnectedTime',
        'connection_state' => 'ConnectionState',
        'disconnected_time' => 'DisconnectedTime',
        'heart_beat_interval' => 'HeartBeatInterval',
        'ip_address' => 'IpAddress',
        'port' => 'Port',
        'session_expire_interval' => 'SessionExpireInterval',
        'subscriptions_count' => 'SubscriptionsCount',
        'user_name' => 'UserName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'connected_time' => 'setConnectedTime',
        'connection_state' => 'setConnectionState',
        'disconnected_time' => 'setDisconnectedTime',
        'heart_beat_interval' => 'setHeartBeatInterval',
        'ip_address' => 'setIpAddress',
        'port' => 'setPort',
        'session_expire_interval' => 'setSessionExpireInterval',
        'subscriptions_count' => 'setSubscriptionsCount',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'connected_time' => 'getConnectedTime',
        'connection_state' => 'getConnectionState',
        'disconnected_time' => 'getDisconnectedTime',
        'heart_beat_interval' => 'getHeartBeatInterval',
        'ip_address' => 'getIpAddress',
        'port' => 'getPort',
        'session_expire_interval' => 'getSessionExpireInterval',
        'subscriptions_count' => 'getSubscriptionsCount',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['connected_time'] = isset($data['connected_time']) ? $data['connected_time'] : null;
        $this->container['connection_state'] = isset($data['connection_state']) ? $data['connection_state'] : null;
        $this->container['disconnected_time'] = isset($data['disconnected_time']) ? $data['disconnected_time'] : null;
        $this->container['heart_beat_interval'] = isset($data['heart_beat_interval']) ? $data['heart_beat_interval'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['session_expire_interval'] = isset($data['session_expire_interval']) ? $data['session_expire_interval'] : null;
        $this->container['subscriptions_count'] = isset($data['subscriptions_count']) ? $data['subscriptions_count'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets connected_time
     *
     * @return string
     */
    public function getConnectedTime()
    {
        return $this->container['connected_time'];
    }

    /**
     * Sets connected_time
     *
     * @param string $connected_time connected_time
     *
     * @return $this
     */
    public function setConnectedTime($connected_time)
    {
        $this->container['connected_time'] = $connected_time;

        return $this;
    }

    /**
     * Gets connection_state
     *
     * @return string
     */
    public function getConnectionState()
    {
        return $this->container['connection_state'];
    }

    /**
     * Sets connection_state
     *
     * @param string $connection_state connection_state
     *
     * @return $this
     */
    public function setConnectionState($connection_state)
    {
        $this->container['connection_state'] = $connection_state;

        return $this;
    }

    /**
     * Gets disconnected_time
     *
     * @return string
     */
    public function getDisconnectedTime()
    {
        return $this->container['disconnected_time'];
    }

    /**
     * Sets disconnected_time
     *
     * @param string $disconnected_time disconnected_time
     *
     * @return $this
     */
    public function setDisconnectedTime($disconnected_time)
    {
        $this->container['disconnected_time'] = $disconnected_time;

        return $this;
    }

    /**
     * Gets heart_beat_interval
     *
     * @return string
     */
    public function getHeartBeatInterval()
    {
        return $this->container['heart_beat_interval'];
    }

    /**
     * Sets heart_beat_interval
     *
     * @param string $heart_beat_interval heart_beat_interval
     *
     * @return $this
     */
    public function setHeartBeatInterval($heart_beat_interval)
    {
        $this->container['heart_beat_interval'] = $heart_beat_interval;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets session_expire_interval
     *
     * @return string
     */
    public function getSessionExpireInterval()
    {
        return $this->container['session_expire_interval'];
    }

    /**
     * Sets session_expire_interval
     *
     * @param string $session_expire_interval session_expire_interval
     *
     * @return $this
     */
    public function setSessionExpireInterval($session_expire_interval)
    {
        $this->container['session_expire_interval'] = $session_expire_interval;

        return $this;
    }

    /**
     * Gets subscriptions_count
     *
     * @return string
     */
    public function getSubscriptionsCount()
    {
        return $this->container['subscriptions_count'];
    }

    /**
     * Sets subscriptions_count
     *
     * @param string $subscriptions_count subscriptions_count
     *
     * @return $this
     */
    public function setSubscriptionsCount($subscriptions_count)
    {
        $this->container['subscriptions_count'] = $subscriptions_count;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

