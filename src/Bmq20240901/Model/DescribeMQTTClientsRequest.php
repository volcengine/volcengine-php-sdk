<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq20240901\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeMQTTClientsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeMQTTClientsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id_like' => 'string',
        'client_id_specify_list' => 'string[]',
        'connection_state' => 'string',
        'instance_id' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'user_name_like' => 'string',
        'user_name_specify_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id_like' => null,
        'client_id_specify_list' => null,
        'connection_state' => null,
        'instance_id' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'user_name_like' => null,
        'user_name_specify_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id_like' => 'ClientIdLike',
        'client_id_specify_list' => 'ClientIdSpecifyList',
        'connection_state' => 'ConnectionState',
        'instance_id' => 'InstanceId',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'user_name_like' => 'UserNameLike',
        'user_name_specify_list' => 'UserNameSpecifyList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id_like' => 'setClientIdLike',
        'client_id_specify_list' => 'setClientIdSpecifyList',
        'connection_state' => 'setConnectionState',
        'instance_id' => 'setInstanceId',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'user_name_like' => 'setUserNameLike',
        'user_name_specify_list' => 'setUserNameSpecifyList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id_like' => 'getClientIdLike',
        'client_id_specify_list' => 'getClientIdSpecifyList',
        'connection_state' => 'getConnectionState',
        'instance_id' => 'getInstanceId',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'user_name_like' => 'getUserNameLike',
        'user_name_specify_list' => 'getUserNameSpecifyList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONNECTION_STATE_ONLINE = 'Online';
    const CONNECTION_STATE_OFFLINE = 'Offline';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionStateAllowableValues()
    {
        return [
            self::CONNECTION_STATE_ONLINE,
            self::CONNECTION_STATE_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id_like'] = isset($data['client_id_like']) ? $data['client_id_like'] : null;
        $this->container['client_id_specify_list'] = isset($data['client_id_specify_list']) ? $data['client_id_specify_list'] : null;
        $this->container['connection_state'] = isset($data['connection_state']) ? $data['connection_state'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['user_name_like'] = isset($data['user_name_like']) ? $data['user_name_like'] : null;
        $this->container['user_name_specify_list'] = isset($data['user_name_specify_list']) ? $data['user_name_specify_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getConnectionStateAllowableValues();
        if (!is_null($this->container['connection_state']) && !in_array($this->container['connection_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'connection_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id_like
     *
     * @return string
     */
    public function getClientIdLike()
    {
        return $this->container['client_id_like'];
    }

    /**
     * Sets client_id_like
     *
     * @param string $client_id_like client_id_like
     *
     * @return $this
     */
    public function setClientIdLike($client_id_like)
    {
        $this->container['client_id_like'] = $client_id_like;

        return $this;
    }

    /**
     * Gets client_id_specify_list
     *
     * @return string[]
     */
    public function getClientIdSpecifyList()
    {
        return $this->container['client_id_specify_list'];
    }

    /**
     * Sets client_id_specify_list
     *
     * @param string[] $client_id_specify_list client_id_specify_list
     *
     * @return $this
     */
    public function setClientIdSpecifyList($client_id_specify_list)
    {
        $this->container['client_id_specify_list'] = $client_id_specify_list;

        return $this;
    }

    /**
     * Gets connection_state
     *
     * @return string
     */
    public function getConnectionState()
    {
        return $this->container['connection_state'];
    }

    /**
     * Sets connection_state
     *
     * @param string $connection_state connection_state
     *
     * @return $this
     */
    public function setConnectionState($connection_state)
    {
        $allowedValues = $this->getConnectionStateAllowableValues();
        if (!is_null($connection_state) && !in_array($connection_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'connection_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connection_state'] = $connection_state;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets user_name_like
     *
     * @return string
     */
    public function getUserNameLike()
    {
        return $this->container['user_name_like'];
    }

    /**
     * Sets user_name_like
     *
     * @param string $user_name_like user_name_like
     *
     * @return $this
     */
    public function setUserNameLike($user_name_like)
    {
        $this->container['user_name_like'] = $user_name_like;

        return $this;
    }

    /**
     * Gets user_name_specify_list
     *
     * @return string[]
     */
    public function getUserNameSpecifyList()
    {
        return $this->container['user_name_specify_list'];
    }

    /**
     * Sets user_name_specify_list
     *
     * @param string[] $user_name_specify_list user_name_specify_list
     *
     * @return $this
     */
    public function setUserNameSpecifyList($user_name_specify_list)
    {
        $this->container['user_name_specify_list'] = $user_name_specify_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

