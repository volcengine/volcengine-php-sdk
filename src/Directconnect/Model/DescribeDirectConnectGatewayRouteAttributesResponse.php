<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDirectConnectGatewayRouteAttributesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDirectConnectGatewayRouteAttributesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'creation_time' => 'string',
        'destination_cidr_block' => 'string',
        'direct_connect_gateway_id' => 'string',
        'direct_connect_gateway_route_id' => 'string',
        'next_hop_id' => 'string',
        'next_hop_type' => 'string',
        'request_id' => 'string',
        'route_type' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'creation_time' => null,
        'destination_cidr_block' => null,
        'direct_connect_gateway_id' => null,
        'direct_connect_gateway_route_id' => null,
        'next_hop_id' => null,
        'next_hop_type' => null,
        'request_id' => null,
        'route_type' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'creation_time' => 'CreationTime',
        'destination_cidr_block' => 'DestinationCidrBlock',
        'direct_connect_gateway_id' => 'DirectConnectGatewayId',
        'direct_connect_gateway_route_id' => 'DirectConnectGatewayRouteId',
        'next_hop_id' => 'NextHopId',
        'next_hop_type' => 'NextHopType',
        'request_id' => 'RequestId',
        'route_type' => 'RouteType',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'creation_time' => 'setCreationTime',
        'destination_cidr_block' => 'setDestinationCidrBlock',
        'direct_connect_gateway_id' => 'setDirectConnectGatewayId',
        'direct_connect_gateway_route_id' => 'setDirectConnectGatewayRouteId',
        'next_hop_id' => 'setNextHopId',
        'next_hop_type' => 'setNextHopType',
        'request_id' => 'setRequestId',
        'route_type' => 'setRouteType',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'creation_time' => 'getCreationTime',
        'destination_cidr_block' => 'getDestinationCidrBlock',
        'direct_connect_gateway_id' => 'getDirectConnectGatewayId',
        'direct_connect_gateway_route_id' => 'getDirectConnectGatewayRouteId',
        'next_hop_id' => 'getNextHopId',
        'next_hop_type' => 'getNextHopType',
        'request_id' => 'getRequestId',
        'route_type' => 'getRouteType',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['destination_cidr_block'] = isset($data['destination_cidr_block']) ? $data['destination_cidr_block'] : null;
        $this->container['direct_connect_gateway_id'] = isset($data['direct_connect_gateway_id']) ? $data['direct_connect_gateway_id'] : null;
        $this->container['direct_connect_gateway_route_id'] = isset($data['direct_connect_gateway_route_id']) ? $data['direct_connect_gateway_route_id'] : null;
        $this->container['next_hop_id'] = isset($data['next_hop_id']) ? $data['next_hop_id'] : null;
        $this->container['next_hop_type'] = isset($data['next_hop_type']) ? $data['next_hop_type'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['route_type'] = isset($data['route_type']) ? $data['route_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets destination_cidr_block
     *
     * @return string
     */
    public function getDestinationCidrBlock()
    {
        return $this->container['destination_cidr_block'];
    }

    /**
     * Sets destination_cidr_block
     *
     * @param string $destination_cidr_block destination_cidr_block
     *
     * @return $this
     */
    public function setDestinationCidrBlock($destination_cidr_block)
    {
        $this->container['destination_cidr_block'] = $destination_cidr_block;

        return $this;
    }

    /**
     * Gets direct_connect_gateway_id
     *
     * @return string
     */
    public function getDirectConnectGatewayId()
    {
        return $this->container['direct_connect_gateway_id'];
    }

    /**
     * Sets direct_connect_gateway_id
     *
     * @param string $direct_connect_gateway_id direct_connect_gateway_id
     *
     * @return $this
     */
    public function setDirectConnectGatewayId($direct_connect_gateway_id)
    {
        $this->container['direct_connect_gateway_id'] = $direct_connect_gateway_id;

        return $this;
    }

    /**
     * Gets direct_connect_gateway_route_id
     *
     * @return string
     */
    public function getDirectConnectGatewayRouteId()
    {
        return $this->container['direct_connect_gateway_route_id'];
    }

    /**
     * Sets direct_connect_gateway_route_id
     *
     * @param string $direct_connect_gateway_route_id direct_connect_gateway_route_id
     *
     * @return $this
     */
    public function setDirectConnectGatewayRouteId($direct_connect_gateway_route_id)
    {
        $this->container['direct_connect_gateway_route_id'] = $direct_connect_gateway_route_id;

        return $this;
    }

    /**
     * Gets next_hop_id
     *
     * @return string
     */
    public function getNextHopId()
    {
        return $this->container['next_hop_id'];
    }

    /**
     * Sets next_hop_id
     *
     * @param string $next_hop_id next_hop_id
     *
     * @return $this
     */
    public function setNextHopId($next_hop_id)
    {
        $this->container['next_hop_id'] = $next_hop_id;

        return $this;
    }

    /**
     * Gets next_hop_type
     *
     * @return string
     */
    public function getNextHopType()
    {
        return $this->container['next_hop_type'];
    }

    /**
     * Sets next_hop_type
     *
     * @param string $next_hop_type next_hop_type
     *
     * @return $this
     */
    public function setNextHopType($next_hop_type)
    {
        $this->container['next_hop_type'] = $next_hop_type;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets route_type
     *
     * @return string
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param string $route_type route_type
     *
     * @return $this
     */
    public function setRouteType($route_type)
    {
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

