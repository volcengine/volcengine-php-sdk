<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateDirectConnectVirtualInterfaceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDirectConnectVirtualInterfaceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bandwidth' => 'int',
        'bfd_detect_interval' => 'int',
        'bfd_detect_multiplier' => 'int',
        'description' => 'string',
        'direct_connect_connection_id' => 'string',
        'direct_connect_gateway_id' => 'string',
        'enable_bfd' => 'bool',
        'enable_bfd_echo' => 'bool',
        'enable_nqa' => 'bool',
        'local_ip' => 'string',
        'local_ipv6_ip' => 'string',
        'nqa_detect_interval' => 'int',
        'nqa_detect_multiplier' => 'int',
        'peer_ip' => 'string',
        'peer_ipv6_ip' => 'string',
        'route_type' => 'string',
        'tags' => '\Volcengine\Directconnect\Model\TagForCreateDirectConnectVirtualInterfaceInput[]',
        'virtual_interface_name' => 'string',
        'vlan_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bandwidth' => null,
        'bfd_detect_interval' => null,
        'bfd_detect_multiplier' => null,
        'description' => null,
        'direct_connect_connection_id' => null,
        'direct_connect_gateway_id' => null,
        'enable_bfd' => null,
        'enable_bfd_echo' => null,
        'enable_nqa' => null,
        'local_ip' => null,
        'local_ipv6_ip' => null,
        'nqa_detect_interval' => null,
        'nqa_detect_multiplier' => null,
        'peer_ip' => null,
        'peer_ipv6_ip' => null,
        'route_type' => null,
        'tags' => null,
        'virtual_interface_name' => null,
        'vlan_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bandwidth' => 'Bandwidth',
        'bfd_detect_interval' => 'BfdDetectInterval',
        'bfd_detect_multiplier' => 'BfdDetectMultiplier',
        'description' => 'Description',
        'direct_connect_connection_id' => 'DirectConnectConnectionId',
        'direct_connect_gateway_id' => 'DirectConnectGatewayId',
        'enable_bfd' => 'EnableBfd',
        'enable_bfd_echo' => 'EnableBfdEcho',
        'enable_nqa' => 'EnableNqa',
        'local_ip' => 'LocalIp',
        'local_ipv6_ip' => 'LocalIpv6Ip',
        'nqa_detect_interval' => 'NqaDetectInterval',
        'nqa_detect_multiplier' => 'NqaDetectMultiplier',
        'peer_ip' => 'PeerIp',
        'peer_ipv6_ip' => 'PeerIpv6Ip',
        'route_type' => 'RouteType',
        'tags' => 'Tags',
        'virtual_interface_name' => 'VirtualInterfaceName',
        'vlan_id' => 'VlanId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bandwidth' => 'setBandwidth',
        'bfd_detect_interval' => 'setBfdDetectInterval',
        'bfd_detect_multiplier' => 'setBfdDetectMultiplier',
        'description' => 'setDescription',
        'direct_connect_connection_id' => 'setDirectConnectConnectionId',
        'direct_connect_gateway_id' => 'setDirectConnectGatewayId',
        'enable_bfd' => 'setEnableBfd',
        'enable_bfd_echo' => 'setEnableBfdEcho',
        'enable_nqa' => 'setEnableNqa',
        'local_ip' => 'setLocalIp',
        'local_ipv6_ip' => 'setLocalIpv6Ip',
        'nqa_detect_interval' => 'setNqaDetectInterval',
        'nqa_detect_multiplier' => 'setNqaDetectMultiplier',
        'peer_ip' => 'setPeerIp',
        'peer_ipv6_ip' => 'setPeerIpv6Ip',
        'route_type' => 'setRouteType',
        'tags' => 'setTags',
        'virtual_interface_name' => 'setVirtualInterfaceName',
        'vlan_id' => 'setVlanId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bandwidth' => 'getBandwidth',
        'bfd_detect_interval' => 'getBfdDetectInterval',
        'bfd_detect_multiplier' => 'getBfdDetectMultiplier',
        'description' => 'getDescription',
        'direct_connect_connection_id' => 'getDirectConnectConnectionId',
        'direct_connect_gateway_id' => 'getDirectConnectGatewayId',
        'enable_bfd' => 'getEnableBfd',
        'enable_bfd_echo' => 'getEnableBfdEcho',
        'enable_nqa' => 'getEnableNqa',
        'local_ip' => 'getLocalIp',
        'local_ipv6_ip' => 'getLocalIpv6Ip',
        'nqa_detect_interval' => 'getNqaDetectInterval',
        'nqa_detect_multiplier' => 'getNqaDetectMultiplier',
        'peer_ip' => 'getPeerIp',
        'peer_ipv6_ip' => 'getPeerIpv6Ip',
        'route_type' => 'getRouteType',
        'tags' => 'getTags',
        'virtual_interface_name' => 'getVirtualInterfaceName',
        'vlan_id' => 'getVlanId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROUTE_TYPE__STATIC = 'Static';
    const ROUTE_TYPE_BGP = 'BGP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteTypeAllowableValues()
    {
        return [
            self::ROUTE_TYPE__STATIC,
            self::ROUTE_TYPE_BGP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['bfd_detect_interval'] = isset($data['bfd_detect_interval']) ? $data['bfd_detect_interval'] : null;
        $this->container['bfd_detect_multiplier'] = isset($data['bfd_detect_multiplier']) ? $data['bfd_detect_multiplier'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['direct_connect_connection_id'] = isset($data['direct_connect_connection_id']) ? $data['direct_connect_connection_id'] : null;
        $this->container['direct_connect_gateway_id'] = isset($data['direct_connect_gateway_id']) ? $data['direct_connect_gateway_id'] : null;
        $this->container['enable_bfd'] = isset($data['enable_bfd']) ? $data['enable_bfd'] : null;
        $this->container['enable_bfd_echo'] = isset($data['enable_bfd_echo']) ? $data['enable_bfd_echo'] : null;
        $this->container['enable_nqa'] = isset($data['enable_nqa']) ? $data['enable_nqa'] : null;
        $this->container['local_ip'] = isset($data['local_ip']) ? $data['local_ip'] : null;
        $this->container['local_ipv6_ip'] = isset($data['local_ipv6_ip']) ? $data['local_ipv6_ip'] : null;
        $this->container['nqa_detect_interval'] = isset($data['nqa_detect_interval']) ? $data['nqa_detect_interval'] : null;
        $this->container['nqa_detect_multiplier'] = isset($data['nqa_detect_multiplier']) ? $data['nqa_detect_multiplier'] : null;
        $this->container['peer_ip'] = isset($data['peer_ip']) ? $data['peer_ip'] : null;
        $this->container['peer_ipv6_ip'] = isset($data['peer_ipv6_ip']) ? $data['peer_ipv6_ip'] : null;
        $this->container['route_type'] = isset($data['route_type']) ? $data['route_type'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['virtual_interface_name'] = isset($data['virtual_interface_name']) ? $data['virtual_interface_name'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['direct_connect_connection_id'] === null) {
            $invalidProperties[] = "'direct_connect_connection_id' can't be null";
        }
        if ($this->container['direct_connect_gateway_id'] === null) {
            $invalidProperties[] = "'direct_connect_gateway_id' can't be null";
        }
        if ($this->container['local_ip'] === null) {
            $invalidProperties[] = "'local_ip' can't be null";
        }
        if ($this->container['peer_ip'] === null) {
            $invalidProperties[] = "'peer_ip' can't be null";
        }
        $allowedValues = $this->getRouteTypeAllowableValues();
        if (!is_null($this->container['route_type']) && !in_array($this->container['route_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'route_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vlan_id'] === null) {
            $invalidProperties[] = "'vlan_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets bfd_detect_interval
     *
     * @return int
     */
    public function getBfdDetectInterval()
    {
        return $this->container['bfd_detect_interval'];
    }

    /**
     * Sets bfd_detect_interval
     *
     * @param int $bfd_detect_interval bfd_detect_interval
     *
     * @return $this
     */
    public function setBfdDetectInterval($bfd_detect_interval)
    {
        $this->container['bfd_detect_interval'] = $bfd_detect_interval;

        return $this;
    }

    /**
     * Gets bfd_detect_multiplier
     *
     * @return int
     */
    public function getBfdDetectMultiplier()
    {
        return $this->container['bfd_detect_multiplier'];
    }

    /**
     * Sets bfd_detect_multiplier
     *
     * @param int $bfd_detect_multiplier bfd_detect_multiplier
     *
     * @return $this
     */
    public function setBfdDetectMultiplier($bfd_detect_multiplier)
    {
        $this->container['bfd_detect_multiplier'] = $bfd_detect_multiplier;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direct_connect_connection_id
     *
     * @return string
     */
    public function getDirectConnectConnectionId()
    {
        return $this->container['direct_connect_connection_id'];
    }

    /**
     * Sets direct_connect_connection_id
     *
     * @param string $direct_connect_connection_id direct_connect_connection_id
     *
     * @return $this
     */
    public function setDirectConnectConnectionId($direct_connect_connection_id)
    {
        $this->container['direct_connect_connection_id'] = $direct_connect_connection_id;

        return $this;
    }

    /**
     * Gets direct_connect_gateway_id
     *
     * @return string
     */
    public function getDirectConnectGatewayId()
    {
        return $this->container['direct_connect_gateway_id'];
    }

    /**
     * Sets direct_connect_gateway_id
     *
     * @param string $direct_connect_gateway_id direct_connect_gateway_id
     *
     * @return $this
     */
    public function setDirectConnectGatewayId($direct_connect_gateway_id)
    {
        $this->container['direct_connect_gateway_id'] = $direct_connect_gateway_id;

        return $this;
    }

    /**
     * Gets enable_bfd
     *
     * @return bool
     */
    public function getEnableBfd()
    {
        return $this->container['enable_bfd'];
    }

    /**
     * Sets enable_bfd
     *
     * @param bool $enable_bfd enable_bfd
     *
     * @return $this
     */
    public function setEnableBfd($enable_bfd)
    {
        $this->container['enable_bfd'] = $enable_bfd;

        return $this;
    }

    /**
     * Gets enable_bfd_echo
     *
     * @return bool
     */
    public function getEnableBfdEcho()
    {
        return $this->container['enable_bfd_echo'];
    }

    /**
     * Sets enable_bfd_echo
     *
     * @param bool $enable_bfd_echo enable_bfd_echo
     *
     * @return $this
     */
    public function setEnableBfdEcho($enable_bfd_echo)
    {
        $this->container['enable_bfd_echo'] = $enable_bfd_echo;

        return $this;
    }

    /**
     * Gets enable_nqa
     *
     * @return bool
     */
    public function getEnableNqa()
    {
        return $this->container['enable_nqa'];
    }

    /**
     * Sets enable_nqa
     *
     * @param bool $enable_nqa enable_nqa
     *
     * @return $this
     */
    public function setEnableNqa($enable_nqa)
    {
        $this->container['enable_nqa'] = $enable_nqa;

        return $this;
    }

    /**
     * Gets local_ip
     *
     * @return string
     */
    public function getLocalIp()
    {
        return $this->container['local_ip'];
    }

    /**
     * Sets local_ip
     *
     * @param string $local_ip local_ip
     *
     * @return $this
     */
    public function setLocalIp($local_ip)
    {
        $this->container['local_ip'] = $local_ip;

        return $this;
    }

    /**
     * Gets local_ipv6_ip
     *
     * @return string
     */
    public function getLocalIpv6Ip()
    {
        return $this->container['local_ipv6_ip'];
    }

    /**
     * Sets local_ipv6_ip
     *
     * @param string $local_ipv6_ip local_ipv6_ip
     *
     * @return $this
     */
    public function setLocalIpv6Ip($local_ipv6_ip)
    {
        $this->container['local_ipv6_ip'] = $local_ipv6_ip;

        return $this;
    }

    /**
     * Gets nqa_detect_interval
     *
     * @return int
     */
    public function getNqaDetectInterval()
    {
        return $this->container['nqa_detect_interval'];
    }

    /**
     * Sets nqa_detect_interval
     *
     * @param int $nqa_detect_interval nqa_detect_interval
     *
     * @return $this
     */
    public function setNqaDetectInterval($nqa_detect_interval)
    {
        $this->container['nqa_detect_interval'] = $nqa_detect_interval;

        return $this;
    }

    /**
     * Gets nqa_detect_multiplier
     *
     * @return int
     */
    public function getNqaDetectMultiplier()
    {
        return $this->container['nqa_detect_multiplier'];
    }

    /**
     * Sets nqa_detect_multiplier
     *
     * @param int $nqa_detect_multiplier nqa_detect_multiplier
     *
     * @return $this
     */
    public function setNqaDetectMultiplier($nqa_detect_multiplier)
    {
        $this->container['nqa_detect_multiplier'] = $nqa_detect_multiplier;

        return $this;
    }

    /**
     * Gets peer_ip
     *
     * @return string
     */
    public function getPeerIp()
    {
        return $this->container['peer_ip'];
    }

    /**
     * Sets peer_ip
     *
     * @param string $peer_ip peer_ip
     *
     * @return $this
     */
    public function setPeerIp($peer_ip)
    {
        $this->container['peer_ip'] = $peer_ip;

        return $this;
    }

    /**
     * Gets peer_ipv6_ip
     *
     * @return string
     */
    public function getPeerIpv6Ip()
    {
        return $this->container['peer_ipv6_ip'];
    }

    /**
     * Sets peer_ipv6_ip
     *
     * @param string $peer_ipv6_ip peer_ipv6_ip
     *
     * @return $this
     */
    public function setPeerIpv6Ip($peer_ipv6_ip)
    {
        $this->container['peer_ipv6_ip'] = $peer_ipv6_ip;

        return $this;
    }

    /**
     * Gets route_type
     *
     * @return string
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param string $route_type route_type
     *
     * @return $this
     */
    public function setRouteType($route_type)
    {
        $allowedValues = $this->getRouteTypeAllowableValues();
        if (!is_null($route_type) && !in_array($route_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'route_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Directconnect\Model\TagForCreateDirectConnectVirtualInterfaceInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Directconnect\Model\TagForCreateDirectConnectVirtualInterfaceInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets virtual_interface_name
     *
     * @return string
     */
    public function getVirtualInterfaceName()
    {
        return $this->container['virtual_interface_name'];
    }

    /**
     * Sets virtual_interface_name
     *
     * @param string $virtual_interface_name virtual_interface_name
     *
     * @return $this
     */
    public function setVirtualInterfaceName($virtual_interface_name)
    {
        $this->container['virtual_interface_name'] = $virtual_interface_name;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

