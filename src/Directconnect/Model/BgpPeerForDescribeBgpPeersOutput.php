<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BgpPeerForDescribeBgpPeersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BgpPeerForDescribeBgpPeersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'auth_key' => 'string',
        'bgp_peer_id' => 'string',
        'bgp_peer_name' => 'string',
        'creation_time' => 'string',
        'description' => 'string',
        'ip_version' => 'string',
        'local_asn' => 'int',
        'remote_asn' => 'int',
        'session_status' => 'string',
        'status' => 'string',
        'update_time' => 'string',
        'virtual_interface_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'auth_key' => null,
        'bgp_peer_id' => null,
        'bgp_peer_name' => null,
        'creation_time' => null,
        'description' => null,
        'ip_version' => null,
        'local_asn' => null,
        'remote_asn' => null,
        'session_status' => null,
        'status' => null,
        'update_time' => null,
        'virtual_interface_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'auth_key' => 'AuthKey',
        'bgp_peer_id' => 'BgpPeerId',
        'bgp_peer_name' => 'BgpPeerName',
        'creation_time' => 'CreationTime',
        'description' => 'Description',
        'ip_version' => 'IpVersion',
        'local_asn' => 'LocalAsn',
        'remote_asn' => 'RemoteAsn',
        'session_status' => 'SessionStatus',
        'status' => 'Status',
        'update_time' => 'UpdateTime',
        'virtual_interface_id' => 'VirtualInterfaceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'auth_key' => 'setAuthKey',
        'bgp_peer_id' => 'setBgpPeerId',
        'bgp_peer_name' => 'setBgpPeerName',
        'creation_time' => 'setCreationTime',
        'description' => 'setDescription',
        'ip_version' => 'setIpVersion',
        'local_asn' => 'setLocalAsn',
        'remote_asn' => 'setRemoteAsn',
        'session_status' => 'setSessionStatus',
        'status' => 'setStatus',
        'update_time' => 'setUpdateTime',
        'virtual_interface_id' => 'setVirtualInterfaceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'auth_key' => 'getAuthKey',
        'bgp_peer_id' => 'getBgpPeerId',
        'bgp_peer_name' => 'getBgpPeerName',
        'creation_time' => 'getCreationTime',
        'description' => 'getDescription',
        'ip_version' => 'getIpVersion',
        'local_asn' => 'getLocalAsn',
        'remote_asn' => 'getRemoteAsn',
        'session_status' => 'getSessionStatus',
        'status' => 'getStatus',
        'update_time' => 'getUpdateTime',
        'virtual_interface_id' => 'getVirtualInterfaceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['auth_key'] = isset($data['auth_key']) ? $data['auth_key'] : null;
        $this->container['bgp_peer_id'] = isset($data['bgp_peer_id']) ? $data['bgp_peer_id'] : null;
        $this->container['bgp_peer_name'] = isset($data['bgp_peer_name']) ? $data['bgp_peer_name'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ip_version'] = isset($data['ip_version']) ? $data['ip_version'] : null;
        $this->container['local_asn'] = isset($data['local_asn']) ? $data['local_asn'] : null;
        $this->container['remote_asn'] = isset($data['remote_asn']) ? $data['remote_asn'] : null;
        $this->container['session_status'] = isset($data['session_status']) ? $data['session_status'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['virtual_interface_id'] = isset($data['virtual_interface_id']) ? $data['virtual_interface_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets auth_key
     *
     * @return string
     */
    public function getAuthKey()
    {
        return $this->container['auth_key'];
    }

    /**
     * Sets auth_key
     *
     * @param string $auth_key auth_key
     *
     * @return $this
     */
    public function setAuthKey($auth_key)
    {
        $this->container['auth_key'] = $auth_key;

        return $this;
    }

    /**
     * Gets bgp_peer_id
     *
     * @return string
     */
    public function getBgpPeerId()
    {
        return $this->container['bgp_peer_id'];
    }

    /**
     * Sets bgp_peer_id
     *
     * @param string $bgp_peer_id bgp_peer_id
     *
     * @return $this
     */
    public function setBgpPeerId($bgp_peer_id)
    {
        $this->container['bgp_peer_id'] = $bgp_peer_id;

        return $this;
    }

    /**
     * Gets bgp_peer_name
     *
     * @return string
     */
    public function getBgpPeerName()
    {
        return $this->container['bgp_peer_name'];
    }

    /**
     * Sets bgp_peer_name
     *
     * @param string $bgp_peer_name bgp_peer_name
     *
     * @return $this
     */
    public function setBgpPeerName($bgp_peer_name)
    {
        $this->container['bgp_peer_name'] = $bgp_peer_name;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ip_version
     *
     * @return string
     */
    public function getIpVersion()
    {
        return $this->container['ip_version'];
    }

    /**
     * Sets ip_version
     *
     * @param string $ip_version ip_version
     *
     * @return $this
     */
    public function setIpVersion($ip_version)
    {
        $this->container['ip_version'] = $ip_version;

        return $this;
    }

    /**
     * Gets local_asn
     *
     * @return int
     */
    public function getLocalAsn()
    {
        return $this->container['local_asn'];
    }

    /**
     * Sets local_asn
     *
     * @param int $local_asn local_asn
     *
     * @return $this
     */
    public function setLocalAsn($local_asn)
    {
        $this->container['local_asn'] = $local_asn;

        return $this;
    }

    /**
     * Gets remote_asn
     *
     * @return int
     */
    public function getRemoteAsn()
    {
        return $this->container['remote_asn'];
    }

    /**
     * Sets remote_asn
     *
     * @param int $remote_asn remote_asn
     *
     * @return $this
     */
    public function setRemoteAsn($remote_asn)
    {
        $this->container['remote_asn'] = $remote_asn;

        return $this;
    }

    /**
     * Gets session_status
     *
     * @return string
     */
    public function getSessionStatus()
    {
        return $this->container['session_status'];
    }

    /**
     * Sets session_status
     *
     * @param string $session_status session_status
     *
     * @return $this
     */
    public function setSessionStatus($session_status)
    {
        $this->container['session_status'] = $session_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets virtual_interface_id
     *
     * @return string
     */
    public function getVirtualInterfaceId()
    {
        return $this->container['virtual_interface_id'];
    }

    /**
     * Sets virtual_interface_id
     *
     * @param string $virtual_interface_id virtual_interface_id
     *
     * @return $this
     */
    public function setVirtualInterfaceId($virtual_interface_id)
    {
        $this->container['virtual_interface_id'] = $virtual_interface_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

