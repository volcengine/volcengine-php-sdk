<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ApplyDirectConnectConnectionLoaRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplyDirectConnectConnectionLoaRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'string',
        'bandwidth' => 'int',
        'client_token' => 'string',
        'company_name' => 'string',
        'construction_time' => 'string',
        'direct_connect_connection_id' => 'string',
        'engineers' => '\Volcengine\Directconnect\Model\EngineerForApplyDirectConnectConnectionLoaInput[]',
        'line_type' => 'string',
        'peer_location' => 'string',
        'system_integrator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => null,
        'bandwidth' => null,
        'client_token' => null,
        'company_name' => null,
        'construction_time' => null,
        'direct_connect_connection_id' => null,
        'engineers' => null,
        'line_type' => null,
        'peer_location' => null,
        'system_integrator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'Action',
        'bandwidth' => 'Bandwidth',
        'client_token' => 'ClientToken',
        'company_name' => 'CompanyName',
        'construction_time' => 'ConstructionTime',
        'direct_connect_connection_id' => 'DirectConnectConnectionId',
        'engineers' => 'Engineers',
        'line_type' => 'LineType',
        'peer_location' => 'PeerLocation',
        'system_integrator' => 'SystemIntegrator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'bandwidth' => 'setBandwidth',
        'client_token' => 'setClientToken',
        'company_name' => 'setCompanyName',
        'construction_time' => 'setConstructionTime',
        'direct_connect_connection_id' => 'setDirectConnectConnectionId',
        'engineers' => 'setEngineers',
        'line_type' => 'setLineType',
        'peer_location' => 'setPeerLocation',
        'system_integrator' => 'setSystemIntegrator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'bandwidth' => 'getBandwidth',
        'client_token' => 'getClientToken',
        'company_name' => 'getCompanyName',
        'construction_time' => 'getConstructionTime',
        'direct_connect_connection_id' => 'getDirectConnectConnectionId',
        'engineers' => 'getEngineers',
        'line_type' => 'getLineType',
        'peer_location' => 'getPeerLocation',
        'system_integrator' => 'getSystemIntegrator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['construction_time'] = isset($data['construction_time']) ? $data['construction_time'] : null;
        $this->container['direct_connect_connection_id'] = isset($data['direct_connect_connection_id']) ? $data['direct_connect_connection_id'] : null;
        $this->container['engineers'] = isset($data['engineers']) ? $data['engineers'] : null;
        $this->container['line_type'] = isset($data['line_type']) ? $data['line_type'] : null;
        $this->container['peer_location'] = isset($data['peer_location']) ? $data['peer_location'] : null;
        $this->container['system_integrator'] = isset($data['system_integrator']) ? $data['system_integrator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['construction_time'] === null) {
            $invalidProperties[] = "'construction_time' can't be null";
        }
        if ($this->container['direct_connect_connection_id'] === null) {
            $invalidProperties[] = "'direct_connect_connection_id' can't be null";
        }
        if ($this->container['line_type'] === null) {
            $invalidProperties[] = "'line_type' can't be null";
        }
        if ($this->container['system_integrator'] === null) {
            $invalidProperties[] = "'system_integrator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets construction_time
     *
     * @return string
     */
    public function getConstructionTime()
    {
        return $this->container['construction_time'];
    }

    /**
     * Sets construction_time
     *
     * @param string $construction_time construction_time
     *
     * @return $this
     */
    public function setConstructionTime($construction_time)
    {
        $this->container['construction_time'] = $construction_time;

        return $this;
    }

    /**
     * Gets direct_connect_connection_id
     *
     * @return string
     */
    public function getDirectConnectConnectionId()
    {
        return $this->container['direct_connect_connection_id'];
    }

    /**
     * Sets direct_connect_connection_id
     *
     * @param string $direct_connect_connection_id direct_connect_connection_id
     *
     * @return $this
     */
    public function setDirectConnectConnectionId($direct_connect_connection_id)
    {
        $this->container['direct_connect_connection_id'] = $direct_connect_connection_id;

        return $this;
    }

    /**
     * Gets engineers
     *
     * @return \Volcengine\Directconnect\Model\EngineerForApplyDirectConnectConnectionLoaInput[]
     */
    public function getEngineers()
    {
        return $this->container['engineers'];
    }

    /**
     * Sets engineers
     *
     * @param \Volcengine\Directconnect\Model\EngineerForApplyDirectConnectConnectionLoaInput[] $engineers engineers
     *
     * @return $this
     */
    public function setEngineers($engineers)
    {
        $this->container['engineers'] = $engineers;

        return $this;
    }

    /**
     * Gets line_type
     *
     * @return string
     */
    public function getLineType()
    {
        return $this->container['line_type'];
    }

    /**
     * Sets line_type
     *
     * @param string $line_type line_type
     *
     * @return $this
     */
    public function setLineType($line_type)
    {
        $this->container['line_type'] = $line_type;

        return $this;
    }

    /**
     * Gets peer_location
     *
     * @return string
     */
    public function getPeerLocation()
    {
        return $this->container['peer_location'];
    }

    /**
     * Sets peer_location
     *
     * @param string $peer_location peer_location
     *
     * @return $this
     */
    public function setPeerLocation($peer_location)
    {
        $this->container['peer_location'] = $peer_location;

        return $this;
    }

    /**
     * Gets system_integrator
     *
     * @return string
     */
    public function getSystemIntegrator()
    {
        return $this->container['system_integrator'];
    }

    /**
     * Sets system_integrator
     *
     * @param string $system_integrator system_integrator
     *
     * @return $this
     */
    public function setSystemIntegrator($system_integrator)
    {
        $this->container['system_integrator'] = $system_integrator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

