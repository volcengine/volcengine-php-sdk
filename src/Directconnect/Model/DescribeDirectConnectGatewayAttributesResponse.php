<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDirectConnectGatewayAttributesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDirectConnectGatewayAttributesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'associate_cens' => '\Volcengine\Directconnect\Model\AssociateCenForDescribeDirectConnectGatewayAttributesOutput[]',
        'bgp_asn' => 'int',
        'business_status' => 'string',
        'creation_time' => 'string',
        'deleted_time' => 'string',
        'description' => 'string',
        'direct_connect_gateway_id' => 'string',
        'direct_connect_gateway_name' => 'string',
        'enable_ipv6' => 'bool',
        'lock_reason' => 'string',
        'overdue_time' => 'string',
        'request_id' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Directconnect\Model\TagForDescribeDirectConnectGatewayAttributesOutput[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'associate_cens' => null,
        'bgp_asn' => null,
        'business_status' => null,
        'creation_time' => null,
        'deleted_time' => null,
        'description' => null,
        'direct_connect_gateway_id' => null,
        'direct_connect_gateway_name' => null,
        'enable_ipv6' => null,
        'lock_reason' => null,
        'overdue_time' => null,
        'request_id' => null,
        'status' => null,
        'tags' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'associate_cens' => 'AssociateCens',
        'bgp_asn' => 'BgpAsn',
        'business_status' => 'BusinessStatus',
        'creation_time' => 'CreationTime',
        'deleted_time' => 'DeletedTime',
        'description' => 'Description',
        'direct_connect_gateway_id' => 'DirectConnectGatewayId',
        'direct_connect_gateway_name' => 'DirectConnectGatewayName',
        'enable_ipv6' => 'EnableIpv6',
        'lock_reason' => 'LockReason',
        'overdue_time' => 'OverdueTime',
        'request_id' => 'RequestId',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'associate_cens' => 'setAssociateCens',
        'bgp_asn' => 'setBgpAsn',
        'business_status' => 'setBusinessStatus',
        'creation_time' => 'setCreationTime',
        'deleted_time' => 'setDeletedTime',
        'description' => 'setDescription',
        'direct_connect_gateway_id' => 'setDirectConnectGatewayId',
        'direct_connect_gateway_name' => 'setDirectConnectGatewayName',
        'enable_ipv6' => 'setEnableIpv6',
        'lock_reason' => 'setLockReason',
        'overdue_time' => 'setOverdueTime',
        'request_id' => 'setRequestId',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'associate_cens' => 'getAssociateCens',
        'bgp_asn' => 'getBgpAsn',
        'business_status' => 'getBusinessStatus',
        'creation_time' => 'getCreationTime',
        'deleted_time' => 'getDeletedTime',
        'description' => 'getDescription',
        'direct_connect_gateway_id' => 'getDirectConnectGatewayId',
        'direct_connect_gateway_name' => 'getDirectConnectGatewayName',
        'enable_ipv6' => 'getEnableIpv6',
        'lock_reason' => 'getLockReason',
        'overdue_time' => 'getOverdueTime',
        'request_id' => 'getRequestId',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['associate_cens'] = isset($data['associate_cens']) ? $data['associate_cens'] : null;
        $this->container['bgp_asn'] = isset($data['bgp_asn']) ? $data['bgp_asn'] : null;
        $this->container['business_status'] = isset($data['business_status']) ? $data['business_status'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['deleted_time'] = isset($data['deleted_time']) ? $data['deleted_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['direct_connect_gateway_id'] = isset($data['direct_connect_gateway_id']) ? $data['direct_connect_gateway_id'] : null;
        $this->container['direct_connect_gateway_name'] = isset($data['direct_connect_gateway_name']) ? $data['direct_connect_gateway_name'] : null;
        $this->container['enable_ipv6'] = isset($data['enable_ipv6']) ? $data['enable_ipv6'] : null;
        $this->container['lock_reason'] = isset($data['lock_reason']) ? $data['lock_reason'] : null;
        $this->container['overdue_time'] = isset($data['overdue_time']) ? $data['overdue_time'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets associate_cens
     *
     * @return \Volcengine\Directconnect\Model\AssociateCenForDescribeDirectConnectGatewayAttributesOutput[]
     */
    public function getAssociateCens()
    {
        return $this->container['associate_cens'];
    }

    /**
     * Sets associate_cens
     *
     * @param \Volcengine\Directconnect\Model\AssociateCenForDescribeDirectConnectGatewayAttributesOutput[] $associate_cens associate_cens
     *
     * @return $this
     */
    public function setAssociateCens($associate_cens)
    {
        $this->container['associate_cens'] = $associate_cens;

        return $this;
    }

    /**
     * Gets bgp_asn
     *
     * @return int
     */
    public function getBgpAsn()
    {
        return $this->container['bgp_asn'];
    }

    /**
     * Sets bgp_asn
     *
     * @param int $bgp_asn bgp_asn
     *
     * @return $this
     */
    public function setBgpAsn($bgp_asn)
    {
        $this->container['bgp_asn'] = $bgp_asn;

        return $this;
    }

    /**
     * Gets business_status
     *
     * @return string
     */
    public function getBusinessStatus()
    {
        return $this->container['business_status'];
    }

    /**
     * Sets business_status
     *
     * @param string $business_status business_status
     *
     * @return $this
     */
    public function setBusinessStatus($business_status)
    {
        $this->container['business_status'] = $business_status;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time deleted_time
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direct_connect_gateway_id
     *
     * @return string
     */
    public function getDirectConnectGatewayId()
    {
        return $this->container['direct_connect_gateway_id'];
    }

    /**
     * Sets direct_connect_gateway_id
     *
     * @param string $direct_connect_gateway_id direct_connect_gateway_id
     *
     * @return $this
     */
    public function setDirectConnectGatewayId($direct_connect_gateway_id)
    {
        $this->container['direct_connect_gateway_id'] = $direct_connect_gateway_id;

        return $this;
    }

    /**
     * Gets direct_connect_gateway_name
     *
     * @return string
     */
    public function getDirectConnectGatewayName()
    {
        return $this->container['direct_connect_gateway_name'];
    }

    /**
     * Sets direct_connect_gateway_name
     *
     * @param string $direct_connect_gateway_name direct_connect_gateway_name
     *
     * @return $this
     */
    public function setDirectConnectGatewayName($direct_connect_gateway_name)
    {
        $this->container['direct_connect_gateway_name'] = $direct_connect_gateway_name;

        return $this;
    }

    /**
     * Gets enable_ipv6
     *
     * @return bool
     */
    public function getEnableIpv6()
    {
        return $this->container['enable_ipv6'];
    }

    /**
     * Sets enable_ipv6
     *
     * @param bool $enable_ipv6 enable_ipv6
     *
     * @return $this
     */
    public function setEnableIpv6($enable_ipv6)
    {
        $this->container['enable_ipv6'] = $enable_ipv6;

        return $this;
    }

    /**
     * Gets lock_reason
     *
     * @return string
     */
    public function getLockReason()
    {
        return $this->container['lock_reason'];
    }

    /**
     * Sets lock_reason
     *
     * @param string $lock_reason lock_reason
     *
     * @return $this
     */
    public function setLockReason($lock_reason)
    {
        $this->container['lock_reason'] = $lock_reason;

        return $this;
    }

    /**
     * Gets overdue_time
     *
     * @return string
     */
    public function getOverdueTime()
    {
        return $this->container['overdue_time'];
    }

    /**
     * Sets overdue_time
     *
     * @param string $overdue_time overdue_time
     *
     * @return $this
     */
    public function setOverdueTime($overdue_time)
    {
        $this->container['overdue_time'] = $overdue_time;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Directconnect\Model\TagForDescribeDirectConnectGatewayAttributesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Directconnect\Model\TagForDescribeDirectConnectGatewayAttributesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

