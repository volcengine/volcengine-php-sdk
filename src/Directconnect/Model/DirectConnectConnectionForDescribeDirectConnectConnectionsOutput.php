<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DirectConnectConnectionForDescribeDirectConnectConnectionsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DirectConnectConnectionForDescribeDirectConnectConnectionsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'bandwidth' => 'int',
        'billing_type' => 'int',
        'business_status' => 'string',
        'connection_type' => 'string',
        'creation_time' => 'string',
        'customer_contact_email' => 'string',
        'customer_contact_phone' => 'string',
        'customer_name' => 'string',
        'deleted_time' => 'string',
        'description' => 'string',
        'direct_connect_access_point_id' => 'string',
        'direct_connect_connection_id' => 'string',
        'direct_connect_connection_name' => 'string',
        'expect_bandwidth' => 'int',
        'expired_time' => 'string',
        'line_operator' => 'string',
        'parent_connection_account_id' => 'string',
        'parent_connection_id' => 'string',
        'peer_location' => 'string',
        'port_spec' => 'string',
        'port_type' => 'string',
        'project_name' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Directconnect\Model\TagForDescribeDirectConnectConnectionsOutput[]',
        'update_time' => 'string',
        'vlan_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'bandwidth' => null,
        'billing_type' => null,
        'business_status' => null,
        'connection_type' => null,
        'creation_time' => null,
        'customer_contact_email' => null,
        'customer_contact_phone' => null,
        'customer_name' => null,
        'deleted_time' => null,
        'description' => null,
        'direct_connect_access_point_id' => null,
        'direct_connect_connection_id' => null,
        'direct_connect_connection_name' => null,
        'expect_bandwidth' => null,
        'expired_time' => null,
        'line_operator' => null,
        'parent_connection_account_id' => null,
        'parent_connection_id' => null,
        'peer_location' => null,
        'port_spec' => null,
        'port_type' => null,
        'project_name' => null,
        'status' => null,
        'tags' => null,
        'update_time' => null,
        'vlan_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'bandwidth' => 'Bandwidth',
        'billing_type' => 'BillingType',
        'business_status' => 'BusinessStatus',
        'connection_type' => 'ConnectionType',
        'creation_time' => 'CreationTime',
        'customer_contact_email' => 'CustomerContactEmail',
        'customer_contact_phone' => 'CustomerContactPhone',
        'customer_name' => 'CustomerName',
        'deleted_time' => 'DeletedTime',
        'description' => 'Description',
        'direct_connect_access_point_id' => 'DirectConnectAccessPointId',
        'direct_connect_connection_id' => 'DirectConnectConnectionId',
        'direct_connect_connection_name' => 'DirectConnectConnectionName',
        'expect_bandwidth' => 'ExpectBandwidth',
        'expired_time' => 'ExpiredTime',
        'line_operator' => 'LineOperator',
        'parent_connection_account_id' => 'ParentConnectionAccountId',
        'parent_connection_id' => 'ParentConnectionId',
        'peer_location' => 'PeerLocation',
        'port_spec' => 'PortSpec',
        'port_type' => 'PortType',
        'project_name' => 'ProjectName',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime',
        'vlan_id' => 'VlanId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'bandwidth' => 'setBandwidth',
        'billing_type' => 'setBillingType',
        'business_status' => 'setBusinessStatus',
        'connection_type' => 'setConnectionType',
        'creation_time' => 'setCreationTime',
        'customer_contact_email' => 'setCustomerContactEmail',
        'customer_contact_phone' => 'setCustomerContactPhone',
        'customer_name' => 'setCustomerName',
        'deleted_time' => 'setDeletedTime',
        'description' => 'setDescription',
        'direct_connect_access_point_id' => 'setDirectConnectAccessPointId',
        'direct_connect_connection_id' => 'setDirectConnectConnectionId',
        'direct_connect_connection_name' => 'setDirectConnectConnectionName',
        'expect_bandwidth' => 'setExpectBandwidth',
        'expired_time' => 'setExpiredTime',
        'line_operator' => 'setLineOperator',
        'parent_connection_account_id' => 'setParentConnectionAccountId',
        'parent_connection_id' => 'setParentConnectionId',
        'peer_location' => 'setPeerLocation',
        'port_spec' => 'setPortSpec',
        'port_type' => 'setPortType',
        'project_name' => 'setProjectName',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime',
        'vlan_id' => 'setVlanId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'bandwidth' => 'getBandwidth',
        'billing_type' => 'getBillingType',
        'business_status' => 'getBusinessStatus',
        'connection_type' => 'getConnectionType',
        'creation_time' => 'getCreationTime',
        'customer_contact_email' => 'getCustomerContactEmail',
        'customer_contact_phone' => 'getCustomerContactPhone',
        'customer_name' => 'getCustomerName',
        'deleted_time' => 'getDeletedTime',
        'description' => 'getDescription',
        'direct_connect_access_point_id' => 'getDirectConnectAccessPointId',
        'direct_connect_connection_id' => 'getDirectConnectConnectionId',
        'direct_connect_connection_name' => 'getDirectConnectConnectionName',
        'expect_bandwidth' => 'getExpectBandwidth',
        'expired_time' => 'getExpiredTime',
        'line_operator' => 'getLineOperator',
        'parent_connection_account_id' => 'getParentConnectionAccountId',
        'parent_connection_id' => 'getParentConnectionId',
        'peer_location' => 'getPeerLocation',
        'port_spec' => 'getPortSpec',
        'port_type' => 'getPortType',
        'project_name' => 'getProjectName',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime',
        'vlan_id' => 'getVlanId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['business_status'] = isset($data['business_status']) ? $data['business_status'] : null;
        $this->container['connection_type'] = isset($data['connection_type']) ? $data['connection_type'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['customer_contact_email'] = isset($data['customer_contact_email']) ? $data['customer_contact_email'] : null;
        $this->container['customer_contact_phone'] = isset($data['customer_contact_phone']) ? $data['customer_contact_phone'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['deleted_time'] = isset($data['deleted_time']) ? $data['deleted_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['direct_connect_access_point_id'] = isset($data['direct_connect_access_point_id']) ? $data['direct_connect_access_point_id'] : null;
        $this->container['direct_connect_connection_id'] = isset($data['direct_connect_connection_id']) ? $data['direct_connect_connection_id'] : null;
        $this->container['direct_connect_connection_name'] = isset($data['direct_connect_connection_name']) ? $data['direct_connect_connection_name'] : null;
        $this->container['expect_bandwidth'] = isset($data['expect_bandwidth']) ? $data['expect_bandwidth'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['line_operator'] = isset($data['line_operator']) ? $data['line_operator'] : null;
        $this->container['parent_connection_account_id'] = isset($data['parent_connection_account_id']) ? $data['parent_connection_account_id'] : null;
        $this->container['parent_connection_id'] = isset($data['parent_connection_id']) ? $data['parent_connection_id'] : null;
        $this->container['peer_location'] = isset($data['peer_location']) ? $data['peer_location'] : null;
        $this->container['port_spec'] = isset($data['port_spec']) ? $data['port_spec'] : null;
        $this->container['port_type'] = isset($data['port_type']) ? $data['port_type'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return int
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param int $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets business_status
     *
     * @return string
     */
    public function getBusinessStatus()
    {
        return $this->container['business_status'];
    }

    /**
     * Sets business_status
     *
     * @param string $business_status business_status
     *
     * @return $this
     */
    public function setBusinessStatus($business_status)
    {
        $this->container['business_status'] = $business_status;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type connection_type
     *
     * @return $this
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets customer_contact_email
     *
     * @return string
     */
    public function getCustomerContactEmail()
    {
        return $this->container['customer_contact_email'];
    }

    /**
     * Sets customer_contact_email
     *
     * @param string $customer_contact_email customer_contact_email
     *
     * @return $this
     */
    public function setCustomerContactEmail($customer_contact_email)
    {
        $this->container['customer_contact_email'] = $customer_contact_email;

        return $this;
    }

    /**
     * Gets customer_contact_phone
     *
     * @return string
     */
    public function getCustomerContactPhone()
    {
        return $this->container['customer_contact_phone'];
    }

    /**
     * Sets customer_contact_phone
     *
     * @param string $customer_contact_phone customer_contact_phone
     *
     * @return $this
     */
    public function setCustomerContactPhone($customer_contact_phone)
    {
        $this->container['customer_contact_phone'] = $customer_contact_phone;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time deleted_time
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direct_connect_access_point_id
     *
     * @return string
     */
    public function getDirectConnectAccessPointId()
    {
        return $this->container['direct_connect_access_point_id'];
    }

    /**
     * Sets direct_connect_access_point_id
     *
     * @param string $direct_connect_access_point_id direct_connect_access_point_id
     *
     * @return $this
     */
    public function setDirectConnectAccessPointId($direct_connect_access_point_id)
    {
        $this->container['direct_connect_access_point_id'] = $direct_connect_access_point_id;

        return $this;
    }

    /**
     * Gets direct_connect_connection_id
     *
     * @return string
     */
    public function getDirectConnectConnectionId()
    {
        return $this->container['direct_connect_connection_id'];
    }

    /**
     * Sets direct_connect_connection_id
     *
     * @param string $direct_connect_connection_id direct_connect_connection_id
     *
     * @return $this
     */
    public function setDirectConnectConnectionId($direct_connect_connection_id)
    {
        $this->container['direct_connect_connection_id'] = $direct_connect_connection_id;

        return $this;
    }

    /**
     * Gets direct_connect_connection_name
     *
     * @return string
     */
    public function getDirectConnectConnectionName()
    {
        return $this->container['direct_connect_connection_name'];
    }

    /**
     * Sets direct_connect_connection_name
     *
     * @param string $direct_connect_connection_name direct_connect_connection_name
     *
     * @return $this
     */
    public function setDirectConnectConnectionName($direct_connect_connection_name)
    {
        $this->container['direct_connect_connection_name'] = $direct_connect_connection_name;

        return $this;
    }

    /**
     * Gets expect_bandwidth
     *
     * @return int
     */
    public function getExpectBandwidth()
    {
        return $this->container['expect_bandwidth'];
    }

    /**
     * Sets expect_bandwidth
     *
     * @param int $expect_bandwidth expect_bandwidth
     *
     * @return $this
     */
    public function setExpectBandwidth($expect_bandwidth)
    {
        $this->container['expect_bandwidth'] = $expect_bandwidth;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets line_operator
     *
     * @return string
     */
    public function getLineOperator()
    {
        return $this->container['line_operator'];
    }

    /**
     * Sets line_operator
     *
     * @param string $line_operator line_operator
     *
     * @return $this
     */
    public function setLineOperator($line_operator)
    {
        $this->container['line_operator'] = $line_operator;

        return $this;
    }

    /**
     * Gets parent_connection_account_id
     *
     * @return string
     */
    public function getParentConnectionAccountId()
    {
        return $this->container['parent_connection_account_id'];
    }

    /**
     * Sets parent_connection_account_id
     *
     * @param string $parent_connection_account_id parent_connection_account_id
     *
     * @return $this
     */
    public function setParentConnectionAccountId($parent_connection_account_id)
    {
        $this->container['parent_connection_account_id'] = $parent_connection_account_id;

        return $this;
    }

    /**
     * Gets parent_connection_id
     *
     * @return string
     */
    public function getParentConnectionId()
    {
        return $this->container['parent_connection_id'];
    }

    /**
     * Sets parent_connection_id
     *
     * @param string $parent_connection_id parent_connection_id
     *
     * @return $this
     */
    public function setParentConnectionId($parent_connection_id)
    {
        $this->container['parent_connection_id'] = $parent_connection_id;

        return $this;
    }

    /**
     * Gets peer_location
     *
     * @return string
     */
    public function getPeerLocation()
    {
        return $this->container['peer_location'];
    }

    /**
     * Sets peer_location
     *
     * @param string $peer_location peer_location
     *
     * @return $this
     */
    public function setPeerLocation($peer_location)
    {
        $this->container['peer_location'] = $peer_location;

        return $this;
    }

    /**
     * Gets port_spec
     *
     * @return string
     */
    public function getPortSpec()
    {
        return $this->container['port_spec'];
    }

    /**
     * Sets port_spec
     *
     * @param string $port_spec port_spec
     *
     * @return $this
     */
    public function setPortSpec($port_spec)
    {
        $this->container['port_spec'] = $port_spec;

        return $this;
    }

    /**
     * Gets port_type
     *
     * @return string
     */
    public function getPortType()
    {
        return $this->container['port_type'];
    }

    /**
     * Sets port_type
     *
     * @param string $port_type port_type
     *
     * @return $this
     */
    public function setPortType($port_type)
    {
        $this->container['port_type'] = $port_type;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Directconnect\Model\TagForDescribeDirectConnectConnectionsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Directconnect\Model\TagForDescribeDirectConnectConnectionsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

