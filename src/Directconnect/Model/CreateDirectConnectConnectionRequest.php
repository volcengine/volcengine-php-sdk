<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Directconnect\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateDirectConnectConnectionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDirectConnectConnectionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bandwidth' => 'int',
        'client_token' => 'string',
        'customer_contact_email' => 'string',
        'customer_contact_phone' => 'string',
        'customer_name' => 'string',
        'description' => 'string',
        'direct_connect_access_point_id' => 'string',
        'direct_connect_connection_name' => 'string',
        'driect_connect_access_point_id' => 'string',
        'line_operator' => 'string',
        'peer_location' => 'string',
        'port_spec' => 'string',
        'port_type' => 'string',
        'project_name' => 'string',
        'tags' => '\Volcengine\Directconnect\Model\TagForCreateDirectConnectConnectionInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bandwidth' => null,
        'client_token' => null,
        'customer_contact_email' => null,
        'customer_contact_phone' => null,
        'customer_name' => null,
        'description' => null,
        'direct_connect_access_point_id' => null,
        'direct_connect_connection_name' => null,
        'driect_connect_access_point_id' => null,
        'line_operator' => null,
        'peer_location' => null,
        'port_spec' => null,
        'port_type' => null,
        'project_name' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bandwidth' => 'Bandwidth',
        'client_token' => 'ClientToken',
        'customer_contact_email' => 'CustomerContactEmail',
        'customer_contact_phone' => 'CustomerContactPhone',
        'customer_name' => 'CustomerName',
        'description' => 'Description',
        'direct_connect_access_point_id' => 'DirectConnectAccessPointId',
        'direct_connect_connection_name' => 'DirectConnectConnectionName',
        'driect_connect_access_point_id' => 'DriectConnectAccessPointId',
        'line_operator' => 'LineOperator',
        'peer_location' => 'PeerLocation',
        'port_spec' => 'PortSpec',
        'port_type' => 'PortType',
        'project_name' => 'ProjectName',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bandwidth' => 'setBandwidth',
        'client_token' => 'setClientToken',
        'customer_contact_email' => 'setCustomerContactEmail',
        'customer_contact_phone' => 'setCustomerContactPhone',
        'customer_name' => 'setCustomerName',
        'description' => 'setDescription',
        'direct_connect_access_point_id' => 'setDirectConnectAccessPointId',
        'direct_connect_connection_name' => 'setDirectConnectConnectionName',
        'driect_connect_access_point_id' => 'setDriectConnectAccessPointId',
        'line_operator' => 'setLineOperator',
        'peer_location' => 'setPeerLocation',
        'port_spec' => 'setPortSpec',
        'port_type' => 'setPortType',
        'project_name' => 'setProjectName',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bandwidth' => 'getBandwidth',
        'client_token' => 'getClientToken',
        'customer_contact_email' => 'getCustomerContactEmail',
        'customer_contact_phone' => 'getCustomerContactPhone',
        'customer_name' => 'getCustomerName',
        'description' => 'getDescription',
        'direct_connect_access_point_id' => 'getDirectConnectAccessPointId',
        'direct_connect_connection_name' => 'getDirectConnectConnectionName',
        'driect_connect_access_point_id' => 'getDriectConnectAccessPointId',
        'line_operator' => 'getLineOperator',
        'peer_location' => 'getPeerLocation',
        'port_spec' => 'getPortSpec',
        'port_type' => 'getPortType',
        'project_name' => 'getProjectName',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['customer_contact_email'] = isset($data['customer_contact_email']) ? $data['customer_contact_email'] : null;
        $this->container['customer_contact_phone'] = isset($data['customer_contact_phone']) ? $data['customer_contact_phone'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['direct_connect_access_point_id'] = isset($data['direct_connect_access_point_id']) ? $data['direct_connect_access_point_id'] : null;
        $this->container['direct_connect_connection_name'] = isset($data['direct_connect_connection_name']) ? $data['direct_connect_connection_name'] : null;
        $this->container['driect_connect_access_point_id'] = isset($data['driect_connect_access_point_id']) ? $data['driect_connect_access_point_id'] : null;
        $this->container['line_operator'] = isset($data['line_operator']) ? $data['line_operator'] : null;
        $this->container['peer_location'] = isset($data['peer_location']) ? $data['peer_location'] : null;
        $this->container['port_spec'] = isset($data['port_spec']) ? $data['port_spec'] : null;
        $this->container['port_type'] = isset($data['port_type']) ? $data['port_type'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bandwidth'] === null) {
            $invalidProperties[] = "'bandwidth' can't be null";
        }
        if ($this->container['customer_contact_email'] === null) {
            $invalidProperties[] = "'customer_contact_email' can't be null";
        }
        if ($this->container['customer_contact_phone'] === null) {
            $invalidProperties[] = "'customer_contact_phone' can't be null";
        }
        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['direct_connect_access_point_id'] === null) {
            $invalidProperties[] = "'direct_connect_access_point_id' can't be null";
        }
        if ($this->container['line_operator'] === null) {
            $invalidProperties[] = "'line_operator' can't be null";
        }
        if ($this->container['peer_location'] === null) {
            $invalidProperties[] = "'peer_location' can't be null";
        }
        if ($this->container['port_spec'] === null) {
            $invalidProperties[] = "'port_spec' can't be null";
        }
        if ($this->container['port_type'] === null) {
            $invalidProperties[] = "'port_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets customer_contact_email
     *
     * @return string
     */
    public function getCustomerContactEmail()
    {
        return $this->container['customer_contact_email'];
    }

    /**
     * Sets customer_contact_email
     *
     * @param string $customer_contact_email customer_contact_email
     *
     * @return $this
     */
    public function setCustomerContactEmail($customer_contact_email)
    {
        $this->container['customer_contact_email'] = $customer_contact_email;

        return $this;
    }

    /**
     * Gets customer_contact_phone
     *
     * @return string
     */
    public function getCustomerContactPhone()
    {
        return $this->container['customer_contact_phone'];
    }

    /**
     * Sets customer_contact_phone
     *
     * @param string $customer_contact_phone customer_contact_phone
     *
     * @return $this
     */
    public function setCustomerContactPhone($customer_contact_phone)
    {
        $this->container['customer_contact_phone'] = $customer_contact_phone;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direct_connect_access_point_id
     *
     * @return string
     */
    public function getDirectConnectAccessPointId()
    {
        return $this->container['direct_connect_access_point_id'];
    }

    /**
     * Sets direct_connect_access_point_id
     *
     * @param string $direct_connect_access_point_id direct_connect_access_point_id
     *
     * @return $this
     */
    public function setDirectConnectAccessPointId($direct_connect_access_point_id)
    {
        $this->container['direct_connect_access_point_id'] = $direct_connect_access_point_id;

        return $this;
    }

    /**
     * Gets direct_connect_connection_name
     *
     * @return string
     */
    public function getDirectConnectConnectionName()
    {
        return $this->container['direct_connect_connection_name'];
    }

    /**
     * Sets direct_connect_connection_name
     *
     * @param string $direct_connect_connection_name direct_connect_connection_name
     *
     * @return $this
     */
    public function setDirectConnectConnectionName($direct_connect_connection_name)
    {
        $this->container['direct_connect_connection_name'] = $direct_connect_connection_name;

        return $this;
    }

    /**
     * Gets driect_connect_access_point_id
     *
     * @return string
     */
    public function getDriectConnectAccessPointId()
    {
        return $this->container['driect_connect_access_point_id'];
    }

    /**
     * Sets driect_connect_access_point_id
     *
     * @param string $driect_connect_access_point_id driect_connect_access_point_id
     *
     * @return $this
     */
    public function setDriectConnectAccessPointId($driect_connect_access_point_id)
    {
        $this->container['driect_connect_access_point_id'] = $driect_connect_access_point_id;

        return $this;
    }

    /**
     * Gets line_operator
     *
     * @return string
     */
    public function getLineOperator()
    {
        return $this->container['line_operator'];
    }

    /**
     * Sets line_operator
     *
     * @param string $line_operator line_operator
     *
     * @return $this
     */
    public function setLineOperator($line_operator)
    {
        $this->container['line_operator'] = $line_operator;

        return $this;
    }

    /**
     * Gets peer_location
     *
     * @return string
     */
    public function getPeerLocation()
    {
        return $this->container['peer_location'];
    }

    /**
     * Sets peer_location
     *
     * @param string $peer_location peer_location
     *
     * @return $this
     */
    public function setPeerLocation($peer_location)
    {
        $this->container['peer_location'] = $peer_location;

        return $this;
    }

    /**
     * Gets port_spec
     *
     * @return string
     */
    public function getPortSpec()
    {
        return $this->container['port_spec'];
    }

    /**
     * Sets port_spec
     *
     * @param string $port_spec port_spec
     *
     * @return $this
     */
    public function setPortSpec($port_spec)
    {
        $this->container['port_spec'] = $port_spec;

        return $this;
    }

    /**
     * Gets port_type
     *
     * @return string
     */
    public function getPortType()
    {
        return $this->container['port_type'];
    }

    /**
     * Sets port_type
     *
     * @param string $port_type port_type
     *
     * @return $this
     */
    public function setPortType($port_type)
    {
        $this->container['port_type'] = $port_type;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Directconnect\Model\TagForCreateDirectConnectConnectionInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Directconnect\Model\TagForCreateDirectConnectConnectionInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

