<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudmonitor\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListRulesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListRulesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_methods' => 'string[]',
        'alert_state' => 'string',
        'condition_operator' => 'string',
        'conditions' => '\Volcengine\Cloudmonitor\Model\ConditionForListRulesOutput[]',
        'contact_group_ids' => 'string[]',
        'created_at' => 'string',
        'description' => 'string',
        'dimension_conditions' => '\Volcengine\Cloudmonitor\Model\DimensionConditionsForListRulesOutput',
        'effect_end_at' => 'string',
        'effect_start_at' => 'string',
        'enable_state' => 'string',
        'evaluation_count' => 'int',
        'id' => 'string',
        'level' => 'string',
        'level_conditions' => '\Volcengine\Cloudmonitor\Model\LevelConditionForListRulesOutput[]',
        'multiple_conditions' => 'bool',
        'namespace' => 'string',
        'notification_id' => 'string',
        'notify_templates' => '\Volcengine\Cloudmonitor\Model\NotifyTemplateForListRulesOutput[]',
        'original_dimensions' => 'map[string,string[]]',
        'project_name' => 'string',
        'recovery_notify' => '\Volcengine\Cloudmonitor\Model\RecoveryNotifyForListRulesOutput',
        'regions' => 'string[]',
        'resource_type' => 'string',
        'rule_name' => 'string',
        'rule_type' => 'string',
        'silence_time' => 'int',
        'sub_namespace' => 'string',
        'tags' => '\Volcengine\Cloudmonitor\Model\ConvertTagForListRulesOutput[]',
        'updated_at' => 'string',
        'web_hook' => 'string',
        'webhook_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_methods' => null,
        'alert_state' => null,
        'condition_operator' => null,
        'conditions' => null,
        'contact_group_ids' => null,
        'created_at' => null,
        'description' => null,
        'dimension_conditions' => null,
        'effect_end_at' => null,
        'effect_start_at' => null,
        'enable_state' => null,
        'evaluation_count' => 'int32',
        'id' => null,
        'level' => null,
        'level_conditions' => null,
        'multiple_conditions' => null,
        'namespace' => null,
        'notification_id' => null,
        'notify_templates' => null,
        'original_dimensions' => null,
        'project_name' => null,
        'recovery_notify' => null,
        'regions' => null,
        'resource_type' => null,
        'rule_name' => null,
        'rule_type' => null,
        'silence_time' => 'int32',
        'sub_namespace' => null,
        'tags' => null,
        'updated_at' => null,
        'web_hook' => null,
        'webhook_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_methods' => 'AlertMethods',
        'alert_state' => 'AlertState',
        'condition_operator' => 'ConditionOperator',
        'conditions' => 'Conditions',
        'contact_group_ids' => 'ContactGroupIds',
        'created_at' => 'CreatedAt',
        'description' => 'Description',
        'dimension_conditions' => 'DimensionConditions',
        'effect_end_at' => 'EffectEndAt',
        'effect_start_at' => 'EffectStartAt',
        'enable_state' => 'EnableState',
        'evaluation_count' => 'EvaluationCount',
        'id' => 'Id',
        'level' => 'Level',
        'level_conditions' => 'LevelConditions',
        'multiple_conditions' => 'MultipleConditions',
        'namespace' => 'Namespace',
        'notification_id' => 'NotificationId',
        'notify_templates' => 'NotifyTemplates',
        'original_dimensions' => 'OriginalDimensions',
        'project_name' => 'ProjectName',
        'recovery_notify' => 'RecoveryNotify',
        'regions' => 'Regions',
        'resource_type' => 'ResourceType',
        'rule_name' => 'RuleName',
        'rule_type' => 'RuleType',
        'silence_time' => 'SilenceTime',
        'sub_namespace' => 'SubNamespace',
        'tags' => 'Tags',
        'updated_at' => 'UpdatedAt',
        'web_hook' => 'WebHook',
        'webhook_ids' => 'WebhookIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_methods' => 'setAlertMethods',
        'alert_state' => 'setAlertState',
        'condition_operator' => 'setConditionOperator',
        'conditions' => 'setConditions',
        'contact_group_ids' => 'setContactGroupIds',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'dimension_conditions' => 'setDimensionConditions',
        'effect_end_at' => 'setEffectEndAt',
        'effect_start_at' => 'setEffectStartAt',
        'enable_state' => 'setEnableState',
        'evaluation_count' => 'setEvaluationCount',
        'id' => 'setId',
        'level' => 'setLevel',
        'level_conditions' => 'setLevelConditions',
        'multiple_conditions' => 'setMultipleConditions',
        'namespace' => 'setNamespace',
        'notification_id' => 'setNotificationId',
        'notify_templates' => 'setNotifyTemplates',
        'original_dimensions' => 'setOriginalDimensions',
        'project_name' => 'setProjectName',
        'recovery_notify' => 'setRecoveryNotify',
        'regions' => 'setRegions',
        'resource_type' => 'setResourceType',
        'rule_name' => 'setRuleName',
        'rule_type' => 'setRuleType',
        'silence_time' => 'setSilenceTime',
        'sub_namespace' => 'setSubNamespace',
        'tags' => 'setTags',
        'updated_at' => 'setUpdatedAt',
        'web_hook' => 'setWebHook',
        'webhook_ids' => 'setWebhookIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_methods' => 'getAlertMethods',
        'alert_state' => 'getAlertState',
        'condition_operator' => 'getConditionOperator',
        'conditions' => 'getConditions',
        'contact_group_ids' => 'getContactGroupIds',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'dimension_conditions' => 'getDimensionConditions',
        'effect_end_at' => 'getEffectEndAt',
        'effect_start_at' => 'getEffectStartAt',
        'enable_state' => 'getEnableState',
        'evaluation_count' => 'getEvaluationCount',
        'id' => 'getId',
        'level' => 'getLevel',
        'level_conditions' => 'getLevelConditions',
        'multiple_conditions' => 'getMultipleConditions',
        'namespace' => 'getNamespace',
        'notification_id' => 'getNotificationId',
        'notify_templates' => 'getNotifyTemplates',
        'original_dimensions' => 'getOriginalDimensions',
        'project_name' => 'getProjectName',
        'recovery_notify' => 'getRecoveryNotify',
        'regions' => 'getRegions',
        'resource_type' => 'getResourceType',
        'rule_name' => 'getRuleName',
        'rule_type' => 'getRuleType',
        'silence_time' => 'getSilenceTime',
        'sub_namespace' => 'getSubNamespace',
        'tags' => 'getTags',
        'updated_at' => 'getUpdatedAt',
        'web_hook' => 'getWebHook',
        'webhook_ids' => 'getWebhookIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_methods'] = isset($data['alert_methods']) ? $data['alert_methods'] : null;
        $this->container['alert_state'] = isset($data['alert_state']) ? $data['alert_state'] : null;
        $this->container['condition_operator'] = isset($data['condition_operator']) ? $data['condition_operator'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['contact_group_ids'] = isset($data['contact_group_ids']) ? $data['contact_group_ids'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dimension_conditions'] = isset($data['dimension_conditions']) ? $data['dimension_conditions'] : null;
        $this->container['effect_end_at'] = isset($data['effect_end_at']) ? $data['effect_end_at'] : null;
        $this->container['effect_start_at'] = isset($data['effect_start_at']) ? $data['effect_start_at'] : null;
        $this->container['enable_state'] = isset($data['enable_state']) ? $data['enable_state'] : null;
        $this->container['evaluation_count'] = isset($data['evaluation_count']) ? $data['evaluation_count'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['level_conditions'] = isset($data['level_conditions']) ? $data['level_conditions'] : null;
        $this->container['multiple_conditions'] = isset($data['multiple_conditions']) ? $data['multiple_conditions'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['notification_id'] = isset($data['notification_id']) ? $data['notification_id'] : null;
        $this->container['notify_templates'] = isset($data['notify_templates']) ? $data['notify_templates'] : null;
        $this->container['original_dimensions'] = isset($data['original_dimensions']) ? $data['original_dimensions'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['recovery_notify'] = isset($data['recovery_notify']) ? $data['recovery_notify'] : null;
        $this->container['regions'] = isset($data['regions']) ? $data['regions'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
        $this->container['rule_type'] = isset($data['rule_type']) ? $data['rule_type'] : null;
        $this->container['silence_time'] = isset($data['silence_time']) ? $data['silence_time'] : null;
        $this->container['sub_namespace'] = isset($data['sub_namespace']) ? $data['sub_namespace'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['web_hook'] = isset($data['web_hook']) ? $data['web_hook'] : null;
        $this->container['webhook_ids'] = isset($data['webhook_ids']) ? $data['webhook_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_methods
     *
     * @return string[]
     */
    public function getAlertMethods()
    {
        return $this->container['alert_methods'];
    }

    /**
     * Sets alert_methods
     *
     * @param string[] $alert_methods alert_methods
     *
     * @return $this
     */
    public function setAlertMethods($alert_methods)
    {
        $this->container['alert_methods'] = $alert_methods;

        return $this;
    }

    /**
     * Gets alert_state
     *
     * @return string
     */
    public function getAlertState()
    {
        return $this->container['alert_state'];
    }

    /**
     * Sets alert_state
     *
     * @param string $alert_state alert_state
     *
     * @return $this
     */
    public function setAlertState($alert_state)
    {
        $this->container['alert_state'] = $alert_state;

        return $this;
    }

    /**
     * Gets condition_operator
     *
     * @return string
     */
    public function getConditionOperator()
    {
        return $this->container['condition_operator'];
    }

    /**
     * Sets condition_operator
     *
     * @param string $condition_operator condition_operator
     *
     * @return $this
     */
    public function setConditionOperator($condition_operator)
    {
        $this->container['condition_operator'] = $condition_operator;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Volcengine\Cloudmonitor\Model\ConditionForListRulesOutput[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Volcengine\Cloudmonitor\Model\ConditionForListRulesOutput[] $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets contact_group_ids
     *
     * @return string[]
     */
    public function getContactGroupIds()
    {
        return $this->container['contact_group_ids'];
    }

    /**
     * Sets contact_group_ids
     *
     * @param string[] $contact_group_ids contact_group_ids
     *
     * @return $this
     */
    public function setContactGroupIds($contact_group_ids)
    {
        $this->container['contact_group_ids'] = $contact_group_ids;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dimension_conditions
     *
     * @return \Volcengine\Cloudmonitor\Model\DimensionConditionsForListRulesOutput
     */
    public function getDimensionConditions()
    {
        return $this->container['dimension_conditions'];
    }

    /**
     * Sets dimension_conditions
     *
     * @param \Volcengine\Cloudmonitor\Model\DimensionConditionsForListRulesOutput $dimension_conditions dimension_conditions
     *
     * @return $this
     */
    public function setDimensionConditions($dimension_conditions)
    {
        $this->container['dimension_conditions'] = $dimension_conditions;

        return $this;
    }

    /**
     * Gets effect_end_at
     *
     * @return string
     */
    public function getEffectEndAt()
    {
        return $this->container['effect_end_at'];
    }

    /**
     * Sets effect_end_at
     *
     * @param string $effect_end_at effect_end_at
     *
     * @return $this
     */
    public function setEffectEndAt($effect_end_at)
    {
        $this->container['effect_end_at'] = $effect_end_at;

        return $this;
    }

    /**
     * Gets effect_start_at
     *
     * @return string
     */
    public function getEffectStartAt()
    {
        return $this->container['effect_start_at'];
    }

    /**
     * Sets effect_start_at
     *
     * @param string $effect_start_at effect_start_at
     *
     * @return $this
     */
    public function setEffectStartAt($effect_start_at)
    {
        $this->container['effect_start_at'] = $effect_start_at;

        return $this;
    }

    /**
     * Gets enable_state
     *
     * @return string
     */
    public function getEnableState()
    {
        return $this->container['enable_state'];
    }

    /**
     * Sets enable_state
     *
     * @param string $enable_state enable_state
     *
     * @return $this
     */
    public function setEnableState($enable_state)
    {
        $this->container['enable_state'] = $enable_state;

        return $this;
    }

    /**
     * Gets evaluation_count
     *
     * @return int
     */
    public function getEvaluationCount()
    {
        return $this->container['evaluation_count'];
    }

    /**
     * Sets evaluation_count
     *
     * @param int $evaluation_count evaluation_count
     *
     * @return $this
     */
    public function setEvaluationCount($evaluation_count)
    {
        $this->container['evaluation_count'] = $evaluation_count;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets level_conditions
     *
     * @return \Volcengine\Cloudmonitor\Model\LevelConditionForListRulesOutput[]
     */
    public function getLevelConditions()
    {
        return $this->container['level_conditions'];
    }

    /**
     * Sets level_conditions
     *
     * @param \Volcengine\Cloudmonitor\Model\LevelConditionForListRulesOutput[] $level_conditions level_conditions
     *
     * @return $this
     */
    public function setLevelConditions($level_conditions)
    {
        $this->container['level_conditions'] = $level_conditions;

        return $this;
    }

    /**
     * Gets multiple_conditions
     *
     * @return bool
     */
    public function getMultipleConditions()
    {
        return $this->container['multiple_conditions'];
    }

    /**
     * Sets multiple_conditions
     *
     * @param bool $multiple_conditions multiple_conditions
     *
     * @return $this
     */
    public function setMultipleConditions($multiple_conditions)
    {
        $this->container['multiple_conditions'] = $multiple_conditions;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets notification_id
     *
     * @return string
     */
    public function getNotificationId()
    {
        return $this->container['notification_id'];
    }

    /**
     * Sets notification_id
     *
     * @param string $notification_id notification_id
     *
     * @return $this
     */
    public function setNotificationId($notification_id)
    {
        $this->container['notification_id'] = $notification_id;

        return $this;
    }

    /**
     * Gets notify_templates
     *
     * @return \Volcengine\Cloudmonitor\Model\NotifyTemplateForListRulesOutput[]
     */
    public function getNotifyTemplates()
    {
        return $this->container['notify_templates'];
    }

    /**
     * Sets notify_templates
     *
     * @param \Volcengine\Cloudmonitor\Model\NotifyTemplateForListRulesOutput[] $notify_templates notify_templates
     *
     * @return $this
     */
    public function setNotifyTemplates($notify_templates)
    {
        $this->container['notify_templates'] = $notify_templates;

        return $this;
    }

    /**
     * Gets original_dimensions
     *
     * @return map[string,string[]]
     */
    public function getOriginalDimensions()
    {
        return $this->container['original_dimensions'];
    }

    /**
     * Sets original_dimensions
     *
     * @param map[string,string[]] $original_dimensions original_dimensions
     *
     * @return $this
     */
    public function setOriginalDimensions($original_dimensions)
    {
        $this->container['original_dimensions'] = $original_dimensions;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets recovery_notify
     *
     * @return \Volcengine\Cloudmonitor\Model\RecoveryNotifyForListRulesOutput
     */
    public function getRecoveryNotify()
    {
        return $this->container['recovery_notify'];
    }

    /**
     * Sets recovery_notify
     *
     * @param \Volcengine\Cloudmonitor\Model\RecoveryNotifyForListRulesOutput $recovery_notify recovery_notify
     *
     * @return $this
     */
    public function setRecoveryNotify($recovery_notify)
    {
        $this->container['recovery_notify'] = $recovery_notify;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return string[]
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param string[] $regions regions
     *
     * @return $this
     */
    public function setRegions($regions)
    {
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string
     */
    public function getRuleType()
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string $rule_type rule_type
     *
     * @return $this
     */
    public function setRuleType($rule_type)
    {
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets silence_time
     *
     * @return int
     */
    public function getSilenceTime()
    {
        return $this->container['silence_time'];
    }

    /**
     * Sets silence_time
     *
     * @param int $silence_time silence_time
     *
     * @return $this
     */
    public function setSilenceTime($silence_time)
    {
        $this->container['silence_time'] = $silence_time;

        return $this;
    }

    /**
     * Gets sub_namespace
     *
     * @return string
     */
    public function getSubNamespace()
    {
        return $this->container['sub_namespace'];
    }

    /**
     * Sets sub_namespace
     *
     * @param string $sub_namespace sub_namespace
     *
     * @return $this
     */
    public function setSubNamespace($sub_namespace)
    {
        $this->container['sub_namespace'] = $sub_namespace;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Cloudmonitor\Model\ConvertTagForListRulesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Cloudmonitor\Model\ConvertTagForListRulesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets web_hook
     *
     * @return string
     */
    public function getWebHook()
    {
        return $this->container['web_hook'];
    }

    /**
     * Sets web_hook
     *
     * @param string $web_hook web_hook
     *
     * @return $this
     */
    public function setWebHook($web_hook)
    {
        $this->container['web_hook'] = $web_hook;

        return $this;
    }

    /**
     * Gets webhook_ids
     *
     * @return string[]
     */
    public function getWebhookIds()
    {
        return $this->container['webhook_ids'];
    }

    /**
     * Sets webhook_ids
     *
     * @param string[] $webhook_ids webhook_ids
     *
     * @return $this
     */
    public function setWebhookIds($webhook_ids)
    {
        $this->container['webhook_ids'] = $webhook_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

