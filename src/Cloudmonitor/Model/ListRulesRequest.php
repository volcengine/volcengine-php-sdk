<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudmonitor\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListRulesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListRulesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_state' => 'string[]',
        'alert_template_ids' => 'string[]',
        'enable_state' => 'string[]',
        'level' => 'string[]',
        'namespace' => 'string[]',
        'object_group_ids' => 'string[]',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'rule_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_state' => null,
        'alert_template_ids' => null,
        'enable_state' => null,
        'level' => null,
        'namespace' => null,
        'object_group_ids' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'rule_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_state' => 'AlertState',
        'alert_template_ids' => 'AlertTemplateIds',
        'enable_state' => 'EnableState',
        'level' => 'Level',
        'namespace' => 'Namespace',
        'object_group_ids' => 'ObjectGroupIds',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'rule_name' => 'RuleName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_state' => 'setAlertState',
        'alert_template_ids' => 'setAlertTemplateIds',
        'enable_state' => 'setEnableState',
        'level' => 'setLevel',
        'namespace' => 'setNamespace',
        'object_group_ids' => 'setObjectGroupIds',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'rule_name' => 'setRuleName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_state' => 'getAlertState',
        'alert_template_ids' => 'getAlertTemplateIds',
        'enable_state' => 'getEnableState',
        'level' => 'getLevel',
        'namespace' => 'getNamespace',
        'object_group_ids' => 'getObjectGroupIds',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'rule_name' => 'getRuleName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_state'] = isset($data['alert_state']) ? $data['alert_state'] : null;
        $this->container['alert_template_ids'] = isset($data['alert_template_ids']) ? $data['alert_template_ids'] : null;
        $this->container['enable_state'] = isset($data['enable_state']) ? $data['enable_state'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['object_group_ids'] = isset($data['object_group_ids']) ? $data['object_group_ids'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_state
     *
     * @return string[]
     */
    public function getAlertState()
    {
        return $this->container['alert_state'];
    }

    /**
     * Sets alert_state
     *
     * @param string[] $alert_state alert_state
     *
     * @return $this
     */
    public function setAlertState($alert_state)
    {
        $this->container['alert_state'] = $alert_state;

        return $this;
    }

    /**
     * Gets alert_template_ids
     *
     * @return string[]
     */
    public function getAlertTemplateIds()
    {
        return $this->container['alert_template_ids'];
    }

    /**
     * Sets alert_template_ids
     *
     * @param string[] $alert_template_ids alert_template_ids
     *
     * @return $this
     */
    public function setAlertTemplateIds($alert_template_ids)
    {
        $this->container['alert_template_ids'] = $alert_template_ids;

        return $this;
    }

    /**
     * Gets enable_state
     *
     * @return string[]
     */
    public function getEnableState()
    {
        return $this->container['enable_state'];
    }

    /**
     * Sets enable_state
     *
     * @param string[] $enable_state enable_state
     *
     * @return $this
     */
    public function setEnableState($enable_state)
    {
        $this->container['enable_state'] = $enable_state;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string[]
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string[] $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string[]
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string[] $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets object_group_ids
     *
     * @return string[]
     */
    public function getObjectGroupIds()
    {
        return $this->container['object_group_ids'];
    }

    /**
     * Sets object_group_ids
     *
     * @param string[] $object_group_ids object_group_ids
     *
     * @return $this
     */
    public function setObjectGroupIds($object_group_ids)
    {
        $this->container['object_group_ids'] = $object_group_ids;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

