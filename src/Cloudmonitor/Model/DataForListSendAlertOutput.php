<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudmonitor\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListSendAlertOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListSendAlertOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_method' => 'string',
        'bath_id' => 'string',
        'content' => 'string',
        'id' => 'string',
        'send_at' => 'string',
        'send_result' => '\Volcengine\Cloudmonitor\Model\SendResultForListSendAlertOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_method' => null,
        'bath_id' => null,
        'content' => null,
        'id' => null,
        'send_at' => null,
        'send_result' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_method' => 'AlertMethod',
        'bath_id' => 'BathId',
        'content' => 'Content',
        'id' => 'Id',
        'send_at' => 'SendAt',
        'send_result' => 'SendResult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_method' => 'setAlertMethod',
        'bath_id' => 'setBathId',
        'content' => 'setContent',
        'id' => 'setId',
        'send_at' => 'setSendAt',
        'send_result' => 'setSendResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_method' => 'getAlertMethod',
        'bath_id' => 'getBathId',
        'content' => 'getContent',
        'id' => 'getId',
        'send_at' => 'getSendAt',
        'send_result' => 'getSendResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_method'] = isset($data['alert_method']) ? $data['alert_method'] : null;
        $this->container['bath_id'] = isset($data['bath_id']) ? $data['bath_id'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['send_at'] = isset($data['send_at']) ? $data['send_at'] : null;
        $this->container['send_result'] = isset($data['send_result']) ? $data['send_result'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_method
     *
     * @return string
     */
    public function getAlertMethod()
    {
        return $this->container['alert_method'];
    }

    /**
     * Sets alert_method
     *
     * @param string $alert_method alert_method
     *
     * @return $this
     */
    public function setAlertMethod($alert_method)
    {
        $this->container['alert_method'] = $alert_method;

        return $this;
    }

    /**
     * Gets bath_id
     *
     * @return string
     */
    public function getBathId()
    {
        return $this->container['bath_id'];
    }

    /**
     * Sets bath_id
     *
     * @param string $bath_id bath_id
     *
     * @return $this
     */
    public function setBathId($bath_id)
    {
        $this->container['bath_id'] = $bath_id;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets send_at
     *
     * @return string
     */
    public function getSendAt()
    {
        return $this->container['send_at'];
    }

    /**
     * Sets send_at
     *
     * @param string $send_at send_at
     *
     * @return $this
     */
    public function setSendAt($send_at)
    {
        $this->container['send_at'] = $send_at;

        return $this;
    }

    /**
     * Gets send_result
     *
     * @return \Volcengine\Cloudmonitor\Model\SendResultForListSendAlertOutput[]
     */
    public function getSendResult()
    {
        return $this->container['send_result'];
    }

    /**
     * Sets send_result
     *
     * @param \Volcengine\Cloudmonitor\Model\SendResultForListSendAlertOutput[] $send_result send_result
     *
     * @return $this
     */
    public function setSendResult($send_result)
    {
        $this->container['send_result'] = $send_result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

