<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Dms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PrivateLinkForCreateDataMigrateTaskInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrivateLinkForCreateDataMigrateTaskInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eni_role' => 'string',
        'idc_ip' => 'string',
        'idc_port' => 'int',
        'security_group_ids' => 'string[]',
        'subnet_id' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eni_role' => null,
        'idc_ip' => null,
        'idc_port' => 'int32',
        'security_group_ids' => null,
        'subnet_id' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eni_role' => 'ENIRole',
        'idc_ip' => 'IdcIP',
        'idc_port' => 'IdcPort',
        'security_group_ids' => 'SecurityGroupIDs',
        'subnet_id' => 'SubnetID',
        'vpc_id' => 'VpcID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eni_role' => 'setEniRole',
        'idc_ip' => 'setIdcIp',
        'idc_port' => 'setIdcPort',
        'security_group_ids' => 'setSecurityGroupIds',
        'subnet_id' => 'setSubnetId',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eni_role' => 'getEniRole',
        'idc_ip' => 'getIdcIp',
        'idc_port' => 'getIdcPort',
        'security_group_ids' => 'getSecurityGroupIds',
        'subnet_id' => 'getSubnetId',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eni_role'] = isset($data['eni_role']) ? $data['eni_role'] : null;
        $this->container['idc_ip'] = isset($data['idc_ip']) ? $data['idc_ip'] : null;
        $this->container['idc_port'] = isset($data['idc_port']) ? $data['idc_port'] : null;
        $this->container['security_group_ids'] = isset($data['security_group_ids']) ? $data['security_group_ids'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eni_role
     *
     * @return string
     */
    public function getEniRole()
    {
        return $this->container['eni_role'];
    }

    /**
     * Sets eni_role
     *
     * @param string $eni_role eni_role
     *
     * @return $this
     */
    public function setEniRole($eni_role)
    {
        $this->container['eni_role'] = $eni_role;

        return $this;
    }

    /**
     * Gets idc_ip
     *
     * @return string
     */
    public function getIdcIp()
    {
        return $this->container['idc_ip'];
    }

    /**
     * Sets idc_ip
     *
     * @param string $idc_ip idc_ip
     *
     * @return $this
     */
    public function setIdcIp($idc_ip)
    {
        $this->container['idc_ip'] = $idc_ip;

        return $this;
    }

    /**
     * Gets idc_port
     *
     * @return int
     */
    public function getIdcPort()
    {
        return $this->container['idc_port'];
    }

    /**
     * Sets idc_port
     *
     * @param int $idc_port idc_port
     *
     * @return $this
     */
    public function setIdcPort($idc_port)
    {
        $this->container['idc_port'] = $idc_port;

        return $this;
    }

    /**
     * Gets security_group_ids
     *
     * @return string[]
     */
    public function getSecurityGroupIds()
    {
        return $this->container['security_group_ids'];
    }

    /**
     * Sets security_group_ids
     *
     * @param string[] $security_group_ids security_group_ids
     *
     * @return $this
     */
    public function setSecurityGroupIds($security_group_ids)
    {
        $this->container['security_group_ids'] = $security_group_ids;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

