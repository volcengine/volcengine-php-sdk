<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Dms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ObjectSourceConfigForCreateDataMigrateTaskInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ObjectSourceConfigForCreateDataMigrateTaskInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bucket_access_config' => '\Volcengine\Dms\Model\BucketAccessConfigForCreateDataMigrateTaskInput',
        'is_excluded' => 'bool',
        'key_list_file' => 'string',
        'prefix_list' => 'string[]',
        'prefix_list_file' => 'string',
        'scan_with_delimiter' => 'bool',
        'start_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bucket_access_config' => null,
        'is_excluded' => null,
        'key_list_file' => null,
        'prefix_list' => null,
        'prefix_list_file' => null,
        'scan_with_delimiter' => null,
        'start_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bucket_access_config' => 'BucketAccessConfig',
        'is_excluded' => 'IsExcluded',
        'key_list_file' => 'KeyListFile',
        'prefix_list' => 'PrefixList',
        'prefix_list_file' => 'PrefixListFile',
        'scan_with_delimiter' => 'ScanWithDelimiter',
        'start_time' => 'StartTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bucket_access_config' => 'setBucketAccessConfig',
        'is_excluded' => 'setIsExcluded',
        'key_list_file' => 'setKeyListFile',
        'prefix_list' => 'setPrefixList',
        'prefix_list_file' => 'setPrefixListFile',
        'scan_with_delimiter' => 'setScanWithDelimiter',
        'start_time' => 'setStartTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bucket_access_config' => 'getBucketAccessConfig',
        'is_excluded' => 'getIsExcluded',
        'key_list_file' => 'getKeyListFile',
        'prefix_list' => 'getPrefixList',
        'prefix_list_file' => 'getPrefixListFile',
        'scan_with_delimiter' => 'getScanWithDelimiter',
        'start_time' => 'getStartTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bucket_access_config'] = isset($data['bucket_access_config']) ? $data['bucket_access_config'] : null;
        $this->container['is_excluded'] = isset($data['is_excluded']) ? $data['is_excluded'] : null;
        $this->container['key_list_file'] = isset($data['key_list_file']) ? $data['key_list_file'] : null;
        $this->container['prefix_list'] = isset($data['prefix_list']) ? $data['prefix_list'] : null;
        $this->container['prefix_list_file'] = isset($data['prefix_list_file']) ? $data['prefix_list_file'] : null;
        $this->container['scan_with_delimiter'] = isset($data['scan_with_delimiter']) ? $data['scan_with_delimiter'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bucket_access_config
     *
     * @return \Volcengine\Dms\Model\BucketAccessConfigForCreateDataMigrateTaskInput
     */
    public function getBucketAccessConfig()
    {
        return $this->container['bucket_access_config'];
    }

    /**
     * Sets bucket_access_config
     *
     * @param \Volcengine\Dms\Model\BucketAccessConfigForCreateDataMigrateTaskInput $bucket_access_config bucket_access_config
     *
     * @return $this
     */
    public function setBucketAccessConfig($bucket_access_config)
    {
        $this->container['bucket_access_config'] = $bucket_access_config;

        return $this;
    }

    /**
     * Gets is_excluded
     *
     * @return bool
     */
    public function getIsExcluded()
    {
        return $this->container['is_excluded'];
    }

    /**
     * Sets is_excluded
     *
     * @param bool $is_excluded is_excluded
     *
     * @return $this
     */
    public function setIsExcluded($is_excluded)
    {
        $this->container['is_excluded'] = $is_excluded;

        return $this;
    }

    /**
     * Gets key_list_file
     *
     * @return string
     */
    public function getKeyListFile()
    {
        return $this->container['key_list_file'];
    }

    /**
     * Sets key_list_file
     *
     * @param string $key_list_file key_list_file
     *
     * @return $this
     */
    public function setKeyListFile($key_list_file)
    {
        $this->container['key_list_file'] = $key_list_file;

        return $this;
    }

    /**
     * Gets prefix_list
     *
     * @return string[]
     */
    public function getPrefixList()
    {
        return $this->container['prefix_list'];
    }

    /**
     * Sets prefix_list
     *
     * @param string[] $prefix_list prefix_list
     *
     * @return $this
     */
    public function setPrefixList($prefix_list)
    {
        $this->container['prefix_list'] = $prefix_list;

        return $this;
    }

    /**
     * Gets prefix_list_file
     *
     * @return string
     */
    public function getPrefixListFile()
    {
        return $this->container['prefix_list_file'];
    }

    /**
     * Sets prefix_list_file
     *
     * @param string $prefix_list_file prefix_list_file
     *
     * @return $this
     */
    public function setPrefixListFile($prefix_list_file)
    {
        $this->container['prefix_list_file'] = $prefix_list_file;

        return $this;
    }

    /**
     * Gets scan_with_delimiter
     *
     * @return bool
     */
    public function getScanWithDelimiter()
    {
        return $this->container['scan_with_delimiter'];
    }

    /**
     * Sets scan_with_delimiter
     *
     * @param bool $scan_with_delimiter scan_with_delimiter
     *
     * @return $this
     */
    public function setScanWithDelimiter($scan_with_delimiter)
    {
        $this->container['scan_with_delimiter'] = $scan_with_delimiter;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

