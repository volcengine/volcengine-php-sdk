<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Dms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AdvanceConfigForQueryDataMigrateTaskOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvanceConfigForQueryDataMigrateTaskOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'increase_setting' => '\Volcengine\Dms\Model\IncreaseSettingForQueryDataMigrateTaskOutput',
        'private_link' => '\Volcengine\Dms\Model\PrivateLinkForQueryDataMigrateTaskOutput',
        'rename_setting' => '\Volcengine\Dms\Model\RenameSettingForQueryDataMigrateTaskOutput',
        'time_bandwidth_setting' => '\Volcengine\Dms\Model\TimeBandwidthSettingForQueryDataMigrateTaskOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'increase_setting' => null,
        'private_link' => null,
        'rename_setting' => null,
        'time_bandwidth_setting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'increase_setting' => 'IncreaseSetting',
        'private_link' => 'PrivateLink',
        'rename_setting' => 'RenameSetting',
        'time_bandwidth_setting' => 'TimeBandwidthSetting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'increase_setting' => 'setIncreaseSetting',
        'private_link' => 'setPrivateLink',
        'rename_setting' => 'setRenameSetting',
        'time_bandwidth_setting' => 'setTimeBandwidthSetting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'increase_setting' => 'getIncreaseSetting',
        'private_link' => 'getPrivateLink',
        'rename_setting' => 'getRenameSetting',
        'time_bandwidth_setting' => 'getTimeBandwidthSetting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['increase_setting'] = isset($data['increase_setting']) ? $data['increase_setting'] : null;
        $this->container['private_link'] = isset($data['private_link']) ? $data['private_link'] : null;
        $this->container['rename_setting'] = isset($data['rename_setting']) ? $data['rename_setting'] : null;
        $this->container['time_bandwidth_setting'] = isset($data['time_bandwidth_setting']) ? $data['time_bandwidth_setting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets increase_setting
     *
     * @return \Volcengine\Dms\Model\IncreaseSettingForQueryDataMigrateTaskOutput
     */
    public function getIncreaseSetting()
    {
        return $this->container['increase_setting'];
    }

    /**
     * Sets increase_setting
     *
     * @param \Volcengine\Dms\Model\IncreaseSettingForQueryDataMigrateTaskOutput $increase_setting increase_setting
     *
     * @return $this
     */
    public function setIncreaseSetting($increase_setting)
    {
        $this->container['increase_setting'] = $increase_setting;

        return $this;
    }

    /**
     * Gets private_link
     *
     * @return \Volcengine\Dms\Model\PrivateLinkForQueryDataMigrateTaskOutput
     */
    public function getPrivateLink()
    {
        return $this->container['private_link'];
    }

    /**
     * Sets private_link
     *
     * @param \Volcengine\Dms\Model\PrivateLinkForQueryDataMigrateTaskOutput $private_link private_link
     *
     * @return $this
     */
    public function setPrivateLink($private_link)
    {
        $this->container['private_link'] = $private_link;

        return $this;
    }

    /**
     * Gets rename_setting
     *
     * @return \Volcengine\Dms\Model\RenameSettingForQueryDataMigrateTaskOutput
     */
    public function getRenameSetting()
    {
        return $this->container['rename_setting'];
    }

    /**
     * Sets rename_setting
     *
     * @param \Volcengine\Dms\Model\RenameSettingForQueryDataMigrateTaskOutput $rename_setting rename_setting
     *
     * @return $this
     */
    public function setRenameSetting($rename_setting)
    {
        $this->container['rename_setting'] = $rename_setting;

        return $this;
    }

    /**
     * Gets time_bandwidth_setting
     *
     * @return \Volcengine\Dms\Model\TimeBandwidthSettingForQueryDataMigrateTaskOutput[]
     */
    public function getTimeBandwidthSetting()
    {
        return $this->container['time_bandwidth_setting'];
    }

    /**
     * Sets time_bandwidth_setting
     *
     * @param \Volcengine\Dms\Model\TimeBandwidthSettingForQueryDataMigrateTaskOutput[] $time_bandwidth_setting time_bandwidth_setting
     *
     * @return $this
     */
    public function setTimeBandwidthSetting($time_bandwidth_setting)
    {
        $this->container['time_bandwidth_setting'] = $time_bandwidth_setting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

