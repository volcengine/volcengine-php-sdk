<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Dms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BasicConfigForQueryDataMigrateTaskOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BasicConfigForQueryDataMigrateTaskOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bandwidth' => 'int',
        'enable_range_check' => 'bool',
        'failed_num_to_abort' => 'int',
        'object_migration_policy' => '\Volcengine\Dms\Model\ObjectMigrationPolicyForQueryDataMigrateTaskOutput',
        'offline_migration_policy' => '\Volcengine\Dms\Model\OfflineMigrationPolicyForQueryDataMigrateTaskOutput',
        'overwrite_policy' => 'string',
        'source_type' => 'string',
        'storage_class' => 'string',
        'task_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bandwidth' => 'int64',
        'enable_range_check' => null,
        'failed_num_to_abort' => 'int32',
        'object_migration_policy' => null,
        'offline_migration_policy' => null,
        'overwrite_policy' => null,
        'source_type' => null,
        'storage_class' => null,
        'task_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bandwidth' => 'Bandwidth',
        'enable_range_check' => 'EnableRangeCheck',
        'failed_num_to_abort' => 'FailedNumToAbort',
        'object_migration_policy' => 'ObjectMigrationPolicy',
        'offline_migration_policy' => 'OfflineMigrationPolicy',
        'overwrite_policy' => 'OverwritePolicy',
        'source_type' => 'SourceType',
        'storage_class' => 'StorageClass',
        'task_name' => 'TaskName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bandwidth' => 'setBandwidth',
        'enable_range_check' => 'setEnableRangeCheck',
        'failed_num_to_abort' => 'setFailedNumToAbort',
        'object_migration_policy' => 'setObjectMigrationPolicy',
        'offline_migration_policy' => 'setOfflineMigrationPolicy',
        'overwrite_policy' => 'setOverwritePolicy',
        'source_type' => 'setSourceType',
        'storage_class' => 'setStorageClass',
        'task_name' => 'setTaskName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bandwidth' => 'getBandwidth',
        'enable_range_check' => 'getEnableRangeCheck',
        'failed_num_to_abort' => 'getFailedNumToAbort',
        'object_migration_policy' => 'getObjectMigrationPolicy',
        'offline_migration_policy' => 'getOfflineMigrationPolicy',
        'overwrite_policy' => 'getOverwritePolicy',
        'source_type' => 'getSourceType',
        'storage_class' => 'getStorageClass',
        'task_name' => 'getTaskName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OVERWRITE_POLICY_FORCE = 'Force';
    const OVERWRITE_POLICY_NONE = 'None';
    const OVERWRITE_POLICY_LAST_MODIFY = 'LastModify';
    const SOURCE_TYPE_STORAGE_TYPE_OBJECT = 'StorageTypeObject';
    const SOURCE_TYPE_STORAGE_TYPE_URL = 'StorageTypeUrl';
    const STORAGE_CLASS_STANDARD = 'Standard';
    const STORAGE_CLASS_INHERIT_SOURCE = 'InheritSource';
    const STORAGE_CLASS_IA = 'Ia';
    const STORAGE_CLASS_ARCHIVE_FR = 'ArchiveFr';
    const STORAGE_CLASS_INTELLIGENT_TIERING = 'IntelligentTiering';
    const STORAGE_CLASS_COLD_ARCHIVE = 'ColdArchive';
    const STORAGE_CLASS_ARCHIVE = 'Archive';
    const STORAGE_CLASS_DEEP_COLD_ARCHIVE = 'DeepColdArchive';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverwritePolicyAllowableValues()
    {
        return [
            self::OVERWRITE_POLICY_FORCE,
            self::OVERWRITE_POLICY_NONE,
            self::OVERWRITE_POLICY_LAST_MODIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceTypeAllowableValues()
    {
        return [
            self::SOURCE_TYPE_STORAGE_TYPE_OBJECT,
            self::SOURCE_TYPE_STORAGE_TYPE_URL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorageClassAllowableValues()
    {
        return [
            self::STORAGE_CLASS_STANDARD,
            self::STORAGE_CLASS_INHERIT_SOURCE,
            self::STORAGE_CLASS_IA,
            self::STORAGE_CLASS_ARCHIVE_FR,
            self::STORAGE_CLASS_INTELLIGENT_TIERING,
            self::STORAGE_CLASS_COLD_ARCHIVE,
            self::STORAGE_CLASS_ARCHIVE,
            self::STORAGE_CLASS_DEEP_COLD_ARCHIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['enable_range_check'] = isset($data['enable_range_check']) ? $data['enable_range_check'] : null;
        $this->container['failed_num_to_abort'] = isset($data['failed_num_to_abort']) ? $data['failed_num_to_abort'] : null;
        $this->container['object_migration_policy'] = isset($data['object_migration_policy']) ? $data['object_migration_policy'] : null;
        $this->container['offline_migration_policy'] = isset($data['offline_migration_policy']) ? $data['offline_migration_policy'] : null;
        $this->container['overwrite_policy'] = isset($data['overwrite_policy']) ? $data['overwrite_policy'] : null;
        $this->container['source_type'] = isset($data['source_type']) ? $data['source_type'] : null;
        $this->container['storage_class'] = isset($data['storage_class']) ? $data['storage_class'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOverwritePolicyAllowableValues();
        if (!is_null($this->container['overwrite_policy']) && !in_array($this->container['overwrite_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'overwrite_policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!is_null($this->container['source_type']) && !in_array($this->container['source_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStorageClassAllowableValues();
        if (!is_null($this->container['storage_class']) && !in_array($this->container['storage_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storage_class', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets enable_range_check
     *
     * @return bool
     */
    public function getEnableRangeCheck()
    {
        return $this->container['enable_range_check'];
    }

    /**
     * Sets enable_range_check
     *
     * @param bool $enable_range_check enable_range_check
     *
     * @return $this
     */
    public function setEnableRangeCheck($enable_range_check)
    {
        $this->container['enable_range_check'] = $enable_range_check;

        return $this;
    }

    /**
     * Gets failed_num_to_abort
     *
     * @return int
     */
    public function getFailedNumToAbort()
    {
        return $this->container['failed_num_to_abort'];
    }

    /**
     * Sets failed_num_to_abort
     *
     * @param int $failed_num_to_abort failed_num_to_abort
     *
     * @return $this
     */
    public function setFailedNumToAbort($failed_num_to_abort)
    {
        $this->container['failed_num_to_abort'] = $failed_num_to_abort;

        return $this;
    }

    /**
     * Gets object_migration_policy
     *
     * @return \Volcengine\Dms\Model\ObjectMigrationPolicyForQueryDataMigrateTaskOutput
     */
    public function getObjectMigrationPolicy()
    {
        return $this->container['object_migration_policy'];
    }

    /**
     * Sets object_migration_policy
     *
     * @param \Volcengine\Dms\Model\ObjectMigrationPolicyForQueryDataMigrateTaskOutput $object_migration_policy object_migration_policy
     *
     * @return $this
     */
    public function setObjectMigrationPolicy($object_migration_policy)
    {
        $this->container['object_migration_policy'] = $object_migration_policy;

        return $this;
    }

    /**
     * Gets offline_migration_policy
     *
     * @return \Volcengine\Dms\Model\OfflineMigrationPolicyForQueryDataMigrateTaskOutput
     */
    public function getOfflineMigrationPolicy()
    {
        return $this->container['offline_migration_policy'];
    }

    /**
     * Sets offline_migration_policy
     *
     * @param \Volcengine\Dms\Model\OfflineMigrationPolicyForQueryDataMigrateTaskOutput $offline_migration_policy offline_migration_policy
     *
     * @return $this
     */
    public function setOfflineMigrationPolicy($offline_migration_policy)
    {
        $this->container['offline_migration_policy'] = $offline_migration_policy;

        return $this;
    }

    /**
     * Gets overwrite_policy
     *
     * @return string
     */
    public function getOverwritePolicy()
    {
        return $this->container['overwrite_policy'];
    }

    /**
     * Sets overwrite_policy
     *
     * @param string $overwrite_policy overwrite_policy
     *
     * @return $this
     */
    public function setOverwritePolicy($overwrite_policy)
    {
        $allowedValues = $this->getOverwritePolicyAllowableValues();
        if (!is_null($overwrite_policy) && !in_array($overwrite_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'overwrite_policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overwrite_policy'] = $overwrite_policy;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string $source_type source_type
     *
     * @return $this
     */
    public function setSourceType($source_type)
    {
        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!is_null($source_type) && !in_array($source_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets storage_class
     *
     * @return string
     */
    public function getStorageClass()
    {
        return $this->container['storage_class'];
    }

    /**
     * Sets storage_class
     *
     * @param string $storage_class storage_class
     *
     * @return $this
     */
    public function setStorageClass($storage_class)
    {
        $allowedValues = $this->getStorageClassAllowableValues();
        if (!is_null($storage_class) && !in_array($storage_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storage_class', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storage_class'] = $storage_class;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name task_name
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

