<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Dms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TaskProgressForListDataMigrateTaskOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskProgressForListDataMigrateTaskOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'failed_bytes' => 'int',
        'failed_objects' => 'int',
        'not_exist_bytes' => 'int',
        'not_exist_object_count' => 'int',
        'remaining_bytes' => 'int',
        'remaining_objects' => 'int',
        'skip_bytes' => 'int',
        'skip_object_count' => 'int',
        'total_bytes' => 'int',
        'total_objects' => 'int',
        'transfer_bytes_speed' => 'int',
        'transfer_count_speed' => 'int',
        'transferred_bytes' => 'int',
        'transferred_objects' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'failed_bytes' => 'int64',
        'failed_objects' => 'int64',
        'not_exist_bytes' => 'int64',
        'not_exist_object_count' => 'int64',
        'remaining_bytes' => 'int64',
        'remaining_objects' => 'int64',
        'skip_bytes' => 'int64',
        'skip_object_count' => 'int64',
        'total_bytes' => 'int64',
        'total_objects' => 'int64',
        'transfer_bytes_speed' => 'int64',
        'transfer_count_speed' => 'int64',
        'transferred_bytes' => 'int64',
        'transferred_objects' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'failed_bytes' => 'FailedBytes',
        'failed_objects' => 'FailedObjects',
        'not_exist_bytes' => 'NotExistBytes',
        'not_exist_object_count' => 'NotExistObjectCount',
        'remaining_bytes' => 'RemainingBytes',
        'remaining_objects' => 'RemainingObjects',
        'skip_bytes' => 'SkipBytes',
        'skip_object_count' => 'SkipObjectCount',
        'total_bytes' => 'TotalBytes',
        'total_objects' => 'TotalObjects',
        'transfer_bytes_speed' => 'TransferBytesSpeed',
        'transfer_count_speed' => 'TransferCountSpeed',
        'transferred_bytes' => 'TransferredBytes',
        'transferred_objects' => 'TransferredObjects'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'failed_bytes' => 'setFailedBytes',
        'failed_objects' => 'setFailedObjects',
        'not_exist_bytes' => 'setNotExistBytes',
        'not_exist_object_count' => 'setNotExistObjectCount',
        'remaining_bytes' => 'setRemainingBytes',
        'remaining_objects' => 'setRemainingObjects',
        'skip_bytes' => 'setSkipBytes',
        'skip_object_count' => 'setSkipObjectCount',
        'total_bytes' => 'setTotalBytes',
        'total_objects' => 'setTotalObjects',
        'transfer_bytes_speed' => 'setTransferBytesSpeed',
        'transfer_count_speed' => 'setTransferCountSpeed',
        'transferred_bytes' => 'setTransferredBytes',
        'transferred_objects' => 'setTransferredObjects'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'failed_bytes' => 'getFailedBytes',
        'failed_objects' => 'getFailedObjects',
        'not_exist_bytes' => 'getNotExistBytes',
        'not_exist_object_count' => 'getNotExistObjectCount',
        'remaining_bytes' => 'getRemainingBytes',
        'remaining_objects' => 'getRemainingObjects',
        'skip_bytes' => 'getSkipBytes',
        'skip_object_count' => 'getSkipObjectCount',
        'total_bytes' => 'getTotalBytes',
        'total_objects' => 'getTotalObjects',
        'transfer_bytes_speed' => 'getTransferBytesSpeed',
        'transfer_count_speed' => 'getTransferCountSpeed',
        'transferred_bytes' => 'getTransferredBytes',
        'transferred_objects' => 'getTransferredObjects'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['failed_bytes'] = isset($data['failed_bytes']) ? $data['failed_bytes'] : null;
        $this->container['failed_objects'] = isset($data['failed_objects']) ? $data['failed_objects'] : null;
        $this->container['not_exist_bytes'] = isset($data['not_exist_bytes']) ? $data['not_exist_bytes'] : null;
        $this->container['not_exist_object_count'] = isset($data['not_exist_object_count']) ? $data['not_exist_object_count'] : null;
        $this->container['remaining_bytes'] = isset($data['remaining_bytes']) ? $data['remaining_bytes'] : null;
        $this->container['remaining_objects'] = isset($data['remaining_objects']) ? $data['remaining_objects'] : null;
        $this->container['skip_bytes'] = isset($data['skip_bytes']) ? $data['skip_bytes'] : null;
        $this->container['skip_object_count'] = isset($data['skip_object_count']) ? $data['skip_object_count'] : null;
        $this->container['total_bytes'] = isset($data['total_bytes']) ? $data['total_bytes'] : null;
        $this->container['total_objects'] = isset($data['total_objects']) ? $data['total_objects'] : null;
        $this->container['transfer_bytes_speed'] = isset($data['transfer_bytes_speed']) ? $data['transfer_bytes_speed'] : null;
        $this->container['transfer_count_speed'] = isset($data['transfer_count_speed']) ? $data['transfer_count_speed'] : null;
        $this->container['transferred_bytes'] = isset($data['transferred_bytes']) ? $data['transferred_bytes'] : null;
        $this->container['transferred_objects'] = isset($data['transferred_objects']) ? $data['transferred_objects'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets failed_bytes
     *
     * @return int
     */
    public function getFailedBytes()
    {
        return $this->container['failed_bytes'];
    }

    /**
     * Sets failed_bytes
     *
     * @param int $failed_bytes failed_bytes
     *
     * @return $this
     */
    public function setFailedBytes($failed_bytes)
    {
        $this->container['failed_bytes'] = $failed_bytes;

        return $this;
    }

    /**
     * Gets failed_objects
     *
     * @return int
     */
    public function getFailedObjects()
    {
        return $this->container['failed_objects'];
    }

    /**
     * Sets failed_objects
     *
     * @param int $failed_objects failed_objects
     *
     * @return $this
     */
    public function setFailedObjects($failed_objects)
    {
        $this->container['failed_objects'] = $failed_objects;

        return $this;
    }

    /**
     * Gets not_exist_bytes
     *
     * @return int
     */
    public function getNotExistBytes()
    {
        return $this->container['not_exist_bytes'];
    }

    /**
     * Sets not_exist_bytes
     *
     * @param int $not_exist_bytes not_exist_bytes
     *
     * @return $this
     */
    public function setNotExistBytes($not_exist_bytes)
    {
        $this->container['not_exist_bytes'] = $not_exist_bytes;

        return $this;
    }

    /**
     * Gets not_exist_object_count
     *
     * @return int
     */
    public function getNotExistObjectCount()
    {
        return $this->container['not_exist_object_count'];
    }

    /**
     * Sets not_exist_object_count
     *
     * @param int $not_exist_object_count not_exist_object_count
     *
     * @return $this
     */
    public function setNotExistObjectCount($not_exist_object_count)
    {
        $this->container['not_exist_object_count'] = $not_exist_object_count;

        return $this;
    }

    /**
     * Gets remaining_bytes
     *
     * @return int
     */
    public function getRemainingBytes()
    {
        return $this->container['remaining_bytes'];
    }

    /**
     * Sets remaining_bytes
     *
     * @param int $remaining_bytes remaining_bytes
     *
     * @return $this
     */
    public function setRemainingBytes($remaining_bytes)
    {
        $this->container['remaining_bytes'] = $remaining_bytes;

        return $this;
    }

    /**
     * Gets remaining_objects
     *
     * @return int
     */
    public function getRemainingObjects()
    {
        return $this->container['remaining_objects'];
    }

    /**
     * Sets remaining_objects
     *
     * @param int $remaining_objects remaining_objects
     *
     * @return $this
     */
    public function setRemainingObjects($remaining_objects)
    {
        $this->container['remaining_objects'] = $remaining_objects;

        return $this;
    }

    /**
     * Gets skip_bytes
     *
     * @return int
     */
    public function getSkipBytes()
    {
        return $this->container['skip_bytes'];
    }

    /**
     * Sets skip_bytes
     *
     * @param int $skip_bytes skip_bytes
     *
     * @return $this
     */
    public function setSkipBytes($skip_bytes)
    {
        $this->container['skip_bytes'] = $skip_bytes;

        return $this;
    }

    /**
     * Gets skip_object_count
     *
     * @return int
     */
    public function getSkipObjectCount()
    {
        return $this->container['skip_object_count'];
    }

    /**
     * Sets skip_object_count
     *
     * @param int $skip_object_count skip_object_count
     *
     * @return $this
     */
    public function setSkipObjectCount($skip_object_count)
    {
        $this->container['skip_object_count'] = $skip_object_count;

        return $this;
    }

    /**
     * Gets total_bytes
     *
     * @return int
     */
    public function getTotalBytes()
    {
        return $this->container['total_bytes'];
    }

    /**
     * Sets total_bytes
     *
     * @param int $total_bytes total_bytes
     *
     * @return $this
     */
    public function setTotalBytes($total_bytes)
    {
        $this->container['total_bytes'] = $total_bytes;

        return $this;
    }

    /**
     * Gets total_objects
     *
     * @return int
     */
    public function getTotalObjects()
    {
        return $this->container['total_objects'];
    }

    /**
     * Sets total_objects
     *
     * @param int $total_objects total_objects
     *
     * @return $this
     */
    public function setTotalObjects($total_objects)
    {
        $this->container['total_objects'] = $total_objects;

        return $this;
    }

    /**
     * Gets transfer_bytes_speed
     *
     * @return int
     */
    public function getTransferBytesSpeed()
    {
        return $this->container['transfer_bytes_speed'];
    }

    /**
     * Sets transfer_bytes_speed
     *
     * @param int $transfer_bytes_speed transfer_bytes_speed
     *
     * @return $this
     */
    public function setTransferBytesSpeed($transfer_bytes_speed)
    {
        $this->container['transfer_bytes_speed'] = $transfer_bytes_speed;

        return $this;
    }

    /**
     * Gets transfer_count_speed
     *
     * @return int
     */
    public function getTransferCountSpeed()
    {
        return $this->container['transfer_count_speed'];
    }

    /**
     * Sets transfer_count_speed
     *
     * @param int $transfer_count_speed transfer_count_speed
     *
     * @return $this
     */
    public function setTransferCountSpeed($transfer_count_speed)
    {
        $this->container['transfer_count_speed'] = $transfer_count_speed;

        return $this;
    }

    /**
     * Gets transferred_bytes
     *
     * @return int
     */
    public function getTransferredBytes()
    {
        return $this->container['transferred_bytes'];
    }

    /**
     * Sets transferred_bytes
     *
     * @param int $transferred_bytes transferred_bytes
     *
     * @return $this
     */
    public function setTransferredBytes($transferred_bytes)
    {
        $this->container['transferred_bytes'] = $transferred_bytes;

        return $this;
    }

    /**
     * Gets transferred_objects
     *
     * @return int
     */
    public function getTransferredObjects()
    {
        return $this->container['transferred_objects'];
    }

    /**
     * Sets transferred_objects
     *
     * @param int $transferred_objects transferred_objects
     *
     * @return $this
     */
    public function setTransferredObjects($transferred_objects)
    {
        $this->container['transferred_objects'] = $transferred_objects;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

