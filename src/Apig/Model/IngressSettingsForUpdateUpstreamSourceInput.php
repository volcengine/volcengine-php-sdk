<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class IngressSettingsForUpdateUpstreamSourceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IngressSettingsForUpdateUpstreamSourceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_all_ingress_classes' => 'bool',
        'enable_all_namespaces' => 'bool',
        'enable_ingress' => 'bool',
        'enable_ingress_without_ingress_class' => 'bool',
        'ingress_classes' => 'string[]',
        'update_status' => 'bool',
        'watch_namespaces' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_all_ingress_classes' => null,
        'enable_all_namespaces' => null,
        'enable_ingress' => null,
        'enable_ingress_without_ingress_class' => null,
        'ingress_classes' => null,
        'update_status' => null,
        'watch_namespaces' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_all_ingress_classes' => 'EnableAllIngressClasses',
        'enable_all_namespaces' => 'EnableAllNamespaces',
        'enable_ingress' => 'EnableIngress',
        'enable_ingress_without_ingress_class' => 'EnableIngressWithoutIngressClass',
        'ingress_classes' => 'IngressClasses',
        'update_status' => 'UpdateStatus',
        'watch_namespaces' => 'WatchNamespaces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_all_ingress_classes' => 'setEnableAllIngressClasses',
        'enable_all_namespaces' => 'setEnableAllNamespaces',
        'enable_ingress' => 'setEnableIngress',
        'enable_ingress_without_ingress_class' => 'setEnableIngressWithoutIngressClass',
        'ingress_classes' => 'setIngressClasses',
        'update_status' => 'setUpdateStatus',
        'watch_namespaces' => 'setWatchNamespaces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_all_ingress_classes' => 'getEnableAllIngressClasses',
        'enable_all_namespaces' => 'getEnableAllNamespaces',
        'enable_ingress' => 'getEnableIngress',
        'enable_ingress_without_ingress_class' => 'getEnableIngressWithoutIngressClass',
        'ingress_classes' => 'getIngressClasses',
        'update_status' => 'getUpdateStatus',
        'watch_namespaces' => 'getWatchNamespaces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_all_ingress_classes'] = isset($data['enable_all_ingress_classes']) ? $data['enable_all_ingress_classes'] : null;
        $this->container['enable_all_namespaces'] = isset($data['enable_all_namespaces']) ? $data['enable_all_namespaces'] : null;
        $this->container['enable_ingress'] = isset($data['enable_ingress']) ? $data['enable_ingress'] : null;
        $this->container['enable_ingress_without_ingress_class'] = isset($data['enable_ingress_without_ingress_class']) ? $data['enable_ingress_without_ingress_class'] : null;
        $this->container['ingress_classes'] = isset($data['ingress_classes']) ? $data['ingress_classes'] : null;
        $this->container['update_status'] = isset($data['update_status']) ? $data['update_status'] : null;
        $this->container['watch_namespaces'] = isset($data['watch_namespaces']) ? $data['watch_namespaces'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_all_ingress_classes
     *
     * @return bool
     */
    public function getEnableAllIngressClasses()
    {
        return $this->container['enable_all_ingress_classes'];
    }

    /**
     * Sets enable_all_ingress_classes
     *
     * @param bool $enable_all_ingress_classes enable_all_ingress_classes
     *
     * @return $this
     */
    public function setEnableAllIngressClasses($enable_all_ingress_classes)
    {
        $this->container['enable_all_ingress_classes'] = $enable_all_ingress_classes;

        return $this;
    }

    /**
     * Gets enable_all_namespaces
     *
     * @return bool
     */
    public function getEnableAllNamespaces()
    {
        return $this->container['enable_all_namespaces'];
    }

    /**
     * Sets enable_all_namespaces
     *
     * @param bool $enable_all_namespaces enable_all_namespaces
     *
     * @return $this
     */
    public function setEnableAllNamespaces($enable_all_namespaces)
    {
        $this->container['enable_all_namespaces'] = $enable_all_namespaces;

        return $this;
    }

    /**
     * Gets enable_ingress
     *
     * @return bool
     */
    public function getEnableIngress()
    {
        return $this->container['enable_ingress'];
    }

    /**
     * Sets enable_ingress
     *
     * @param bool $enable_ingress enable_ingress
     *
     * @return $this
     */
    public function setEnableIngress($enable_ingress)
    {
        $this->container['enable_ingress'] = $enable_ingress;

        return $this;
    }

    /**
     * Gets enable_ingress_without_ingress_class
     *
     * @return bool
     */
    public function getEnableIngressWithoutIngressClass()
    {
        return $this->container['enable_ingress_without_ingress_class'];
    }

    /**
     * Sets enable_ingress_without_ingress_class
     *
     * @param bool $enable_ingress_without_ingress_class enable_ingress_without_ingress_class
     *
     * @return $this
     */
    public function setEnableIngressWithoutIngressClass($enable_ingress_without_ingress_class)
    {
        $this->container['enable_ingress_without_ingress_class'] = $enable_ingress_without_ingress_class;

        return $this;
    }

    /**
     * Gets ingress_classes
     *
     * @return string[]
     */
    public function getIngressClasses()
    {
        return $this->container['ingress_classes'];
    }

    /**
     * Sets ingress_classes
     *
     * @param string[] $ingress_classes ingress_classes
     *
     * @return $this
     */
    public function setIngressClasses($ingress_classes)
    {
        $this->container['ingress_classes'] = $ingress_classes;

        return $this;
    }

    /**
     * Gets update_status
     *
     * @return bool
     */
    public function getUpdateStatus()
    {
        return $this->container['update_status'];
    }

    /**
     * Sets update_status
     *
     * @param bool $update_status update_status
     *
     * @return $this
     */
    public function setUpdateStatus($update_status)
    {
        $this->container['update_status'] = $update_status;

        return $this;
    }

    /**
     * Gets watch_namespaces
     *
     * @return string[]
     */
    public function getWatchNamespaces()
    {
        return $this->container['watch_namespaces'];
    }

    /**
     * Sets watch_namespaces
     *
     * @param string[] $watch_namespaces watch_namespaces
     *
     * @return $this
     */
    public function setWatchNamespaces($watch_namespaces)
    {
        $this->container['watch_namespaces'] = $watch_namespaces;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

