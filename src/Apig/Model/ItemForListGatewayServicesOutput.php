<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListGatewayServicesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListGatewayServicesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auth_spec' => '\Volcengine\Apig\Model\AuthSpecForListGatewayServicesOutput',
        'comments' => 'string',
        'create_time' => 'string',
        'custom_domains' => '\Volcengine\Apig\Model\CustomDomainForListGatewayServicesOutput[]',
        'domain_spec' => '\Volcengine\Apig\Model\DomainSpecForListGatewayServicesOutput',
        'domains' => '\Volcengine\Apig\Model\DomainForListGatewayServicesOutput[]',
        'gateway_id' => 'string',
        'gateway_name' => 'string',
        'id' => 'string',
        'message' => 'string',
        'name' => 'string',
        'protocol' => 'string[]',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auth_spec' => null,
        'comments' => null,
        'create_time' => null,
        'custom_domains' => null,
        'domain_spec' => null,
        'domains' => null,
        'gateway_id' => null,
        'gateway_name' => null,
        'id' => null,
        'message' => null,
        'name' => null,
        'protocol' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_spec' => 'AuthSpec',
        'comments' => 'Comments',
        'create_time' => 'CreateTime',
        'custom_domains' => 'CustomDomains',
        'domain_spec' => 'DomainSpec',
        'domains' => 'Domains',
        'gateway_id' => 'GatewayId',
        'gateway_name' => 'GatewayName',
        'id' => 'Id',
        'message' => 'Message',
        'name' => 'Name',
        'protocol' => 'Protocol',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_spec' => 'setAuthSpec',
        'comments' => 'setComments',
        'create_time' => 'setCreateTime',
        'custom_domains' => 'setCustomDomains',
        'domain_spec' => 'setDomainSpec',
        'domains' => 'setDomains',
        'gateway_id' => 'setGatewayId',
        'gateway_name' => 'setGatewayName',
        'id' => 'setId',
        'message' => 'setMessage',
        'name' => 'setName',
        'protocol' => 'setProtocol',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_spec' => 'getAuthSpec',
        'comments' => 'getComments',
        'create_time' => 'getCreateTime',
        'custom_domains' => 'getCustomDomains',
        'domain_spec' => 'getDomainSpec',
        'domains' => 'getDomains',
        'gateway_id' => 'getGatewayId',
        'gateway_name' => 'getGatewayName',
        'id' => 'getId',
        'message' => 'getMessage',
        'name' => 'getName',
        'protocol' => 'getProtocol',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_spec'] = isset($data['auth_spec']) ? $data['auth_spec'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['custom_domains'] = isset($data['custom_domains']) ? $data['custom_domains'] : null;
        $this->container['domain_spec'] = isset($data['domain_spec']) ? $data['domain_spec'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['gateway_id'] = isset($data['gateway_id']) ? $data['gateway_id'] : null;
        $this->container['gateway_name'] = isset($data['gateway_name']) ? $data['gateway_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_spec
     *
     * @return \Volcengine\Apig\Model\AuthSpecForListGatewayServicesOutput
     */
    public function getAuthSpec()
    {
        return $this->container['auth_spec'];
    }

    /**
     * Sets auth_spec
     *
     * @param \Volcengine\Apig\Model\AuthSpecForListGatewayServicesOutput $auth_spec auth_spec
     *
     * @return $this
     */
    public function setAuthSpec($auth_spec)
    {
        $this->container['auth_spec'] = $auth_spec;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets custom_domains
     *
     * @return \Volcengine\Apig\Model\CustomDomainForListGatewayServicesOutput[]
     */
    public function getCustomDomains()
    {
        return $this->container['custom_domains'];
    }

    /**
     * Sets custom_domains
     *
     * @param \Volcengine\Apig\Model\CustomDomainForListGatewayServicesOutput[] $custom_domains custom_domains
     *
     * @return $this
     */
    public function setCustomDomains($custom_domains)
    {
        $this->container['custom_domains'] = $custom_domains;

        return $this;
    }

    /**
     * Gets domain_spec
     *
     * @return \Volcengine\Apig\Model\DomainSpecForListGatewayServicesOutput
     */
    public function getDomainSpec()
    {
        return $this->container['domain_spec'];
    }

    /**
     * Sets domain_spec
     *
     * @param \Volcengine\Apig\Model\DomainSpecForListGatewayServicesOutput $domain_spec domain_spec
     *
     * @return $this
     */
    public function setDomainSpec($domain_spec)
    {
        $this->container['domain_spec'] = $domain_spec;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \Volcengine\Apig\Model\DomainForListGatewayServicesOutput[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \Volcengine\Apig\Model\DomainForListGatewayServicesOutput[] $domains domains
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets gateway_id
     *
     * @return string
     */
    public function getGatewayId()
    {
        return $this->container['gateway_id'];
    }

    /**
     * Sets gateway_id
     *
     * @param string $gateway_id gateway_id
     *
     * @return $this
     */
    public function setGatewayId($gateway_id)
    {
        $this->container['gateway_id'] = $gateway_id;

        return $this;
    }

    /**
     * Gets gateway_name
     *
     * @return string
     */
    public function getGatewayName()
    {
        return $this->container['gateway_name'];
    }

    /**
     * Sets gateway_name
     *
     * @param string $gateway_name gateway_name
     *
     * @return $this
     */
    public function setGatewayName($gateway_name)
    {
        $this->container['gateway_name'] = $gateway_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string[]
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string[] $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

