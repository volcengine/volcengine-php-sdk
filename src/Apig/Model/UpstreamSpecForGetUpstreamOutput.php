<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpstreamSpecForGetUpstreamOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpstreamSpecForGetUpstreamOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ai_provider' => '\Volcengine\Apig\Model\AIProviderForGetUpstreamOutput',
        'ecs_list' => '\Volcengine\Apig\Model\EcsListForGetUpstreamOutput[]',
        'k8_s_service' => '\Volcengine\Apig\Model\K8SServiceForGetUpstreamOutput',
        'nacos_service' => '\Volcengine\Apig\Model\NacosServiceForGetUpstreamOutput',
        've_faas' => '\Volcengine\Apig\Model\VeFaasForGetUpstreamOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ai_provider' => null,
        'ecs_list' => null,
        'k8_s_service' => null,
        'nacos_service' => null,
        've_faas' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ai_provider' => 'AIProvider',
        'ecs_list' => 'EcsList',
        'k8_s_service' => 'K8SService',
        'nacos_service' => 'NacosService',
        've_faas' => 'VeFaas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ai_provider' => 'setAiProvider',
        'ecs_list' => 'setEcsList',
        'k8_s_service' => 'setK8SService',
        'nacos_service' => 'setNacosService',
        've_faas' => 'setVeFaas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ai_provider' => 'getAiProvider',
        'ecs_list' => 'getEcsList',
        'k8_s_service' => 'getK8SService',
        'nacos_service' => 'getNacosService',
        've_faas' => 'getVeFaas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ai_provider'] = isset($data['ai_provider']) ? $data['ai_provider'] : null;
        $this->container['ecs_list'] = isset($data['ecs_list']) ? $data['ecs_list'] : null;
        $this->container['k8_s_service'] = isset($data['k8_s_service']) ? $data['k8_s_service'] : null;
        $this->container['nacos_service'] = isset($data['nacos_service']) ? $data['nacos_service'] : null;
        $this->container['ve_faas'] = isset($data['ve_faas']) ? $data['ve_faas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ai_provider
     *
     * @return \Volcengine\Apig\Model\AIProviderForGetUpstreamOutput
     */
    public function getAiProvider()
    {
        return $this->container['ai_provider'];
    }

    /**
     * Sets ai_provider
     *
     * @param \Volcengine\Apig\Model\AIProviderForGetUpstreamOutput $ai_provider ai_provider
     *
     * @return $this
     */
    public function setAiProvider($ai_provider)
    {
        $this->container['ai_provider'] = $ai_provider;

        return $this;
    }

    /**
     * Gets ecs_list
     *
     * @return \Volcengine\Apig\Model\EcsListForGetUpstreamOutput[]
     */
    public function getEcsList()
    {
        return $this->container['ecs_list'];
    }

    /**
     * Sets ecs_list
     *
     * @param \Volcengine\Apig\Model\EcsListForGetUpstreamOutput[] $ecs_list ecs_list
     *
     * @return $this
     */
    public function setEcsList($ecs_list)
    {
        $this->container['ecs_list'] = $ecs_list;

        return $this;
    }

    /**
     * Gets k8_s_service
     *
     * @return \Volcengine\Apig\Model\K8SServiceForGetUpstreamOutput
     */
    public function getK8SService()
    {
        return $this->container['k8_s_service'];
    }

    /**
     * Sets k8_s_service
     *
     * @param \Volcengine\Apig\Model\K8SServiceForGetUpstreamOutput $k8_s_service k8_s_service
     *
     * @return $this
     */
    public function setK8SService($k8_s_service)
    {
        $this->container['k8_s_service'] = $k8_s_service;

        return $this;
    }

    /**
     * Gets nacos_service
     *
     * @return \Volcengine\Apig\Model\NacosServiceForGetUpstreamOutput
     */
    public function getNacosService()
    {
        return $this->container['nacos_service'];
    }

    /**
     * Sets nacos_service
     *
     * @param \Volcengine\Apig\Model\NacosServiceForGetUpstreamOutput $nacos_service nacos_service
     *
     * @return $this
     */
    public function setNacosService($nacos_service)
    {
        $this->container['nacos_service'] = $nacos_service;

        return $this;
    }

    /**
     * Gets ve_faas
     *
     * @return \Volcengine\Apig\Model\VeFaasForGetUpstreamOutput
     */
    public function getVeFaas()
    {
        return $this->container['ve_faas'];
    }

    /**
     * Sets ve_faas
     *
     * @param \Volcengine\Apig\Model\VeFaasForGetUpstreamOutput $ve_faas ve_faas
     *
     * @return $this
     */
    public function setVeFaas($ve_faas)
    {
        $this->container['ve_faas'] = $ve_faas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

