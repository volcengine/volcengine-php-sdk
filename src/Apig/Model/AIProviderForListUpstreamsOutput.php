<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AIProviderForListUpstreamsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AIProviderForListUpstreamsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_url' => 'string',
        'custom_body_params' => '\Volcengine\Apig\Model\CustomBodyParamsForListUpstreamsOutput',
        'custom_header_params' => '\Volcengine\Apig\Model\CustomHeaderParamsForListUpstreamsOutput',
        'custom_model_service' => '\Volcengine\Apig\Model\CustomModelServiceForListUpstreamsOutput',
        'name' => 'string',
        'token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_url' => null,
        'custom_body_params' => null,
        'custom_header_params' => null,
        'custom_model_service' => null,
        'name' => null,
        'token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_url' => 'BaseUrl',
        'custom_body_params' => 'CustomBodyParams',
        'custom_header_params' => 'CustomHeaderParams',
        'custom_model_service' => 'CustomModelService',
        'name' => 'Name',
        'token' => 'Token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_url' => 'setBaseUrl',
        'custom_body_params' => 'setCustomBodyParams',
        'custom_header_params' => 'setCustomHeaderParams',
        'custom_model_service' => 'setCustomModelService',
        'name' => 'setName',
        'token' => 'setToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_url' => 'getBaseUrl',
        'custom_body_params' => 'getCustomBodyParams',
        'custom_header_params' => 'getCustomHeaderParams',
        'custom_model_service' => 'getCustomModelService',
        'name' => 'getName',
        'token' => 'getToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_url'] = isset($data['base_url']) ? $data['base_url'] : null;
        $this->container['custom_body_params'] = isset($data['custom_body_params']) ? $data['custom_body_params'] : null;
        $this->container['custom_header_params'] = isset($data['custom_header_params']) ? $data['custom_header_params'] : null;
        $this->container['custom_model_service'] = isset($data['custom_model_service']) ? $data['custom_model_service'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_url
     *
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string $base_url base_url
     *
     * @return $this
     */
    public function setBaseUrl($base_url)
    {
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets custom_body_params
     *
     * @return \Volcengine\Apig\Model\CustomBodyParamsForListUpstreamsOutput
     */
    public function getCustomBodyParams()
    {
        return $this->container['custom_body_params'];
    }

    /**
     * Sets custom_body_params
     *
     * @param \Volcengine\Apig\Model\CustomBodyParamsForListUpstreamsOutput $custom_body_params custom_body_params
     *
     * @return $this
     */
    public function setCustomBodyParams($custom_body_params)
    {
        $this->container['custom_body_params'] = $custom_body_params;

        return $this;
    }

    /**
     * Gets custom_header_params
     *
     * @return \Volcengine\Apig\Model\CustomHeaderParamsForListUpstreamsOutput
     */
    public function getCustomHeaderParams()
    {
        return $this->container['custom_header_params'];
    }

    /**
     * Sets custom_header_params
     *
     * @param \Volcengine\Apig\Model\CustomHeaderParamsForListUpstreamsOutput $custom_header_params custom_header_params
     *
     * @return $this
     */
    public function setCustomHeaderParams($custom_header_params)
    {
        $this->container['custom_header_params'] = $custom_header_params;

        return $this;
    }

    /**
     * Gets custom_model_service
     *
     * @return \Volcengine\Apig\Model\CustomModelServiceForListUpstreamsOutput
     */
    public function getCustomModelService()
    {
        return $this->container['custom_model_service'];
    }

    /**
     * Sets custom_model_service
     *
     * @param \Volcengine\Apig\Model\CustomModelServiceForListUpstreamsOutput $custom_model_service custom_model_service
     *
     * @return $this
     */
    public function setCustomModelService($custom_model_service)
    {
        $this->container['custom_model_service'] = $custom_model_service;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

