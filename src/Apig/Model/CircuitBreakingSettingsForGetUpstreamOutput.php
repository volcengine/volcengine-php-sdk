<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CircuitBreakingSettingsForGetUpstreamOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CircuitBreakingSettingsForGetUpstreamOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_ejection_time' => 'int',
        'consecutive_errors' => 'int',
        'enable' => 'bool',
        'interval' => 'int',
        'max_ejection_percent' => 'int',
        'min_health_percent' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_ejection_time' => 'int64',
        'consecutive_errors' => 'int64',
        'enable' => null,
        'interval' => 'int64',
        'max_ejection_percent' => 'int32',
        'min_health_percent' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_ejection_time' => 'BaseEjectionTime',
        'consecutive_errors' => 'ConsecutiveErrors',
        'enable' => 'Enable',
        'interval' => 'Interval',
        'max_ejection_percent' => 'MaxEjectionPercent',
        'min_health_percent' => 'MinHealthPercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_ejection_time' => 'setBaseEjectionTime',
        'consecutive_errors' => 'setConsecutiveErrors',
        'enable' => 'setEnable',
        'interval' => 'setInterval',
        'max_ejection_percent' => 'setMaxEjectionPercent',
        'min_health_percent' => 'setMinHealthPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_ejection_time' => 'getBaseEjectionTime',
        'consecutive_errors' => 'getConsecutiveErrors',
        'enable' => 'getEnable',
        'interval' => 'getInterval',
        'max_ejection_percent' => 'getMaxEjectionPercent',
        'min_health_percent' => 'getMinHealthPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_ejection_time'] = isset($data['base_ejection_time']) ? $data['base_ejection_time'] : null;
        $this->container['consecutive_errors'] = isset($data['consecutive_errors']) ? $data['consecutive_errors'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['max_ejection_percent'] = isset($data['max_ejection_percent']) ? $data['max_ejection_percent'] : null;
        $this->container['min_health_percent'] = isset($data['min_health_percent']) ? $data['min_health_percent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_ejection_time
     *
     * @return int
     */
    public function getBaseEjectionTime()
    {
        return $this->container['base_ejection_time'];
    }

    /**
     * Sets base_ejection_time
     *
     * @param int $base_ejection_time base_ejection_time
     *
     * @return $this
     */
    public function setBaseEjectionTime($base_ejection_time)
    {
        $this->container['base_ejection_time'] = $base_ejection_time;

        return $this;
    }

    /**
     * Gets consecutive_errors
     *
     * @return int
     */
    public function getConsecutiveErrors()
    {
        return $this->container['consecutive_errors'];
    }

    /**
     * Sets consecutive_errors
     *
     * @param int $consecutive_errors consecutive_errors
     *
     * @return $this
     */
    public function setConsecutiveErrors($consecutive_errors)
    {
        $this->container['consecutive_errors'] = $consecutive_errors;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets max_ejection_percent
     *
     * @return int
     */
    public function getMaxEjectionPercent()
    {
        return $this->container['max_ejection_percent'];
    }

    /**
     * Sets max_ejection_percent
     *
     * @param int $max_ejection_percent max_ejection_percent
     *
     * @return $this
     */
    public function setMaxEjectionPercent($max_ejection_percent)
    {
        $this->container['max_ejection_percent'] = $max_ejection_percent;

        return $this;
    }

    /**
     * Gets min_health_percent
     *
     * @return int
     */
    public function getMinHealthPercent()
    {
        return $this->container['min_health_percent'];
    }

    /**
     * Sets min_health_percent
     *
     * @param int $min_health_percent min_health_percent
     *
     * @return $this
     */
    public function setMinHealthPercent($min_health_percent)
    {
        $this->container['min_health_percent'] = $min_health_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

