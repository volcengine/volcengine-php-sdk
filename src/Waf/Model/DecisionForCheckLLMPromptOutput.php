<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DecisionForCheckLLMPromptOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DecisionForCheckLLMPromptOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'int',
        'custom_matches' => '\Volcengine\Waf\Model\CustomMatchForCheckLLMPromptOutput[]',
        'err_code' => 'int',
        'err_msg' => 'string',
        'labels' => 'string[]',
        'matches' => '\Volcengine\Waf\Model\MatchForCheckLLMPromptOutput[]',
        'replace_detail' => '\Volcengine\Waf\Model\ReplaceDetailForCheckLLMPromptOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => 'int32',
        'custom_matches' => null,
        'err_code' => 'int32',
        'err_msg' => null,
        'labels' => null,
        'matches' => null,
        'replace_detail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'Action',
        'custom_matches' => 'CustomMatches',
        'err_code' => 'ErrCode',
        'err_msg' => 'ErrMsg',
        'labels' => 'Labels',
        'matches' => 'Matches',
        'replace_detail' => 'ReplaceDetail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'custom_matches' => 'setCustomMatches',
        'err_code' => 'setErrCode',
        'err_msg' => 'setErrMsg',
        'labels' => 'setLabels',
        'matches' => 'setMatches',
        'replace_detail' => 'setReplaceDetail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'custom_matches' => 'getCustomMatches',
        'err_code' => 'getErrCode',
        'err_msg' => 'getErrMsg',
        'labels' => 'getLabels',
        'matches' => 'getMatches',
        'replace_detail' => 'getReplaceDetail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['custom_matches'] = isset($data['custom_matches']) ? $data['custom_matches'] : null;
        $this->container['err_code'] = isset($data['err_code']) ? $data['err_code'] : null;
        $this->container['err_msg'] = isset($data['err_msg']) ? $data['err_msg'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['matches'] = isset($data['matches']) ? $data['matches'] : null;
        $this->container['replace_detail'] = isset($data['replace_detail']) ? $data['replace_detail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return int
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param int $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets custom_matches
     *
     * @return \Volcengine\Waf\Model\CustomMatchForCheckLLMPromptOutput[]
     */
    public function getCustomMatches()
    {
        return $this->container['custom_matches'];
    }

    /**
     * Sets custom_matches
     *
     * @param \Volcengine\Waf\Model\CustomMatchForCheckLLMPromptOutput[] $custom_matches custom_matches
     *
     * @return $this
     */
    public function setCustomMatches($custom_matches)
    {
        $this->container['custom_matches'] = $custom_matches;

        return $this;
    }

    /**
     * Gets err_code
     *
     * @return int
     */
    public function getErrCode()
    {
        return $this->container['err_code'];
    }

    /**
     * Sets err_code
     *
     * @param int $err_code err_code
     *
     * @return $this
     */
    public function setErrCode($err_code)
    {
        $this->container['err_code'] = $err_code;

        return $this;
    }

    /**
     * Gets err_msg
     *
     * @return string
     */
    public function getErrMsg()
    {
        return $this->container['err_msg'];
    }

    /**
     * Sets err_msg
     *
     * @param string $err_msg err_msg
     *
     * @return $this
     */
    public function setErrMsg($err_msg)
    {
        $this->container['err_msg'] = $err_msg;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return \Volcengine\Waf\Model\MatchForCheckLLMPromptOutput[]
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param \Volcengine\Waf\Model\MatchForCheckLLMPromptOutput[] $matches matches
     *
     * @return $this
     */
    public function setMatches($matches)
    {
        $this->container['matches'] = $matches;

        return $this;
    }

    /**
     * Gets replace_detail
     *
     * @return \Volcengine\Waf\Model\ReplaceDetailForCheckLLMPromptOutput
     */
    public function getReplaceDetail()
    {
        return $this->container['replace_detail'];
    }

    /**
     * Sets replace_detail
     *
     * @param \Volcengine\Waf\Model\ReplaceDetailForCheckLLMPromptOutput $replace_detail replace_detail
     *
     * @return $this
     */
    public function setReplaceDetail($replace_detail)
    {
        $this->container['replace_detail'] = $replace_detail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

