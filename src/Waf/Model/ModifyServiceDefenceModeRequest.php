<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyServiceDefenceModeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyServiceDefenceModeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'defence_mode' => 'int',
        'extra_defence_mode_lb_instance' => '\Volcengine\Waf\Model\ExtraDefenceModeLBInstanceForModifyServiceDefenceModeInput[]',
        'host' => 'string',
        'project_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'defence_mode' => 'int32',
        'extra_defence_mode_lb_instance' => null,
        'host' => null,
        'project_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'defence_mode' => 'DefenceMode',
        'extra_defence_mode_lb_instance' => 'ExtraDefenceModeLBInstance',
        'host' => 'Host',
        'project_name' => 'ProjectName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'defence_mode' => 'setDefenceMode',
        'extra_defence_mode_lb_instance' => 'setExtraDefenceModeLbInstance',
        'host' => 'setHost',
        'project_name' => 'setProjectName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'defence_mode' => 'getDefenceMode',
        'extra_defence_mode_lb_instance' => 'getExtraDefenceModeLbInstance',
        'host' => 'getHost',
        'project_name' => 'getProjectName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['defence_mode'] = isset($data['defence_mode']) ? $data['defence_mode'] : null;
        $this->container['extra_defence_mode_lb_instance'] = isset($data['extra_defence_mode_lb_instance']) ? $data['extra_defence_mode_lb_instance'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['defence_mode'] === null) {
            $invalidProperties[] = "'defence_mode' can't be null";
        }
        if ($this->container['host'] === null) {
            $invalidProperties[] = "'host' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets defence_mode
     *
     * @return int
     */
    public function getDefenceMode()
    {
        return $this->container['defence_mode'];
    }

    /**
     * Sets defence_mode
     *
     * @param int $defence_mode defence_mode
     *
     * @return $this
     */
    public function setDefenceMode($defence_mode)
    {
        $this->container['defence_mode'] = $defence_mode;

        return $this;
    }

    /**
     * Gets extra_defence_mode_lb_instance
     *
     * @return \Volcengine\Waf\Model\ExtraDefenceModeLBInstanceForModifyServiceDefenceModeInput[]
     */
    public function getExtraDefenceModeLbInstance()
    {
        return $this->container['extra_defence_mode_lb_instance'];
    }

    /**
     * Sets extra_defence_mode_lb_instance
     *
     * @param \Volcengine\Waf\Model\ExtraDefenceModeLBInstanceForModifyServiceDefenceModeInput[] $extra_defence_mode_lb_instance extra_defence_mode_lb_instance
     *
     * @return $this
     */
    public function setExtraDefenceModeLbInstance($extra_defence_mode_lb_instance)
    {
        $this->container['extra_defence_mode_lb_instance'] = $extra_defence_mode_lb_instance;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

