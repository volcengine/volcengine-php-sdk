<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RuleForGetVulnerabilityConfigOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RuleForGetVulnerabilityConfigOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'int',
        'count_time' => 'int',
        'effect_time' => 'int',
        'effect_time_view_unit' => 'string',
        'field' => 'string',
        'hit_request_count' => 'int',
        'response_http_status' => 'int[]',
        'response_http_status_hit_percent' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => 'int32',
        'count_time' => 'int32',
        'effect_time' => 'int32',
        'effect_time_view_unit' => null,
        'field' => null,
        'hit_request_count' => 'int32',
        'response_http_status' => 'int32',
        'response_http_status_hit_percent' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'Action',
        'count_time' => 'CountTime',
        'effect_time' => 'EffectTime',
        'effect_time_view_unit' => 'EffectTimeViewUnit',
        'field' => 'Field',
        'hit_request_count' => 'HitRequestCount',
        'response_http_status' => 'ResponseHttpStatus',
        'response_http_status_hit_percent' => 'ResponseHttpStatusHitPercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'count_time' => 'setCountTime',
        'effect_time' => 'setEffectTime',
        'effect_time_view_unit' => 'setEffectTimeViewUnit',
        'field' => 'setField',
        'hit_request_count' => 'setHitRequestCount',
        'response_http_status' => 'setResponseHttpStatus',
        'response_http_status_hit_percent' => 'setResponseHttpStatusHitPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'count_time' => 'getCountTime',
        'effect_time' => 'getEffectTime',
        'effect_time_view_unit' => 'getEffectTimeViewUnit',
        'field' => 'getField',
        'hit_request_count' => 'getHitRequestCount',
        'response_http_status' => 'getResponseHttpStatus',
        'response_http_status_hit_percent' => 'getResponseHttpStatusHitPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['count_time'] = isset($data['count_time']) ? $data['count_time'] : null;
        $this->container['effect_time'] = isset($data['effect_time']) ? $data['effect_time'] : null;
        $this->container['effect_time_view_unit'] = isset($data['effect_time_view_unit']) ? $data['effect_time_view_unit'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['hit_request_count'] = isset($data['hit_request_count']) ? $data['hit_request_count'] : null;
        $this->container['response_http_status'] = isset($data['response_http_status']) ? $data['response_http_status'] : null;
        $this->container['response_http_status_hit_percent'] = isset($data['response_http_status_hit_percent']) ? $data['response_http_status_hit_percent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return int
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param int $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets count_time
     *
     * @return int
     */
    public function getCountTime()
    {
        return $this->container['count_time'];
    }

    /**
     * Sets count_time
     *
     * @param int $count_time count_time
     *
     * @return $this
     */
    public function setCountTime($count_time)
    {
        $this->container['count_time'] = $count_time;

        return $this;
    }

    /**
     * Gets effect_time
     *
     * @return int
     */
    public function getEffectTime()
    {
        return $this->container['effect_time'];
    }

    /**
     * Sets effect_time
     *
     * @param int $effect_time effect_time
     *
     * @return $this
     */
    public function setEffectTime($effect_time)
    {
        $this->container['effect_time'] = $effect_time;

        return $this;
    }

    /**
     * Gets effect_time_view_unit
     *
     * @return string
     */
    public function getEffectTimeViewUnit()
    {
        return $this->container['effect_time_view_unit'];
    }

    /**
     * Sets effect_time_view_unit
     *
     * @param string $effect_time_view_unit effect_time_view_unit
     *
     * @return $this
     */
    public function setEffectTimeViewUnit($effect_time_view_unit)
    {
        $this->container['effect_time_view_unit'] = $effect_time_view_unit;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets hit_request_count
     *
     * @return int
     */
    public function getHitRequestCount()
    {
        return $this->container['hit_request_count'];
    }

    /**
     * Sets hit_request_count
     *
     * @param int $hit_request_count hit_request_count
     *
     * @return $this
     */
    public function setHitRequestCount($hit_request_count)
    {
        $this->container['hit_request_count'] = $hit_request_count;

        return $this;
    }

    /**
     * Gets response_http_status
     *
     * @return int[]
     */
    public function getResponseHttpStatus()
    {
        return $this->container['response_http_status'];
    }

    /**
     * Sets response_http_status
     *
     * @param int[] $response_http_status response_http_status
     *
     * @return $this
     */
    public function setResponseHttpStatus($response_http_status)
    {
        $this->container['response_http_status'] = $response_http_status;

        return $this;
    }

    /**
     * Gets response_http_status_hit_percent
     *
     * @return int
     */
    public function getResponseHttpStatusHitPercent()
    {
        return $this->container['response_http_status_hit_percent'];
    }

    /**
     * Sets response_http_status_hit_percent
     *
     * @param int $response_http_status_hit_percent response_http_status_hit_percent
     *
     * @return $this
     */
    public function setResponseHttpStatusHitPercent($response_http_status_hit_percent)
    {
        $this->container['response_http_status_hit_percent'] = $response_http_status_hit_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

