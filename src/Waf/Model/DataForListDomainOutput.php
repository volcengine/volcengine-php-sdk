<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListDomainOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListDomainOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_mode' => 'int',
        'advanced_defense_ip' => 'string',
        'advanced_defense_ipv6' => 'string',
        'api_enable' => 'int',
        'attack_status' => 'int',
        'auto_cc_enable' => 'int',
        'automatic_black_enable' => 'int',
        'backend_groups' => '\Volcengine\Waf\Model\BackendGroupForListDomainOutput[]',
        'black_ip_enable' => 'int',
        'black_lct_enable' => 'int',
        'bot_dytoken_enable' => 'int',
        'bot_frequency_enable' => 'int',
        'bot_repeat_enable' => 'int',
        'bot_sequence_default_action' => 'int',
        'bot_sequence_enable' => 'int',
        'cc_enable' => 'int',
        'certificate_id' => 'int',
        'certificate_name' => 'string',
        'certificate_platform' => 'string',
        'clb_instance_ids' => 'string',
        'clb_listener_id' => 'string',
        'clb_pool_id' => 'string',
        'clb_server_id' => 'string',
        'client_ip_location' => 'int',
        'client_max_body_size' => 'int',
        'cloud_access_config' => '\Volcengine\Waf\Model\CloudAccessConfigForListDomainOutput[]',
        'cname' => 'string',
        'custom_bot_enable' => 'int',
        'custom_header' => 'string[]',
        'custom_rsp_enable' => 'int',
        'custom_sni' => 'string',
        'defence_mode' => 'int',
        'dlp_enable' => 'int',
        'domain' => 'string',
        'enable_custom_redirect' => 'int',
        'enable_http2' => 'int',
        'enable_ipv6' => 'int',
        'enable_sni' => 'int',
        'keep_alive_request' => 'int',
        'keep_alive_time_out' => 'int',
        'lb_algorithm' => 'string',
        'port' => 'int',
        'protocol_follow' => 'int',
        'protocol_ports' => '\Volcengine\Waf\Model\ProtocolPortsForListDomainOutput',
        'protocols' => 'string',
        'proxy_config' => 'int',
        'proxy_connect_time_out' => 'int',
        'proxy_keep_alive' => 'int',
        'proxy_keep_alive_time_out' => 'int',
        'proxy_read_time_out' => 'int',
        'proxy_retry' => 'int',
        'proxy_write_time_out' => 'int',
        'public_real_server' => 'int',
        'redirect_https' => 'bool',
        'region' => 'string',
        'rsp_abnormal_enable' => 'int',
        'ssl_ciphers' => 'string[]',
        'ssl_protocols' => 'string[]',
        'server_ips' => 'string',
        'src_ips' => 'string',
        'src_protocol' => 'string',
        'status' => 'int',
        'system_bot_enable' => 'int',
        'tcp_listener_config' => '\Volcengine\Waf\Model\TCPListenerConfigForListDomainOutput[]',
        'tls_enable' => 'int',
        'tls_fields_config' => '\Volcengine\Waf\Model\TLSFieldsConfigForListDomainOutput',
        'tamper_proof_enable' => 'int',
        'update_time' => 'string',
        'volc_certificate_id' => 'string',
        'vpc_id' => 'string',
        'waf_enable' => 'int',
        'waf_white_req_enable' => 'int',
        'white_enable' => 'int',
        'white_field_enable' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_mode' => 'int32',
        'advanced_defense_ip' => null,
        'advanced_defense_ipv6' => null,
        'api_enable' => 'int32',
        'attack_status' => 'int32',
        'auto_cc_enable' => 'int32',
        'automatic_black_enable' => 'int32',
        'backend_groups' => null,
        'black_ip_enable' => 'int32',
        'black_lct_enable' => 'int32',
        'bot_dytoken_enable' => 'int32',
        'bot_frequency_enable' => 'int32',
        'bot_repeat_enable' => 'int32',
        'bot_sequence_default_action' => 'int32',
        'bot_sequence_enable' => 'int32',
        'cc_enable' => 'int32',
        'certificate_id' => 'int32',
        'certificate_name' => null,
        'certificate_platform' => null,
        'clb_instance_ids' => null,
        'clb_listener_id' => null,
        'clb_pool_id' => null,
        'clb_server_id' => null,
        'client_ip_location' => 'int32',
        'client_max_body_size' => 'int32',
        'cloud_access_config' => null,
        'cname' => null,
        'custom_bot_enable' => 'int32',
        'custom_header' => null,
        'custom_rsp_enable' => 'int32',
        'custom_sni' => null,
        'defence_mode' => 'int32',
        'dlp_enable' => 'int32',
        'domain' => null,
        'enable_custom_redirect' => 'int32',
        'enable_http2' => 'int32',
        'enable_ipv6' => 'int32',
        'enable_sni' => 'int32',
        'keep_alive_request' => 'int32',
        'keep_alive_time_out' => 'int32',
        'lb_algorithm' => null,
        'port' => 'int32',
        'protocol_follow' => 'int32',
        'protocol_ports' => null,
        'protocols' => null,
        'proxy_config' => 'int32',
        'proxy_connect_time_out' => 'int32',
        'proxy_keep_alive' => 'int32',
        'proxy_keep_alive_time_out' => 'int32',
        'proxy_read_time_out' => 'int32',
        'proxy_retry' => 'int32',
        'proxy_write_time_out' => 'int32',
        'public_real_server' => 'int32',
        'redirect_https' => null,
        'region' => null,
        'rsp_abnormal_enable' => 'int32',
        'ssl_ciphers' => null,
        'ssl_protocols' => null,
        'server_ips' => null,
        'src_ips' => null,
        'src_protocol' => null,
        'status' => 'int32',
        'system_bot_enable' => 'int32',
        'tcp_listener_config' => null,
        'tls_enable' => 'int32',
        'tls_fields_config' => null,
        'tamper_proof_enable' => 'int32',
        'update_time' => null,
        'volc_certificate_id' => null,
        'vpc_id' => null,
        'waf_enable' => 'int32',
        'waf_white_req_enable' => 'int32',
        'white_enable' => 'int32',
        'white_field_enable' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_mode' => 'AccessMode',
        'advanced_defense_ip' => 'AdvancedDefenseIP',
        'advanced_defense_ipv6' => 'AdvancedDefenseIPv6',
        'api_enable' => 'ApiEnable',
        'attack_status' => 'AttackStatus',
        'auto_cc_enable' => 'AutoCCEnable',
        'automatic_black_enable' => 'AutomaticBlackEnable',
        'backend_groups' => 'BackendGroups',
        'black_ip_enable' => 'BlackIpEnable',
        'black_lct_enable' => 'BlackLctEnable',
        'bot_dytoken_enable' => 'BotDytokenEnable',
        'bot_frequency_enable' => 'BotFrequencyEnable',
        'bot_repeat_enable' => 'BotRepeatEnable',
        'bot_sequence_default_action' => 'BotSequenceDefaultAction',
        'bot_sequence_enable' => 'BotSequenceEnable',
        'cc_enable' => 'CcEnable',
        'certificate_id' => 'CertificateID',
        'certificate_name' => 'CertificateName',
        'certificate_platform' => 'CertificatePlatform',
        'clb_instance_ids' => 'ClbInstanceIDs',
        'clb_listener_id' => 'ClbListenerId',
        'clb_pool_id' => 'ClbPoolId',
        'clb_server_id' => 'ClbServerId',
        'client_ip_location' => 'ClientIPLocation',
        'client_max_body_size' => 'ClientMaxBodySize',
        'cloud_access_config' => 'CloudAccessConfig',
        'cname' => 'Cname',
        'custom_bot_enable' => 'CustomBotEnable',
        'custom_header' => 'CustomHeader',
        'custom_rsp_enable' => 'CustomRspEnable',
        'custom_sni' => 'CustomSNI',
        'defence_mode' => 'DefenceMode',
        'dlp_enable' => 'DlpEnable',
        'domain' => 'Domain',
        'enable_custom_redirect' => 'EnableCustomRedirect',
        'enable_http2' => 'EnableHTTP2',
        'enable_ipv6' => 'EnableIPv6',
        'enable_sni' => 'EnableSNI',
        'keep_alive_request' => 'KeepAliveRequest',
        'keep_alive_time_out' => 'KeepAliveTimeOut',
        'lb_algorithm' => 'LBAlgorithm',
        'port' => 'Port',
        'protocol_follow' => 'ProtocolFollow',
        'protocol_ports' => 'ProtocolPorts',
        'protocols' => 'Protocols',
        'proxy_config' => 'ProxyConfig',
        'proxy_connect_time_out' => 'ProxyConnectTimeOut',
        'proxy_keep_alive' => 'ProxyKeepAlive',
        'proxy_keep_alive_time_out' => 'ProxyKeepAliveTimeOut',
        'proxy_read_time_out' => 'ProxyReadTimeOut',
        'proxy_retry' => 'ProxyRetry',
        'proxy_write_time_out' => 'ProxyWriteTimeOut',
        'public_real_server' => 'PublicRealServer',
        'redirect_https' => 'RedirectHTTPS',
        'region' => 'Region',
        'rsp_abnormal_enable' => 'RspAbnormalEnable',
        'ssl_ciphers' => 'SSLCiphers',
        'ssl_protocols' => 'SSLProtocols',
        'server_ips' => 'ServerIps',
        'src_ips' => 'SrcIps',
        'src_protocol' => 'SrcProtocol',
        'status' => 'Status',
        'system_bot_enable' => 'SystemBotEnable',
        'tcp_listener_config' => 'TCPListenerConfig',
        'tls_enable' => 'TLSEnable',
        'tls_fields_config' => 'TLSFieldsConfig',
        'tamper_proof_enable' => 'TamperProofEnable',
        'update_time' => 'UpdateTime',
        'volc_certificate_id' => 'VolcCertificateID',
        'vpc_id' => 'VpcID',
        'waf_enable' => 'WafEnable',
        'waf_white_req_enable' => 'WafWhiteReqEnable',
        'white_enable' => 'WhiteEnable',
        'white_field_enable' => 'WhiteFieldEnable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_mode' => 'setAccessMode',
        'advanced_defense_ip' => 'setAdvancedDefenseIp',
        'advanced_defense_ipv6' => 'setAdvancedDefenseIpv6',
        'api_enable' => 'setApiEnable',
        'attack_status' => 'setAttackStatus',
        'auto_cc_enable' => 'setAutoCcEnable',
        'automatic_black_enable' => 'setAutomaticBlackEnable',
        'backend_groups' => 'setBackendGroups',
        'black_ip_enable' => 'setBlackIpEnable',
        'black_lct_enable' => 'setBlackLctEnable',
        'bot_dytoken_enable' => 'setBotDytokenEnable',
        'bot_frequency_enable' => 'setBotFrequencyEnable',
        'bot_repeat_enable' => 'setBotRepeatEnable',
        'bot_sequence_default_action' => 'setBotSequenceDefaultAction',
        'bot_sequence_enable' => 'setBotSequenceEnable',
        'cc_enable' => 'setCcEnable',
        'certificate_id' => 'setCertificateId',
        'certificate_name' => 'setCertificateName',
        'certificate_platform' => 'setCertificatePlatform',
        'clb_instance_ids' => 'setClbInstanceIds',
        'clb_listener_id' => 'setClbListenerId',
        'clb_pool_id' => 'setClbPoolId',
        'clb_server_id' => 'setClbServerId',
        'client_ip_location' => 'setClientIpLocation',
        'client_max_body_size' => 'setClientMaxBodySize',
        'cloud_access_config' => 'setCloudAccessConfig',
        'cname' => 'setCname',
        'custom_bot_enable' => 'setCustomBotEnable',
        'custom_header' => 'setCustomHeader',
        'custom_rsp_enable' => 'setCustomRspEnable',
        'custom_sni' => 'setCustomSni',
        'defence_mode' => 'setDefenceMode',
        'dlp_enable' => 'setDlpEnable',
        'domain' => 'setDomain',
        'enable_custom_redirect' => 'setEnableCustomRedirect',
        'enable_http2' => 'setEnableHttp2',
        'enable_ipv6' => 'setEnableIpv6',
        'enable_sni' => 'setEnableSni',
        'keep_alive_request' => 'setKeepAliveRequest',
        'keep_alive_time_out' => 'setKeepAliveTimeOut',
        'lb_algorithm' => 'setLbAlgorithm',
        'port' => 'setPort',
        'protocol_follow' => 'setProtocolFollow',
        'protocol_ports' => 'setProtocolPorts',
        'protocols' => 'setProtocols',
        'proxy_config' => 'setProxyConfig',
        'proxy_connect_time_out' => 'setProxyConnectTimeOut',
        'proxy_keep_alive' => 'setProxyKeepAlive',
        'proxy_keep_alive_time_out' => 'setProxyKeepAliveTimeOut',
        'proxy_read_time_out' => 'setProxyReadTimeOut',
        'proxy_retry' => 'setProxyRetry',
        'proxy_write_time_out' => 'setProxyWriteTimeOut',
        'public_real_server' => 'setPublicRealServer',
        'redirect_https' => 'setRedirectHttps',
        'region' => 'setRegion',
        'rsp_abnormal_enable' => 'setRspAbnormalEnable',
        'ssl_ciphers' => 'setSslCiphers',
        'ssl_protocols' => 'setSslProtocols',
        'server_ips' => 'setServerIps',
        'src_ips' => 'setSrcIps',
        'src_protocol' => 'setSrcProtocol',
        'status' => 'setStatus',
        'system_bot_enable' => 'setSystemBotEnable',
        'tcp_listener_config' => 'setTcpListenerConfig',
        'tls_enable' => 'setTlsEnable',
        'tls_fields_config' => 'setTlsFieldsConfig',
        'tamper_proof_enable' => 'setTamperProofEnable',
        'update_time' => 'setUpdateTime',
        'volc_certificate_id' => 'setVolcCertificateId',
        'vpc_id' => 'setVpcId',
        'waf_enable' => 'setWafEnable',
        'waf_white_req_enable' => 'setWafWhiteReqEnable',
        'white_enable' => 'setWhiteEnable',
        'white_field_enable' => 'setWhiteFieldEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_mode' => 'getAccessMode',
        'advanced_defense_ip' => 'getAdvancedDefenseIp',
        'advanced_defense_ipv6' => 'getAdvancedDefenseIpv6',
        'api_enable' => 'getApiEnable',
        'attack_status' => 'getAttackStatus',
        'auto_cc_enable' => 'getAutoCcEnable',
        'automatic_black_enable' => 'getAutomaticBlackEnable',
        'backend_groups' => 'getBackendGroups',
        'black_ip_enable' => 'getBlackIpEnable',
        'black_lct_enable' => 'getBlackLctEnable',
        'bot_dytoken_enable' => 'getBotDytokenEnable',
        'bot_frequency_enable' => 'getBotFrequencyEnable',
        'bot_repeat_enable' => 'getBotRepeatEnable',
        'bot_sequence_default_action' => 'getBotSequenceDefaultAction',
        'bot_sequence_enable' => 'getBotSequenceEnable',
        'cc_enable' => 'getCcEnable',
        'certificate_id' => 'getCertificateId',
        'certificate_name' => 'getCertificateName',
        'certificate_platform' => 'getCertificatePlatform',
        'clb_instance_ids' => 'getClbInstanceIds',
        'clb_listener_id' => 'getClbListenerId',
        'clb_pool_id' => 'getClbPoolId',
        'clb_server_id' => 'getClbServerId',
        'client_ip_location' => 'getClientIpLocation',
        'client_max_body_size' => 'getClientMaxBodySize',
        'cloud_access_config' => 'getCloudAccessConfig',
        'cname' => 'getCname',
        'custom_bot_enable' => 'getCustomBotEnable',
        'custom_header' => 'getCustomHeader',
        'custom_rsp_enable' => 'getCustomRspEnable',
        'custom_sni' => 'getCustomSni',
        'defence_mode' => 'getDefenceMode',
        'dlp_enable' => 'getDlpEnable',
        'domain' => 'getDomain',
        'enable_custom_redirect' => 'getEnableCustomRedirect',
        'enable_http2' => 'getEnableHttp2',
        'enable_ipv6' => 'getEnableIpv6',
        'enable_sni' => 'getEnableSni',
        'keep_alive_request' => 'getKeepAliveRequest',
        'keep_alive_time_out' => 'getKeepAliveTimeOut',
        'lb_algorithm' => 'getLbAlgorithm',
        'port' => 'getPort',
        'protocol_follow' => 'getProtocolFollow',
        'protocol_ports' => 'getProtocolPorts',
        'protocols' => 'getProtocols',
        'proxy_config' => 'getProxyConfig',
        'proxy_connect_time_out' => 'getProxyConnectTimeOut',
        'proxy_keep_alive' => 'getProxyKeepAlive',
        'proxy_keep_alive_time_out' => 'getProxyKeepAliveTimeOut',
        'proxy_read_time_out' => 'getProxyReadTimeOut',
        'proxy_retry' => 'getProxyRetry',
        'proxy_write_time_out' => 'getProxyWriteTimeOut',
        'public_real_server' => 'getPublicRealServer',
        'redirect_https' => 'getRedirectHttps',
        'region' => 'getRegion',
        'rsp_abnormal_enable' => 'getRspAbnormalEnable',
        'ssl_ciphers' => 'getSslCiphers',
        'ssl_protocols' => 'getSslProtocols',
        'server_ips' => 'getServerIps',
        'src_ips' => 'getSrcIps',
        'src_protocol' => 'getSrcProtocol',
        'status' => 'getStatus',
        'system_bot_enable' => 'getSystemBotEnable',
        'tcp_listener_config' => 'getTcpListenerConfig',
        'tls_enable' => 'getTlsEnable',
        'tls_fields_config' => 'getTlsFieldsConfig',
        'tamper_proof_enable' => 'getTamperProofEnable',
        'update_time' => 'getUpdateTime',
        'volc_certificate_id' => 'getVolcCertificateId',
        'vpc_id' => 'getVpcId',
        'waf_enable' => 'getWafEnable',
        'waf_white_req_enable' => 'getWafWhiteReqEnable',
        'white_enable' => 'getWhiteEnable',
        'white_field_enable' => 'getWhiteFieldEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_mode'] = isset($data['access_mode']) ? $data['access_mode'] : null;
        $this->container['advanced_defense_ip'] = isset($data['advanced_defense_ip']) ? $data['advanced_defense_ip'] : null;
        $this->container['advanced_defense_ipv6'] = isset($data['advanced_defense_ipv6']) ? $data['advanced_defense_ipv6'] : null;
        $this->container['api_enable'] = isset($data['api_enable']) ? $data['api_enable'] : null;
        $this->container['attack_status'] = isset($data['attack_status']) ? $data['attack_status'] : null;
        $this->container['auto_cc_enable'] = isset($data['auto_cc_enable']) ? $data['auto_cc_enable'] : null;
        $this->container['automatic_black_enable'] = isset($data['automatic_black_enable']) ? $data['automatic_black_enable'] : null;
        $this->container['backend_groups'] = isset($data['backend_groups']) ? $data['backend_groups'] : null;
        $this->container['black_ip_enable'] = isset($data['black_ip_enable']) ? $data['black_ip_enable'] : null;
        $this->container['black_lct_enable'] = isset($data['black_lct_enable']) ? $data['black_lct_enable'] : null;
        $this->container['bot_dytoken_enable'] = isset($data['bot_dytoken_enable']) ? $data['bot_dytoken_enable'] : null;
        $this->container['bot_frequency_enable'] = isset($data['bot_frequency_enable']) ? $data['bot_frequency_enable'] : null;
        $this->container['bot_repeat_enable'] = isset($data['bot_repeat_enable']) ? $data['bot_repeat_enable'] : null;
        $this->container['bot_sequence_default_action'] = isset($data['bot_sequence_default_action']) ? $data['bot_sequence_default_action'] : null;
        $this->container['bot_sequence_enable'] = isset($data['bot_sequence_enable']) ? $data['bot_sequence_enable'] : null;
        $this->container['cc_enable'] = isset($data['cc_enable']) ? $data['cc_enable'] : null;
        $this->container['certificate_id'] = isset($data['certificate_id']) ? $data['certificate_id'] : null;
        $this->container['certificate_name'] = isset($data['certificate_name']) ? $data['certificate_name'] : null;
        $this->container['certificate_platform'] = isset($data['certificate_platform']) ? $data['certificate_platform'] : null;
        $this->container['clb_instance_ids'] = isset($data['clb_instance_ids']) ? $data['clb_instance_ids'] : null;
        $this->container['clb_listener_id'] = isset($data['clb_listener_id']) ? $data['clb_listener_id'] : null;
        $this->container['clb_pool_id'] = isset($data['clb_pool_id']) ? $data['clb_pool_id'] : null;
        $this->container['clb_server_id'] = isset($data['clb_server_id']) ? $data['clb_server_id'] : null;
        $this->container['client_ip_location'] = isset($data['client_ip_location']) ? $data['client_ip_location'] : null;
        $this->container['client_max_body_size'] = isset($data['client_max_body_size']) ? $data['client_max_body_size'] : null;
        $this->container['cloud_access_config'] = isset($data['cloud_access_config']) ? $data['cloud_access_config'] : null;
        $this->container['cname'] = isset($data['cname']) ? $data['cname'] : null;
        $this->container['custom_bot_enable'] = isset($data['custom_bot_enable']) ? $data['custom_bot_enable'] : null;
        $this->container['custom_header'] = isset($data['custom_header']) ? $data['custom_header'] : null;
        $this->container['custom_rsp_enable'] = isset($data['custom_rsp_enable']) ? $data['custom_rsp_enable'] : null;
        $this->container['custom_sni'] = isset($data['custom_sni']) ? $data['custom_sni'] : null;
        $this->container['defence_mode'] = isset($data['defence_mode']) ? $data['defence_mode'] : null;
        $this->container['dlp_enable'] = isset($data['dlp_enable']) ? $data['dlp_enable'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['enable_custom_redirect'] = isset($data['enable_custom_redirect']) ? $data['enable_custom_redirect'] : null;
        $this->container['enable_http2'] = isset($data['enable_http2']) ? $data['enable_http2'] : null;
        $this->container['enable_ipv6'] = isset($data['enable_ipv6']) ? $data['enable_ipv6'] : null;
        $this->container['enable_sni'] = isset($data['enable_sni']) ? $data['enable_sni'] : null;
        $this->container['keep_alive_request'] = isset($data['keep_alive_request']) ? $data['keep_alive_request'] : null;
        $this->container['keep_alive_time_out'] = isset($data['keep_alive_time_out']) ? $data['keep_alive_time_out'] : null;
        $this->container['lb_algorithm'] = isset($data['lb_algorithm']) ? $data['lb_algorithm'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['protocol_follow'] = isset($data['protocol_follow']) ? $data['protocol_follow'] : null;
        $this->container['protocol_ports'] = isset($data['protocol_ports']) ? $data['protocol_ports'] : null;
        $this->container['protocols'] = isset($data['protocols']) ? $data['protocols'] : null;
        $this->container['proxy_config'] = isset($data['proxy_config']) ? $data['proxy_config'] : null;
        $this->container['proxy_connect_time_out'] = isset($data['proxy_connect_time_out']) ? $data['proxy_connect_time_out'] : null;
        $this->container['proxy_keep_alive'] = isset($data['proxy_keep_alive']) ? $data['proxy_keep_alive'] : null;
        $this->container['proxy_keep_alive_time_out'] = isset($data['proxy_keep_alive_time_out']) ? $data['proxy_keep_alive_time_out'] : null;
        $this->container['proxy_read_time_out'] = isset($data['proxy_read_time_out']) ? $data['proxy_read_time_out'] : null;
        $this->container['proxy_retry'] = isset($data['proxy_retry']) ? $data['proxy_retry'] : null;
        $this->container['proxy_write_time_out'] = isset($data['proxy_write_time_out']) ? $data['proxy_write_time_out'] : null;
        $this->container['public_real_server'] = isset($data['public_real_server']) ? $data['public_real_server'] : null;
        $this->container['redirect_https'] = isset($data['redirect_https']) ? $data['redirect_https'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['rsp_abnormal_enable'] = isset($data['rsp_abnormal_enable']) ? $data['rsp_abnormal_enable'] : null;
        $this->container['ssl_ciphers'] = isset($data['ssl_ciphers']) ? $data['ssl_ciphers'] : null;
        $this->container['ssl_protocols'] = isset($data['ssl_protocols']) ? $data['ssl_protocols'] : null;
        $this->container['server_ips'] = isset($data['server_ips']) ? $data['server_ips'] : null;
        $this->container['src_ips'] = isset($data['src_ips']) ? $data['src_ips'] : null;
        $this->container['src_protocol'] = isset($data['src_protocol']) ? $data['src_protocol'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['system_bot_enable'] = isset($data['system_bot_enable']) ? $data['system_bot_enable'] : null;
        $this->container['tcp_listener_config'] = isset($data['tcp_listener_config']) ? $data['tcp_listener_config'] : null;
        $this->container['tls_enable'] = isset($data['tls_enable']) ? $data['tls_enable'] : null;
        $this->container['tls_fields_config'] = isset($data['tls_fields_config']) ? $data['tls_fields_config'] : null;
        $this->container['tamper_proof_enable'] = isset($data['tamper_proof_enable']) ? $data['tamper_proof_enable'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['volc_certificate_id'] = isset($data['volc_certificate_id']) ? $data['volc_certificate_id'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['waf_enable'] = isset($data['waf_enable']) ? $data['waf_enable'] : null;
        $this->container['waf_white_req_enable'] = isset($data['waf_white_req_enable']) ? $data['waf_white_req_enable'] : null;
        $this->container['white_enable'] = isset($data['white_enable']) ? $data['white_enable'] : null;
        $this->container['white_field_enable'] = isset($data['white_field_enable']) ? $data['white_field_enable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_mode
     *
     * @return int
     */
    public function getAccessMode()
    {
        return $this->container['access_mode'];
    }

    /**
     * Sets access_mode
     *
     * @param int $access_mode access_mode
     *
     * @return $this
     */
    public function setAccessMode($access_mode)
    {
        $this->container['access_mode'] = $access_mode;

        return $this;
    }

    /**
     * Gets advanced_defense_ip
     *
     * @return string
     */
    public function getAdvancedDefenseIp()
    {
        return $this->container['advanced_defense_ip'];
    }

    /**
     * Sets advanced_defense_ip
     *
     * @param string $advanced_defense_ip advanced_defense_ip
     *
     * @return $this
     */
    public function setAdvancedDefenseIp($advanced_defense_ip)
    {
        $this->container['advanced_defense_ip'] = $advanced_defense_ip;

        return $this;
    }

    /**
     * Gets advanced_defense_ipv6
     *
     * @return string
     */
    public function getAdvancedDefenseIpv6()
    {
        return $this->container['advanced_defense_ipv6'];
    }

    /**
     * Sets advanced_defense_ipv6
     *
     * @param string $advanced_defense_ipv6 advanced_defense_ipv6
     *
     * @return $this
     */
    public function setAdvancedDefenseIpv6($advanced_defense_ipv6)
    {
        $this->container['advanced_defense_ipv6'] = $advanced_defense_ipv6;

        return $this;
    }

    /**
     * Gets api_enable
     *
     * @return int
     */
    public function getApiEnable()
    {
        return $this->container['api_enable'];
    }

    /**
     * Sets api_enable
     *
     * @param int $api_enable api_enable
     *
     * @return $this
     */
    public function setApiEnable($api_enable)
    {
        $this->container['api_enable'] = $api_enable;

        return $this;
    }

    /**
     * Gets attack_status
     *
     * @return int
     */
    public function getAttackStatus()
    {
        return $this->container['attack_status'];
    }

    /**
     * Sets attack_status
     *
     * @param int $attack_status attack_status
     *
     * @return $this
     */
    public function setAttackStatus($attack_status)
    {
        $this->container['attack_status'] = $attack_status;

        return $this;
    }

    /**
     * Gets auto_cc_enable
     *
     * @return int
     */
    public function getAutoCcEnable()
    {
        return $this->container['auto_cc_enable'];
    }

    /**
     * Sets auto_cc_enable
     *
     * @param int $auto_cc_enable auto_cc_enable
     *
     * @return $this
     */
    public function setAutoCcEnable($auto_cc_enable)
    {
        $this->container['auto_cc_enable'] = $auto_cc_enable;

        return $this;
    }

    /**
     * Gets automatic_black_enable
     *
     * @return int
     */
    public function getAutomaticBlackEnable()
    {
        return $this->container['automatic_black_enable'];
    }

    /**
     * Sets automatic_black_enable
     *
     * @param int $automatic_black_enable automatic_black_enable
     *
     * @return $this
     */
    public function setAutomaticBlackEnable($automatic_black_enable)
    {
        $this->container['automatic_black_enable'] = $automatic_black_enable;

        return $this;
    }

    /**
     * Gets backend_groups
     *
     * @return \Volcengine\Waf\Model\BackendGroupForListDomainOutput[]
     */
    public function getBackendGroups()
    {
        return $this->container['backend_groups'];
    }

    /**
     * Sets backend_groups
     *
     * @param \Volcengine\Waf\Model\BackendGroupForListDomainOutput[] $backend_groups backend_groups
     *
     * @return $this
     */
    public function setBackendGroups($backend_groups)
    {
        $this->container['backend_groups'] = $backend_groups;

        return $this;
    }

    /**
     * Gets black_ip_enable
     *
     * @return int
     */
    public function getBlackIpEnable()
    {
        return $this->container['black_ip_enable'];
    }

    /**
     * Sets black_ip_enable
     *
     * @param int $black_ip_enable black_ip_enable
     *
     * @return $this
     */
    public function setBlackIpEnable($black_ip_enable)
    {
        $this->container['black_ip_enable'] = $black_ip_enable;

        return $this;
    }

    /**
     * Gets black_lct_enable
     *
     * @return int
     */
    public function getBlackLctEnable()
    {
        return $this->container['black_lct_enable'];
    }

    /**
     * Sets black_lct_enable
     *
     * @param int $black_lct_enable black_lct_enable
     *
     * @return $this
     */
    public function setBlackLctEnable($black_lct_enable)
    {
        $this->container['black_lct_enable'] = $black_lct_enable;

        return $this;
    }

    /**
     * Gets bot_dytoken_enable
     *
     * @return int
     */
    public function getBotDytokenEnable()
    {
        return $this->container['bot_dytoken_enable'];
    }

    /**
     * Sets bot_dytoken_enable
     *
     * @param int $bot_dytoken_enable bot_dytoken_enable
     *
     * @return $this
     */
    public function setBotDytokenEnable($bot_dytoken_enable)
    {
        $this->container['bot_dytoken_enable'] = $bot_dytoken_enable;

        return $this;
    }

    /**
     * Gets bot_frequency_enable
     *
     * @return int
     */
    public function getBotFrequencyEnable()
    {
        return $this->container['bot_frequency_enable'];
    }

    /**
     * Sets bot_frequency_enable
     *
     * @param int $bot_frequency_enable bot_frequency_enable
     *
     * @return $this
     */
    public function setBotFrequencyEnable($bot_frequency_enable)
    {
        $this->container['bot_frequency_enable'] = $bot_frequency_enable;

        return $this;
    }

    /**
     * Gets bot_repeat_enable
     *
     * @return int
     */
    public function getBotRepeatEnable()
    {
        return $this->container['bot_repeat_enable'];
    }

    /**
     * Sets bot_repeat_enable
     *
     * @param int $bot_repeat_enable bot_repeat_enable
     *
     * @return $this
     */
    public function setBotRepeatEnable($bot_repeat_enable)
    {
        $this->container['bot_repeat_enable'] = $bot_repeat_enable;

        return $this;
    }

    /**
     * Gets bot_sequence_default_action
     *
     * @return int
     */
    public function getBotSequenceDefaultAction()
    {
        return $this->container['bot_sequence_default_action'];
    }

    /**
     * Sets bot_sequence_default_action
     *
     * @param int $bot_sequence_default_action bot_sequence_default_action
     *
     * @return $this
     */
    public function setBotSequenceDefaultAction($bot_sequence_default_action)
    {
        $this->container['bot_sequence_default_action'] = $bot_sequence_default_action;

        return $this;
    }

    /**
     * Gets bot_sequence_enable
     *
     * @return int
     */
    public function getBotSequenceEnable()
    {
        return $this->container['bot_sequence_enable'];
    }

    /**
     * Sets bot_sequence_enable
     *
     * @param int $bot_sequence_enable bot_sequence_enable
     *
     * @return $this
     */
    public function setBotSequenceEnable($bot_sequence_enable)
    {
        $this->container['bot_sequence_enable'] = $bot_sequence_enable;

        return $this;
    }

    /**
     * Gets cc_enable
     *
     * @return int
     */
    public function getCcEnable()
    {
        return $this->container['cc_enable'];
    }

    /**
     * Sets cc_enable
     *
     * @param int $cc_enable cc_enable
     *
     * @return $this
     */
    public function setCcEnable($cc_enable)
    {
        $this->container['cc_enable'] = $cc_enable;

        return $this;
    }

    /**
     * Gets certificate_id
     *
     * @return int
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param int $certificate_id certificate_id
     *
     * @return $this
     */
    public function setCertificateId($certificate_id)
    {
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets certificate_name
     *
     * @return string
     */
    public function getCertificateName()
    {
        return $this->container['certificate_name'];
    }

    /**
     * Sets certificate_name
     *
     * @param string $certificate_name certificate_name
     *
     * @return $this
     */
    public function setCertificateName($certificate_name)
    {
        $this->container['certificate_name'] = $certificate_name;

        return $this;
    }

    /**
     * Gets certificate_platform
     *
     * @return string
     */
    public function getCertificatePlatform()
    {
        return $this->container['certificate_platform'];
    }

    /**
     * Sets certificate_platform
     *
     * @param string $certificate_platform certificate_platform
     *
     * @return $this
     */
    public function setCertificatePlatform($certificate_platform)
    {
        $this->container['certificate_platform'] = $certificate_platform;

        return $this;
    }

    /**
     * Gets clb_instance_ids
     *
     * @return string
     */
    public function getClbInstanceIds()
    {
        return $this->container['clb_instance_ids'];
    }

    /**
     * Sets clb_instance_ids
     *
     * @param string $clb_instance_ids clb_instance_ids
     *
     * @return $this
     */
    public function setClbInstanceIds($clb_instance_ids)
    {
        $this->container['clb_instance_ids'] = $clb_instance_ids;

        return $this;
    }

    /**
     * Gets clb_listener_id
     *
     * @return string
     */
    public function getClbListenerId()
    {
        return $this->container['clb_listener_id'];
    }

    /**
     * Sets clb_listener_id
     *
     * @param string $clb_listener_id clb_listener_id
     *
     * @return $this
     */
    public function setClbListenerId($clb_listener_id)
    {
        $this->container['clb_listener_id'] = $clb_listener_id;

        return $this;
    }

    /**
     * Gets clb_pool_id
     *
     * @return string
     */
    public function getClbPoolId()
    {
        return $this->container['clb_pool_id'];
    }

    /**
     * Sets clb_pool_id
     *
     * @param string $clb_pool_id clb_pool_id
     *
     * @return $this
     */
    public function setClbPoolId($clb_pool_id)
    {
        $this->container['clb_pool_id'] = $clb_pool_id;

        return $this;
    }

    /**
     * Gets clb_server_id
     *
     * @return string
     */
    public function getClbServerId()
    {
        return $this->container['clb_server_id'];
    }

    /**
     * Sets clb_server_id
     *
     * @param string $clb_server_id clb_server_id
     *
     * @return $this
     */
    public function setClbServerId($clb_server_id)
    {
        $this->container['clb_server_id'] = $clb_server_id;

        return $this;
    }

    /**
     * Gets client_ip_location
     *
     * @return int
     */
    public function getClientIpLocation()
    {
        return $this->container['client_ip_location'];
    }

    /**
     * Sets client_ip_location
     *
     * @param int $client_ip_location client_ip_location
     *
     * @return $this
     */
    public function setClientIpLocation($client_ip_location)
    {
        $this->container['client_ip_location'] = $client_ip_location;

        return $this;
    }

    /**
     * Gets client_max_body_size
     *
     * @return int
     */
    public function getClientMaxBodySize()
    {
        return $this->container['client_max_body_size'];
    }

    /**
     * Sets client_max_body_size
     *
     * @param int $client_max_body_size client_max_body_size
     *
     * @return $this
     */
    public function setClientMaxBodySize($client_max_body_size)
    {
        $this->container['client_max_body_size'] = $client_max_body_size;

        return $this;
    }

    /**
     * Gets cloud_access_config
     *
     * @return \Volcengine\Waf\Model\CloudAccessConfigForListDomainOutput[]
     */
    public function getCloudAccessConfig()
    {
        return $this->container['cloud_access_config'];
    }

    /**
     * Sets cloud_access_config
     *
     * @param \Volcengine\Waf\Model\CloudAccessConfigForListDomainOutput[] $cloud_access_config cloud_access_config
     *
     * @return $this
     */
    public function setCloudAccessConfig($cloud_access_config)
    {
        $this->container['cloud_access_config'] = $cloud_access_config;

        return $this;
    }

    /**
     * Gets cname
     *
     * @return string
     */
    public function getCname()
    {
        return $this->container['cname'];
    }

    /**
     * Sets cname
     *
     * @param string $cname cname
     *
     * @return $this
     */
    public function setCname($cname)
    {
        $this->container['cname'] = $cname;

        return $this;
    }

    /**
     * Gets custom_bot_enable
     *
     * @return int
     */
    public function getCustomBotEnable()
    {
        return $this->container['custom_bot_enable'];
    }

    /**
     * Sets custom_bot_enable
     *
     * @param int $custom_bot_enable custom_bot_enable
     *
     * @return $this
     */
    public function setCustomBotEnable($custom_bot_enable)
    {
        $this->container['custom_bot_enable'] = $custom_bot_enable;

        return $this;
    }

    /**
     * Gets custom_header
     *
     * @return string[]
     */
    public function getCustomHeader()
    {
        return $this->container['custom_header'];
    }

    /**
     * Sets custom_header
     *
     * @param string[] $custom_header custom_header
     *
     * @return $this
     */
    public function setCustomHeader($custom_header)
    {
        $this->container['custom_header'] = $custom_header;

        return $this;
    }

    /**
     * Gets custom_rsp_enable
     *
     * @return int
     */
    public function getCustomRspEnable()
    {
        return $this->container['custom_rsp_enable'];
    }

    /**
     * Sets custom_rsp_enable
     *
     * @param int $custom_rsp_enable custom_rsp_enable
     *
     * @return $this
     */
    public function setCustomRspEnable($custom_rsp_enable)
    {
        $this->container['custom_rsp_enable'] = $custom_rsp_enable;

        return $this;
    }

    /**
     * Gets custom_sni
     *
     * @return string
     */
    public function getCustomSni()
    {
        return $this->container['custom_sni'];
    }

    /**
     * Sets custom_sni
     *
     * @param string $custom_sni custom_sni
     *
     * @return $this
     */
    public function setCustomSni($custom_sni)
    {
        $this->container['custom_sni'] = $custom_sni;

        return $this;
    }

    /**
     * Gets defence_mode
     *
     * @return int
     */
    public function getDefenceMode()
    {
        return $this->container['defence_mode'];
    }

    /**
     * Sets defence_mode
     *
     * @param int $defence_mode defence_mode
     *
     * @return $this
     */
    public function setDefenceMode($defence_mode)
    {
        $this->container['defence_mode'] = $defence_mode;

        return $this;
    }

    /**
     * Gets dlp_enable
     *
     * @return int
     */
    public function getDlpEnable()
    {
        return $this->container['dlp_enable'];
    }

    /**
     * Sets dlp_enable
     *
     * @param int $dlp_enable dlp_enable
     *
     * @return $this
     */
    public function setDlpEnable($dlp_enable)
    {
        $this->container['dlp_enable'] = $dlp_enable;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets enable_custom_redirect
     *
     * @return int
     */
    public function getEnableCustomRedirect()
    {
        return $this->container['enable_custom_redirect'];
    }

    /**
     * Sets enable_custom_redirect
     *
     * @param int $enable_custom_redirect enable_custom_redirect
     *
     * @return $this
     */
    public function setEnableCustomRedirect($enable_custom_redirect)
    {
        $this->container['enable_custom_redirect'] = $enable_custom_redirect;

        return $this;
    }

    /**
     * Gets enable_http2
     *
     * @return int
     */
    public function getEnableHttp2()
    {
        return $this->container['enable_http2'];
    }

    /**
     * Sets enable_http2
     *
     * @param int $enable_http2 enable_http2
     *
     * @return $this
     */
    public function setEnableHttp2($enable_http2)
    {
        $this->container['enable_http2'] = $enable_http2;

        return $this;
    }

    /**
     * Gets enable_ipv6
     *
     * @return int
     */
    public function getEnableIpv6()
    {
        return $this->container['enable_ipv6'];
    }

    /**
     * Sets enable_ipv6
     *
     * @param int $enable_ipv6 enable_ipv6
     *
     * @return $this
     */
    public function setEnableIpv6($enable_ipv6)
    {
        $this->container['enable_ipv6'] = $enable_ipv6;

        return $this;
    }

    /**
     * Gets enable_sni
     *
     * @return int
     */
    public function getEnableSni()
    {
        return $this->container['enable_sni'];
    }

    /**
     * Sets enable_sni
     *
     * @param int $enable_sni enable_sni
     *
     * @return $this
     */
    public function setEnableSni($enable_sni)
    {
        $this->container['enable_sni'] = $enable_sni;

        return $this;
    }

    /**
     * Gets keep_alive_request
     *
     * @return int
     */
    public function getKeepAliveRequest()
    {
        return $this->container['keep_alive_request'];
    }

    /**
     * Sets keep_alive_request
     *
     * @param int $keep_alive_request keep_alive_request
     *
     * @return $this
     */
    public function setKeepAliveRequest($keep_alive_request)
    {
        $this->container['keep_alive_request'] = $keep_alive_request;

        return $this;
    }

    /**
     * Gets keep_alive_time_out
     *
     * @return int
     */
    public function getKeepAliveTimeOut()
    {
        return $this->container['keep_alive_time_out'];
    }

    /**
     * Sets keep_alive_time_out
     *
     * @param int $keep_alive_time_out keep_alive_time_out
     *
     * @return $this
     */
    public function setKeepAliveTimeOut($keep_alive_time_out)
    {
        $this->container['keep_alive_time_out'] = $keep_alive_time_out;

        return $this;
    }

    /**
     * Gets lb_algorithm
     *
     * @return string
     */
    public function getLbAlgorithm()
    {
        return $this->container['lb_algorithm'];
    }

    /**
     * Sets lb_algorithm
     *
     * @param string $lb_algorithm lb_algorithm
     *
     * @return $this
     */
    public function setLbAlgorithm($lb_algorithm)
    {
        $this->container['lb_algorithm'] = $lb_algorithm;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets protocol_follow
     *
     * @return int
     */
    public function getProtocolFollow()
    {
        return $this->container['protocol_follow'];
    }

    /**
     * Sets protocol_follow
     *
     * @param int $protocol_follow protocol_follow
     *
     * @return $this
     */
    public function setProtocolFollow($protocol_follow)
    {
        $this->container['protocol_follow'] = $protocol_follow;

        return $this;
    }

    /**
     * Gets protocol_ports
     *
     * @return \Volcengine\Waf\Model\ProtocolPortsForListDomainOutput
     */
    public function getProtocolPorts()
    {
        return $this->container['protocol_ports'];
    }

    /**
     * Sets protocol_ports
     *
     * @param \Volcengine\Waf\Model\ProtocolPortsForListDomainOutput $protocol_ports protocol_ports
     *
     * @return $this
     */
    public function setProtocolPorts($protocol_ports)
    {
        $this->container['protocol_ports'] = $protocol_ports;

        return $this;
    }

    /**
     * Gets protocols
     *
     * @return string
     */
    public function getProtocols()
    {
        return $this->container['protocols'];
    }

    /**
     * Sets protocols
     *
     * @param string $protocols protocols
     *
     * @return $this
     */
    public function setProtocols($protocols)
    {
        $this->container['protocols'] = $protocols;

        return $this;
    }

    /**
     * Gets proxy_config
     *
     * @return int
     */
    public function getProxyConfig()
    {
        return $this->container['proxy_config'];
    }

    /**
     * Sets proxy_config
     *
     * @param int $proxy_config proxy_config
     *
     * @return $this
     */
    public function setProxyConfig($proxy_config)
    {
        $this->container['proxy_config'] = $proxy_config;

        return $this;
    }

    /**
     * Gets proxy_connect_time_out
     *
     * @return int
     */
    public function getProxyConnectTimeOut()
    {
        return $this->container['proxy_connect_time_out'];
    }

    /**
     * Sets proxy_connect_time_out
     *
     * @param int $proxy_connect_time_out proxy_connect_time_out
     *
     * @return $this
     */
    public function setProxyConnectTimeOut($proxy_connect_time_out)
    {
        $this->container['proxy_connect_time_out'] = $proxy_connect_time_out;

        return $this;
    }

    /**
     * Gets proxy_keep_alive
     *
     * @return int
     */
    public function getProxyKeepAlive()
    {
        return $this->container['proxy_keep_alive'];
    }

    /**
     * Sets proxy_keep_alive
     *
     * @param int $proxy_keep_alive proxy_keep_alive
     *
     * @return $this
     */
    public function setProxyKeepAlive($proxy_keep_alive)
    {
        $this->container['proxy_keep_alive'] = $proxy_keep_alive;

        return $this;
    }

    /**
     * Gets proxy_keep_alive_time_out
     *
     * @return int
     */
    public function getProxyKeepAliveTimeOut()
    {
        return $this->container['proxy_keep_alive_time_out'];
    }

    /**
     * Sets proxy_keep_alive_time_out
     *
     * @param int $proxy_keep_alive_time_out proxy_keep_alive_time_out
     *
     * @return $this
     */
    public function setProxyKeepAliveTimeOut($proxy_keep_alive_time_out)
    {
        $this->container['proxy_keep_alive_time_out'] = $proxy_keep_alive_time_out;

        return $this;
    }

    /**
     * Gets proxy_read_time_out
     *
     * @return int
     */
    public function getProxyReadTimeOut()
    {
        return $this->container['proxy_read_time_out'];
    }

    /**
     * Sets proxy_read_time_out
     *
     * @param int $proxy_read_time_out proxy_read_time_out
     *
     * @return $this
     */
    public function setProxyReadTimeOut($proxy_read_time_out)
    {
        $this->container['proxy_read_time_out'] = $proxy_read_time_out;

        return $this;
    }

    /**
     * Gets proxy_retry
     *
     * @return int
     */
    public function getProxyRetry()
    {
        return $this->container['proxy_retry'];
    }

    /**
     * Sets proxy_retry
     *
     * @param int $proxy_retry proxy_retry
     *
     * @return $this
     */
    public function setProxyRetry($proxy_retry)
    {
        $this->container['proxy_retry'] = $proxy_retry;

        return $this;
    }

    /**
     * Gets proxy_write_time_out
     *
     * @return int
     */
    public function getProxyWriteTimeOut()
    {
        return $this->container['proxy_write_time_out'];
    }

    /**
     * Sets proxy_write_time_out
     *
     * @param int $proxy_write_time_out proxy_write_time_out
     *
     * @return $this
     */
    public function setProxyWriteTimeOut($proxy_write_time_out)
    {
        $this->container['proxy_write_time_out'] = $proxy_write_time_out;

        return $this;
    }

    /**
     * Gets public_real_server
     *
     * @return int
     */
    public function getPublicRealServer()
    {
        return $this->container['public_real_server'];
    }

    /**
     * Sets public_real_server
     *
     * @param int $public_real_server public_real_server
     *
     * @return $this
     */
    public function setPublicRealServer($public_real_server)
    {
        $this->container['public_real_server'] = $public_real_server;

        return $this;
    }

    /**
     * Gets redirect_https
     *
     * @return bool
     */
    public function getRedirectHttps()
    {
        return $this->container['redirect_https'];
    }

    /**
     * Sets redirect_https
     *
     * @param bool $redirect_https redirect_https
     *
     * @return $this
     */
    public function setRedirectHttps($redirect_https)
    {
        $this->container['redirect_https'] = $redirect_https;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets rsp_abnormal_enable
     *
     * @return int
     */
    public function getRspAbnormalEnable()
    {
        return $this->container['rsp_abnormal_enable'];
    }

    /**
     * Sets rsp_abnormal_enable
     *
     * @param int $rsp_abnormal_enable rsp_abnormal_enable
     *
     * @return $this
     */
    public function setRspAbnormalEnable($rsp_abnormal_enable)
    {
        $this->container['rsp_abnormal_enable'] = $rsp_abnormal_enable;

        return $this;
    }

    /**
     * Gets ssl_ciphers
     *
     * @return string[]
     */
    public function getSslCiphers()
    {
        return $this->container['ssl_ciphers'];
    }

    /**
     * Sets ssl_ciphers
     *
     * @param string[] $ssl_ciphers ssl_ciphers
     *
     * @return $this
     */
    public function setSslCiphers($ssl_ciphers)
    {
        $this->container['ssl_ciphers'] = $ssl_ciphers;

        return $this;
    }

    /**
     * Gets ssl_protocols
     *
     * @return string[]
     */
    public function getSslProtocols()
    {
        return $this->container['ssl_protocols'];
    }

    /**
     * Sets ssl_protocols
     *
     * @param string[] $ssl_protocols ssl_protocols
     *
     * @return $this
     */
    public function setSslProtocols($ssl_protocols)
    {
        $this->container['ssl_protocols'] = $ssl_protocols;

        return $this;
    }

    /**
     * Gets server_ips
     *
     * @return string
     */
    public function getServerIps()
    {
        return $this->container['server_ips'];
    }

    /**
     * Sets server_ips
     *
     * @param string $server_ips server_ips
     *
     * @return $this
     */
    public function setServerIps($server_ips)
    {
        $this->container['server_ips'] = $server_ips;

        return $this;
    }

    /**
     * Gets src_ips
     *
     * @return string
     */
    public function getSrcIps()
    {
        return $this->container['src_ips'];
    }

    /**
     * Sets src_ips
     *
     * @param string $src_ips src_ips
     *
     * @return $this
     */
    public function setSrcIps($src_ips)
    {
        $this->container['src_ips'] = $src_ips;

        return $this;
    }

    /**
     * Gets src_protocol
     *
     * @return string
     */
    public function getSrcProtocol()
    {
        return $this->container['src_protocol'];
    }

    /**
     * Sets src_protocol
     *
     * @param string $src_protocol src_protocol
     *
     * @return $this
     */
    public function setSrcProtocol($src_protocol)
    {
        $this->container['src_protocol'] = $src_protocol;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets system_bot_enable
     *
     * @return int
     */
    public function getSystemBotEnable()
    {
        return $this->container['system_bot_enable'];
    }

    /**
     * Sets system_bot_enable
     *
     * @param int $system_bot_enable system_bot_enable
     *
     * @return $this
     */
    public function setSystemBotEnable($system_bot_enable)
    {
        $this->container['system_bot_enable'] = $system_bot_enable;

        return $this;
    }

    /**
     * Gets tcp_listener_config
     *
     * @return \Volcengine\Waf\Model\TCPListenerConfigForListDomainOutput[]
     */
    public function getTcpListenerConfig()
    {
        return $this->container['tcp_listener_config'];
    }

    /**
     * Sets tcp_listener_config
     *
     * @param \Volcengine\Waf\Model\TCPListenerConfigForListDomainOutput[] $tcp_listener_config tcp_listener_config
     *
     * @return $this
     */
    public function setTcpListenerConfig($tcp_listener_config)
    {
        $this->container['tcp_listener_config'] = $tcp_listener_config;

        return $this;
    }

    /**
     * Gets tls_enable
     *
     * @return int
     */
    public function getTlsEnable()
    {
        return $this->container['tls_enable'];
    }

    /**
     * Sets tls_enable
     *
     * @param int $tls_enable tls_enable
     *
     * @return $this
     */
    public function setTlsEnable($tls_enable)
    {
        $this->container['tls_enable'] = $tls_enable;

        return $this;
    }

    /**
     * Gets tls_fields_config
     *
     * @return \Volcengine\Waf\Model\TLSFieldsConfigForListDomainOutput
     */
    public function getTlsFieldsConfig()
    {
        return $this->container['tls_fields_config'];
    }

    /**
     * Sets tls_fields_config
     *
     * @param \Volcengine\Waf\Model\TLSFieldsConfigForListDomainOutput $tls_fields_config tls_fields_config
     *
     * @return $this
     */
    public function setTlsFieldsConfig($tls_fields_config)
    {
        $this->container['tls_fields_config'] = $tls_fields_config;

        return $this;
    }

    /**
     * Gets tamper_proof_enable
     *
     * @return int
     */
    public function getTamperProofEnable()
    {
        return $this->container['tamper_proof_enable'];
    }

    /**
     * Sets tamper_proof_enable
     *
     * @param int $tamper_proof_enable tamper_proof_enable
     *
     * @return $this
     */
    public function setTamperProofEnable($tamper_proof_enable)
    {
        $this->container['tamper_proof_enable'] = $tamper_proof_enable;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets volc_certificate_id
     *
     * @return string
     */
    public function getVolcCertificateId()
    {
        return $this->container['volc_certificate_id'];
    }

    /**
     * Sets volc_certificate_id
     *
     * @param string $volc_certificate_id volc_certificate_id
     *
     * @return $this
     */
    public function setVolcCertificateId($volc_certificate_id)
    {
        $this->container['volc_certificate_id'] = $volc_certificate_id;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets waf_enable
     *
     * @return int
     */
    public function getWafEnable()
    {
        return $this->container['waf_enable'];
    }

    /**
     * Sets waf_enable
     *
     * @param int $waf_enable waf_enable
     *
     * @return $this
     */
    public function setWafEnable($waf_enable)
    {
        $this->container['waf_enable'] = $waf_enable;

        return $this;
    }

    /**
     * Gets waf_white_req_enable
     *
     * @return int
     */
    public function getWafWhiteReqEnable()
    {
        return $this->container['waf_white_req_enable'];
    }

    /**
     * Sets waf_white_req_enable
     *
     * @param int $waf_white_req_enable waf_white_req_enable
     *
     * @return $this
     */
    public function setWafWhiteReqEnable($waf_white_req_enable)
    {
        $this->container['waf_white_req_enable'] = $waf_white_req_enable;

        return $this;
    }

    /**
     * Gets white_enable
     *
     * @return int
     */
    public function getWhiteEnable()
    {
        return $this->container['white_enable'];
    }

    /**
     * Sets white_enable
     *
     * @param int $white_enable white_enable
     *
     * @return $this
     */
    public function setWhiteEnable($white_enable)
    {
        $this->container['white_enable'] = $white_enable;

        return $this;
    }

    /**
     * Gets white_field_enable
     *
     * @return int
     */
    public function getWhiteFieldEnable()
    {
        return $this->container['white_field_enable'];
    }

    /**
     * Sets white_field_enable
     *
     * @param int $white_field_enable white_field_enable
     *
     * @return $this
     */
    public function setWhiteFieldEnable($white_field_enable)
    {
        $this->container['white_field_enable'] = $white_field_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

