<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateWafServiceControlRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateWafServiceControlRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api_enable' => 'int',
        'auto_cc_enable' => 'int',
        'black_ip_enable' => 'int',
        'black_lct_enable' => 'int',
        'bot_dytoken_enable' => 'int',
        'bot_frequency_enable' => 'int',
        'bot_repeat_enable' => 'int',
        'bot_sequence_default_action' => 'int',
        'bot_sequence_enable' => 'int',
        'cc_enable' => 'int',
        'custom_bot_enable' => 'int',
        'custom_rsp_enable' => 'int',
        'dlp_enable' => 'int',
        'host' => 'string',
        'project_name' => 'string',
        'system_bot_enable' => 'int',
        'tls_enable' => 'int',
        'tamper_proof_enable' => 'int',
        'waf_enable' => 'int',
        'waf_white_req_enable' => 'int',
        'white_enable' => 'int',
        'white_field_enable' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'api_enable' => 'int32',
        'auto_cc_enable' => 'int32',
        'black_ip_enable' => 'int32',
        'black_lct_enable' => 'int32',
        'bot_dytoken_enable' => 'int32',
        'bot_frequency_enable' => 'int32',
        'bot_repeat_enable' => 'int32',
        'bot_sequence_default_action' => 'int32',
        'bot_sequence_enable' => 'int32',
        'cc_enable' => 'int32',
        'custom_bot_enable' => 'int32',
        'custom_rsp_enable' => 'int32',
        'dlp_enable' => 'int32',
        'host' => null,
        'project_name' => null,
        'system_bot_enable' => 'int32',
        'tls_enable' => 'int32',
        'tamper_proof_enable' => 'int32',
        'waf_enable' => 'int32',
        'waf_white_req_enable' => 'int32',
        'white_enable' => 'int32',
        'white_field_enable' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_enable' => 'ApiEnable',
        'auto_cc_enable' => 'AutoCCEnable',
        'black_ip_enable' => 'BlackIpEnable',
        'black_lct_enable' => 'BlackLctEnable',
        'bot_dytoken_enable' => 'BotDytokenEnable',
        'bot_frequency_enable' => 'BotFrequencyEnable',
        'bot_repeat_enable' => 'BotRepeatEnable',
        'bot_sequence_default_action' => 'BotSequenceDefaultAction',
        'bot_sequence_enable' => 'BotSequenceEnable',
        'cc_enable' => 'CcEnable',
        'custom_bot_enable' => 'CustomBotEnable',
        'custom_rsp_enable' => 'CustomRspEnable',
        'dlp_enable' => 'DlpEnable',
        'host' => 'Host',
        'project_name' => 'ProjectName',
        'system_bot_enable' => 'SystemBotEnable',
        'tls_enable' => 'TLSEnable',
        'tamper_proof_enable' => 'TamperProofEnable',
        'waf_enable' => 'WafEnable',
        'waf_white_req_enable' => 'WafWhiteReqEnable',
        'white_enable' => 'WhiteEnable',
        'white_field_enable' => 'WhiteFieldEnable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_enable' => 'setApiEnable',
        'auto_cc_enable' => 'setAutoCcEnable',
        'black_ip_enable' => 'setBlackIpEnable',
        'black_lct_enable' => 'setBlackLctEnable',
        'bot_dytoken_enable' => 'setBotDytokenEnable',
        'bot_frequency_enable' => 'setBotFrequencyEnable',
        'bot_repeat_enable' => 'setBotRepeatEnable',
        'bot_sequence_default_action' => 'setBotSequenceDefaultAction',
        'bot_sequence_enable' => 'setBotSequenceEnable',
        'cc_enable' => 'setCcEnable',
        'custom_bot_enable' => 'setCustomBotEnable',
        'custom_rsp_enable' => 'setCustomRspEnable',
        'dlp_enable' => 'setDlpEnable',
        'host' => 'setHost',
        'project_name' => 'setProjectName',
        'system_bot_enable' => 'setSystemBotEnable',
        'tls_enable' => 'setTlsEnable',
        'tamper_proof_enable' => 'setTamperProofEnable',
        'waf_enable' => 'setWafEnable',
        'waf_white_req_enable' => 'setWafWhiteReqEnable',
        'white_enable' => 'setWhiteEnable',
        'white_field_enable' => 'setWhiteFieldEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_enable' => 'getApiEnable',
        'auto_cc_enable' => 'getAutoCcEnable',
        'black_ip_enable' => 'getBlackIpEnable',
        'black_lct_enable' => 'getBlackLctEnable',
        'bot_dytoken_enable' => 'getBotDytokenEnable',
        'bot_frequency_enable' => 'getBotFrequencyEnable',
        'bot_repeat_enable' => 'getBotRepeatEnable',
        'bot_sequence_default_action' => 'getBotSequenceDefaultAction',
        'bot_sequence_enable' => 'getBotSequenceEnable',
        'cc_enable' => 'getCcEnable',
        'custom_bot_enable' => 'getCustomBotEnable',
        'custom_rsp_enable' => 'getCustomRspEnable',
        'dlp_enable' => 'getDlpEnable',
        'host' => 'getHost',
        'project_name' => 'getProjectName',
        'system_bot_enable' => 'getSystemBotEnable',
        'tls_enable' => 'getTlsEnable',
        'tamper_proof_enable' => 'getTamperProofEnable',
        'waf_enable' => 'getWafEnable',
        'waf_white_req_enable' => 'getWafWhiteReqEnable',
        'white_enable' => 'getWhiteEnable',
        'white_field_enable' => 'getWhiteFieldEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_enable'] = isset($data['api_enable']) ? $data['api_enable'] : null;
        $this->container['auto_cc_enable'] = isset($data['auto_cc_enable']) ? $data['auto_cc_enable'] : null;
        $this->container['black_ip_enable'] = isset($data['black_ip_enable']) ? $data['black_ip_enable'] : null;
        $this->container['black_lct_enable'] = isset($data['black_lct_enable']) ? $data['black_lct_enable'] : null;
        $this->container['bot_dytoken_enable'] = isset($data['bot_dytoken_enable']) ? $data['bot_dytoken_enable'] : null;
        $this->container['bot_frequency_enable'] = isset($data['bot_frequency_enable']) ? $data['bot_frequency_enable'] : null;
        $this->container['bot_repeat_enable'] = isset($data['bot_repeat_enable']) ? $data['bot_repeat_enable'] : null;
        $this->container['bot_sequence_default_action'] = isset($data['bot_sequence_default_action']) ? $data['bot_sequence_default_action'] : null;
        $this->container['bot_sequence_enable'] = isset($data['bot_sequence_enable']) ? $data['bot_sequence_enable'] : null;
        $this->container['cc_enable'] = isset($data['cc_enable']) ? $data['cc_enable'] : null;
        $this->container['custom_bot_enable'] = isset($data['custom_bot_enable']) ? $data['custom_bot_enable'] : null;
        $this->container['custom_rsp_enable'] = isset($data['custom_rsp_enable']) ? $data['custom_rsp_enable'] : null;
        $this->container['dlp_enable'] = isset($data['dlp_enable']) ? $data['dlp_enable'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['system_bot_enable'] = isset($data['system_bot_enable']) ? $data['system_bot_enable'] : null;
        $this->container['tls_enable'] = isset($data['tls_enable']) ? $data['tls_enable'] : null;
        $this->container['tamper_proof_enable'] = isset($data['tamper_proof_enable']) ? $data['tamper_proof_enable'] : null;
        $this->container['waf_enable'] = isset($data['waf_enable']) ? $data['waf_enable'] : null;
        $this->container['waf_white_req_enable'] = isset($data['waf_white_req_enable']) ? $data['waf_white_req_enable'] : null;
        $this->container['white_enable'] = isset($data['white_enable']) ? $data['white_enable'] : null;
        $this->container['white_field_enable'] = isset($data['white_field_enable']) ? $data['white_field_enable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['host'] === null) {
            $invalidProperties[] = "'host' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_enable
     *
     * @return int
     */
    public function getApiEnable()
    {
        return $this->container['api_enable'];
    }

    /**
     * Sets api_enable
     *
     * @param int $api_enable api_enable
     *
     * @return $this
     */
    public function setApiEnable($api_enable)
    {
        $this->container['api_enable'] = $api_enable;

        return $this;
    }

    /**
     * Gets auto_cc_enable
     *
     * @return int
     */
    public function getAutoCcEnable()
    {
        return $this->container['auto_cc_enable'];
    }

    /**
     * Sets auto_cc_enable
     *
     * @param int $auto_cc_enable auto_cc_enable
     *
     * @return $this
     */
    public function setAutoCcEnable($auto_cc_enable)
    {
        $this->container['auto_cc_enable'] = $auto_cc_enable;

        return $this;
    }

    /**
     * Gets black_ip_enable
     *
     * @return int
     */
    public function getBlackIpEnable()
    {
        return $this->container['black_ip_enable'];
    }

    /**
     * Sets black_ip_enable
     *
     * @param int $black_ip_enable black_ip_enable
     *
     * @return $this
     */
    public function setBlackIpEnable($black_ip_enable)
    {
        $this->container['black_ip_enable'] = $black_ip_enable;

        return $this;
    }

    /**
     * Gets black_lct_enable
     *
     * @return int
     */
    public function getBlackLctEnable()
    {
        return $this->container['black_lct_enable'];
    }

    /**
     * Sets black_lct_enable
     *
     * @param int $black_lct_enable black_lct_enable
     *
     * @return $this
     */
    public function setBlackLctEnable($black_lct_enable)
    {
        $this->container['black_lct_enable'] = $black_lct_enable;

        return $this;
    }

    /**
     * Gets bot_dytoken_enable
     *
     * @return int
     */
    public function getBotDytokenEnable()
    {
        return $this->container['bot_dytoken_enable'];
    }

    /**
     * Sets bot_dytoken_enable
     *
     * @param int $bot_dytoken_enable bot_dytoken_enable
     *
     * @return $this
     */
    public function setBotDytokenEnable($bot_dytoken_enable)
    {
        $this->container['bot_dytoken_enable'] = $bot_dytoken_enable;

        return $this;
    }

    /**
     * Gets bot_frequency_enable
     *
     * @return int
     */
    public function getBotFrequencyEnable()
    {
        return $this->container['bot_frequency_enable'];
    }

    /**
     * Sets bot_frequency_enable
     *
     * @param int $bot_frequency_enable bot_frequency_enable
     *
     * @return $this
     */
    public function setBotFrequencyEnable($bot_frequency_enable)
    {
        $this->container['bot_frequency_enable'] = $bot_frequency_enable;

        return $this;
    }

    /**
     * Gets bot_repeat_enable
     *
     * @return int
     */
    public function getBotRepeatEnable()
    {
        return $this->container['bot_repeat_enable'];
    }

    /**
     * Sets bot_repeat_enable
     *
     * @param int $bot_repeat_enable bot_repeat_enable
     *
     * @return $this
     */
    public function setBotRepeatEnable($bot_repeat_enable)
    {
        $this->container['bot_repeat_enable'] = $bot_repeat_enable;

        return $this;
    }

    /**
     * Gets bot_sequence_default_action
     *
     * @return int
     */
    public function getBotSequenceDefaultAction()
    {
        return $this->container['bot_sequence_default_action'];
    }

    /**
     * Sets bot_sequence_default_action
     *
     * @param int $bot_sequence_default_action bot_sequence_default_action
     *
     * @return $this
     */
    public function setBotSequenceDefaultAction($bot_sequence_default_action)
    {
        $this->container['bot_sequence_default_action'] = $bot_sequence_default_action;

        return $this;
    }

    /**
     * Gets bot_sequence_enable
     *
     * @return int
     */
    public function getBotSequenceEnable()
    {
        return $this->container['bot_sequence_enable'];
    }

    /**
     * Sets bot_sequence_enable
     *
     * @param int $bot_sequence_enable bot_sequence_enable
     *
     * @return $this
     */
    public function setBotSequenceEnable($bot_sequence_enable)
    {
        $this->container['bot_sequence_enable'] = $bot_sequence_enable;

        return $this;
    }

    /**
     * Gets cc_enable
     *
     * @return int
     */
    public function getCcEnable()
    {
        return $this->container['cc_enable'];
    }

    /**
     * Sets cc_enable
     *
     * @param int $cc_enable cc_enable
     *
     * @return $this
     */
    public function setCcEnable($cc_enable)
    {
        $this->container['cc_enable'] = $cc_enable;

        return $this;
    }

    /**
     * Gets custom_bot_enable
     *
     * @return int
     */
    public function getCustomBotEnable()
    {
        return $this->container['custom_bot_enable'];
    }

    /**
     * Sets custom_bot_enable
     *
     * @param int $custom_bot_enable custom_bot_enable
     *
     * @return $this
     */
    public function setCustomBotEnable($custom_bot_enable)
    {
        $this->container['custom_bot_enable'] = $custom_bot_enable;

        return $this;
    }

    /**
     * Gets custom_rsp_enable
     *
     * @return int
     */
    public function getCustomRspEnable()
    {
        return $this->container['custom_rsp_enable'];
    }

    /**
     * Sets custom_rsp_enable
     *
     * @param int $custom_rsp_enable custom_rsp_enable
     *
     * @return $this
     */
    public function setCustomRspEnable($custom_rsp_enable)
    {
        $this->container['custom_rsp_enable'] = $custom_rsp_enable;

        return $this;
    }

    /**
     * Gets dlp_enable
     *
     * @return int
     */
    public function getDlpEnable()
    {
        return $this->container['dlp_enable'];
    }

    /**
     * Sets dlp_enable
     *
     * @param int $dlp_enable dlp_enable
     *
     * @return $this
     */
    public function setDlpEnable($dlp_enable)
    {
        $this->container['dlp_enable'] = $dlp_enable;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets system_bot_enable
     *
     * @return int
     */
    public function getSystemBotEnable()
    {
        return $this->container['system_bot_enable'];
    }

    /**
     * Sets system_bot_enable
     *
     * @param int $system_bot_enable system_bot_enable
     *
     * @return $this
     */
    public function setSystemBotEnable($system_bot_enable)
    {
        $this->container['system_bot_enable'] = $system_bot_enable;

        return $this;
    }

    /**
     * Gets tls_enable
     *
     * @return int
     */
    public function getTlsEnable()
    {
        return $this->container['tls_enable'];
    }

    /**
     * Sets tls_enable
     *
     * @param int $tls_enable tls_enable
     *
     * @return $this
     */
    public function setTlsEnable($tls_enable)
    {
        $this->container['tls_enable'] = $tls_enable;

        return $this;
    }

    /**
     * Gets tamper_proof_enable
     *
     * @return int
     */
    public function getTamperProofEnable()
    {
        return $this->container['tamper_proof_enable'];
    }

    /**
     * Sets tamper_proof_enable
     *
     * @param int $tamper_proof_enable tamper_proof_enable
     *
     * @return $this
     */
    public function setTamperProofEnable($tamper_proof_enable)
    {
        $this->container['tamper_proof_enable'] = $tamper_proof_enable;

        return $this;
    }

    /**
     * Gets waf_enable
     *
     * @return int
     */
    public function getWafEnable()
    {
        return $this->container['waf_enable'];
    }

    /**
     * Sets waf_enable
     *
     * @param int $waf_enable waf_enable
     *
     * @return $this
     */
    public function setWafEnable($waf_enable)
    {
        $this->container['waf_enable'] = $waf_enable;

        return $this;
    }

    /**
     * Gets waf_white_req_enable
     *
     * @return int
     */
    public function getWafWhiteReqEnable()
    {
        return $this->container['waf_white_req_enable'];
    }

    /**
     * Sets waf_white_req_enable
     *
     * @param int $waf_white_req_enable waf_white_req_enable
     *
     * @return $this
     */
    public function setWafWhiteReqEnable($waf_white_req_enable)
    {
        $this->container['waf_white_req_enable'] = $waf_white_req_enable;

        return $this;
    }

    /**
     * Gets white_enable
     *
     * @return int
     */
    public function getWhiteEnable()
    {
        return $this->container['white_enable'];
    }

    /**
     * Sets white_enable
     *
     * @param int $white_enable white_enable
     *
     * @return $this
     */
    public function setWhiteEnable($white_enable)
    {
        $this->container['white_enable'] = $white_enable;

        return $this;
    }

    /**
     * Gets white_field_enable
     *
     * @return int
     */
    public function getWhiteFieldEnable()
    {
        return $this->container['white_field_enable'];
    }

    /**
     * Sets white_field_enable
     *
     * @param int $white_field_enable white_field_enable
     *
     * @return $this
     */
    public function setWhiteFieldEnable($white_field_enable)
    {
        $this->container['white_field_enable'] = $white_field_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

