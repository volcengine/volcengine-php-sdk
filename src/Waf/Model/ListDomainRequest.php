<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListDomainRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListDomainRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_mode' => 'int[]',
        'accurate_query' => 'int',
        'attack_status' => 'int[]',
        'client_ip' => 'string',
        'defence_mode' => 'int[]',
        'domain' => 'string',
        'domain_or_path' => 'string',
        'lb_info' => '\Volcengine\Waf\Model\LBInfoForListDomainInput[]',
        'page' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'public_real_server' => 'int[]',
        'region' => 'string',
        'sort_by_create_time' => 'string',
        'sort_by_domain_name' => 'string',
        'sort_by_update_time' => 'string',
        'status' => 'int[]',
        'tls_enable' => 'int[]',
        'vpc_id' => 'string',
        'vpc_name' => 'string',
        'vpc_owner_id' => 'string',
        'vpc_owner_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_mode' => 'int32',
        'accurate_query' => 'int32',
        'attack_status' => 'int32',
        'client_ip' => null,
        'defence_mode' => 'int32',
        'domain' => null,
        'domain_or_path' => null,
        'lb_info' => null,
        'page' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'public_real_server' => 'int32',
        'region' => null,
        'sort_by_create_time' => null,
        'sort_by_domain_name' => null,
        'sort_by_update_time' => null,
        'status' => 'int32',
        'tls_enable' => 'int32',
        'vpc_id' => null,
        'vpc_name' => null,
        'vpc_owner_id' => null,
        'vpc_owner_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_mode' => 'AccessMode',
        'accurate_query' => 'AccurateQuery',
        'attack_status' => 'AttackStatus',
        'client_ip' => 'ClientIp',
        'defence_mode' => 'DefenceMode',
        'domain' => 'Domain',
        'domain_or_path' => 'DomainOrPath',
        'lb_info' => 'LBInfo',
        'page' => 'Page',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'public_real_server' => 'PublicRealServer',
        'region' => 'Region',
        'sort_by_create_time' => 'SortByCreateTime',
        'sort_by_domain_name' => 'SortByDomainName',
        'sort_by_update_time' => 'SortByUpdateTime',
        'status' => 'Status',
        'tls_enable' => 'TLSEnable',
        'vpc_id' => 'VpcId',
        'vpc_name' => 'VpcName',
        'vpc_owner_id' => 'VpcOwnerId',
        'vpc_owner_name' => 'VpcOwnerName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_mode' => 'setAccessMode',
        'accurate_query' => 'setAccurateQuery',
        'attack_status' => 'setAttackStatus',
        'client_ip' => 'setClientIp',
        'defence_mode' => 'setDefenceMode',
        'domain' => 'setDomain',
        'domain_or_path' => 'setDomainOrPath',
        'lb_info' => 'setLbInfo',
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'public_real_server' => 'setPublicRealServer',
        'region' => 'setRegion',
        'sort_by_create_time' => 'setSortByCreateTime',
        'sort_by_domain_name' => 'setSortByDomainName',
        'sort_by_update_time' => 'setSortByUpdateTime',
        'status' => 'setStatus',
        'tls_enable' => 'setTlsEnable',
        'vpc_id' => 'setVpcId',
        'vpc_name' => 'setVpcName',
        'vpc_owner_id' => 'setVpcOwnerId',
        'vpc_owner_name' => 'setVpcOwnerName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_mode' => 'getAccessMode',
        'accurate_query' => 'getAccurateQuery',
        'attack_status' => 'getAttackStatus',
        'client_ip' => 'getClientIp',
        'defence_mode' => 'getDefenceMode',
        'domain' => 'getDomain',
        'domain_or_path' => 'getDomainOrPath',
        'lb_info' => 'getLbInfo',
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'public_real_server' => 'getPublicRealServer',
        'region' => 'getRegion',
        'sort_by_create_time' => 'getSortByCreateTime',
        'sort_by_domain_name' => 'getSortByDomainName',
        'sort_by_update_time' => 'getSortByUpdateTime',
        'status' => 'getStatus',
        'tls_enable' => 'getTlsEnable',
        'vpc_id' => 'getVpcId',
        'vpc_name' => 'getVpcName',
        'vpc_owner_id' => 'getVpcOwnerId',
        'vpc_owner_name' => 'getVpcOwnerName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_mode'] = isset($data['access_mode']) ? $data['access_mode'] : null;
        $this->container['accurate_query'] = isset($data['accurate_query']) ? $data['accurate_query'] : null;
        $this->container['attack_status'] = isset($data['attack_status']) ? $data['attack_status'] : null;
        $this->container['client_ip'] = isset($data['client_ip']) ? $data['client_ip'] : null;
        $this->container['defence_mode'] = isset($data['defence_mode']) ? $data['defence_mode'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['domain_or_path'] = isset($data['domain_or_path']) ? $data['domain_or_path'] : null;
        $this->container['lb_info'] = isset($data['lb_info']) ? $data['lb_info'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['public_real_server'] = isset($data['public_real_server']) ? $data['public_real_server'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['sort_by_create_time'] = isset($data['sort_by_create_time']) ? $data['sort_by_create_time'] : null;
        $this->container['sort_by_domain_name'] = isset($data['sort_by_domain_name']) ? $data['sort_by_domain_name'] : null;
        $this->container['sort_by_update_time'] = isset($data['sort_by_update_time']) ? $data['sort_by_update_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tls_enable'] = isset($data['tls_enable']) ? $data['tls_enable'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['vpc_name'] = isset($data['vpc_name']) ? $data['vpc_name'] : null;
        $this->container['vpc_owner_id'] = isset($data['vpc_owner_id']) ? $data['vpc_owner_id'] : null;
        $this->container['vpc_owner_name'] = isset($data['vpc_owner_name']) ? $data['vpc_owner_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_mode
     *
     * @return int[]
     */
    public function getAccessMode()
    {
        return $this->container['access_mode'];
    }

    /**
     * Sets access_mode
     *
     * @param int[] $access_mode access_mode
     *
     * @return $this
     */
    public function setAccessMode($access_mode)
    {
        $this->container['access_mode'] = $access_mode;

        return $this;
    }

    /**
     * Gets accurate_query
     *
     * @return int
     */
    public function getAccurateQuery()
    {
        return $this->container['accurate_query'];
    }

    /**
     * Sets accurate_query
     *
     * @param int $accurate_query accurate_query
     *
     * @return $this
     */
    public function setAccurateQuery($accurate_query)
    {
        $this->container['accurate_query'] = $accurate_query;

        return $this;
    }

    /**
     * Gets attack_status
     *
     * @return int[]
     */
    public function getAttackStatus()
    {
        return $this->container['attack_status'];
    }

    /**
     * Sets attack_status
     *
     * @param int[] $attack_status attack_status
     *
     * @return $this
     */
    public function setAttackStatus($attack_status)
    {
        $this->container['attack_status'] = $attack_status;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string $client_ip client_ip
     *
     * @return $this
     */
    public function setClientIp($client_ip)
    {
        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets defence_mode
     *
     * @return int[]
     */
    public function getDefenceMode()
    {
        return $this->container['defence_mode'];
    }

    /**
     * Sets defence_mode
     *
     * @param int[] $defence_mode defence_mode
     *
     * @return $this
     */
    public function setDefenceMode($defence_mode)
    {
        $this->container['defence_mode'] = $defence_mode;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets domain_or_path
     *
     * @return string
     */
    public function getDomainOrPath()
    {
        return $this->container['domain_or_path'];
    }

    /**
     * Sets domain_or_path
     *
     * @param string $domain_or_path domain_or_path
     *
     * @return $this
     */
    public function setDomainOrPath($domain_or_path)
    {
        $this->container['domain_or_path'] = $domain_or_path;

        return $this;
    }

    /**
     * Gets lb_info
     *
     * @return \Volcengine\Waf\Model\LBInfoForListDomainInput[]
     */
    public function getLbInfo()
    {
        return $this->container['lb_info'];
    }

    /**
     * Sets lb_info
     *
     * @param \Volcengine\Waf\Model\LBInfoForListDomainInput[] $lb_info lb_info
     *
     * @return $this
     */
    public function setLbInfo($lb_info)
    {
        $this->container['lb_info'] = $lb_info;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets public_real_server
     *
     * @return int[]
     */
    public function getPublicRealServer()
    {
        return $this->container['public_real_server'];
    }

    /**
     * Sets public_real_server
     *
     * @param int[] $public_real_server public_real_server
     *
     * @return $this
     */
    public function setPublicRealServer($public_real_server)
    {
        $this->container['public_real_server'] = $public_real_server;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets sort_by_create_time
     *
     * @return string
     */
    public function getSortByCreateTime()
    {
        return $this->container['sort_by_create_time'];
    }

    /**
     * Sets sort_by_create_time
     *
     * @param string $sort_by_create_time sort_by_create_time
     *
     * @return $this
     */
    public function setSortByCreateTime($sort_by_create_time)
    {
        $this->container['sort_by_create_time'] = $sort_by_create_time;

        return $this;
    }

    /**
     * Gets sort_by_domain_name
     *
     * @return string
     */
    public function getSortByDomainName()
    {
        return $this->container['sort_by_domain_name'];
    }

    /**
     * Sets sort_by_domain_name
     *
     * @param string $sort_by_domain_name sort_by_domain_name
     *
     * @return $this
     */
    public function setSortByDomainName($sort_by_domain_name)
    {
        $this->container['sort_by_domain_name'] = $sort_by_domain_name;

        return $this;
    }

    /**
     * Gets sort_by_update_time
     *
     * @return string
     */
    public function getSortByUpdateTime()
    {
        return $this->container['sort_by_update_time'];
    }

    /**
     * Sets sort_by_update_time
     *
     * @param string $sort_by_update_time sort_by_update_time
     *
     * @return $this
     */
    public function setSortByUpdateTime($sort_by_update_time)
    {
        $this->container['sort_by_update_time'] = $sort_by_update_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int[] $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tls_enable
     *
     * @return int[]
     */
    public function getTlsEnable()
    {
        return $this->container['tls_enable'];
    }

    /**
     * Sets tls_enable
     *
     * @param int[] $tls_enable tls_enable
     *
     * @return $this
     */
    public function setTlsEnable($tls_enable)
    {
        $this->container['tls_enable'] = $tls_enable;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets vpc_name
     *
     * @return string
     */
    public function getVpcName()
    {
        return $this->container['vpc_name'];
    }

    /**
     * Sets vpc_name
     *
     * @param string $vpc_name vpc_name
     *
     * @return $this
     */
    public function setVpcName($vpc_name)
    {
        $this->container['vpc_name'] = $vpc_name;

        return $this;
    }

    /**
     * Gets vpc_owner_id
     *
     * @return string
     */
    public function getVpcOwnerId()
    {
        return $this->container['vpc_owner_id'];
    }

    /**
     * Sets vpc_owner_id
     *
     * @param string $vpc_owner_id vpc_owner_id
     *
     * @return $this
     */
    public function setVpcOwnerId($vpc_owner_id)
    {
        $this->container['vpc_owner_id'] = $vpc_owner_id;

        return $this;
    }

    /**
     * Gets vpc_owner_name
     *
     * @return string
     */
    public function getVpcOwnerName()
    {
        return $this->container['vpc_owner_name'];
    }

    /**
     * Sets vpc_owner_name
     *
     * @param string $vpc_owner_name vpc_owner_name
     *
     * @return $this
     */
    public function setVpcOwnerName($vpc_owner_name)
    {
        $this->container['vpc_owner_name'] = $vpc_owner_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

