<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListHostGroupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListHostGroupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'host_fix' => 'string',
        'host_group_id' => 'int',
        'list_all' => 'bool',
        'name_fix' => 'string',
        'page' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'rule_tag' => 'string',
        'time_order_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'host_fix' => null,
        'host_group_id' => 'int32',
        'list_all' => null,
        'name_fix' => null,
        'page' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'rule_tag' => null,
        'time_order_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_fix' => 'HostFix',
        'host_group_id' => 'HostGroupID',
        'list_all' => 'ListAll',
        'name_fix' => 'NameFix',
        'page' => 'Page',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'rule_tag' => 'RuleTag',
        'time_order_by' => 'TimeOrderBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_fix' => 'setHostFix',
        'host_group_id' => 'setHostGroupId',
        'list_all' => 'setListAll',
        'name_fix' => 'setNameFix',
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'rule_tag' => 'setRuleTag',
        'time_order_by' => 'setTimeOrderBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_fix' => 'getHostFix',
        'host_group_id' => 'getHostGroupId',
        'list_all' => 'getListAll',
        'name_fix' => 'getNameFix',
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'rule_tag' => 'getRuleTag',
        'time_order_by' => 'getTimeOrderBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host_fix'] = isset($data['host_fix']) ? $data['host_fix'] : null;
        $this->container['host_group_id'] = isset($data['host_group_id']) ? $data['host_group_id'] : null;
        $this->container['list_all'] = isset($data['list_all']) ? $data['list_all'] : null;
        $this->container['name_fix'] = isset($data['name_fix']) ? $data['name_fix'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['rule_tag'] = isset($data['rule_tag']) ? $data['rule_tag'] : null;
        $this->container['time_order_by'] = isset($data['time_order_by']) ? $data['time_order_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time_order_by'] === null) {
            $invalidProperties[] = "'time_order_by' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_fix
     *
     * @return string
     */
    public function getHostFix()
    {
        return $this->container['host_fix'];
    }

    /**
     * Sets host_fix
     *
     * @param string $host_fix host_fix
     *
     * @return $this
     */
    public function setHostFix($host_fix)
    {
        $this->container['host_fix'] = $host_fix;

        return $this;
    }

    /**
     * Gets host_group_id
     *
     * @return int
     */
    public function getHostGroupId()
    {
        return $this->container['host_group_id'];
    }

    /**
     * Sets host_group_id
     *
     * @param int $host_group_id host_group_id
     *
     * @return $this
     */
    public function setHostGroupId($host_group_id)
    {
        $this->container['host_group_id'] = $host_group_id;

        return $this;
    }

    /**
     * Gets list_all
     *
     * @return bool
     */
    public function getListAll()
    {
        return $this->container['list_all'];
    }

    /**
     * Sets list_all
     *
     * @param bool $list_all list_all
     *
     * @return $this
     */
    public function setListAll($list_all)
    {
        $this->container['list_all'] = $list_all;

        return $this;
    }

    /**
     * Gets name_fix
     *
     * @return string
     */
    public function getNameFix()
    {
        return $this->container['name_fix'];
    }

    /**
     * Sets name_fix
     *
     * @param string $name_fix name_fix
     *
     * @return $this
     */
    public function setNameFix($name_fix)
    {
        $this->container['name_fix'] = $name_fix;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets rule_tag
     *
     * @return string
     */
    public function getRuleTag()
    {
        return $this->container['rule_tag'];
    }

    /**
     * Sets rule_tag
     *
     * @param string $rule_tag rule_tag
     *
     * @return $this
     */
    public function setRuleTag($rule_tag)
    {
        $this->container['rule_tag'] = $rule_tag;

        return $this;
    }

    /**
     * Gets time_order_by
     *
     * @return string
     */
    public function getTimeOrderBy()
    {
        return $this->container['time_order_by'];
    }

    /**
     * Sets time_order_by
     *
     * @param string $time_order_by time_order_by
     *
     * @return $this
     */
    public function setTimeOrderBy($time_order_by)
    {
        $this->container['time_order_by'] = $time_order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

