<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SelectNumberAndBindAXBRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SelectNumberAndBindAXBRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audio_record_flag' => 'int',
        'ax_conflict_axb_flag' => 'int',
        'call_display_type' => 'int',
        'city_code' => 'string',
        'city_code_by_phone_no' => 'string',
        'degrade_city_list' => 'string[]',
        'expire_time' => 'int',
        'number_pool_no' => 'string',
        'out_id' => 'string',
        'phone_no_a' => 'string',
        'phone_no_b' => 'string',
        'random_flag' => 'int',
        'user_data' => 'string',
        'verify_flag' => 'int',
        'voice_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audio_record_flag' => 'int32',
        'ax_conflict_axb_flag' => 'int32',
        'call_display_type' => 'int32',
        'city_code' => null,
        'city_code_by_phone_no' => null,
        'degrade_city_list' => null,
        'expire_time' => 'int64',
        'number_pool_no' => null,
        'out_id' => null,
        'phone_no_a' => null,
        'phone_no_b' => null,
        'random_flag' => 'int32',
        'user_data' => null,
        'verify_flag' => 'int32',
        'voice_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_record_flag' => 'AudioRecordFlag',
        'ax_conflict_axb_flag' => 'AxConflictAxbFlag',
        'call_display_type' => 'CallDisplayType',
        'city_code' => 'CityCode',
        'city_code_by_phone_no' => 'CityCodeByPhoneNo',
        'degrade_city_list' => 'DegradeCityList',
        'expire_time' => 'ExpireTime',
        'number_pool_no' => 'NumberPoolNo',
        'out_id' => 'OutId',
        'phone_no_a' => 'PhoneNoA',
        'phone_no_b' => 'PhoneNoB',
        'random_flag' => 'RandomFlag',
        'user_data' => 'UserData',
        'verify_flag' => 'VerifyFlag',
        'voice_code' => 'VoiceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_record_flag' => 'setAudioRecordFlag',
        'ax_conflict_axb_flag' => 'setAxConflictAxbFlag',
        'call_display_type' => 'setCallDisplayType',
        'city_code' => 'setCityCode',
        'city_code_by_phone_no' => 'setCityCodeByPhoneNo',
        'degrade_city_list' => 'setDegradeCityList',
        'expire_time' => 'setExpireTime',
        'number_pool_no' => 'setNumberPoolNo',
        'out_id' => 'setOutId',
        'phone_no_a' => 'setPhoneNoA',
        'phone_no_b' => 'setPhoneNoB',
        'random_flag' => 'setRandomFlag',
        'user_data' => 'setUserData',
        'verify_flag' => 'setVerifyFlag',
        'voice_code' => 'setVoiceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_record_flag' => 'getAudioRecordFlag',
        'ax_conflict_axb_flag' => 'getAxConflictAxbFlag',
        'call_display_type' => 'getCallDisplayType',
        'city_code' => 'getCityCode',
        'city_code_by_phone_no' => 'getCityCodeByPhoneNo',
        'degrade_city_list' => 'getDegradeCityList',
        'expire_time' => 'getExpireTime',
        'number_pool_no' => 'getNumberPoolNo',
        'out_id' => 'getOutId',
        'phone_no_a' => 'getPhoneNoA',
        'phone_no_b' => 'getPhoneNoB',
        'random_flag' => 'getRandomFlag',
        'user_data' => 'getUserData',
        'verify_flag' => 'getVerifyFlag',
        'voice_code' => 'getVoiceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CITY_CODE_BY_PHONE_NO_A = 'A';
    const CITY_CODE_BY_PHONE_NO_B = 'B';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCityCodeByPhoneNoAllowableValues()
    {
        return [
            self::CITY_CODE_BY_PHONE_NO_A,
            self::CITY_CODE_BY_PHONE_NO_B,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_record_flag'] = isset($data['audio_record_flag']) ? $data['audio_record_flag'] : null;
        $this->container['ax_conflict_axb_flag'] = isset($data['ax_conflict_axb_flag']) ? $data['ax_conflict_axb_flag'] : null;
        $this->container['call_display_type'] = isset($data['call_display_type']) ? $data['call_display_type'] : null;
        $this->container['city_code'] = isset($data['city_code']) ? $data['city_code'] : null;
        $this->container['city_code_by_phone_no'] = isset($data['city_code_by_phone_no']) ? $data['city_code_by_phone_no'] : null;
        $this->container['degrade_city_list'] = isset($data['degrade_city_list']) ? $data['degrade_city_list'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['number_pool_no'] = isset($data['number_pool_no']) ? $data['number_pool_no'] : null;
        $this->container['out_id'] = isset($data['out_id']) ? $data['out_id'] : null;
        $this->container['phone_no_a'] = isset($data['phone_no_a']) ? $data['phone_no_a'] : null;
        $this->container['phone_no_b'] = isset($data['phone_no_b']) ? $data['phone_no_b'] : null;
        $this->container['random_flag'] = isset($data['random_flag']) ? $data['random_flag'] : null;
        $this->container['user_data'] = isset($data['user_data']) ? $data['user_data'] : null;
        $this->container['verify_flag'] = isset($data['verify_flag']) ? $data['verify_flag'] : null;
        $this->container['voice_code'] = isset($data['voice_code']) ? $data['voice_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCityCodeByPhoneNoAllowableValues();
        if (!is_null($this->container['city_code_by_phone_no']) && !in_array($this->container['city_code_by_phone_no'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'city_code_by_phone_no', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['expire_time'] === null) {
            $invalidProperties[] = "'expire_time' can't be null";
        }
        if ($this->container['number_pool_no'] === null) {
            $invalidProperties[] = "'number_pool_no' can't be null";
        }
        if ($this->container['phone_no_a'] === null) {
            $invalidProperties[] = "'phone_no_a' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_record_flag
     *
     * @return int
     */
    public function getAudioRecordFlag()
    {
        return $this->container['audio_record_flag'];
    }

    /**
     * Sets audio_record_flag
     *
     * @param int $audio_record_flag audio_record_flag
     *
     * @return $this
     */
    public function setAudioRecordFlag($audio_record_flag)
    {
        $this->container['audio_record_flag'] = $audio_record_flag;

        return $this;
    }

    /**
     * Gets ax_conflict_axb_flag
     *
     * @return int
     */
    public function getAxConflictAxbFlag()
    {
        return $this->container['ax_conflict_axb_flag'];
    }

    /**
     * Sets ax_conflict_axb_flag
     *
     * @param int $ax_conflict_axb_flag ax_conflict_axb_flag
     *
     * @return $this
     */
    public function setAxConflictAxbFlag($ax_conflict_axb_flag)
    {
        $this->container['ax_conflict_axb_flag'] = $ax_conflict_axb_flag;

        return $this;
    }

    /**
     * Gets call_display_type
     *
     * @return int
     */
    public function getCallDisplayType()
    {
        return $this->container['call_display_type'];
    }

    /**
     * Sets call_display_type
     *
     * @param int $call_display_type call_display_type
     *
     * @return $this
     */
    public function setCallDisplayType($call_display_type)
    {
        $this->container['call_display_type'] = $call_display_type;

        return $this;
    }

    /**
     * Gets city_code
     *
     * @return string
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     *
     * @param string $city_code city_code
     *
     * @return $this
     */
    public function setCityCode($city_code)
    {
        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets city_code_by_phone_no
     *
     * @return string
     */
    public function getCityCodeByPhoneNo()
    {
        return $this->container['city_code_by_phone_no'];
    }

    /**
     * Sets city_code_by_phone_no
     *
     * @param string $city_code_by_phone_no city_code_by_phone_no
     *
     * @return $this
     */
    public function setCityCodeByPhoneNo($city_code_by_phone_no)
    {
        $allowedValues = $this->getCityCodeByPhoneNoAllowableValues();
        if (!is_null($city_code_by_phone_no) && !in_array($city_code_by_phone_no, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'city_code_by_phone_no', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['city_code_by_phone_no'] = $city_code_by_phone_no;

        return $this;
    }

    /**
     * Gets degrade_city_list
     *
     * @return string[]
     */
    public function getDegradeCityList()
    {
        return $this->container['degrade_city_list'];
    }

    /**
     * Sets degrade_city_list
     *
     * @param string[] $degrade_city_list degrade_city_list
     *
     * @return $this
     */
    public function setDegradeCityList($degrade_city_list)
    {
        $this->container['degrade_city_list'] = $degrade_city_list;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return int
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param int $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets number_pool_no
     *
     * @return string
     */
    public function getNumberPoolNo()
    {
        return $this->container['number_pool_no'];
    }

    /**
     * Sets number_pool_no
     *
     * @param string $number_pool_no number_pool_no
     *
     * @return $this
     */
    public function setNumberPoolNo($number_pool_no)
    {
        $this->container['number_pool_no'] = $number_pool_no;

        return $this;
    }

    /**
     * Gets out_id
     *
     * @return string
     */
    public function getOutId()
    {
        return $this->container['out_id'];
    }

    /**
     * Sets out_id
     *
     * @param string $out_id out_id
     *
     * @return $this
     */
    public function setOutId($out_id)
    {
        $this->container['out_id'] = $out_id;

        return $this;
    }

    /**
     * Gets phone_no_a
     *
     * @return string
     */
    public function getPhoneNoA()
    {
        return $this->container['phone_no_a'];
    }

    /**
     * Sets phone_no_a
     *
     * @param string $phone_no_a phone_no_a
     *
     * @return $this
     */
    public function setPhoneNoA($phone_no_a)
    {
        $this->container['phone_no_a'] = $phone_no_a;

        return $this;
    }

    /**
     * Gets phone_no_b
     *
     * @return string
     */
    public function getPhoneNoB()
    {
        return $this->container['phone_no_b'];
    }

    /**
     * Sets phone_no_b
     *
     * @param string $phone_no_b phone_no_b
     *
     * @return $this
     */
    public function setPhoneNoB($phone_no_b)
    {
        $this->container['phone_no_b'] = $phone_no_b;

        return $this;
    }

    /**
     * Gets random_flag
     *
     * @return int
     */
    public function getRandomFlag()
    {
        return $this->container['random_flag'];
    }

    /**
     * Sets random_flag
     *
     * @param int $random_flag random_flag
     *
     * @return $this
     */
    public function setRandomFlag($random_flag)
    {
        $this->container['random_flag'] = $random_flag;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string $user_data user_data
     *
     * @return $this
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }

    /**
     * Gets verify_flag
     *
     * @return int
     */
    public function getVerifyFlag()
    {
        return $this->container['verify_flag'];
    }

    /**
     * Sets verify_flag
     *
     * @param int $verify_flag verify_flag
     *
     * @return $this
     */
    public function setVerifyFlag($verify_flag)
    {
        $this->container['verify_flag'] = $verify_flag;

        return $this;
    }

    /**
     * Gets voice_code
     *
     * @return string
     */
    public function getVoiceCode()
    {
        return $this->container['voice_code'];
    }

    /**
     * Sets voice_code
     *
     * @param string $voice_code voice_code
     *
     * @return $this
     */
    public function setVoiceCode($voice_code)
    {
        $this->container['voice_code'] = $voice_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

