<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpgradeAXToAXBRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpgradeAXToAXBRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'call_display_type' => 'int',
        'number_pool_no' => 'string',
        'out_id' => 'string',
        'phone_no_b' => 'string',
        'sub_id' => 'string',
        'user_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'call_display_type' => 'int32',
        'number_pool_no' => null,
        'out_id' => null,
        'phone_no_b' => null,
        'sub_id' => null,
        'user_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_display_type' => 'CallDisplayType',
        'number_pool_no' => 'NumberPoolNo',
        'out_id' => 'OutId',
        'phone_no_b' => 'PhoneNoB',
        'sub_id' => 'SubId',
        'user_data' => 'UserData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_display_type' => 'setCallDisplayType',
        'number_pool_no' => 'setNumberPoolNo',
        'out_id' => 'setOutId',
        'phone_no_b' => 'setPhoneNoB',
        'sub_id' => 'setSubId',
        'user_data' => 'setUserData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_display_type' => 'getCallDisplayType',
        'number_pool_no' => 'getNumberPoolNo',
        'out_id' => 'getOutId',
        'phone_no_b' => 'getPhoneNoB',
        'sub_id' => 'getSubId',
        'user_data' => 'getUserData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['call_display_type'] = isset($data['call_display_type']) ? $data['call_display_type'] : null;
        $this->container['number_pool_no'] = isset($data['number_pool_no']) ? $data['number_pool_no'] : null;
        $this->container['out_id'] = isset($data['out_id']) ? $data['out_id'] : null;
        $this->container['phone_no_b'] = isset($data['phone_no_b']) ? $data['phone_no_b'] : null;
        $this->container['sub_id'] = isset($data['sub_id']) ? $data['sub_id'] : null;
        $this->container['user_data'] = isset($data['user_data']) ? $data['user_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number_pool_no'] === null) {
            $invalidProperties[] = "'number_pool_no' can't be null";
        }
        if ($this->container['phone_no_b'] === null) {
            $invalidProperties[] = "'phone_no_b' can't be null";
        }
        if ($this->container['sub_id'] === null) {
            $invalidProperties[] = "'sub_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_display_type
     *
     * @return int
     */
    public function getCallDisplayType()
    {
        return $this->container['call_display_type'];
    }

    /**
     * Sets call_display_type
     *
     * @param int $call_display_type call_display_type
     *
     * @return $this
     */
    public function setCallDisplayType($call_display_type)
    {
        $this->container['call_display_type'] = $call_display_type;

        return $this;
    }

    /**
     * Gets number_pool_no
     *
     * @return string
     */
    public function getNumberPoolNo()
    {
        return $this->container['number_pool_no'];
    }

    /**
     * Sets number_pool_no
     *
     * @param string $number_pool_no number_pool_no
     *
     * @return $this
     */
    public function setNumberPoolNo($number_pool_no)
    {
        $this->container['number_pool_no'] = $number_pool_no;

        return $this;
    }

    /**
     * Gets out_id
     *
     * @return string
     */
    public function getOutId()
    {
        return $this->container['out_id'];
    }

    /**
     * Sets out_id
     *
     * @param string $out_id out_id
     *
     * @return $this
     */
    public function setOutId($out_id)
    {
        $this->container['out_id'] = $out_id;

        return $this;
    }

    /**
     * Gets phone_no_b
     *
     * @return string
     */
    public function getPhoneNoB()
    {
        return $this->container['phone_no_b'];
    }

    /**
     * Sets phone_no_b
     *
     * @param string $phone_no_b phone_no_b
     *
     * @return $this
     */
    public function setPhoneNoB($phone_no_b)
    {
        $this->container['phone_no_b'] = $phone_no_b;

        return $this;
    }

    /**
     * Gets sub_id
     *
     * @return string
     */
    public function getSubId()
    {
        return $this->container['sub_id'];
    }

    /**
     * Sets sub_id
     *
     * @param string $sub_id sub_id
     *
     * @return $this
     */
    public function setSubId($sub_id)
    {
        $this->container['sub_id'] = $sub_id;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string $user_data user_data
     *
     * @return $this
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

