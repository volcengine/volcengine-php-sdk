<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateTaskRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateTaskRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'concurrency' => 'int',
        'end_time' => 'string',
        'forbid_time_list' => '\Volcengine\Vms\Model\ForbidTimeListForUpdateTaskInput[]',
        'recall' => 'bool',
        'ring_again_interval' => 'int',
        'ring_again_times' => 'int',
        'start_time' => 'string',
        'task_open_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'concurrency' => 'int32',
        'end_time' => null,
        'forbid_time_list' => null,
        'recall' => null,
        'ring_again_interval' => 'int32',
        'ring_again_times' => 'int32',
        'start_time' => null,
        'task_open_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'concurrency' => 'Concurrency',
        'end_time' => 'EndTime',
        'forbid_time_list' => 'ForbidTimeList',
        'recall' => 'Recall',
        'ring_again_interval' => 'RingAgainInterval',
        'ring_again_times' => 'RingAgainTimes',
        'start_time' => 'StartTime',
        'task_open_id' => 'TaskOpenId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'concurrency' => 'setConcurrency',
        'end_time' => 'setEndTime',
        'forbid_time_list' => 'setForbidTimeList',
        'recall' => 'setRecall',
        'ring_again_interval' => 'setRingAgainInterval',
        'ring_again_times' => 'setRingAgainTimes',
        'start_time' => 'setStartTime',
        'task_open_id' => 'setTaskOpenId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'concurrency' => 'getConcurrency',
        'end_time' => 'getEndTime',
        'forbid_time_list' => 'getForbidTimeList',
        'recall' => 'getRecall',
        'ring_again_interval' => 'getRingAgainInterval',
        'ring_again_times' => 'getRingAgainTimes',
        'start_time' => 'getStartTime',
        'task_open_id' => 'getTaskOpenId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['concurrency'] = isset($data['concurrency']) ? $data['concurrency'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['forbid_time_list'] = isset($data['forbid_time_list']) ? $data['forbid_time_list'] : null;
        $this->container['recall'] = isset($data['recall']) ? $data['recall'] : null;
        $this->container['ring_again_interval'] = isset($data['ring_again_interval']) ? $data['ring_again_interval'] : null;
        $this->container['ring_again_times'] = isset($data['ring_again_times']) ? $data['ring_again_times'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['task_open_id'] = isset($data['task_open_id']) ? $data['task_open_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['concurrency'] === null) {
            $invalidProperties[] = "'concurrency' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['task_open_id'] === null) {
            $invalidProperties[] = "'task_open_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets concurrency
     *
     * @return int
     */
    public function getConcurrency()
    {
        return $this->container['concurrency'];
    }

    /**
     * Sets concurrency
     *
     * @param int $concurrency concurrency
     *
     * @return $this
     */
    public function setConcurrency($concurrency)
    {
        $this->container['concurrency'] = $concurrency;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets forbid_time_list
     *
     * @return \Volcengine\Vms\Model\ForbidTimeListForUpdateTaskInput[]
     */
    public function getForbidTimeList()
    {
        return $this->container['forbid_time_list'];
    }

    /**
     * Sets forbid_time_list
     *
     * @param \Volcengine\Vms\Model\ForbidTimeListForUpdateTaskInput[] $forbid_time_list forbid_time_list
     *
     * @return $this
     */
    public function setForbidTimeList($forbid_time_list)
    {
        $this->container['forbid_time_list'] = $forbid_time_list;

        return $this;
    }

    /**
     * Gets recall
     *
     * @return bool
     */
    public function getRecall()
    {
        return $this->container['recall'];
    }

    /**
     * Sets recall
     *
     * @param bool $recall recall
     *
     * @return $this
     */
    public function setRecall($recall)
    {
        $this->container['recall'] = $recall;

        return $this;
    }

    /**
     * Gets ring_again_interval
     *
     * @return int
     */
    public function getRingAgainInterval()
    {
        return $this->container['ring_again_interval'];
    }

    /**
     * Sets ring_again_interval
     *
     * @param int $ring_again_interval ring_again_interval
     *
     * @return $this
     */
    public function setRingAgainInterval($ring_again_interval)
    {
        $this->container['ring_again_interval'] = $ring_again_interval;

        return $this;
    }

    /**
     * Gets ring_again_times
     *
     * @return int
     */
    public function getRingAgainTimes()
    {
        return $this->container['ring_again_times'];
    }

    /**
     * Sets ring_again_times
     *
     * @param int $ring_again_times ring_again_times
     *
     * @return $this
     */
    public function setRingAgainTimes($ring_again_times)
    {
        $this->container['ring_again_times'] = $ring_again_times;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets task_open_id
     *
     * @return string
     */
    public function getTaskOpenId()
    {
        return $this->container['task_open_id'];
    }

    /**
     * Sets task_open_id
     *
     * @param string $task_open_id task_open_id
     *
     * @return $this
     */
    public function setTaskOpenId($task_open_id)
    {
        $this->container['task_open_id'] = $task_open_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

