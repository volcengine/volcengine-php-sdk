<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class QuerySingleInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuerySingleInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'call_uuid' => 'string',
        'create_time' => 'string',
        'duration' => 'int',
        'ext' => 'string',
        'phone' => 'string',
        'release_time' => 'string',
        'resource_key' => 'string',
        'single_open_id' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'call_uuid' => null,
        'create_time' => null,
        'duration' => 'int32',
        'ext' => null,
        'phone' => null,
        'release_time' => null,
        'resource_key' => null,
        'single_open_id' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_uuid' => 'CallUuid',
        'create_time' => 'CreateTime',
        'duration' => 'Duration',
        'ext' => 'Ext',
        'phone' => 'Phone',
        'release_time' => 'ReleaseTime',
        'resource_key' => 'ResourceKey',
        'single_open_id' => 'SingleOpenId',
        'state' => 'State'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_uuid' => 'setCallUuid',
        'create_time' => 'setCreateTime',
        'duration' => 'setDuration',
        'ext' => 'setExt',
        'phone' => 'setPhone',
        'release_time' => 'setReleaseTime',
        'resource_key' => 'setResourceKey',
        'single_open_id' => 'setSingleOpenId',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_uuid' => 'getCallUuid',
        'create_time' => 'getCreateTime',
        'duration' => 'getDuration',
        'ext' => 'getExt',
        'phone' => 'getPhone',
        'release_time' => 'getReleaseTime',
        'resource_key' => 'getResourceKey',
        'single_open_id' => 'getSingleOpenId',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['call_uuid'] = isset($data['call_uuid']) ? $data['call_uuid'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['release_time'] = isset($data['release_time']) ? $data['release_time'] : null;
        $this->container['resource_key'] = isset($data['resource_key']) ? $data['resource_key'] : null;
        $this->container['single_open_id'] = isset($data['single_open_id']) ? $data['single_open_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_uuid
     *
     * @return string
     */
    public function getCallUuid()
    {
        return $this->container['call_uuid'];
    }

    /**
     * Sets call_uuid
     *
     * @param string $call_uuid call_uuid
     *
     * @return $this
     */
    public function setCallUuid($call_uuid)
    {
        $this->container['call_uuid'] = $call_uuid;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return string
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param string $ext ext
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets release_time
     *
     * @return string
     */
    public function getReleaseTime()
    {
        return $this->container['release_time'];
    }

    /**
     * Sets release_time
     *
     * @param string $release_time release_time
     *
     * @return $this
     */
    public function setReleaseTime($release_time)
    {
        $this->container['release_time'] = $release_time;

        return $this;
    }

    /**
     * Gets resource_key
     *
     * @return string
     */
    public function getResourceKey()
    {
        return $this->container['resource_key'];
    }

    /**
     * Sets resource_key
     *
     * @param string $resource_key resource_key
     *
     * @return $this
     */
    public function setResourceKey($resource_key)
    {
        $this->container['resource_key'] = $resource_key;

        return $this;
    }

    /**
     * Gets single_open_id
     *
     * @return string
     */
    public function getSingleOpenId()
    {
        return $this->container['single_open_id'];
    }

    /**
     * Sets single_open_id
     *
     * @param string $single_open_id single_open_id
     *
     * @return $this
     */
    public function setSingleOpenId($single_open_id)
    {
        $this->container['single_open_id'] = $single_open_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

