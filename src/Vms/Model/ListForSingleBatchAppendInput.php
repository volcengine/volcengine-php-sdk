<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListForSingleBatchAppendInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListForSingleBatchAppendInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audio_post_url' => 'string',
        'call_record_post_url' => 'string',
        'ext' => 'string',
        'forbid_time_list' => 'string[]',
        'number_list' => 'string[]',
        'number_pool_no' => 'string',
        'number_type' => 'int',
        'phone' => 'string',
        'phone_param' => 'string',
        'resource' => 'string',
        'ring_again_interval' => 'int',
        'ring_again_times' => 'int',
        'select_number_rule' => 'int',
        'single_open_id' => 'string',
        'sms_config' => 'string',
        'trigger_time' => 'int',
        'type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audio_post_url' => null,
        'call_record_post_url' => null,
        'ext' => null,
        'forbid_time_list' => null,
        'number_list' => null,
        'number_pool_no' => null,
        'number_type' => 'int32',
        'phone' => null,
        'phone_param' => null,
        'resource' => null,
        'ring_again_interval' => 'int32',
        'ring_again_times' => 'int32',
        'select_number_rule' => 'int32',
        'single_open_id' => null,
        'sms_config' => null,
        'trigger_time' => 'int64',
        'type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_post_url' => 'AudioPostUrl',
        'call_record_post_url' => 'CallRecordPostUrl',
        'ext' => 'Ext',
        'forbid_time_list' => 'ForbidTimeList',
        'number_list' => 'NumberList',
        'number_pool_no' => 'NumberPoolNo',
        'number_type' => 'NumberType',
        'phone' => 'Phone',
        'phone_param' => 'PhoneParam',
        'resource' => 'Resource',
        'ring_again_interval' => 'RingAgainInterval',
        'ring_again_times' => 'RingAgainTimes',
        'select_number_rule' => 'SelectNumberRule',
        'single_open_id' => 'SingleOpenId',
        'sms_config' => 'SmsConfig',
        'trigger_time' => 'TriggerTime',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_post_url' => 'setAudioPostUrl',
        'call_record_post_url' => 'setCallRecordPostUrl',
        'ext' => 'setExt',
        'forbid_time_list' => 'setForbidTimeList',
        'number_list' => 'setNumberList',
        'number_pool_no' => 'setNumberPoolNo',
        'number_type' => 'setNumberType',
        'phone' => 'setPhone',
        'phone_param' => 'setPhoneParam',
        'resource' => 'setResource',
        'ring_again_interval' => 'setRingAgainInterval',
        'ring_again_times' => 'setRingAgainTimes',
        'select_number_rule' => 'setSelectNumberRule',
        'single_open_id' => 'setSingleOpenId',
        'sms_config' => 'setSmsConfig',
        'trigger_time' => 'setTriggerTime',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_post_url' => 'getAudioPostUrl',
        'call_record_post_url' => 'getCallRecordPostUrl',
        'ext' => 'getExt',
        'forbid_time_list' => 'getForbidTimeList',
        'number_list' => 'getNumberList',
        'number_pool_no' => 'getNumberPoolNo',
        'number_type' => 'getNumberType',
        'phone' => 'getPhone',
        'phone_param' => 'getPhoneParam',
        'resource' => 'getResource',
        'ring_again_interval' => 'getRingAgainInterval',
        'ring_again_times' => 'getRingAgainTimes',
        'select_number_rule' => 'getSelectNumberRule',
        'single_open_id' => 'getSingleOpenId',
        'sms_config' => 'getSmsConfig',
        'trigger_time' => 'getTriggerTime',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_post_url'] = isset($data['audio_post_url']) ? $data['audio_post_url'] : null;
        $this->container['call_record_post_url'] = isset($data['call_record_post_url']) ? $data['call_record_post_url'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['forbid_time_list'] = isset($data['forbid_time_list']) ? $data['forbid_time_list'] : null;
        $this->container['number_list'] = isset($data['number_list']) ? $data['number_list'] : null;
        $this->container['number_pool_no'] = isset($data['number_pool_no']) ? $data['number_pool_no'] : null;
        $this->container['number_type'] = isset($data['number_type']) ? $data['number_type'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone_param'] = isset($data['phone_param']) ? $data['phone_param'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['ring_again_interval'] = isset($data['ring_again_interval']) ? $data['ring_again_interval'] : null;
        $this->container['ring_again_times'] = isset($data['ring_again_times']) ? $data['ring_again_times'] : null;
        $this->container['select_number_rule'] = isset($data['select_number_rule']) ? $data['select_number_rule'] : null;
        $this->container['single_open_id'] = isset($data['single_open_id']) ? $data['single_open_id'] : null;
        $this->container['sms_config'] = isset($data['sms_config']) ? $data['sms_config'] : null;
        $this->container['trigger_time'] = isset($data['trigger_time']) ? $data['trigger_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_post_url
     *
     * @return string
     */
    public function getAudioPostUrl()
    {
        return $this->container['audio_post_url'];
    }

    /**
     * Sets audio_post_url
     *
     * @param string $audio_post_url audio_post_url
     *
     * @return $this
     */
    public function setAudioPostUrl($audio_post_url)
    {
        $this->container['audio_post_url'] = $audio_post_url;

        return $this;
    }

    /**
     * Gets call_record_post_url
     *
     * @return string
     */
    public function getCallRecordPostUrl()
    {
        return $this->container['call_record_post_url'];
    }

    /**
     * Sets call_record_post_url
     *
     * @param string $call_record_post_url call_record_post_url
     *
     * @return $this
     */
    public function setCallRecordPostUrl($call_record_post_url)
    {
        $this->container['call_record_post_url'] = $call_record_post_url;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return string
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param string $ext ext
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets forbid_time_list
     *
     * @return string[]
     */
    public function getForbidTimeList()
    {
        return $this->container['forbid_time_list'];
    }

    /**
     * Sets forbid_time_list
     *
     * @param string[] $forbid_time_list forbid_time_list
     *
     * @return $this
     */
    public function setForbidTimeList($forbid_time_list)
    {
        $this->container['forbid_time_list'] = $forbid_time_list;

        return $this;
    }

    /**
     * Gets number_list
     *
     * @return string[]
     */
    public function getNumberList()
    {
        return $this->container['number_list'];
    }

    /**
     * Sets number_list
     *
     * @param string[] $number_list number_list
     *
     * @return $this
     */
    public function setNumberList($number_list)
    {
        $this->container['number_list'] = $number_list;

        return $this;
    }

    /**
     * Gets number_pool_no
     *
     * @return string
     */
    public function getNumberPoolNo()
    {
        return $this->container['number_pool_no'];
    }

    /**
     * Sets number_pool_no
     *
     * @param string $number_pool_no number_pool_no
     *
     * @return $this
     */
    public function setNumberPoolNo($number_pool_no)
    {
        $this->container['number_pool_no'] = $number_pool_no;

        return $this;
    }

    /**
     * Gets number_type
     *
     * @return int
     */
    public function getNumberType()
    {
        return $this->container['number_type'];
    }

    /**
     * Sets number_type
     *
     * @param int $number_type number_type
     *
     * @return $this
     */
    public function setNumberType($number_type)
    {
        $this->container['number_type'] = $number_type;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_param
     *
     * @return string
     */
    public function getPhoneParam()
    {
        return $this->container['phone_param'];
    }

    /**
     * Sets phone_param
     *
     * @param string $phone_param phone_param
     *
     * @return $this
     */
    public function setPhoneParam($phone_param)
    {
        $this->container['phone_param'] = $phone_param;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets ring_again_interval
     *
     * @return int
     */
    public function getRingAgainInterval()
    {
        return $this->container['ring_again_interval'];
    }

    /**
     * Sets ring_again_interval
     *
     * @param int $ring_again_interval ring_again_interval
     *
     * @return $this
     */
    public function setRingAgainInterval($ring_again_interval)
    {
        $this->container['ring_again_interval'] = $ring_again_interval;

        return $this;
    }

    /**
     * Gets ring_again_times
     *
     * @return int
     */
    public function getRingAgainTimes()
    {
        return $this->container['ring_again_times'];
    }

    /**
     * Sets ring_again_times
     *
     * @param int $ring_again_times ring_again_times
     *
     * @return $this
     */
    public function setRingAgainTimes($ring_again_times)
    {
        $this->container['ring_again_times'] = $ring_again_times;

        return $this;
    }

    /**
     * Gets select_number_rule
     *
     * @return int
     */
    public function getSelectNumberRule()
    {
        return $this->container['select_number_rule'];
    }

    /**
     * Sets select_number_rule
     *
     * @param int $select_number_rule select_number_rule
     *
     * @return $this
     */
    public function setSelectNumberRule($select_number_rule)
    {
        $this->container['select_number_rule'] = $select_number_rule;

        return $this;
    }

    /**
     * Gets single_open_id
     *
     * @return string
     */
    public function getSingleOpenId()
    {
        return $this->container['single_open_id'];
    }

    /**
     * Sets single_open_id
     *
     * @param string $single_open_id single_open_id
     *
     * @return $this
     */
    public function setSingleOpenId($single_open_id)
    {
        $this->container['single_open_id'] = $single_open_id;

        return $this;
    }

    /**
     * Gets sms_config
     *
     * @return string
     */
    public function getSmsConfig()
    {
        return $this->container['sms_config'];
    }

    /**
     * Sets sms_config
     *
     * @param string $sms_config sms_config
     *
     * @return $this
     */
    public function setSmsConfig($sms_config)
    {
        $this->container['sms_config'] = $sms_config;

        return $this;
    }

    /**
     * Gets trigger_time
     *
     * @return int
     */
    public function getTriggerTime()
    {
        return $this->container['trigger_time'];
    }

    /**
     * Sets trigger_time
     *
     * @param int $trigger_time trigger_time
     *
     * @return $this
     */
    public function setTriggerTime($trigger_time)
    {
        $this->container['trigger_time'] = $trigger_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

