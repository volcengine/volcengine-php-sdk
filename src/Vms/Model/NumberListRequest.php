<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NumberListRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NumberListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'limit' => 'int',
        'number_list' => 'string[]',
        'number_pool_no' => 'string',
        'number_pool_type_code' => 'int',
        'number_status_code' => 'int',
        'number_type_code' => 'int',
        'offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'limit' => 'int32',
        'number_list' => null,
        'number_pool_no' => null,
        'number_pool_type_code' => 'int32',
        'number_status_code' => 'int32',
        'number_type_code' => 'int32',
        'offset' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'limit' => 'Limit',
        'number_list' => 'NumberList',
        'number_pool_no' => 'NumberPoolNo',
        'number_pool_type_code' => 'NumberPoolTypeCode',
        'number_status_code' => 'NumberStatusCode',
        'number_type_code' => 'NumberTypeCode',
        'offset' => 'Offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'limit' => 'setLimit',
        'number_list' => 'setNumberList',
        'number_pool_no' => 'setNumberPoolNo',
        'number_pool_type_code' => 'setNumberPoolTypeCode',
        'number_status_code' => 'setNumberStatusCode',
        'number_type_code' => 'setNumberTypeCode',
        'offset' => 'setOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'limit' => 'getLimit',
        'number_list' => 'getNumberList',
        'number_pool_no' => 'getNumberPoolNo',
        'number_pool_type_code' => 'getNumberPoolTypeCode',
        'number_status_code' => 'getNumberStatusCode',
        'number_type_code' => 'getNumberTypeCode',
        'offset' => 'getOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['number_list'] = isset($data['number_list']) ? $data['number_list'] : null;
        $this->container['number_pool_no'] = isset($data['number_pool_no']) ? $data['number_pool_no'] : null;
        $this->container['number_pool_type_code'] = isset($data['number_pool_type_code']) ? $data['number_pool_type_code'] : null;
        $this->container['number_status_code'] = isset($data['number_status_code']) ? $data['number_status_code'] : null;
        $this->container['number_type_code'] = isset($data['number_type_code']) ? $data['number_type_code'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets number_list
     *
     * @return string[]
     */
    public function getNumberList()
    {
        return $this->container['number_list'];
    }

    /**
     * Sets number_list
     *
     * @param string[] $number_list number_list
     *
     * @return $this
     */
    public function setNumberList($number_list)
    {
        $this->container['number_list'] = $number_list;

        return $this;
    }

    /**
     * Gets number_pool_no
     *
     * @return string
     */
    public function getNumberPoolNo()
    {
        return $this->container['number_pool_no'];
    }

    /**
     * Sets number_pool_no
     *
     * @param string $number_pool_no number_pool_no
     *
     * @return $this
     */
    public function setNumberPoolNo($number_pool_no)
    {
        $this->container['number_pool_no'] = $number_pool_no;

        return $this;
    }

    /**
     * Gets number_pool_type_code
     *
     * @return int
     */
    public function getNumberPoolTypeCode()
    {
        return $this->container['number_pool_type_code'];
    }

    /**
     * Sets number_pool_type_code
     *
     * @param int $number_pool_type_code number_pool_type_code
     *
     * @return $this
     */
    public function setNumberPoolTypeCode($number_pool_type_code)
    {
        $this->container['number_pool_type_code'] = $number_pool_type_code;

        return $this;
    }

    /**
     * Gets number_status_code
     *
     * @return int
     */
    public function getNumberStatusCode()
    {
        return $this->container['number_status_code'];
    }

    /**
     * Sets number_status_code
     *
     * @param int $number_status_code number_status_code
     *
     * @return $this
     */
    public function setNumberStatusCode($number_status_code)
    {
        $this->container['number_status_code'] = $number_status_code;

        return $this;
    }

    /**
     * Gets number_type_code
     *
     * @return int
     */
    public function getNumberTypeCode()
    {
        return $this->container['number_type_code'];
    }

    /**
     * Sets number_type_code
     *
     * @param int $number_type_code number_type_code
     *
     * @return $this
     */
    public function setNumberTypeCode($number_type_code)
    {
        $this->container['number_type_code'] = $number_type_code;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset offset
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

