<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RecordForQueryQualificationOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecordForQueryQualificationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'qualification_admin_info_vo' => '\Volcengine\Vms\Model\QualificationAdminInfoVOForQueryQualificationOutput',
        'qualification_main_info_vo' => '\Volcengine\Vms\Model\QualificationMainInfoVOForQueryQualificationOutput',
        'qualification_scenario_info_vo_list' => '\Volcengine\Vms\Model\QualificationScenarioInfoVOListForQueryQualificationOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'qualification_admin_info_vo' => null,
        'qualification_main_info_vo' => null,
        'qualification_scenario_info_vo_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'qualification_admin_info_vo' => 'QualificationAdminInfoVO',
        'qualification_main_info_vo' => 'QualificationMainInfoVO',
        'qualification_scenario_info_vo_list' => 'QualificationScenarioInfoVOList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'qualification_admin_info_vo' => 'setQualificationAdminInfoVo',
        'qualification_main_info_vo' => 'setQualificationMainInfoVo',
        'qualification_scenario_info_vo_list' => 'setQualificationScenarioInfoVoList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'qualification_admin_info_vo' => 'getQualificationAdminInfoVo',
        'qualification_main_info_vo' => 'getQualificationMainInfoVo',
        'qualification_scenario_info_vo_list' => 'getQualificationScenarioInfoVoList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['qualification_admin_info_vo'] = isset($data['qualification_admin_info_vo']) ? $data['qualification_admin_info_vo'] : null;
        $this->container['qualification_main_info_vo'] = isset($data['qualification_main_info_vo']) ? $data['qualification_main_info_vo'] : null;
        $this->container['qualification_scenario_info_vo_list'] = isset($data['qualification_scenario_info_vo_list']) ? $data['qualification_scenario_info_vo_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets qualification_admin_info_vo
     *
     * @return \Volcengine\Vms\Model\QualificationAdminInfoVOForQueryQualificationOutput
     */
    public function getQualificationAdminInfoVo()
    {
        return $this->container['qualification_admin_info_vo'];
    }

    /**
     * Sets qualification_admin_info_vo
     *
     * @param \Volcengine\Vms\Model\QualificationAdminInfoVOForQueryQualificationOutput $qualification_admin_info_vo qualification_admin_info_vo
     *
     * @return $this
     */
    public function setQualificationAdminInfoVo($qualification_admin_info_vo)
    {
        $this->container['qualification_admin_info_vo'] = $qualification_admin_info_vo;

        return $this;
    }

    /**
     * Gets qualification_main_info_vo
     *
     * @return \Volcengine\Vms\Model\QualificationMainInfoVOForQueryQualificationOutput
     */
    public function getQualificationMainInfoVo()
    {
        return $this->container['qualification_main_info_vo'];
    }

    /**
     * Sets qualification_main_info_vo
     *
     * @param \Volcengine\Vms\Model\QualificationMainInfoVOForQueryQualificationOutput $qualification_main_info_vo qualification_main_info_vo
     *
     * @return $this
     */
    public function setQualificationMainInfoVo($qualification_main_info_vo)
    {
        $this->container['qualification_main_info_vo'] = $qualification_main_info_vo;

        return $this;
    }

    /**
     * Gets qualification_scenario_info_vo_list
     *
     * @return \Volcengine\Vms\Model\QualificationScenarioInfoVOListForQueryQualificationOutput[]
     */
    public function getQualificationScenarioInfoVoList()
    {
        return $this->container['qualification_scenario_info_vo_list'];
    }

    /**
     * Sets qualification_scenario_info_vo_list
     *
     * @param \Volcengine\Vms\Model\QualificationScenarioInfoVOListForQueryQualificationOutput[] $qualification_scenario_info_vo_list qualification_scenario_info_vo_list
     *
     * @return $this
     */
    public function setQualificationScenarioInfoVoList($qualification_scenario_info_vo_list)
    {
        $this->container['qualification_scenario_info_vo_list'] = $qualification_scenario_info_vo_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

