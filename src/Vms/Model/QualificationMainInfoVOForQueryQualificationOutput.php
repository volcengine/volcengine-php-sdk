<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class QualificationMainInfoVOForQueryQualificationOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QualificationMainInfoVOForQueryQualificationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'approval_done_reason' => 'string',
        'approval_status' => 'int',
        'business_license_photo_url' => 'string',
        'certificate_of_taxation_registration_photo_url' => 'string',
        'certificate_three_in_one' => 'int',
        'commitment_letter_of_net_access_photo_url' => 'string',
        'create_time' => 'string',
        'doc_of_number_apply_photo_url' => 'string',
        'enterprise_address' => 'string',
        'legal_representative_front_id_photo_url' => 'string',
        'legal_representative_id' => 'string',
        'legal_representative_name' => 'string',
        'qualification_entity' => 'string',
        'qualification_id' => 'int',
        'qualification_no' => 'string',
        'three_in_one_business_license_photo_url' => 'string',
        'unit_social_credit_code' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'approval_done_reason' => null,
        'approval_status' => 'int32',
        'business_license_photo_url' => null,
        'certificate_of_taxation_registration_photo_url' => null,
        'certificate_three_in_one' => 'int32',
        'commitment_letter_of_net_access_photo_url' => null,
        'create_time' => null,
        'doc_of_number_apply_photo_url' => null,
        'enterprise_address' => null,
        'legal_representative_front_id_photo_url' => null,
        'legal_representative_id' => null,
        'legal_representative_name' => null,
        'qualification_entity' => null,
        'qualification_id' => 'int32',
        'qualification_no' => null,
        'three_in_one_business_license_photo_url' => null,
        'unit_social_credit_code' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'approval_done_reason' => 'ApprovalDoneReason',
        'approval_status' => 'ApprovalStatus',
        'business_license_photo_url' => 'BusinessLicensePhotoURL',
        'certificate_of_taxation_registration_photo_url' => 'CertificateOfTaxationRegistrationPhotoURL',
        'certificate_three_in_one' => 'CertificateThreeInOne',
        'commitment_letter_of_net_access_photo_url' => 'CommitmentLetterOfNetAccessPhotoURL',
        'create_time' => 'CreateTime',
        'doc_of_number_apply_photo_url' => 'DocOfNumberApplyPhotoURL',
        'enterprise_address' => 'EnterpriseAddress',
        'legal_representative_front_id_photo_url' => 'LegalRepresentativeFrontIDPhotoURL',
        'legal_representative_id' => 'LegalRepresentativeId',
        'legal_representative_name' => 'LegalRepresentativeName',
        'qualification_entity' => 'QualificationEntity',
        'qualification_id' => 'QualificationId',
        'qualification_no' => 'QualificationNo',
        'three_in_one_business_license_photo_url' => 'ThreeInOneBusinessLicensePhotoURL',
        'unit_social_credit_code' => 'UnitSocialCreditCode',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'approval_done_reason' => 'setApprovalDoneReason',
        'approval_status' => 'setApprovalStatus',
        'business_license_photo_url' => 'setBusinessLicensePhotoUrl',
        'certificate_of_taxation_registration_photo_url' => 'setCertificateOfTaxationRegistrationPhotoUrl',
        'certificate_three_in_one' => 'setCertificateThreeInOne',
        'commitment_letter_of_net_access_photo_url' => 'setCommitmentLetterOfNetAccessPhotoUrl',
        'create_time' => 'setCreateTime',
        'doc_of_number_apply_photo_url' => 'setDocOfNumberApplyPhotoUrl',
        'enterprise_address' => 'setEnterpriseAddress',
        'legal_representative_front_id_photo_url' => 'setLegalRepresentativeFrontIdPhotoUrl',
        'legal_representative_id' => 'setLegalRepresentativeId',
        'legal_representative_name' => 'setLegalRepresentativeName',
        'qualification_entity' => 'setQualificationEntity',
        'qualification_id' => 'setQualificationId',
        'qualification_no' => 'setQualificationNo',
        'three_in_one_business_license_photo_url' => 'setThreeInOneBusinessLicensePhotoUrl',
        'unit_social_credit_code' => 'setUnitSocialCreditCode',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'approval_done_reason' => 'getApprovalDoneReason',
        'approval_status' => 'getApprovalStatus',
        'business_license_photo_url' => 'getBusinessLicensePhotoUrl',
        'certificate_of_taxation_registration_photo_url' => 'getCertificateOfTaxationRegistrationPhotoUrl',
        'certificate_three_in_one' => 'getCertificateThreeInOne',
        'commitment_letter_of_net_access_photo_url' => 'getCommitmentLetterOfNetAccessPhotoUrl',
        'create_time' => 'getCreateTime',
        'doc_of_number_apply_photo_url' => 'getDocOfNumberApplyPhotoUrl',
        'enterprise_address' => 'getEnterpriseAddress',
        'legal_representative_front_id_photo_url' => 'getLegalRepresentativeFrontIdPhotoUrl',
        'legal_representative_id' => 'getLegalRepresentativeId',
        'legal_representative_name' => 'getLegalRepresentativeName',
        'qualification_entity' => 'getQualificationEntity',
        'qualification_id' => 'getQualificationId',
        'qualification_no' => 'getQualificationNo',
        'three_in_one_business_license_photo_url' => 'getThreeInOneBusinessLicensePhotoUrl',
        'unit_social_credit_code' => 'getUnitSocialCreditCode',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['approval_done_reason'] = isset($data['approval_done_reason']) ? $data['approval_done_reason'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['business_license_photo_url'] = isset($data['business_license_photo_url']) ? $data['business_license_photo_url'] : null;
        $this->container['certificate_of_taxation_registration_photo_url'] = isset($data['certificate_of_taxation_registration_photo_url']) ? $data['certificate_of_taxation_registration_photo_url'] : null;
        $this->container['certificate_three_in_one'] = isset($data['certificate_three_in_one']) ? $data['certificate_three_in_one'] : null;
        $this->container['commitment_letter_of_net_access_photo_url'] = isset($data['commitment_letter_of_net_access_photo_url']) ? $data['commitment_letter_of_net_access_photo_url'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['doc_of_number_apply_photo_url'] = isset($data['doc_of_number_apply_photo_url']) ? $data['doc_of_number_apply_photo_url'] : null;
        $this->container['enterprise_address'] = isset($data['enterprise_address']) ? $data['enterprise_address'] : null;
        $this->container['legal_representative_front_id_photo_url'] = isset($data['legal_representative_front_id_photo_url']) ? $data['legal_representative_front_id_photo_url'] : null;
        $this->container['legal_representative_id'] = isset($data['legal_representative_id']) ? $data['legal_representative_id'] : null;
        $this->container['legal_representative_name'] = isset($data['legal_representative_name']) ? $data['legal_representative_name'] : null;
        $this->container['qualification_entity'] = isset($data['qualification_entity']) ? $data['qualification_entity'] : null;
        $this->container['qualification_id'] = isset($data['qualification_id']) ? $data['qualification_id'] : null;
        $this->container['qualification_no'] = isset($data['qualification_no']) ? $data['qualification_no'] : null;
        $this->container['three_in_one_business_license_photo_url'] = isset($data['three_in_one_business_license_photo_url']) ? $data['three_in_one_business_license_photo_url'] : null;
        $this->container['unit_social_credit_code'] = isset($data['unit_social_credit_code']) ? $data['unit_social_credit_code'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets approval_done_reason
     *
     * @return string
     */
    public function getApprovalDoneReason()
    {
        return $this->container['approval_done_reason'];
    }

    /**
     * Sets approval_done_reason
     *
     * @param string $approval_done_reason approval_done_reason
     *
     * @return $this
     */
    public function setApprovalDoneReason($approval_done_reason)
    {
        $this->container['approval_done_reason'] = $approval_done_reason;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return int
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param int $approval_status approval_status
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets business_license_photo_url
     *
     * @return string
     */
    public function getBusinessLicensePhotoUrl()
    {
        return $this->container['business_license_photo_url'];
    }

    /**
     * Sets business_license_photo_url
     *
     * @param string $business_license_photo_url business_license_photo_url
     *
     * @return $this
     */
    public function setBusinessLicensePhotoUrl($business_license_photo_url)
    {
        $this->container['business_license_photo_url'] = $business_license_photo_url;

        return $this;
    }

    /**
     * Gets certificate_of_taxation_registration_photo_url
     *
     * @return string
     */
    public function getCertificateOfTaxationRegistrationPhotoUrl()
    {
        return $this->container['certificate_of_taxation_registration_photo_url'];
    }

    /**
     * Sets certificate_of_taxation_registration_photo_url
     *
     * @param string $certificate_of_taxation_registration_photo_url certificate_of_taxation_registration_photo_url
     *
     * @return $this
     */
    public function setCertificateOfTaxationRegistrationPhotoUrl($certificate_of_taxation_registration_photo_url)
    {
        $this->container['certificate_of_taxation_registration_photo_url'] = $certificate_of_taxation_registration_photo_url;

        return $this;
    }

    /**
     * Gets certificate_three_in_one
     *
     * @return int
     */
    public function getCertificateThreeInOne()
    {
        return $this->container['certificate_three_in_one'];
    }

    /**
     * Sets certificate_three_in_one
     *
     * @param int $certificate_three_in_one certificate_three_in_one
     *
     * @return $this
     */
    public function setCertificateThreeInOne($certificate_three_in_one)
    {
        $this->container['certificate_three_in_one'] = $certificate_three_in_one;

        return $this;
    }

    /**
     * Gets commitment_letter_of_net_access_photo_url
     *
     * @return string
     */
    public function getCommitmentLetterOfNetAccessPhotoUrl()
    {
        return $this->container['commitment_letter_of_net_access_photo_url'];
    }

    /**
     * Sets commitment_letter_of_net_access_photo_url
     *
     * @param string $commitment_letter_of_net_access_photo_url commitment_letter_of_net_access_photo_url
     *
     * @return $this
     */
    public function setCommitmentLetterOfNetAccessPhotoUrl($commitment_letter_of_net_access_photo_url)
    {
        $this->container['commitment_letter_of_net_access_photo_url'] = $commitment_letter_of_net_access_photo_url;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets doc_of_number_apply_photo_url
     *
     * @return string
     */
    public function getDocOfNumberApplyPhotoUrl()
    {
        return $this->container['doc_of_number_apply_photo_url'];
    }

    /**
     * Sets doc_of_number_apply_photo_url
     *
     * @param string $doc_of_number_apply_photo_url doc_of_number_apply_photo_url
     *
     * @return $this
     */
    public function setDocOfNumberApplyPhotoUrl($doc_of_number_apply_photo_url)
    {
        $this->container['doc_of_number_apply_photo_url'] = $doc_of_number_apply_photo_url;

        return $this;
    }

    /**
     * Gets enterprise_address
     *
     * @return string
     */
    public function getEnterpriseAddress()
    {
        return $this->container['enterprise_address'];
    }

    /**
     * Sets enterprise_address
     *
     * @param string $enterprise_address enterprise_address
     *
     * @return $this
     */
    public function setEnterpriseAddress($enterprise_address)
    {
        $this->container['enterprise_address'] = $enterprise_address;

        return $this;
    }

    /**
     * Gets legal_representative_front_id_photo_url
     *
     * @return string
     */
    public function getLegalRepresentativeFrontIdPhotoUrl()
    {
        return $this->container['legal_representative_front_id_photo_url'];
    }

    /**
     * Sets legal_representative_front_id_photo_url
     *
     * @param string $legal_representative_front_id_photo_url legal_representative_front_id_photo_url
     *
     * @return $this
     */
    public function setLegalRepresentativeFrontIdPhotoUrl($legal_representative_front_id_photo_url)
    {
        $this->container['legal_representative_front_id_photo_url'] = $legal_representative_front_id_photo_url;

        return $this;
    }

    /**
     * Gets legal_representative_id
     *
     * @return string
     */
    public function getLegalRepresentativeId()
    {
        return $this->container['legal_representative_id'];
    }

    /**
     * Sets legal_representative_id
     *
     * @param string $legal_representative_id legal_representative_id
     *
     * @return $this
     */
    public function setLegalRepresentativeId($legal_representative_id)
    {
        $this->container['legal_representative_id'] = $legal_representative_id;

        return $this;
    }

    /**
     * Gets legal_representative_name
     *
     * @return string
     */
    public function getLegalRepresentativeName()
    {
        return $this->container['legal_representative_name'];
    }

    /**
     * Sets legal_representative_name
     *
     * @param string $legal_representative_name legal_representative_name
     *
     * @return $this
     */
    public function setLegalRepresentativeName($legal_representative_name)
    {
        $this->container['legal_representative_name'] = $legal_representative_name;

        return $this;
    }

    /**
     * Gets qualification_entity
     *
     * @return string
     */
    public function getQualificationEntity()
    {
        return $this->container['qualification_entity'];
    }

    /**
     * Sets qualification_entity
     *
     * @param string $qualification_entity qualification_entity
     *
     * @return $this
     */
    public function setQualificationEntity($qualification_entity)
    {
        $this->container['qualification_entity'] = $qualification_entity;

        return $this;
    }

    /**
     * Gets qualification_id
     *
     * @return int
     */
    public function getQualificationId()
    {
        return $this->container['qualification_id'];
    }

    /**
     * Sets qualification_id
     *
     * @param int $qualification_id qualification_id
     *
     * @return $this
     */
    public function setQualificationId($qualification_id)
    {
        $this->container['qualification_id'] = $qualification_id;

        return $this;
    }

    /**
     * Gets qualification_no
     *
     * @return string
     */
    public function getQualificationNo()
    {
        return $this->container['qualification_no'];
    }

    /**
     * Sets qualification_no
     *
     * @param string $qualification_no qualification_no
     *
     * @return $this
     */
    public function setQualificationNo($qualification_no)
    {
        $this->container['qualification_no'] = $qualification_no;

        return $this;
    }

    /**
     * Gets three_in_one_business_license_photo_url
     *
     * @return string
     */
    public function getThreeInOneBusinessLicensePhotoUrl()
    {
        return $this->container['three_in_one_business_license_photo_url'];
    }

    /**
     * Sets three_in_one_business_license_photo_url
     *
     * @param string $three_in_one_business_license_photo_url three_in_one_business_license_photo_url
     *
     * @return $this
     */
    public function setThreeInOneBusinessLicensePhotoUrl($three_in_one_business_license_photo_url)
    {
        $this->container['three_in_one_business_license_photo_url'] = $three_in_one_business_license_photo_url;

        return $this;
    }

    /**
     * Gets unit_social_credit_code
     *
     * @return string
     */
    public function getUnitSocialCreditCode()
    {
        return $this->container['unit_social_credit_code'];
    }

    /**
     * Sets unit_social_credit_code
     *
     * @param string $unit_social_credit_code unit_social_credit_code
     *
     * @return $this
     */
    public function setUnitSocialCreditCode($unit_social_credit_code)
    {
        $this->container['unit_social_credit_code'] = $unit_social_credit_code;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

