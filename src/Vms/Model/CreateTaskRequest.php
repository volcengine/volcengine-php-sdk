<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateTaskRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateTaskRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audio_post_url' => 'string',
        'call_record_post_url' => 'string',
        'concurrency' => 'int',
        'end_time' => 'string',
        'finish_when_list_end' => 'bool',
        'forbid_time_list' => '\Volcengine\Vms\Model\ForbidTimeListForCreateTaskInput[]',
        'max_ring_duration' => 'int',
        'name' => 'string',
        'number_list' => 'string[]',
        'number_pool_no' => 'string',
        'phone_list' => '\Volcengine\Vms\Model\PhoneListForCreateTaskInput[]',
        'resource' => 'string',
        'ring_again_interval' => 'int',
        'ring_again_times' => 'int',
        'select_number_rule' => 'int',
        'select_number_type' => 'int',
        'sms_config' => '\Volcengine\Vms\Model\SmsConfigForCreateTaskInput[]',
        'start' => 'bool',
        'start_time' => 'string',
        'type' => 'int',
        'unique' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audio_post_url' => null,
        'call_record_post_url' => null,
        'concurrency' => 'int32',
        'end_time' => null,
        'finish_when_list_end' => null,
        'forbid_time_list' => null,
        'max_ring_duration' => 'int32',
        'name' => null,
        'number_list' => null,
        'number_pool_no' => null,
        'phone_list' => null,
        'resource' => null,
        'ring_again_interval' => 'int32',
        'ring_again_times' => 'int32',
        'select_number_rule' => 'int32',
        'select_number_type' => 'int32',
        'sms_config' => null,
        'start' => null,
        'start_time' => null,
        'type' => 'int32',
        'unique' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_post_url' => 'AudioPostUrl',
        'call_record_post_url' => 'CallRecordPostUrl',
        'concurrency' => 'Concurrency',
        'end_time' => 'EndTime',
        'finish_when_list_end' => 'FinishWhenListEnd',
        'forbid_time_list' => 'ForbidTimeList',
        'max_ring_duration' => 'MaxRingDuration',
        'name' => 'Name',
        'number_list' => 'NumberList',
        'number_pool_no' => 'NumberPoolNo',
        'phone_list' => 'PhoneList',
        'resource' => 'Resource',
        'ring_again_interval' => 'RingAgainInterval',
        'ring_again_times' => 'RingAgainTimes',
        'select_number_rule' => 'SelectNumberRule',
        'select_number_type' => 'SelectNumberType',
        'sms_config' => 'SmsConfig',
        'start' => 'Start',
        'start_time' => 'StartTime',
        'type' => 'Type',
        'unique' => 'Unique'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_post_url' => 'setAudioPostUrl',
        'call_record_post_url' => 'setCallRecordPostUrl',
        'concurrency' => 'setConcurrency',
        'end_time' => 'setEndTime',
        'finish_when_list_end' => 'setFinishWhenListEnd',
        'forbid_time_list' => 'setForbidTimeList',
        'max_ring_duration' => 'setMaxRingDuration',
        'name' => 'setName',
        'number_list' => 'setNumberList',
        'number_pool_no' => 'setNumberPoolNo',
        'phone_list' => 'setPhoneList',
        'resource' => 'setResource',
        'ring_again_interval' => 'setRingAgainInterval',
        'ring_again_times' => 'setRingAgainTimes',
        'select_number_rule' => 'setSelectNumberRule',
        'select_number_type' => 'setSelectNumberType',
        'sms_config' => 'setSmsConfig',
        'start' => 'setStart',
        'start_time' => 'setStartTime',
        'type' => 'setType',
        'unique' => 'setUnique'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_post_url' => 'getAudioPostUrl',
        'call_record_post_url' => 'getCallRecordPostUrl',
        'concurrency' => 'getConcurrency',
        'end_time' => 'getEndTime',
        'finish_when_list_end' => 'getFinishWhenListEnd',
        'forbid_time_list' => 'getForbidTimeList',
        'max_ring_duration' => 'getMaxRingDuration',
        'name' => 'getName',
        'number_list' => 'getNumberList',
        'number_pool_no' => 'getNumberPoolNo',
        'phone_list' => 'getPhoneList',
        'resource' => 'getResource',
        'ring_again_interval' => 'getRingAgainInterval',
        'ring_again_times' => 'getRingAgainTimes',
        'select_number_rule' => 'getSelectNumberRule',
        'select_number_type' => 'getSelectNumberType',
        'sms_config' => 'getSmsConfig',
        'start' => 'getStart',
        'start_time' => 'getStartTime',
        'type' => 'getType',
        'unique' => 'getUnique'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_post_url'] = isset($data['audio_post_url']) ? $data['audio_post_url'] : null;
        $this->container['call_record_post_url'] = isset($data['call_record_post_url']) ? $data['call_record_post_url'] : null;
        $this->container['concurrency'] = isset($data['concurrency']) ? $data['concurrency'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['finish_when_list_end'] = isset($data['finish_when_list_end']) ? $data['finish_when_list_end'] : null;
        $this->container['forbid_time_list'] = isset($data['forbid_time_list']) ? $data['forbid_time_list'] : null;
        $this->container['max_ring_duration'] = isset($data['max_ring_duration']) ? $data['max_ring_duration'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_list'] = isset($data['number_list']) ? $data['number_list'] : null;
        $this->container['number_pool_no'] = isset($data['number_pool_no']) ? $data['number_pool_no'] : null;
        $this->container['phone_list'] = isset($data['phone_list']) ? $data['phone_list'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['ring_again_interval'] = isset($data['ring_again_interval']) ? $data['ring_again_interval'] : null;
        $this->container['ring_again_times'] = isset($data['ring_again_times']) ? $data['ring_again_times'] : null;
        $this->container['select_number_rule'] = isset($data['select_number_rule']) ? $data['select_number_rule'] : null;
        $this->container['select_number_type'] = isset($data['select_number_type']) ? $data['select_number_type'] : null;
        $this->container['sms_config'] = isset($data['sms_config']) ? $data['sms_config'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unique'] = isset($data['unique']) ? $data['unique'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['concurrency'] === null) {
            $invalidProperties[] = "'concurrency' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['number_pool_no'] === null) {
            $invalidProperties[] = "'number_pool_no' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_post_url
     *
     * @return string
     */
    public function getAudioPostUrl()
    {
        return $this->container['audio_post_url'];
    }

    /**
     * Sets audio_post_url
     *
     * @param string $audio_post_url audio_post_url
     *
     * @return $this
     */
    public function setAudioPostUrl($audio_post_url)
    {
        $this->container['audio_post_url'] = $audio_post_url;

        return $this;
    }

    /**
     * Gets call_record_post_url
     *
     * @return string
     */
    public function getCallRecordPostUrl()
    {
        return $this->container['call_record_post_url'];
    }

    /**
     * Sets call_record_post_url
     *
     * @param string $call_record_post_url call_record_post_url
     *
     * @return $this
     */
    public function setCallRecordPostUrl($call_record_post_url)
    {
        $this->container['call_record_post_url'] = $call_record_post_url;

        return $this;
    }

    /**
     * Gets concurrency
     *
     * @return int
     */
    public function getConcurrency()
    {
        return $this->container['concurrency'];
    }

    /**
     * Sets concurrency
     *
     * @param int $concurrency concurrency
     *
     * @return $this
     */
    public function setConcurrency($concurrency)
    {
        $this->container['concurrency'] = $concurrency;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets finish_when_list_end
     *
     * @return bool
     */
    public function getFinishWhenListEnd()
    {
        return $this->container['finish_when_list_end'];
    }

    /**
     * Sets finish_when_list_end
     *
     * @param bool $finish_when_list_end finish_when_list_end
     *
     * @return $this
     */
    public function setFinishWhenListEnd($finish_when_list_end)
    {
        $this->container['finish_when_list_end'] = $finish_when_list_end;

        return $this;
    }

    /**
     * Gets forbid_time_list
     *
     * @return \Volcengine\Vms\Model\ForbidTimeListForCreateTaskInput[]
     */
    public function getForbidTimeList()
    {
        return $this->container['forbid_time_list'];
    }

    /**
     * Sets forbid_time_list
     *
     * @param \Volcengine\Vms\Model\ForbidTimeListForCreateTaskInput[] $forbid_time_list forbid_time_list
     *
     * @return $this
     */
    public function setForbidTimeList($forbid_time_list)
    {
        $this->container['forbid_time_list'] = $forbid_time_list;

        return $this;
    }

    /**
     * Gets max_ring_duration
     *
     * @return int
     */
    public function getMaxRingDuration()
    {
        return $this->container['max_ring_duration'];
    }

    /**
     * Sets max_ring_duration
     *
     * @param int $max_ring_duration max_ring_duration
     *
     * @return $this
     */
    public function setMaxRingDuration($max_ring_duration)
    {
        $this->container['max_ring_duration'] = $max_ring_duration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_list
     *
     * @return string[]
     */
    public function getNumberList()
    {
        return $this->container['number_list'];
    }

    /**
     * Sets number_list
     *
     * @param string[] $number_list number_list
     *
     * @return $this
     */
    public function setNumberList($number_list)
    {
        $this->container['number_list'] = $number_list;

        return $this;
    }

    /**
     * Gets number_pool_no
     *
     * @return string
     */
    public function getNumberPoolNo()
    {
        return $this->container['number_pool_no'];
    }

    /**
     * Sets number_pool_no
     *
     * @param string $number_pool_no number_pool_no
     *
     * @return $this
     */
    public function setNumberPoolNo($number_pool_no)
    {
        $this->container['number_pool_no'] = $number_pool_no;

        return $this;
    }

    /**
     * Gets phone_list
     *
     * @return \Volcengine\Vms\Model\PhoneListForCreateTaskInput[]
     */
    public function getPhoneList()
    {
        return $this->container['phone_list'];
    }

    /**
     * Sets phone_list
     *
     * @param \Volcengine\Vms\Model\PhoneListForCreateTaskInput[] $phone_list phone_list
     *
     * @return $this
     */
    public function setPhoneList($phone_list)
    {
        $this->container['phone_list'] = $phone_list;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets ring_again_interval
     *
     * @return int
     */
    public function getRingAgainInterval()
    {
        return $this->container['ring_again_interval'];
    }

    /**
     * Sets ring_again_interval
     *
     * @param int $ring_again_interval ring_again_interval
     *
     * @return $this
     */
    public function setRingAgainInterval($ring_again_interval)
    {
        $this->container['ring_again_interval'] = $ring_again_interval;

        return $this;
    }

    /**
     * Gets ring_again_times
     *
     * @return int
     */
    public function getRingAgainTimes()
    {
        return $this->container['ring_again_times'];
    }

    /**
     * Sets ring_again_times
     *
     * @param int $ring_again_times ring_again_times
     *
     * @return $this
     */
    public function setRingAgainTimes($ring_again_times)
    {
        $this->container['ring_again_times'] = $ring_again_times;

        return $this;
    }

    /**
     * Gets select_number_rule
     *
     * @return int
     */
    public function getSelectNumberRule()
    {
        return $this->container['select_number_rule'];
    }

    /**
     * Sets select_number_rule
     *
     * @param int $select_number_rule select_number_rule
     *
     * @return $this
     */
    public function setSelectNumberRule($select_number_rule)
    {
        $this->container['select_number_rule'] = $select_number_rule;

        return $this;
    }

    /**
     * Gets select_number_type
     *
     * @return int
     */
    public function getSelectNumberType()
    {
        return $this->container['select_number_type'];
    }

    /**
     * Sets select_number_type
     *
     * @param int $select_number_type select_number_type
     *
     * @return $this
     */
    public function setSelectNumberType($select_number_type)
    {
        $this->container['select_number_type'] = $select_number_type;

        return $this;
    }

    /**
     * Gets sms_config
     *
     * @return \Volcengine\Vms\Model\SmsConfigForCreateTaskInput[]
     */
    public function getSmsConfig()
    {
        return $this->container['sms_config'];
    }

    /**
     * Sets sms_config
     *
     * @param \Volcengine\Vms\Model\SmsConfigForCreateTaskInput[] $sms_config sms_config
     *
     * @return $this
     */
    public function setSmsConfig($sms_config)
    {
        $this->container['sms_config'] = $sms_config;

        return $this;
    }

    /**
     * Gets start
     *
     * @return bool
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param bool $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return bool
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param bool $unique unique
     *
     * @return $this
     */
    public function setUnique($unique)
    {
        $this->container['unique'] = $unique;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

