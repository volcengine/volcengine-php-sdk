<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vms\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Volcengine\Common\ApiException;
use Volcengine\Common\Configuration;
use Volcengine\Common\HeaderSelector;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\Utils;

class VMSApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function addQualification($body)
    {
        list($response) = $this->addQualificationWithHttpInfo($body);
        return $response;
    }

    public function addQualificationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\AddQualificationResponse';
        $request = $this->addQualificationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function addQualificationAsync($body)
    {
        return $this->addQualificationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function addQualificationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\AddQualificationResponse';
        $request = $this->addQualificationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function addQualificationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addQualification'
            );
        }

        $resourcePath = '/AddQualification/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function batchAppend($body)
    {
        list($response) = $this->batchAppendWithHttpInfo($body);
        return $response;
    }

    public function batchAppendWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BatchAppendResponse';
        $request = $this->batchAppendRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function batchAppendAsync($body)
    {
        return $this->batchAppendAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function batchAppendAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BatchAppendResponse';
        $request = $this->batchAppendRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function batchAppendRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling batchAppend'
            );
        }

        $resourcePath = '/BatchAppend/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function bindAXN($body)
    {
        list($response) = $this->bindAXNWithHttpInfo($body);
        return $response;
    }

    public function bindAXNWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindAXNResponse';
        $request = $this->bindAXNRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function bindAXNAsync($body)
    {
        return $this->bindAXNAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function bindAXNAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindAXNResponse';
        $request = $this->bindAXNRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function bindAXNRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling bindAXN'
            );
        }

        $resourcePath = '/BindAXN/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function bindAXNE($body)
    {
        list($response) = $this->bindAXNEWithHttpInfo($body);
        return $response;
    }

    public function bindAXNEWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindAXNEResponse';
        $request = $this->bindAXNERequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function bindAXNEAsync($body)
    {
        return $this->bindAXNEAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function bindAXNEAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindAXNEResponse';
        $request = $this->bindAXNERequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function bindAXNERequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling bindAXNE'
            );
        }

        $resourcePath = '/BindAXNE/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function bindAXYB($body)
    {
        list($response) = $this->bindAXYBWithHttpInfo($body);
        return $response;
    }

    public function bindAXYBWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindAXYBResponse';
        $request = $this->bindAXYBRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function bindAXYBAsync($body)
    {
        return $this->bindAXYBAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function bindAXYBAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindAXYBResponse';
        $request = $this->bindAXYBRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function bindAXYBRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling bindAXYB'
            );
        }

        $resourcePath = '/BindAXYB/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function bindYBForAXYB($body)
    {
        list($response) = $this->bindYBForAXYBWithHttpInfo($body);
        return $response;
    }

    public function bindYBForAXYBWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindYBForAXYBResponse';
        $request = $this->bindYBForAXYBRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function bindYBForAXYBAsync($body)
    {
        return $this->bindYBForAXYBAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function bindYBForAXYBAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\BindYBForAXYBResponse';
        $request = $this->bindYBForAXYBRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function bindYBForAXYBRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling bindYBForAXYB'
            );
        }

        $resourcePath = '/BindYBForAXYB/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function cancelClick2CallV2($body)
    {
        list($response) = $this->cancelClick2CallV2WithHttpInfo($body);
        return $response;
    }

    public function cancelClick2CallV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CancelClick2CallV2Response';
        $request = $this->cancelClick2CallV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function cancelClick2CallV2Async($body)
    {
        return $this->cancelClick2CallV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function cancelClick2CallV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CancelClick2CallV2Response';
        $request = $this->cancelClick2CallV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function cancelClick2CallV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelClick2CallV2'
            );
        }

        $resourcePath = '/CancelClick2CallV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function click2Call($body)
    {
        list($response) = $this->click2CallWithHttpInfo($body);
        return $response;
    }

    public function click2CallWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\Click2CallResponse';
        $request = $this->click2CallRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function click2CallAsync($body)
    {
        return $this->click2CallAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function click2CallAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\Click2CallResponse';
        $request = $this->click2CallRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function click2CallRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling click2Call'
            );
        }

        $resourcePath = '/Click2Call/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function commitResourceUpload($body)
    {
        list($response) = $this->commitResourceUploadWithHttpInfo($body);
        return $response;
    }

    public function commitResourceUploadWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CommitResourceUploadResponse';
        $request = $this->commitResourceUploadRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function commitResourceUploadAsync($body)
    {
        return $this->commitResourceUploadAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function commitResourceUploadAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CommitResourceUploadResponse';
        $request = $this->commitResourceUploadRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function commitResourceUploadRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling commitResourceUpload'
            );
        }

        $resourcePath = '/CommitResourceUpload/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createNumberPool($body)
    {
        list($response) = $this->createNumberPoolWithHttpInfo($body);
        return $response;
    }

    public function createNumberPoolWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CreateNumberPoolResponse';
        $request = $this->createNumberPoolRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createNumberPoolAsync($body)
    {
        return $this->createNumberPoolAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createNumberPoolAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CreateNumberPoolResponse';
        $request = $this->createNumberPoolRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createNumberPoolRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createNumberPool'
            );
        }

        $resourcePath = '/CreateNumberPool/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTask($body)
    {
        list($response) = $this->createTaskWithHttpInfo($body);
        return $response;
    }

    public function createTaskWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CreateTaskResponse';
        $request = $this->createTaskRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTaskAsync($body)
    {
        return $this->createTaskAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTaskAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\CreateTaskResponse';
        $request = $this->createTaskRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTaskRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTask'
            );
        }

        $resourcePath = '/CreateTask/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function enableOrDisableNumber($body)
    {
        list($response) = $this->enableOrDisableNumberWithHttpInfo($body);
        return $response;
    }

    public function enableOrDisableNumberWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\EnableOrDisableNumberResponse';
        $request = $this->enableOrDisableNumberRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function enableOrDisableNumberAsync($body)
    {
        return $this->enableOrDisableNumberAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function enableOrDisableNumberAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\EnableOrDisableNumberResponse';
        $request = $this->enableOrDisableNumberRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function enableOrDisableNumberRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling enableOrDisableNumber'
            );
        }

        $resourcePath = '/EnableOrDisableNumber/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function getResourceUploadUrl($body)
    {
        list($response) = $this->getResourceUploadUrlWithHttpInfo($body);
        return $response;
    }

    public function getResourceUploadUrlWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\GetResourceUploadUrlResponse';
        $request = $this->getResourceUploadUrlRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function getResourceUploadUrlAsync($body)
    {
        return $this->getResourceUploadUrlAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function getResourceUploadUrlAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\GetResourceUploadUrlResponse';
        $request = $this->getResourceUploadUrlRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function getResourceUploadUrlRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getResourceUploadUrl'
            );
        }

        $resourcePath = '/GetResourceUploadUrl/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function numberList($body)
    {
        list($response) = $this->numberListWithHttpInfo($body);
        return $response;
    }

    public function numberListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\NumberListResponse';
        $request = $this->numberListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function numberListAsync($body)
    {
        return $this->numberListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function numberListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\NumberListResponse';
        $request = $this->numberListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function numberListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling numberList'
            );
        }

        $resourcePath = '/NumberList/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function numberPoolList($body)
    {
        list($response) = $this->numberPoolListWithHttpInfo($body);
        return $response;
    }

    public function numberPoolListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\NumberPoolListResponse';
        $request = $this->numberPoolListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function numberPoolListAsync($body)
    {
        return $this->numberPoolListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function numberPoolListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\NumberPoolListResponse';
        $request = $this->numberPoolListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function numberPoolListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling numberPoolList'
            );
        }

        $resourcePath = '/NumberPoolList/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function openCreateTts($body)
    {
        list($response) = $this->openCreateTtsWithHttpInfo($body);
        return $response;
    }

    public function openCreateTtsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\OpenCreateTtsResponse';
        $request = $this->openCreateTtsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function openCreateTtsAsync($body)
    {
        return $this->openCreateTtsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function openCreateTtsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\OpenCreateTtsResponse';
        $request = $this->openCreateTtsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function openCreateTtsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling openCreateTts'
            );
        }

        $resourcePath = '/OpenCreateTts/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function openDeleteResource($body)
    {
        list($response) = $this->openDeleteResourceWithHttpInfo($body);
        return $response;
    }

    public function openDeleteResourceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\OpenDeleteResourceResponse';
        $request = $this->openDeleteResourceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function openDeleteResourceAsync($body)
    {
        return $this->openDeleteResourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function openDeleteResourceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\OpenDeleteResourceResponse';
        $request = $this->openDeleteResourceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function openDeleteResourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling openDeleteResource'
            );
        }

        $resourcePath = '/OpenDeleteResource/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function openUpdateResource($body)
    {
        list($response) = $this->openUpdateResourceWithHttpInfo($body);
        return $response;
    }

    public function openUpdateResourceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\OpenUpdateResourceResponse';
        $request = $this->openUpdateResourceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function openUpdateResourceAsync($body)
    {
        return $this->openUpdateResourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function openUpdateResourceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\OpenUpdateResourceResponse';
        $request = $this->openUpdateResourceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function openUpdateResourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling openUpdateResource'
            );
        }

        $resourcePath = '/OpenUpdateResource/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function pauseTask($body)
    {
        list($response) = $this->pauseTaskWithHttpInfo($body);
        return $response;
    }

    public function pauseTaskWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\PauseTaskResponse';
        $request = $this->pauseTaskRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function pauseTaskAsync($body)
    {
        return $this->pauseTaskAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function pauseTaskAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\PauseTaskResponse';
        $request = $this->pauseTaskRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function pauseTaskRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pauseTask'
            );
        }

        $resourcePath = '/PauseTask/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryAudioRecordFileUrl($body)
    {
        list($response) = $this->queryAudioRecordFileUrlWithHttpInfo($body);
        return $response;
    }

    public function queryAudioRecordFileUrlWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryAudioRecordFileUrlResponse';
        $request = $this->queryAudioRecordFileUrlRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryAudioRecordFileUrlAsync($body)
    {
        return $this->queryAudioRecordFileUrlAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryAudioRecordFileUrlAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryAudioRecordFileUrlResponse';
        $request = $this->queryAudioRecordFileUrlRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryAudioRecordFileUrlRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryAudioRecordFileUrl'
            );
        }

        $resourcePath = '/QueryAudioRecordFileUrl/2022-01-01/vms/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryAudioRecordToTextFileUrlV2($body)
    {
        list($response) = $this->queryAudioRecordToTextFileUrlV2WithHttpInfo($body);
        return $response;
    }

    public function queryAudioRecordToTextFileUrlV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryAudioRecordToTextFileUrlV2Response';
        $request = $this->queryAudioRecordToTextFileUrlV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryAudioRecordToTextFileUrlV2Async($body)
    {
        return $this->queryAudioRecordToTextFileUrlV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryAudioRecordToTextFileUrlV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryAudioRecordToTextFileUrlV2Response';
        $request = $this->queryAudioRecordToTextFileUrlV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryAudioRecordToTextFileUrlV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryAudioRecordToTextFileUrlV2'
            );
        }

        $resourcePath = '/QueryAudioRecordToTextFileUrlV2/2022-01-01/vms/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryAuth($body)
    {
        list($response) = $this->queryAuthWithHttpInfo($body);
        return $response;
    }

    public function queryAuthWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryAuthResponse';
        $request = $this->queryAuthRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryAuthAsync($body)
    {
        return $this->queryAuthAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryAuthAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryAuthResponse';
        $request = $this->queryAuthRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryAuthRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryAuth'
            );
        }

        $resourcePath = '/QueryAuth/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryCallRecordMsgV2($body)
    {
        list($response) = $this->queryCallRecordMsgV2WithHttpInfo($body);
        return $response;
    }

    public function queryCallRecordMsgV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryCallRecordMsgV2Response';
        $request = $this->queryCallRecordMsgV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryCallRecordMsgV2Async($body)
    {
        return $this->queryCallRecordMsgV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryCallRecordMsgV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryCallRecordMsgV2Response';
        $request = $this->queryCallRecordMsgV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryCallRecordMsgV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryCallRecordMsgV2'
            );
        }

        $resourcePath = '/QueryCallRecordMsgV2/2022-01-01/vms/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryOpenGetResource($body)
    {
        list($response) = $this->queryOpenGetResourceWithHttpInfo($body);
        return $response;
    }

    public function queryOpenGetResourceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryOpenGetResourceResponse';
        $request = $this->queryOpenGetResourceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryOpenGetResourceAsync($body)
    {
        return $this->queryOpenGetResourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryOpenGetResourceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryOpenGetResourceResponse';
        $request = $this->queryOpenGetResourceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryOpenGetResourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryOpenGetResource'
            );
        }

        $resourcePath = '/QueryOpenGetResource/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryQualification($body)
    {
        list($response) = $this->queryQualificationWithHttpInfo($body);
        return $response;
    }

    public function queryQualificationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryQualificationResponse';
        $request = $this->queryQualificationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryQualificationAsync($body)
    {
        return $this->queryQualificationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryQualificationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryQualificationResponse';
        $request = $this->queryQualificationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryQualificationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryQualification'
            );
        }

        $resourcePath = '/QueryQualification/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function querySingleInfo($body)
    {
        list($response) = $this->querySingleInfoWithHttpInfo($body);
        return $response;
    }

    public function querySingleInfoWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QuerySingleInfoResponse';
        $request = $this->querySingleInfoRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function querySingleInfoAsync($body)
    {
        return $this->querySingleInfoAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function querySingleInfoAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QuerySingleInfoResponse';
        $request = $this->querySingleInfoRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function querySingleInfoRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling querySingleInfo'
            );
        }

        $resourcePath = '/QuerySingleInfo/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function querySubscription($body)
    {
        list($response) = $this->querySubscriptionWithHttpInfo($body);
        return $response;
    }

    public function querySubscriptionWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QuerySubscriptionResponse';
        $request = $this->querySubscriptionRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function querySubscriptionAsync($body)
    {
        return $this->querySubscriptionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function querySubscriptionAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QuerySubscriptionResponse';
        $request = $this->querySubscriptionRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function querySubscriptionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling querySubscription'
            );
        }

        $resourcePath = '/QuerySubscription/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function querySubscriptionForList($body)
    {
        list($response) = $this->querySubscriptionForListWithHttpInfo($body);
        return $response;
    }

    public function querySubscriptionForListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QuerySubscriptionForListResponse';
        $request = $this->querySubscriptionForListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function querySubscriptionForListAsync($body)
    {
        return $this->querySubscriptionForListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function querySubscriptionForListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QuerySubscriptionForListResponse';
        $request = $this->querySubscriptionForListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function querySubscriptionForListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling querySubscriptionForList'
            );
        }

        $resourcePath = '/QuerySubscriptionForList/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function queryUsableResourceV2($body)
    {
        list($response) = $this->queryUsableResourceV2WithHttpInfo($body);
        return $response;
    }

    public function queryUsableResourceV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryUsableResourceV2Response';
        $request = $this->queryUsableResourceV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function queryUsableResourceV2Async($body)
    {
        return $this->queryUsableResourceV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function queryUsableResourceV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\QueryUsableResourceV2Response';
        $request = $this->queryUsableResourceV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function queryUsableResourceV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling queryUsableResourceV2'
            );
        }

        $resourcePath = '/QueryUsableResourceV2/2022-01-01/vms/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function resumeTask($body)
    {
        list($response) = $this->resumeTaskWithHttpInfo($body);
        return $response;
    }

    public function resumeTaskWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\ResumeTaskResponse';
        $request = $this->resumeTaskRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function resumeTaskAsync($body)
    {
        return $this->resumeTaskAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function resumeTaskAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\ResumeTaskResponse';
        $request = $this->resumeTaskRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function resumeTaskRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling resumeTask'
            );
        }

        $resourcePath = '/ResumeTask/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function routeAAuth($body)
    {
        list($response) = $this->routeAAuthWithHttpInfo($body);
        return $response;
    }

    public function routeAAuthWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\RouteAAuthResponse';
        $request = $this->routeAAuthRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function routeAAuthAsync($body)
    {
        return $this->routeAAuthAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function routeAAuthAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\RouteAAuthResponse';
        $request = $this->routeAAuthRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function routeAAuthRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling routeAAuth'
            );
        }

        $resourcePath = '/RouteAAuth/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function selectNumberAndBindAXB($body)
    {
        list($response) = $this->selectNumberAndBindAXBWithHttpInfo($body);
        return $response;
    }

    public function selectNumberAndBindAXBWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SelectNumberAndBindAXBResponse';
        $request = $this->selectNumberAndBindAXBRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function selectNumberAndBindAXBAsync($body)
    {
        return $this->selectNumberAndBindAXBAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function selectNumberAndBindAXBAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SelectNumberAndBindAXBResponse';
        $request = $this->selectNumberAndBindAXBRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function selectNumberAndBindAXBRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling selectNumberAndBindAXB'
            );
        }

        $resourcePath = '/SelectNumberAndBindAXB/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function selectNumberAndBindAXN($body)
    {
        list($response) = $this->selectNumberAndBindAXNWithHttpInfo($body);
        return $response;
    }

    public function selectNumberAndBindAXNWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SelectNumberAndBindAXNResponse';
        $request = $this->selectNumberAndBindAXNRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function selectNumberAndBindAXNAsync($body)
    {
        return $this->selectNumberAndBindAXNAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function selectNumberAndBindAXNAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SelectNumberAndBindAXNResponse';
        $request = $this->selectNumberAndBindAXNRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function selectNumberAndBindAXNRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling selectNumberAndBindAXN'
            );
        }

        $resourcePath = '/SelectNumberAndBindAXN/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function singleBatchAppend($body)
    {
        list($response) = $this->singleBatchAppendWithHttpInfo($body);
        return $response;
    }

    public function singleBatchAppendWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SingleBatchAppendResponse';
        $request = $this->singleBatchAppendRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function singleBatchAppendAsync($body)
    {
        return $this->singleBatchAppendAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function singleBatchAppendAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SingleBatchAppendResponse';
        $request = $this->singleBatchAppendRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function singleBatchAppendRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling singleBatchAppend'
            );
        }

        $resourcePath = '/SingleBatchAppend/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function singleCancelV2($body)
    {
        list($response) = $this->singleCancelV2WithHttpInfo($body);
        return $response;
    }

    public function singleCancelV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SingleCancelV2Response';
        $request = $this->singleCancelV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function singleCancelV2Async($body)
    {
        return $this->singleCancelV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function singleCancelV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\SingleCancelV2Response';
        $request = $this->singleCancelV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function singleCancelV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling singleCancelV2'
            );
        }

        $resourcePath = '/SingleCancelV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function stopTask($body)
    {
        list($response) = $this->stopTaskWithHttpInfo($body);
        return $response;
    }

    public function stopTaskWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\StopTaskResponse';
        $request = $this->stopTaskRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function stopTaskAsync($body)
    {
        return $this->stopTaskAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function stopTaskAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\StopTaskResponse';
        $request = $this->stopTaskRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function stopTaskRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling stopTask'
            );
        }

        $resourcePath = '/StopTask/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function unbindAXBV2($body)
    {
        list($response) = $this->unbindAXBV2WithHttpInfo($body);
        return $response;
    }

    public function unbindAXBV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXBV2Response';
        $request = $this->unbindAXBV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function unbindAXBV2Async($body)
    {
        return $this->unbindAXBV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function unbindAXBV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXBV2Response';
        $request = $this->unbindAXBV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function unbindAXBV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unbindAXBV2'
            );
        }

        $resourcePath = '/UnbindAXBV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function unbindAXNEV2($body)
    {
        list($response) = $this->unbindAXNEV2WithHttpInfo($body);
        return $response;
    }

    public function unbindAXNEV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXNEV2Response';
        $request = $this->unbindAXNEV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function unbindAXNEV2Async($body)
    {
        return $this->unbindAXNEV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function unbindAXNEV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXNEV2Response';
        $request = $this->unbindAXNEV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function unbindAXNEV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unbindAXNEV2'
            );
        }

        $resourcePath = '/UnbindAXNEV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function unbindAXNV2($body)
    {
        list($response) = $this->unbindAXNV2WithHttpInfo($body);
        return $response;
    }

    public function unbindAXNV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXNV2Response';
        $request = $this->unbindAXNV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function unbindAXNV2Async($body)
    {
        return $this->unbindAXNV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function unbindAXNV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXNV2Response';
        $request = $this->unbindAXNV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function unbindAXNV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unbindAXNV2'
            );
        }

        $resourcePath = '/UnbindAXNV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function unbindAXYBV2($body)
    {
        list($response) = $this->unbindAXYBV2WithHttpInfo($body);
        return $response;
    }

    public function unbindAXYBV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXYBV2Response';
        $request = $this->unbindAXYBV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function unbindAXYBV2Async($body)
    {
        return $this->unbindAXYBV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function unbindAXYBV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UnbindAXYBV2Response';
        $request = $this->unbindAXYBV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function unbindAXYBV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unbindAXYBV2'
            );
        }

        $resourcePath = '/UnbindAXYBV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function updateNumberPoolV2($body)
    {
        list($response) = $this->updateNumberPoolV2WithHttpInfo($body);
        return $response;
    }

    public function updateNumberPoolV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpdateNumberPoolV2Response';
        $request = $this->updateNumberPoolV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function updateNumberPoolV2Async($body)
    {
        return $this->updateNumberPoolV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function updateNumberPoolV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpdateNumberPoolV2Response';
        $request = $this->updateNumberPoolV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function updateNumberPoolV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateNumberPoolV2'
            );
        }

        $resourcePath = '/UpdateNumberPoolV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function updateQualification($body)
    {
        list($response) = $this->updateQualificationWithHttpInfo($body);
        return $response;
    }

    public function updateQualificationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpdateQualificationResponse';
        $request = $this->updateQualificationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function updateQualificationAsync($body)
    {
        return $this->updateQualificationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function updateQualificationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpdateQualificationResponse';
        $request = $this->updateQualificationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function updateQualificationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateQualification'
            );
        }

        $resourcePath = '/UpdateQualification/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function updateTask($body)
    {
        list($response) = $this->updateTaskWithHttpInfo($body);
        return $response;
    }

    public function updateTaskWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpdateTaskResponse';
        $request = $this->updateTaskRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function updateTaskAsync($body)
    {
        return $this->updateTaskAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function updateTaskAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpdateTaskResponse';
        $request = $this->updateTaskRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function updateTaskRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTask'
            );
        }

        $resourcePath = '/UpdateTask/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function upgradeAXToAXB($body)
    {
        list($response) = $this->upgradeAXToAXBWithHttpInfo($body);
        return $response;
    }

    public function upgradeAXToAXBWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpgradeAXToAXBResponse';
        $request = $this->upgradeAXToAXBRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function upgradeAXToAXBAsync($body)
    {
        return $this->upgradeAXToAXBAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function upgradeAXToAXBAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UpgradeAXToAXBResponse';
        $request = $this->upgradeAXToAXBRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function upgradeAXToAXBRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling upgradeAXToAXB'
            );
        }

        $resourcePath = '/UpgradeAXToAXB/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function uploadQualificationFileV2($body)
    {
        list($response) = $this->uploadQualificationFileV2WithHttpInfo($body);
        return $response;
    }

    public function uploadQualificationFileV2WithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UploadQualificationFileV2Response';
        $request = $this->uploadQualificationFileV2Request($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function uploadQualificationFileV2Async($body)
    {
        return $this->uploadQualificationFileV2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function uploadQualificationFileV2AsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vms\Model\UploadQualificationFileV2Response';
        $request = $this->uploadQualificationFileV2Request($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function uploadQualificationFileV2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling uploadQualificationFileV2'
            );
        }

        $resourcePath = '/UploadQualificationFileV2/2022-01-01/vms/post/application_json/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }


    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
