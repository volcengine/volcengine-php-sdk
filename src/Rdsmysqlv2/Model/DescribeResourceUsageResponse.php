<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeResourceUsageResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeResourceUsageResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_audit_log_size' => 'int',
        'backup_bin_log_size' => 'int',
        'backup_data_size' => 'int',
        'backup_error_log_size' => 'int',
        'backup_free_quota_size' => 'int',
        'backup_log_size' => 'int',
        'backup_slow_log_size' => 'int',
        'backup_use' => 'double',
        'basic_backup_binlog_size' => 'int',
        'basic_backup_data_size' => 'int',
        'storage_audit_log_size' => 'int',
        'storage_bin_log_size' => 'int',
        'storage_data_size' => 'int',
        'storage_error_log_size' => 'int',
        'storage_log_size' => 'int',
        'storage_slow_log_size' => 'int',
        'storage_space' => 'int',
        'storage_use' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_audit_log_size' => 'int64',
        'backup_bin_log_size' => 'int64',
        'backup_data_size' => 'int64',
        'backup_error_log_size' => 'int64',
        'backup_free_quota_size' => 'int64',
        'backup_log_size' => 'int64',
        'backup_slow_log_size' => 'int64',
        'backup_use' => 'double',
        'basic_backup_binlog_size' => 'int64',
        'basic_backup_data_size' => 'int64',
        'storage_audit_log_size' => 'int64',
        'storage_bin_log_size' => 'int64',
        'storage_data_size' => 'int64',
        'storage_error_log_size' => 'int64',
        'storage_log_size' => 'int64',
        'storage_slow_log_size' => 'int64',
        'storage_space' => 'int32',
        'storage_use' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_audit_log_size' => 'BackupAuditLogSize',
        'backup_bin_log_size' => 'BackupBinLogSize',
        'backup_data_size' => 'BackupDataSize',
        'backup_error_log_size' => 'BackupErrorLogSize',
        'backup_free_quota_size' => 'BackupFreeQuotaSize',
        'backup_log_size' => 'BackupLogSize',
        'backup_slow_log_size' => 'BackupSlowLogSize',
        'backup_use' => 'BackupUse',
        'basic_backup_binlog_size' => 'BasicBackupBinlogSize',
        'basic_backup_data_size' => 'BasicBackupDataSize',
        'storage_audit_log_size' => 'StorageAuditLogSize',
        'storage_bin_log_size' => 'StorageBinLogSize',
        'storage_data_size' => 'StorageDataSize',
        'storage_error_log_size' => 'StorageErrorLogSize',
        'storage_log_size' => 'StorageLogSize',
        'storage_slow_log_size' => 'StorageSlowLogSize',
        'storage_space' => 'StorageSpace',
        'storage_use' => 'StorageUse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_audit_log_size' => 'setBackupAuditLogSize',
        'backup_bin_log_size' => 'setBackupBinLogSize',
        'backup_data_size' => 'setBackupDataSize',
        'backup_error_log_size' => 'setBackupErrorLogSize',
        'backup_free_quota_size' => 'setBackupFreeQuotaSize',
        'backup_log_size' => 'setBackupLogSize',
        'backup_slow_log_size' => 'setBackupSlowLogSize',
        'backup_use' => 'setBackupUse',
        'basic_backup_binlog_size' => 'setBasicBackupBinlogSize',
        'basic_backup_data_size' => 'setBasicBackupDataSize',
        'storage_audit_log_size' => 'setStorageAuditLogSize',
        'storage_bin_log_size' => 'setStorageBinLogSize',
        'storage_data_size' => 'setStorageDataSize',
        'storage_error_log_size' => 'setStorageErrorLogSize',
        'storage_log_size' => 'setStorageLogSize',
        'storage_slow_log_size' => 'setStorageSlowLogSize',
        'storage_space' => 'setStorageSpace',
        'storage_use' => 'setStorageUse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_audit_log_size' => 'getBackupAuditLogSize',
        'backup_bin_log_size' => 'getBackupBinLogSize',
        'backup_data_size' => 'getBackupDataSize',
        'backup_error_log_size' => 'getBackupErrorLogSize',
        'backup_free_quota_size' => 'getBackupFreeQuotaSize',
        'backup_log_size' => 'getBackupLogSize',
        'backup_slow_log_size' => 'getBackupSlowLogSize',
        'backup_use' => 'getBackupUse',
        'basic_backup_binlog_size' => 'getBasicBackupBinlogSize',
        'basic_backup_data_size' => 'getBasicBackupDataSize',
        'storage_audit_log_size' => 'getStorageAuditLogSize',
        'storage_bin_log_size' => 'getStorageBinLogSize',
        'storage_data_size' => 'getStorageDataSize',
        'storage_error_log_size' => 'getStorageErrorLogSize',
        'storage_log_size' => 'getStorageLogSize',
        'storage_slow_log_size' => 'getStorageSlowLogSize',
        'storage_space' => 'getStorageSpace',
        'storage_use' => 'getStorageUse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_audit_log_size'] = isset($data['backup_audit_log_size']) ? $data['backup_audit_log_size'] : null;
        $this->container['backup_bin_log_size'] = isset($data['backup_bin_log_size']) ? $data['backup_bin_log_size'] : null;
        $this->container['backup_data_size'] = isset($data['backup_data_size']) ? $data['backup_data_size'] : null;
        $this->container['backup_error_log_size'] = isset($data['backup_error_log_size']) ? $data['backup_error_log_size'] : null;
        $this->container['backup_free_quota_size'] = isset($data['backup_free_quota_size']) ? $data['backup_free_quota_size'] : null;
        $this->container['backup_log_size'] = isset($data['backup_log_size']) ? $data['backup_log_size'] : null;
        $this->container['backup_slow_log_size'] = isset($data['backup_slow_log_size']) ? $data['backup_slow_log_size'] : null;
        $this->container['backup_use'] = isset($data['backup_use']) ? $data['backup_use'] : null;
        $this->container['basic_backup_binlog_size'] = isset($data['basic_backup_binlog_size']) ? $data['basic_backup_binlog_size'] : null;
        $this->container['basic_backup_data_size'] = isset($data['basic_backup_data_size']) ? $data['basic_backup_data_size'] : null;
        $this->container['storage_audit_log_size'] = isset($data['storage_audit_log_size']) ? $data['storage_audit_log_size'] : null;
        $this->container['storage_bin_log_size'] = isset($data['storage_bin_log_size']) ? $data['storage_bin_log_size'] : null;
        $this->container['storage_data_size'] = isset($data['storage_data_size']) ? $data['storage_data_size'] : null;
        $this->container['storage_error_log_size'] = isset($data['storage_error_log_size']) ? $data['storage_error_log_size'] : null;
        $this->container['storage_log_size'] = isset($data['storage_log_size']) ? $data['storage_log_size'] : null;
        $this->container['storage_slow_log_size'] = isset($data['storage_slow_log_size']) ? $data['storage_slow_log_size'] : null;
        $this->container['storage_space'] = isset($data['storage_space']) ? $data['storage_space'] : null;
        $this->container['storage_use'] = isset($data['storage_use']) ? $data['storage_use'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_audit_log_size
     *
     * @return int
     */
    public function getBackupAuditLogSize()
    {
        return $this->container['backup_audit_log_size'];
    }

    /**
     * Sets backup_audit_log_size
     *
     * @param int $backup_audit_log_size backup_audit_log_size
     *
     * @return $this
     */
    public function setBackupAuditLogSize($backup_audit_log_size)
    {
        $this->container['backup_audit_log_size'] = $backup_audit_log_size;

        return $this;
    }

    /**
     * Gets backup_bin_log_size
     *
     * @return int
     */
    public function getBackupBinLogSize()
    {
        return $this->container['backup_bin_log_size'];
    }

    /**
     * Sets backup_bin_log_size
     *
     * @param int $backup_bin_log_size backup_bin_log_size
     *
     * @return $this
     */
    public function setBackupBinLogSize($backup_bin_log_size)
    {
        $this->container['backup_bin_log_size'] = $backup_bin_log_size;

        return $this;
    }

    /**
     * Gets backup_data_size
     *
     * @return int
     */
    public function getBackupDataSize()
    {
        return $this->container['backup_data_size'];
    }

    /**
     * Sets backup_data_size
     *
     * @param int $backup_data_size backup_data_size
     *
     * @return $this
     */
    public function setBackupDataSize($backup_data_size)
    {
        $this->container['backup_data_size'] = $backup_data_size;

        return $this;
    }

    /**
     * Gets backup_error_log_size
     *
     * @return int
     */
    public function getBackupErrorLogSize()
    {
        return $this->container['backup_error_log_size'];
    }

    /**
     * Sets backup_error_log_size
     *
     * @param int $backup_error_log_size backup_error_log_size
     *
     * @return $this
     */
    public function setBackupErrorLogSize($backup_error_log_size)
    {
        $this->container['backup_error_log_size'] = $backup_error_log_size;

        return $this;
    }

    /**
     * Gets backup_free_quota_size
     *
     * @return int
     */
    public function getBackupFreeQuotaSize()
    {
        return $this->container['backup_free_quota_size'];
    }

    /**
     * Sets backup_free_quota_size
     *
     * @param int $backup_free_quota_size backup_free_quota_size
     *
     * @return $this
     */
    public function setBackupFreeQuotaSize($backup_free_quota_size)
    {
        $this->container['backup_free_quota_size'] = $backup_free_quota_size;

        return $this;
    }

    /**
     * Gets backup_log_size
     *
     * @return int
     */
    public function getBackupLogSize()
    {
        return $this->container['backup_log_size'];
    }

    /**
     * Sets backup_log_size
     *
     * @param int $backup_log_size backup_log_size
     *
     * @return $this
     */
    public function setBackupLogSize($backup_log_size)
    {
        $this->container['backup_log_size'] = $backup_log_size;

        return $this;
    }

    /**
     * Gets backup_slow_log_size
     *
     * @return int
     */
    public function getBackupSlowLogSize()
    {
        return $this->container['backup_slow_log_size'];
    }

    /**
     * Sets backup_slow_log_size
     *
     * @param int $backup_slow_log_size backup_slow_log_size
     *
     * @return $this
     */
    public function setBackupSlowLogSize($backup_slow_log_size)
    {
        $this->container['backup_slow_log_size'] = $backup_slow_log_size;

        return $this;
    }

    /**
     * Gets backup_use
     *
     * @return double
     */
    public function getBackupUse()
    {
        return $this->container['backup_use'];
    }

    /**
     * Sets backup_use
     *
     * @param double $backup_use backup_use
     *
     * @return $this
     */
    public function setBackupUse($backup_use)
    {
        $this->container['backup_use'] = $backup_use;

        return $this;
    }

    /**
     * Gets basic_backup_binlog_size
     *
     * @return int
     */
    public function getBasicBackupBinlogSize()
    {
        return $this->container['basic_backup_binlog_size'];
    }

    /**
     * Sets basic_backup_binlog_size
     *
     * @param int $basic_backup_binlog_size basic_backup_binlog_size
     *
     * @return $this
     */
    public function setBasicBackupBinlogSize($basic_backup_binlog_size)
    {
        $this->container['basic_backup_binlog_size'] = $basic_backup_binlog_size;

        return $this;
    }

    /**
     * Gets basic_backup_data_size
     *
     * @return int
     */
    public function getBasicBackupDataSize()
    {
        return $this->container['basic_backup_data_size'];
    }

    /**
     * Sets basic_backup_data_size
     *
     * @param int $basic_backup_data_size basic_backup_data_size
     *
     * @return $this
     */
    public function setBasicBackupDataSize($basic_backup_data_size)
    {
        $this->container['basic_backup_data_size'] = $basic_backup_data_size;

        return $this;
    }

    /**
     * Gets storage_audit_log_size
     *
     * @return int
     */
    public function getStorageAuditLogSize()
    {
        return $this->container['storage_audit_log_size'];
    }

    /**
     * Sets storage_audit_log_size
     *
     * @param int $storage_audit_log_size storage_audit_log_size
     *
     * @return $this
     */
    public function setStorageAuditLogSize($storage_audit_log_size)
    {
        $this->container['storage_audit_log_size'] = $storage_audit_log_size;

        return $this;
    }

    /**
     * Gets storage_bin_log_size
     *
     * @return int
     */
    public function getStorageBinLogSize()
    {
        return $this->container['storage_bin_log_size'];
    }

    /**
     * Sets storage_bin_log_size
     *
     * @param int $storage_bin_log_size storage_bin_log_size
     *
     * @return $this
     */
    public function setStorageBinLogSize($storage_bin_log_size)
    {
        $this->container['storage_bin_log_size'] = $storage_bin_log_size;

        return $this;
    }

    /**
     * Gets storage_data_size
     *
     * @return int
     */
    public function getStorageDataSize()
    {
        return $this->container['storage_data_size'];
    }

    /**
     * Sets storage_data_size
     *
     * @param int $storage_data_size storage_data_size
     *
     * @return $this
     */
    public function setStorageDataSize($storage_data_size)
    {
        $this->container['storage_data_size'] = $storage_data_size;

        return $this;
    }

    /**
     * Gets storage_error_log_size
     *
     * @return int
     */
    public function getStorageErrorLogSize()
    {
        return $this->container['storage_error_log_size'];
    }

    /**
     * Sets storage_error_log_size
     *
     * @param int $storage_error_log_size storage_error_log_size
     *
     * @return $this
     */
    public function setStorageErrorLogSize($storage_error_log_size)
    {
        $this->container['storage_error_log_size'] = $storage_error_log_size;

        return $this;
    }

    /**
     * Gets storage_log_size
     *
     * @return int
     */
    public function getStorageLogSize()
    {
        return $this->container['storage_log_size'];
    }

    /**
     * Sets storage_log_size
     *
     * @param int $storage_log_size storage_log_size
     *
     * @return $this
     */
    public function setStorageLogSize($storage_log_size)
    {
        $this->container['storage_log_size'] = $storage_log_size;

        return $this;
    }

    /**
     * Gets storage_slow_log_size
     *
     * @return int
     */
    public function getStorageSlowLogSize()
    {
        return $this->container['storage_slow_log_size'];
    }

    /**
     * Sets storage_slow_log_size
     *
     * @param int $storage_slow_log_size storage_slow_log_size
     *
     * @return $this
     */
    public function setStorageSlowLogSize($storage_slow_log_size)
    {
        $this->container['storage_slow_log_size'] = $storage_slow_log_size;

        return $this;
    }

    /**
     * Gets storage_space
     *
     * @return int
     */
    public function getStorageSpace()
    {
        return $this->container['storage_space'];
    }

    /**
     * Sets storage_space
     *
     * @param int $storage_space storage_space
     *
     * @return $this
     */
    public function setStorageSpace($storage_space)
    {
        $this->container['storage_space'] = $storage_space;

        return $this;
    }

    /**
     * Gets storage_use
     *
     * @return double
     */
    public function getStorageUse()
    {
        return $this->container['storage_use'];
    }

    /**
     * Sets storage_use
     *
     * @param double $storage_use storage_use
     *
     * @return $this
     */
    public function setStorageUse($storage_use)
    {
        $this->container['storage_use'] = $storage_use;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

