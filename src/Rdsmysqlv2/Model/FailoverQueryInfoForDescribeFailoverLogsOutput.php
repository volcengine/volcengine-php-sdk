<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FailoverQueryInfoForDescribeFailoverLogsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FailoverQueryInfoForDescribeFailoverLogsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change_time' => 'string',
        'details' => 'string',
        'ha_change_type' => 'string',
        'new_master' => 'string',
        'old_master' => 'string',
        'reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'change_time' => null,
        'details' => null,
        'ha_change_type' => null,
        'new_master' => null,
        'old_master' => null,
        'reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'change_time' => 'ChangeTime',
        'details' => 'Details',
        'ha_change_type' => 'HAChangeType',
        'new_master' => 'NewMaster',
        'old_master' => 'OldMaster',
        'reason' => 'Reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'change_time' => 'setChangeTime',
        'details' => 'setDetails',
        'ha_change_type' => 'setHaChangeType',
        'new_master' => 'setNewMaster',
        'old_master' => 'setOldMaster',
        'reason' => 'setReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'change_time' => 'getChangeTime',
        'details' => 'getDetails',
        'ha_change_type' => 'getHaChangeType',
        'new_master' => 'getNewMaster',
        'old_master' => 'getOldMaster',
        'reason' => 'getReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change_time'] = isset($data['change_time']) ? $data['change_time'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['ha_change_type'] = isset($data['ha_change_type']) ? $data['ha_change_type'] : null;
        $this->container['new_master'] = isset($data['new_master']) ? $data['new_master'] : null;
        $this->container['old_master'] = isset($data['old_master']) ? $data['old_master'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change_time
     *
     * @return string
     */
    public function getChangeTime()
    {
        return $this->container['change_time'];
    }

    /**
     * Sets change_time
     *
     * @param string $change_time change_time
     *
     * @return $this
     */
    public function setChangeTime($change_time)
    {
        $this->container['change_time'] = $change_time;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets ha_change_type
     *
     * @return string
     */
    public function getHaChangeType()
    {
        return $this->container['ha_change_type'];
    }

    /**
     * Sets ha_change_type
     *
     * @param string $ha_change_type ha_change_type
     *
     * @return $this
     */
    public function setHaChangeType($ha_change_type)
    {
        $this->container['ha_change_type'] = $ha_change_type;

        return $this;
    }

    /**
     * Gets new_master
     *
     * @return string
     */
    public function getNewMaster()
    {
        return $this->container['new_master'];
    }

    /**
     * Sets new_master
     *
     * @param string $new_master new_master
     *
     * @return $this
     */
    public function setNewMaster($new_master)
    {
        $this->container['new_master'] = $new_master;

        return $this;
    }

    /**
     * Gets old_master
     *
     * @return string
     */
    public function getOldMaster()
    {
        return $this->container['old_master'];
    }

    /**
     * Sets old_master
     *
     * @param string $old_master old_master
     *
     * @return $this
     */
    public function setOldMaster($old_master)
    {
        $this->container['old_master'] = $old_master;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

