<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ParameterChangeLogForDescribeDBInstanceParametersLogOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParameterChangeLogForDescribeDBInstanceParametersLogOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_node_ids' => 'string[]',
        'modify_time' => 'string',
        'new_parameter_value' => 'string',
        'old_parameter_value' => 'string',
        'param_apply_scope' => 'string',
        'parameter_name' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_node_ids' => null,
        'modify_time' => null,
        'new_parameter_value' => null,
        'old_parameter_value' => null,
        'param_apply_scope' => null,
        'parameter_name' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_node_ids' => 'CustomNodeIds',
        'modify_time' => 'ModifyTime',
        'new_parameter_value' => 'NewParameterValue',
        'old_parameter_value' => 'OldParameterValue',
        'param_apply_scope' => 'ParamApplyScope',
        'parameter_name' => 'ParameterName',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_node_ids' => 'setCustomNodeIds',
        'modify_time' => 'setModifyTime',
        'new_parameter_value' => 'setNewParameterValue',
        'old_parameter_value' => 'setOldParameterValue',
        'param_apply_scope' => 'setParamApplyScope',
        'parameter_name' => 'setParameterName',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_node_ids' => 'getCustomNodeIds',
        'modify_time' => 'getModifyTime',
        'new_parameter_value' => 'getNewParameterValue',
        'old_parameter_value' => 'getOldParameterValue',
        'param_apply_scope' => 'getParamApplyScope',
        'parameter_name' => 'getParameterName',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_node_ids'] = isset($data['custom_node_ids']) ? $data['custom_node_ids'] : null;
        $this->container['modify_time'] = isset($data['modify_time']) ? $data['modify_time'] : null;
        $this->container['new_parameter_value'] = isset($data['new_parameter_value']) ? $data['new_parameter_value'] : null;
        $this->container['old_parameter_value'] = isset($data['old_parameter_value']) ? $data['old_parameter_value'] : null;
        $this->container['param_apply_scope'] = isset($data['param_apply_scope']) ? $data['param_apply_scope'] : null;
        $this->container['parameter_name'] = isset($data['parameter_name']) ? $data['parameter_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_node_ids
     *
     * @return string[]
     */
    public function getCustomNodeIds()
    {
        return $this->container['custom_node_ids'];
    }

    /**
     * Sets custom_node_ids
     *
     * @param string[] $custom_node_ids custom_node_ids
     *
     * @return $this
     */
    public function setCustomNodeIds($custom_node_ids)
    {
        $this->container['custom_node_ids'] = $custom_node_ids;

        return $this;
    }

    /**
     * Gets modify_time
     *
     * @return string
     */
    public function getModifyTime()
    {
        return $this->container['modify_time'];
    }

    /**
     * Sets modify_time
     *
     * @param string $modify_time modify_time
     *
     * @return $this
     */
    public function setModifyTime($modify_time)
    {
        $this->container['modify_time'] = $modify_time;

        return $this;
    }

    /**
     * Gets new_parameter_value
     *
     * @return string
     */
    public function getNewParameterValue()
    {
        return $this->container['new_parameter_value'];
    }

    /**
     * Sets new_parameter_value
     *
     * @param string $new_parameter_value new_parameter_value
     *
     * @return $this
     */
    public function setNewParameterValue($new_parameter_value)
    {
        $this->container['new_parameter_value'] = $new_parameter_value;

        return $this;
    }

    /**
     * Gets old_parameter_value
     *
     * @return string
     */
    public function getOldParameterValue()
    {
        return $this->container['old_parameter_value'];
    }

    /**
     * Sets old_parameter_value
     *
     * @param string $old_parameter_value old_parameter_value
     *
     * @return $this
     */
    public function setOldParameterValue($old_parameter_value)
    {
        $this->container['old_parameter_value'] = $old_parameter_value;

        return $this;
    }

    /**
     * Gets param_apply_scope
     *
     * @return string
     */
    public function getParamApplyScope()
    {
        return $this->container['param_apply_scope'];
    }

    /**
     * Sets param_apply_scope
     *
     * @param string $param_apply_scope param_apply_scope
     *
     * @return $this
     */
    public function setParamApplyScope($param_apply_scope)
    {
        $this->container['param_apply_scope'] = $param_apply_scope;

        return $this;
    }

    /**
     * Gets parameter_name
     *
     * @return string
     */
    public function getParameterName()
    {
        return $this->container['parameter_name'];
    }

    /**
     * Sets parameter_name
     *
     * @param string $parameter_name parameter_name
     *
     * @return $this
     */
    public function setParameterName($parameter_name)
    {
        $this->container['parameter_name'] = $parameter_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

