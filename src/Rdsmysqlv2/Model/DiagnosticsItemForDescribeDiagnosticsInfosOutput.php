<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DiagnosticsItemForDescribeDiagnosticsInfosOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiagnosticsItemForDescribeDiagnosticsInfosOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diagnostics_item' => 'string',
        'diagnostics_result' => 'string',
        'possible_effect' => 'string',
        'suggestion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diagnostics_item' => null,
        'diagnostics_result' => null,
        'possible_effect' => null,
        'suggestion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diagnostics_item' => 'DiagnosticsItem',
        'diagnostics_result' => 'DiagnosticsResult',
        'possible_effect' => 'PossibleEffect',
        'suggestion' => 'Suggestion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diagnostics_item' => 'setDiagnosticsItem',
        'diagnostics_result' => 'setDiagnosticsResult',
        'possible_effect' => 'setPossibleEffect',
        'suggestion' => 'setSuggestion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diagnostics_item' => 'getDiagnosticsItem',
        'diagnostics_result' => 'getDiagnosticsResult',
        'possible_effect' => 'getPossibleEffect',
        'suggestion' => 'getSuggestion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diagnostics_item'] = isset($data['diagnostics_item']) ? $data['diagnostics_item'] : null;
        $this->container['diagnostics_result'] = isset($data['diagnostics_result']) ? $data['diagnostics_result'] : null;
        $this->container['possible_effect'] = isset($data['possible_effect']) ? $data['possible_effect'] : null;
        $this->container['suggestion'] = isset($data['suggestion']) ? $data['suggestion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diagnostics_item
     *
     * @return string
     */
    public function getDiagnosticsItem()
    {
        return $this->container['diagnostics_item'];
    }

    /**
     * Sets diagnostics_item
     *
     * @param string $diagnostics_item diagnostics_item
     *
     * @return $this
     */
    public function setDiagnosticsItem($diagnostics_item)
    {
        $this->container['diagnostics_item'] = $diagnostics_item;

        return $this;
    }

    /**
     * Gets diagnostics_result
     *
     * @return string
     */
    public function getDiagnosticsResult()
    {
        return $this->container['diagnostics_result'];
    }

    /**
     * Sets diagnostics_result
     *
     * @param string $diagnostics_result diagnostics_result
     *
     * @return $this
     */
    public function setDiagnosticsResult($diagnostics_result)
    {
        $this->container['diagnostics_result'] = $diagnostics_result;

        return $this;
    }

    /**
     * Gets possible_effect
     *
     * @return string
     */
    public function getPossibleEffect()
    {
        return $this->container['possible_effect'];
    }

    /**
     * Sets possible_effect
     *
     * @param string $possible_effect possible_effect
     *
     * @return $this
     */
    public function setPossibleEffect($possible_effect)
    {
        $this->container['possible_effect'] = $possible_effect;

        return $this;
    }

    /**
     * Gets suggestion
     *
     * @return string
     */
    public function getSuggestion()
    {
        return $this->container['suggestion'];
    }

    /**
     * Sets suggestion
     *
     * @param string $suggestion suggestion
     *
     * @return $this
     */
    public function setSuggestion($suggestion)
    {
        $this->container['suggestion'] = $suggestion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

