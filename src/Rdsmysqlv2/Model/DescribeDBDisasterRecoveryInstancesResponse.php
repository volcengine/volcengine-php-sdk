<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBDisasterRecoveryInstancesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBDisasterRecoveryInstancesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'disaster_recovery_instances' => '\Volcengine\Rdsmysqlv2\Model\DisasterRecoveryInstanceForDescribeDBDisasterRecoveryInstancesOutput[]',
        'dr_dts_task_id' => 'string',
        'dr_dts_task_name' => 'string',
        'dr_dts_task_status' => 'string',
        'dr_seconds_behind_master' => 'int',
        'master_instance_id' => 'string',
        'master_instance_name' => 'string',
        'master_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'disaster_recovery_instances' => null,
        'dr_dts_task_id' => null,
        'dr_dts_task_name' => null,
        'dr_dts_task_status' => null,
        'dr_seconds_behind_master' => 'int32',
        'master_instance_id' => null,
        'master_instance_name' => null,
        'master_region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disaster_recovery_instances' => 'DisasterRecoveryInstances',
        'dr_dts_task_id' => 'DrDtsTaskId',
        'dr_dts_task_name' => 'DrDtsTaskName',
        'dr_dts_task_status' => 'DrDtsTaskStatus',
        'dr_seconds_behind_master' => 'DrSecondsBehindMaster',
        'master_instance_id' => 'MasterInstanceId',
        'master_instance_name' => 'MasterInstanceName',
        'master_region' => 'MasterRegion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disaster_recovery_instances' => 'setDisasterRecoveryInstances',
        'dr_dts_task_id' => 'setDrDtsTaskId',
        'dr_dts_task_name' => 'setDrDtsTaskName',
        'dr_dts_task_status' => 'setDrDtsTaskStatus',
        'dr_seconds_behind_master' => 'setDrSecondsBehindMaster',
        'master_instance_id' => 'setMasterInstanceId',
        'master_instance_name' => 'setMasterInstanceName',
        'master_region' => 'setMasterRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disaster_recovery_instances' => 'getDisasterRecoveryInstances',
        'dr_dts_task_id' => 'getDrDtsTaskId',
        'dr_dts_task_name' => 'getDrDtsTaskName',
        'dr_dts_task_status' => 'getDrDtsTaskStatus',
        'dr_seconds_behind_master' => 'getDrSecondsBehindMaster',
        'master_instance_id' => 'getMasterInstanceId',
        'master_instance_name' => 'getMasterInstanceName',
        'master_region' => 'getMasterRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disaster_recovery_instances'] = isset($data['disaster_recovery_instances']) ? $data['disaster_recovery_instances'] : null;
        $this->container['dr_dts_task_id'] = isset($data['dr_dts_task_id']) ? $data['dr_dts_task_id'] : null;
        $this->container['dr_dts_task_name'] = isset($data['dr_dts_task_name']) ? $data['dr_dts_task_name'] : null;
        $this->container['dr_dts_task_status'] = isset($data['dr_dts_task_status']) ? $data['dr_dts_task_status'] : null;
        $this->container['dr_seconds_behind_master'] = isset($data['dr_seconds_behind_master']) ? $data['dr_seconds_behind_master'] : null;
        $this->container['master_instance_id'] = isset($data['master_instance_id']) ? $data['master_instance_id'] : null;
        $this->container['master_instance_name'] = isset($data['master_instance_name']) ? $data['master_instance_name'] : null;
        $this->container['master_region'] = isset($data['master_region']) ? $data['master_region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disaster_recovery_instances
     *
     * @return \Volcengine\Rdsmysqlv2\Model\DisasterRecoveryInstanceForDescribeDBDisasterRecoveryInstancesOutput[]
     */
    public function getDisasterRecoveryInstances()
    {
        return $this->container['disaster_recovery_instances'];
    }

    /**
     * Sets disaster_recovery_instances
     *
     * @param \Volcengine\Rdsmysqlv2\Model\DisasterRecoveryInstanceForDescribeDBDisasterRecoveryInstancesOutput[] $disaster_recovery_instances disaster_recovery_instances
     *
     * @return $this
     */
    public function setDisasterRecoveryInstances($disaster_recovery_instances)
    {
        $this->container['disaster_recovery_instances'] = $disaster_recovery_instances;

        return $this;
    }

    /**
     * Gets dr_dts_task_id
     *
     * @return string
     */
    public function getDrDtsTaskId()
    {
        return $this->container['dr_dts_task_id'];
    }

    /**
     * Sets dr_dts_task_id
     *
     * @param string $dr_dts_task_id dr_dts_task_id
     *
     * @return $this
     */
    public function setDrDtsTaskId($dr_dts_task_id)
    {
        $this->container['dr_dts_task_id'] = $dr_dts_task_id;

        return $this;
    }

    /**
     * Gets dr_dts_task_name
     *
     * @return string
     */
    public function getDrDtsTaskName()
    {
        return $this->container['dr_dts_task_name'];
    }

    /**
     * Sets dr_dts_task_name
     *
     * @param string $dr_dts_task_name dr_dts_task_name
     *
     * @return $this
     */
    public function setDrDtsTaskName($dr_dts_task_name)
    {
        $this->container['dr_dts_task_name'] = $dr_dts_task_name;

        return $this;
    }

    /**
     * Gets dr_dts_task_status
     *
     * @return string
     */
    public function getDrDtsTaskStatus()
    {
        return $this->container['dr_dts_task_status'];
    }

    /**
     * Sets dr_dts_task_status
     *
     * @param string $dr_dts_task_status dr_dts_task_status
     *
     * @return $this
     */
    public function setDrDtsTaskStatus($dr_dts_task_status)
    {
        $this->container['dr_dts_task_status'] = $dr_dts_task_status;

        return $this;
    }

    /**
     * Gets dr_seconds_behind_master
     *
     * @return int
     */
    public function getDrSecondsBehindMaster()
    {
        return $this->container['dr_seconds_behind_master'];
    }

    /**
     * Sets dr_seconds_behind_master
     *
     * @param int $dr_seconds_behind_master dr_seconds_behind_master
     *
     * @return $this
     */
    public function setDrSecondsBehindMaster($dr_seconds_behind_master)
    {
        $this->container['dr_seconds_behind_master'] = $dr_seconds_behind_master;

        return $this;
    }

    /**
     * Gets master_instance_id
     *
     * @return string
     */
    public function getMasterInstanceId()
    {
        return $this->container['master_instance_id'];
    }

    /**
     * Sets master_instance_id
     *
     * @param string $master_instance_id master_instance_id
     *
     * @return $this
     */
    public function setMasterInstanceId($master_instance_id)
    {
        $this->container['master_instance_id'] = $master_instance_id;

        return $this;
    }

    /**
     * Gets master_instance_name
     *
     * @return string
     */
    public function getMasterInstanceName()
    {
        return $this->container['master_instance_name'];
    }

    /**
     * Sets master_instance_name
     *
     * @param string $master_instance_name master_instance_name
     *
     * @return $this
     */
    public function setMasterInstanceName($master_instance_name)
    {
        $this->container['master_instance_name'] = $master_instance_name;

        return $this;
    }

    /**
     * Gets master_region
     *
     * @return string
     */
    public function getMasterRegion()
    {
        return $this->container['master_region'];
    }

    /**
     * Sets master_region
     *
     * @param string $master_region master_region
     *
     * @return $this
     */
    public function setMasterRegion($master_region)
    {
        $this->container['master_region'] = $master_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

