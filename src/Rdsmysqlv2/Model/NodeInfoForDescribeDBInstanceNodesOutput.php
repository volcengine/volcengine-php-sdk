<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeInfoForDescribeDBInstanceNodesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeInfoForDescribeDBInstanceNodesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_used_percentage' => 'double',
        'last_io_error' => 'string',
        'last_sql_error' => 'string',
        'memory_used_percentage' => 'double',
        'node_id' => 'string',
        'node_status' => 'string',
        'node_type' => 'string',
        'slave_io_running' => 'bool',
        'slave_sql_running' => 'bool',
        'space_used_percentage' => 'double',
        'sync_delay' => 'int',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_used_percentage' => 'double',
        'last_io_error' => null,
        'last_sql_error' => null,
        'memory_used_percentage' => 'double',
        'node_id' => null,
        'node_status' => null,
        'node_type' => null,
        'slave_io_running' => null,
        'slave_sql_running' => null,
        'space_used_percentage' => 'double',
        'sync_delay' => 'int32',
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_used_percentage' => 'CPUUsedPercentage',
        'last_io_error' => 'LastIOError',
        'last_sql_error' => 'LastSQLError',
        'memory_used_percentage' => 'MemoryUsedPercentage',
        'node_id' => 'NodeId',
        'node_status' => 'NodeStatus',
        'node_type' => 'NodeType',
        'slave_io_running' => 'SlaveIORunning',
        'slave_sql_running' => 'SlaveSQLRunning',
        'space_used_percentage' => 'SpaceUsedPercentage',
        'sync_delay' => 'SyncDelay',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_used_percentage' => 'setCpuUsedPercentage',
        'last_io_error' => 'setLastIoError',
        'last_sql_error' => 'setLastSqlError',
        'memory_used_percentage' => 'setMemoryUsedPercentage',
        'node_id' => 'setNodeId',
        'node_status' => 'setNodeStatus',
        'node_type' => 'setNodeType',
        'slave_io_running' => 'setSlaveIoRunning',
        'slave_sql_running' => 'setSlaveSqlRunning',
        'space_used_percentage' => 'setSpaceUsedPercentage',
        'sync_delay' => 'setSyncDelay',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_used_percentage' => 'getCpuUsedPercentage',
        'last_io_error' => 'getLastIoError',
        'last_sql_error' => 'getLastSqlError',
        'memory_used_percentage' => 'getMemoryUsedPercentage',
        'node_id' => 'getNodeId',
        'node_status' => 'getNodeStatus',
        'node_type' => 'getNodeType',
        'slave_io_running' => 'getSlaveIoRunning',
        'slave_sql_running' => 'getSlaveSqlRunning',
        'space_used_percentage' => 'getSpaceUsedPercentage',
        'sync_delay' => 'getSyncDelay',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_used_percentage'] = isset($data['cpu_used_percentage']) ? $data['cpu_used_percentage'] : null;
        $this->container['last_io_error'] = isset($data['last_io_error']) ? $data['last_io_error'] : null;
        $this->container['last_sql_error'] = isset($data['last_sql_error']) ? $data['last_sql_error'] : null;
        $this->container['memory_used_percentage'] = isset($data['memory_used_percentage']) ? $data['memory_used_percentage'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['node_status'] = isset($data['node_status']) ? $data['node_status'] : null;
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['slave_io_running'] = isset($data['slave_io_running']) ? $data['slave_io_running'] : null;
        $this->container['slave_sql_running'] = isset($data['slave_sql_running']) ? $data['slave_sql_running'] : null;
        $this->container['space_used_percentage'] = isset($data['space_used_percentage']) ? $data['space_used_percentage'] : null;
        $this->container['sync_delay'] = isset($data['sync_delay']) ? $data['sync_delay'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_used_percentage
     *
     * @return double
     */
    public function getCpuUsedPercentage()
    {
        return $this->container['cpu_used_percentage'];
    }

    /**
     * Sets cpu_used_percentage
     *
     * @param double $cpu_used_percentage cpu_used_percentage
     *
     * @return $this
     */
    public function setCpuUsedPercentage($cpu_used_percentage)
    {
        $this->container['cpu_used_percentage'] = $cpu_used_percentage;

        return $this;
    }

    /**
     * Gets last_io_error
     *
     * @return string
     */
    public function getLastIoError()
    {
        return $this->container['last_io_error'];
    }

    /**
     * Sets last_io_error
     *
     * @param string $last_io_error last_io_error
     *
     * @return $this
     */
    public function setLastIoError($last_io_error)
    {
        $this->container['last_io_error'] = $last_io_error;

        return $this;
    }

    /**
     * Gets last_sql_error
     *
     * @return string
     */
    public function getLastSqlError()
    {
        return $this->container['last_sql_error'];
    }

    /**
     * Sets last_sql_error
     *
     * @param string $last_sql_error last_sql_error
     *
     * @return $this
     */
    public function setLastSqlError($last_sql_error)
    {
        $this->container['last_sql_error'] = $last_sql_error;

        return $this;
    }

    /**
     * Gets memory_used_percentage
     *
     * @return double
     */
    public function getMemoryUsedPercentage()
    {
        return $this->container['memory_used_percentage'];
    }

    /**
     * Sets memory_used_percentage
     *
     * @param double $memory_used_percentage memory_used_percentage
     *
     * @return $this
     */
    public function setMemoryUsedPercentage($memory_used_percentage)
    {
        $this->container['memory_used_percentage'] = $memory_used_percentage;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets node_status
     *
     * @return string
     */
    public function getNodeStatus()
    {
        return $this->container['node_status'];
    }

    /**
     * Sets node_status
     *
     * @param string $node_status node_status
     *
     * @return $this
     */
    public function setNodeStatus($node_status)
    {
        $this->container['node_status'] = $node_status;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets slave_io_running
     *
     * @return bool
     */
    public function getSlaveIoRunning()
    {
        return $this->container['slave_io_running'];
    }

    /**
     * Sets slave_io_running
     *
     * @param bool $slave_io_running slave_io_running
     *
     * @return $this
     */
    public function setSlaveIoRunning($slave_io_running)
    {
        $this->container['slave_io_running'] = $slave_io_running;

        return $this;
    }

    /**
     * Gets slave_sql_running
     *
     * @return bool
     */
    public function getSlaveSqlRunning()
    {
        return $this->container['slave_sql_running'];
    }

    /**
     * Sets slave_sql_running
     *
     * @param bool $slave_sql_running slave_sql_running
     *
     * @return $this
     */
    public function setSlaveSqlRunning($slave_sql_running)
    {
        $this->container['slave_sql_running'] = $slave_sql_running;

        return $this;
    }

    /**
     * Gets space_used_percentage
     *
     * @return double
     */
    public function getSpaceUsedPercentage()
    {
        return $this->container['space_used_percentage'];
    }

    /**
     * Sets space_used_percentage
     *
     * @param double $space_used_percentage space_used_percentage
     *
     * @return $this
     */
    public function setSpaceUsedPercentage($space_used_percentage)
    {
        $this->container['space_used_percentage'] = $space_used_percentage;

        return $this;
    }

    /**
     * Gets sync_delay
     *
     * @return int
     */
    public function getSyncDelay()
    {
        return $this->container['sync_delay'];
    }

    /**
     * Sets sync_delay
     *
     * @param int $sync_delay sync_delay
     *
     * @return $this
     */
    public function setSyncDelay($sync_delay)
    {
        $this->container['sync_delay'] = $sync_delay;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

