<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetBackupDownloadLinkResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetBackupDownloadLinkResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_download_link' => 'string',
        'backup_file_name' => 'string',
        'backup_file_size' => 'int',
        'backup_id' => 'string',
        'backup_type' => 'string',
        'download_progress' => 'int',
        'inner_backup_download_link' => 'string',
        'instance_id' => 'string',
        'link_expired_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_download_link' => null,
        'backup_file_name' => null,
        'backup_file_size' => 'int64',
        'backup_id' => null,
        'backup_type' => null,
        'download_progress' => 'int64',
        'inner_backup_download_link' => null,
        'instance_id' => null,
        'link_expired_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_download_link' => 'BackupDownloadLink',
        'backup_file_name' => 'BackupFileName',
        'backup_file_size' => 'BackupFileSize',
        'backup_id' => 'BackupId',
        'backup_type' => 'BackupType',
        'download_progress' => 'DownloadProgress',
        'inner_backup_download_link' => 'InnerBackupDownloadLink',
        'instance_id' => 'InstanceId',
        'link_expired_time' => 'LinkExpiredTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_download_link' => 'setBackupDownloadLink',
        'backup_file_name' => 'setBackupFileName',
        'backup_file_size' => 'setBackupFileSize',
        'backup_id' => 'setBackupId',
        'backup_type' => 'setBackupType',
        'download_progress' => 'setDownloadProgress',
        'inner_backup_download_link' => 'setInnerBackupDownloadLink',
        'instance_id' => 'setInstanceId',
        'link_expired_time' => 'setLinkExpiredTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_download_link' => 'getBackupDownloadLink',
        'backup_file_name' => 'getBackupFileName',
        'backup_file_size' => 'getBackupFileSize',
        'backup_id' => 'getBackupId',
        'backup_type' => 'getBackupType',
        'download_progress' => 'getDownloadProgress',
        'inner_backup_download_link' => 'getInnerBackupDownloadLink',
        'instance_id' => 'getInstanceId',
        'link_expired_time' => 'getLinkExpiredTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_download_link'] = isset($data['backup_download_link']) ? $data['backup_download_link'] : null;
        $this->container['backup_file_name'] = isset($data['backup_file_name']) ? $data['backup_file_name'] : null;
        $this->container['backup_file_size'] = isset($data['backup_file_size']) ? $data['backup_file_size'] : null;
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['backup_type'] = isset($data['backup_type']) ? $data['backup_type'] : null;
        $this->container['download_progress'] = isset($data['download_progress']) ? $data['download_progress'] : null;
        $this->container['inner_backup_download_link'] = isset($data['inner_backup_download_link']) ? $data['inner_backup_download_link'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['link_expired_time'] = isset($data['link_expired_time']) ? $data['link_expired_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_download_link
     *
     * @return string
     */
    public function getBackupDownloadLink()
    {
        return $this->container['backup_download_link'];
    }

    /**
     * Sets backup_download_link
     *
     * @param string $backup_download_link backup_download_link
     *
     * @return $this
     */
    public function setBackupDownloadLink($backup_download_link)
    {
        $this->container['backup_download_link'] = $backup_download_link;

        return $this;
    }

    /**
     * Gets backup_file_name
     *
     * @return string
     */
    public function getBackupFileName()
    {
        return $this->container['backup_file_name'];
    }

    /**
     * Sets backup_file_name
     *
     * @param string $backup_file_name backup_file_name
     *
     * @return $this
     */
    public function setBackupFileName($backup_file_name)
    {
        $this->container['backup_file_name'] = $backup_file_name;

        return $this;
    }

    /**
     * Gets backup_file_size
     *
     * @return int
     */
    public function getBackupFileSize()
    {
        return $this->container['backup_file_size'];
    }

    /**
     * Sets backup_file_size
     *
     * @param int $backup_file_size backup_file_size
     *
     * @return $this
     */
    public function setBackupFileSize($backup_file_size)
    {
        $this->container['backup_file_size'] = $backup_file_size;

        return $this;
    }

    /**
     * Gets backup_id
     *
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     *
     * @param string $backup_id backup_id
     *
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets backup_type
     *
     * @return string
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param string $backup_type backup_type
     *
     * @return $this
     */
    public function setBackupType($backup_type)
    {
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets download_progress
     *
     * @return int
     */
    public function getDownloadProgress()
    {
        return $this->container['download_progress'];
    }

    /**
     * Sets download_progress
     *
     * @param int $download_progress download_progress
     *
     * @return $this
     */
    public function setDownloadProgress($download_progress)
    {
        $this->container['download_progress'] = $download_progress;

        return $this;
    }

    /**
     * Gets inner_backup_download_link
     *
     * @return string
     */
    public function getInnerBackupDownloadLink()
    {
        return $this->container['inner_backup_download_link'];
    }

    /**
     * Sets inner_backup_download_link
     *
     * @param string $inner_backup_download_link inner_backup_download_link
     *
     * @return $this
     */
    public function setInnerBackupDownloadLink($inner_backup_download_link)
    {
        $this->container['inner_backup_download_link'] = $inner_backup_download_link;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets link_expired_time
     *
     * @return string
     */
    public function getLinkExpiredTime()
    {
        return $this->container['link_expired_time'];
    }

    /**
     * Sets link_expired_time
     *
     * @param string $link_expired_time link_expired_time
     *
     * @return $this
     */
    public function setLinkExpiredTime($link_expired_time)
    {
        $this->container['link_expired_time'] = $link_expired_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

