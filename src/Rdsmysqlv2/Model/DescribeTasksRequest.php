<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeTasksRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeTasksRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_end_time' => 'string',
        'creation_start_time' => 'string',
        'instance_id' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'task_action' => 'string',
        'task_category' => 'string[]',
        'task_id' => 'string',
        'task_source' => 'string',
        'task_status' => 'string[]',
        'task_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_end_time' => null,
        'creation_start_time' => null,
        'instance_id' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'task_action' => null,
        'task_category' => null,
        'task_id' => null,
        'task_source' => null,
        'task_status' => null,
        'task_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_end_time' => 'CreationEndTime',
        'creation_start_time' => 'CreationStartTime',
        'instance_id' => 'InstanceId',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'task_action' => 'TaskAction',
        'task_category' => 'TaskCategory',
        'task_id' => 'TaskId',
        'task_source' => 'TaskSource',
        'task_status' => 'TaskStatus',
        'task_type' => 'TaskType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_end_time' => 'setCreationEndTime',
        'creation_start_time' => 'setCreationStartTime',
        'instance_id' => 'setInstanceId',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'task_action' => 'setTaskAction',
        'task_category' => 'setTaskCategory',
        'task_id' => 'setTaskId',
        'task_source' => 'setTaskSource',
        'task_status' => 'setTaskStatus',
        'task_type' => 'setTaskType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_end_time' => 'getCreationEndTime',
        'creation_start_time' => 'getCreationStartTime',
        'instance_id' => 'getInstanceId',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'task_action' => 'getTaskAction',
        'task_category' => 'getTaskCategory',
        'task_id' => 'getTaskId',
        'task_source' => 'getTaskSource',
        'task_status' => 'getTaskStatus',
        'task_type' => 'getTaskType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_end_time'] = isset($data['creation_end_time']) ? $data['creation_end_time'] : null;
        $this->container['creation_start_time'] = isset($data['creation_start_time']) ? $data['creation_start_time'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['task_action'] = isset($data['task_action']) ? $data['task_action'] : null;
        $this->container['task_category'] = isset($data['task_category']) ? $data['task_category'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_source'] = isset($data['task_source']) ? $data['task_source'] : null;
        $this->container['task_status'] = isset($data['task_status']) ? $data['task_status'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['page_number'] === null) {
            $invalidProperties[] = "'page_number' can't be null";
        }
        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_end_time
     *
     * @return string
     */
    public function getCreationEndTime()
    {
        return $this->container['creation_end_time'];
    }

    /**
     * Sets creation_end_time
     *
     * @param string $creation_end_time creation_end_time
     *
     * @return $this
     */
    public function setCreationEndTime($creation_end_time)
    {
        $this->container['creation_end_time'] = $creation_end_time;

        return $this;
    }

    /**
     * Gets creation_start_time
     *
     * @return string
     */
    public function getCreationStartTime()
    {
        return $this->container['creation_start_time'];
    }

    /**
     * Sets creation_start_time
     *
     * @param string $creation_start_time creation_start_time
     *
     * @return $this
     */
    public function setCreationStartTime($creation_start_time)
    {
        $this->container['creation_start_time'] = $creation_start_time;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets task_action
     *
     * @return string
     */
    public function getTaskAction()
    {
        return $this->container['task_action'];
    }

    /**
     * Sets task_action
     *
     * @param string $task_action task_action
     *
     * @return $this
     */
    public function setTaskAction($task_action)
    {
        $this->container['task_action'] = $task_action;

        return $this;
    }

    /**
     * Gets task_category
     *
     * @return string[]
     */
    public function getTaskCategory()
    {
        return $this->container['task_category'];
    }

    /**
     * Sets task_category
     *
     * @param string[] $task_category task_category
     *
     * @return $this
     */
    public function setTaskCategory($task_category)
    {
        $this->container['task_category'] = $task_category;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_source
     *
     * @return string
     */
    public function getTaskSource()
    {
        return $this->container['task_source'];
    }

    /**
     * Sets task_source
     *
     * @param string $task_source task_source
     *
     * @return $this
     */
    public function setTaskSource($task_source)
    {
        $this->container['task_source'] = $task_source;

        return $this;
    }

    /**
     * Gets task_status
     *
     * @return string[]
     */
    public function getTaskStatus()
    {
        return $this->container['task_status'];
    }

    /**
     * Sets task_status
     *
     * @param string[] $task_status task_status
     *
     * @return $this
     */
    public function setTaskStatus($task_status)
    {
        $this->container['task_status'] = $task_status;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param string $task_type task_type
     *
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

