<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeBackupPolicyResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeBackupPolicyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'binlog_backup_all_retention' => 'bool',
        'binlog_backup_enabled' => 'bool',
        'binlog_backup_encryption_enabled' => 'bool',
        'binlog_file_counts_enable' => 'bool',
        'binlog_limit_count' => 'int',
        'binlog_local_retention_hour' => 'int',
        'binlog_space_limit_enable' => 'bool',
        'binlog_storage_percentage' => 'int',
        'data_backup_all_retention' => 'bool',
        'data_backup_encryption_enabled' => 'bool',
        'data_backup_retention_day' => 'int',
        'data_full_backup_periods' => 'string[]',
        'data_full_backup_start_utc_hour' => 'int',
        'data_full_backup_time' => 'string',
        'data_incr_backup_periods' => 'string[]',
        'data_keep_days_after_released' => 'int',
        'data_keep_policy_after_released' => 'string',
        'high_frequency_snapshot_backup_enable' => 'bool',
        'high_frequency_snapshot_backup_second_period' => 'int',
        'hourly_incr_backup_enable' => 'bool',
        'incr_backup_hour_period' => 'int',
        'instance_id' => 'string',
        'lock_ddl_time' => 'int',
        'log_backup_retention_day' => 'int',
        'public_download_enable' => 'bool',
        'retention_policy_synced' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'binlog_backup_all_retention' => null,
        'binlog_backup_enabled' => null,
        'binlog_backup_encryption_enabled' => null,
        'binlog_file_counts_enable' => null,
        'binlog_limit_count' => 'int32',
        'binlog_local_retention_hour' => 'int32',
        'binlog_space_limit_enable' => null,
        'binlog_storage_percentage' => 'int32',
        'data_backup_all_retention' => null,
        'data_backup_encryption_enabled' => null,
        'data_backup_retention_day' => 'int32',
        'data_full_backup_periods' => null,
        'data_full_backup_start_utc_hour' => 'int32',
        'data_full_backup_time' => null,
        'data_incr_backup_periods' => null,
        'data_keep_days_after_released' => 'int32',
        'data_keep_policy_after_released' => null,
        'high_frequency_snapshot_backup_enable' => null,
        'high_frequency_snapshot_backup_second_period' => 'int32',
        'hourly_incr_backup_enable' => null,
        'incr_backup_hour_period' => 'int32',
        'instance_id' => null,
        'lock_ddl_time' => 'int32',
        'log_backup_retention_day' => 'int32',
        'public_download_enable' => null,
        'retention_policy_synced' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'binlog_backup_all_retention' => 'BinlogBackupAllRetention',
        'binlog_backup_enabled' => 'BinlogBackupEnabled',
        'binlog_backup_encryption_enabled' => 'BinlogBackupEncryptionEnabled',
        'binlog_file_counts_enable' => 'BinlogFileCountsEnable',
        'binlog_limit_count' => 'BinlogLimitCount',
        'binlog_local_retention_hour' => 'BinlogLocalRetentionHour',
        'binlog_space_limit_enable' => 'BinlogSpaceLimitEnable',
        'binlog_storage_percentage' => 'BinlogStoragePercentage',
        'data_backup_all_retention' => 'DataBackupAllRetention',
        'data_backup_encryption_enabled' => 'DataBackupEncryptionEnabled',
        'data_backup_retention_day' => 'DataBackupRetentionDay',
        'data_full_backup_periods' => 'DataFullBackupPeriods',
        'data_full_backup_start_utc_hour' => 'DataFullBackupStartUTCHour',
        'data_full_backup_time' => 'DataFullBackupTime',
        'data_incr_backup_periods' => 'DataIncrBackupPeriods',
        'data_keep_days_after_released' => 'DataKeepDaysAfterReleased',
        'data_keep_policy_after_released' => 'DataKeepPolicyAfterReleased',
        'high_frequency_snapshot_backup_enable' => 'HighFrequencySnapshotBackupEnable',
        'high_frequency_snapshot_backup_second_period' => 'HighFrequencySnapshotBackupSecondPeriod',
        'hourly_incr_backup_enable' => 'HourlyIncrBackupEnable',
        'incr_backup_hour_period' => 'IncrBackupHourPeriod',
        'instance_id' => 'InstanceId',
        'lock_ddl_time' => 'LockDDLTime',
        'log_backup_retention_day' => 'LogBackupRetentionDay',
        'public_download_enable' => 'PublicDownloadEnable',
        'retention_policy_synced' => 'RetentionPolicySynced'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'binlog_backup_all_retention' => 'setBinlogBackupAllRetention',
        'binlog_backup_enabled' => 'setBinlogBackupEnabled',
        'binlog_backup_encryption_enabled' => 'setBinlogBackupEncryptionEnabled',
        'binlog_file_counts_enable' => 'setBinlogFileCountsEnable',
        'binlog_limit_count' => 'setBinlogLimitCount',
        'binlog_local_retention_hour' => 'setBinlogLocalRetentionHour',
        'binlog_space_limit_enable' => 'setBinlogSpaceLimitEnable',
        'binlog_storage_percentage' => 'setBinlogStoragePercentage',
        'data_backup_all_retention' => 'setDataBackupAllRetention',
        'data_backup_encryption_enabled' => 'setDataBackupEncryptionEnabled',
        'data_backup_retention_day' => 'setDataBackupRetentionDay',
        'data_full_backup_periods' => 'setDataFullBackupPeriods',
        'data_full_backup_start_utc_hour' => 'setDataFullBackupStartUtcHour',
        'data_full_backup_time' => 'setDataFullBackupTime',
        'data_incr_backup_periods' => 'setDataIncrBackupPeriods',
        'data_keep_days_after_released' => 'setDataKeepDaysAfterReleased',
        'data_keep_policy_after_released' => 'setDataKeepPolicyAfterReleased',
        'high_frequency_snapshot_backup_enable' => 'setHighFrequencySnapshotBackupEnable',
        'high_frequency_snapshot_backup_second_period' => 'setHighFrequencySnapshotBackupSecondPeriod',
        'hourly_incr_backup_enable' => 'setHourlyIncrBackupEnable',
        'incr_backup_hour_period' => 'setIncrBackupHourPeriod',
        'instance_id' => 'setInstanceId',
        'lock_ddl_time' => 'setLockDdlTime',
        'log_backup_retention_day' => 'setLogBackupRetentionDay',
        'public_download_enable' => 'setPublicDownloadEnable',
        'retention_policy_synced' => 'setRetentionPolicySynced'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'binlog_backup_all_retention' => 'getBinlogBackupAllRetention',
        'binlog_backup_enabled' => 'getBinlogBackupEnabled',
        'binlog_backup_encryption_enabled' => 'getBinlogBackupEncryptionEnabled',
        'binlog_file_counts_enable' => 'getBinlogFileCountsEnable',
        'binlog_limit_count' => 'getBinlogLimitCount',
        'binlog_local_retention_hour' => 'getBinlogLocalRetentionHour',
        'binlog_space_limit_enable' => 'getBinlogSpaceLimitEnable',
        'binlog_storage_percentage' => 'getBinlogStoragePercentage',
        'data_backup_all_retention' => 'getDataBackupAllRetention',
        'data_backup_encryption_enabled' => 'getDataBackupEncryptionEnabled',
        'data_backup_retention_day' => 'getDataBackupRetentionDay',
        'data_full_backup_periods' => 'getDataFullBackupPeriods',
        'data_full_backup_start_utc_hour' => 'getDataFullBackupStartUtcHour',
        'data_full_backup_time' => 'getDataFullBackupTime',
        'data_incr_backup_periods' => 'getDataIncrBackupPeriods',
        'data_keep_days_after_released' => 'getDataKeepDaysAfterReleased',
        'data_keep_policy_after_released' => 'getDataKeepPolicyAfterReleased',
        'high_frequency_snapshot_backup_enable' => 'getHighFrequencySnapshotBackupEnable',
        'high_frequency_snapshot_backup_second_period' => 'getHighFrequencySnapshotBackupSecondPeriod',
        'hourly_incr_backup_enable' => 'getHourlyIncrBackupEnable',
        'incr_backup_hour_period' => 'getIncrBackupHourPeriod',
        'instance_id' => 'getInstanceId',
        'lock_ddl_time' => 'getLockDdlTime',
        'log_backup_retention_day' => 'getLogBackupRetentionDay',
        'public_download_enable' => 'getPublicDownloadEnable',
        'retention_policy_synced' => 'getRetentionPolicySynced'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['binlog_backup_all_retention'] = isset($data['binlog_backup_all_retention']) ? $data['binlog_backup_all_retention'] : null;
        $this->container['binlog_backup_enabled'] = isset($data['binlog_backup_enabled']) ? $data['binlog_backup_enabled'] : null;
        $this->container['binlog_backup_encryption_enabled'] = isset($data['binlog_backup_encryption_enabled']) ? $data['binlog_backup_encryption_enabled'] : null;
        $this->container['binlog_file_counts_enable'] = isset($data['binlog_file_counts_enable']) ? $data['binlog_file_counts_enable'] : null;
        $this->container['binlog_limit_count'] = isset($data['binlog_limit_count']) ? $data['binlog_limit_count'] : null;
        $this->container['binlog_local_retention_hour'] = isset($data['binlog_local_retention_hour']) ? $data['binlog_local_retention_hour'] : null;
        $this->container['binlog_space_limit_enable'] = isset($data['binlog_space_limit_enable']) ? $data['binlog_space_limit_enable'] : null;
        $this->container['binlog_storage_percentage'] = isset($data['binlog_storage_percentage']) ? $data['binlog_storage_percentage'] : null;
        $this->container['data_backup_all_retention'] = isset($data['data_backup_all_retention']) ? $data['data_backup_all_retention'] : null;
        $this->container['data_backup_encryption_enabled'] = isset($data['data_backup_encryption_enabled']) ? $data['data_backup_encryption_enabled'] : null;
        $this->container['data_backup_retention_day'] = isset($data['data_backup_retention_day']) ? $data['data_backup_retention_day'] : null;
        $this->container['data_full_backup_periods'] = isset($data['data_full_backup_periods']) ? $data['data_full_backup_periods'] : null;
        $this->container['data_full_backup_start_utc_hour'] = isset($data['data_full_backup_start_utc_hour']) ? $data['data_full_backup_start_utc_hour'] : null;
        $this->container['data_full_backup_time'] = isset($data['data_full_backup_time']) ? $data['data_full_backup_time'] : null;
        $this->container['data_incr_backup_periods'] = isset($data['data_incr_backup_periods']) ? $data['data_incr_backup_periods'] : null;
        $this->container['data_keep_days_after_released'] = isset($data['data_keep_days_after_released']) ? $data['data_keep_days_after_released'] : null;
        $this->container['data_keep_policy_after_released'] = isset($data['data_keep_policy_after_released']) ? $data['data_keep_policy_after_released'] : null;
        $this->container['high_frequency_snapshot_backup_enable'] = isset($data['high_frequency_snapshot_backup_enable']) ? $data['high_frequency_snapshot_backup_enable'] : null;
        $this->container['high_frequency_snapshot_backup_second_period'] = isset($data['high_frequency_snapshot_backup_second_period']) ? $data['high_frequency_snapshot_backup_second_period'] : null;
        $this->container['hourly_incr_backup_enable'] = isset($data['hourly_incr_backup_enable']) ? $data['hourly_incr_backup_enable'] : null;
        $this->container['incr_backup_hour_period'] = isset($data['incr_backup_hour_period']) ? $data['incr_backup_hour_period'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['lock_ddl_time'] = isset($data['lock_ddl_time']) ? $data['lock_ddl_time'] : null;
        $this->container['log_backup_retention_day'] = isset($data['log_backup_retention_day']) ? $data['log_backup_retention_day'] : null;
        $this->container['public_download_enable'] = isset($data['public_download_enable']) ? $data['public_download_enable'] : null;
        $this->container['retention_policy_synced'] = isset($data['retention_policy_synced']) ? $data['retention_policy_synced'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets binlog_backup_all_retention
     *
     * @return bool
     */
    public function getBinlogBackupAllRetention()
    {
        return $this->container['binlog_backup_all_retention'];
    }

    /**
     * Sets binlog_backup_all_retention
     *
     * @param bool $binlog_backup_all_retention binlog_backup_all_retention
     *
     * @return $this
     */
    public function setBinlogBackupAllRetention($binlog_backup_all_retention)
    {
        $this->container['binlog_backup_all_retention'] = $binlog_backup_all_retention;

        return $this;
    }

    /**
     * Gets binlog_backup_enabled
     *
     * @return bool
     */
    public function getBinlogBackupEnabled()
    {
        return $this->container['binlog_backup_enabled'];
    }

    /**
     * Sets binlog_backup_enabled
     *
     * @param bool $binlog_backup_enabled binlog_backup_enabled
     *
     * @return $this
     */
    public function setBinlogBackupEnabled($binlog_backup_enabled)
    {
        $this->container['binlog_backup_enabled'] = $binlog_backup_enabled;

        return $this;
    }

    /**
     * Gets binlog_backup_encryption_enabled
     *
     * @return bool
     */
    public function getBinlogBackupEncryptionEnabled()
    {
        return $this->container['binlog_backup_encryption_enabled'];
    }

    /**
     * Sets binlog_backup_encryption_enabled
     *
     * @param bool $binlog_backup_encryption_enabled binlog_backup_encryption_enabled
     *
     * @return $this
     */
    public function setBinlogBackupEncryptionEnabled($binlog_backup_encryption_enabled)
    {
        $this->container['binlog_backup_encryption_enabled'] = $binlog_backup_encryption_enabled;

        return $this;
    }

    /**
     * Gets binlog_file_counts_enable
     *
     * @return bool
     */
    public function getBinlogFileCountsEnable()
    {
        return $this->container['binlog_file_counts_enable'];
    }

    /**
     * Sets binlog_file_counts_enable
     *
     * @param bool $binlog_file_counts_enable binlog_file_counts_enable
     *
     * @return $this
     */
    public function setBinlogFileCountsEnable($binlog_file_counts_enable)
    {
        $this->container['binlog_file_counts_enable'] = $binlog_file_counts_enable;

        return $this;
    }

    /**
     * Gets binlog_limit_count
     *
     * @return int
     */
    public function getBinlogLimitCount()
    {
        return $this->container['binlog_limit_count'];
    }

    /**
     * Sets binlog_limit_count
     *
     * @param int $binlog_limit_count binlog_limit_count
     *
     * @return $this
     */
    public function setBinlogLimitCount($binlog_limit_count)
    {
        $this->container['binlog_limit_count'] = $binlog_limit_count;

        return $this;
    }

    /**
     * Gets binlog_local_retention_hour
     *
     * @return int
     */
    public function getBinlogLocalRetentionHour()
    {
        return $this->container['binlog_local_retention_hour'];
    }

    /**
     * Sets binlog_local_retention_hour
     *
     * @param int $binlog_local_retention_hour binlog_local_retention_hour
     *
     * @return $this
     */
    public function setBinlogLocalRetentionHour($binlog_local_retention_hour)
    {
        $this->container['binlog_local_retention_hour'] = $binlog_local_retention_hour;

        return $this;
    }

    /**
     * Gets binlog_space_limit_enable
     *
     * @return bool
     */
    public function getBinlogSpaceLimitEnable()
    {
        return $this->container['binlog_space_limit_enable'];
    }

    /**
     * Sets binlog_space_limit_enable
     *
     * @param bool $binlog_space_limit_enable binlog_space_limit_enable
     *
     * @return $this
     */
    public function setBinlogSpaceLimitEnable($binlog_space_limit_enable)
    {
        $this->container['binlog_space_limit_enable'] = $binlog_space_limit_enable;

        return $this;
    }

    /**
     * Gets binlog_storage_percentage
     *
     * @return int
     */
    public function getBinlogStoragePercentage()
    {
        return $this->container['binlog_storage_percentage'];
    }

    /**
     * Sets binlog_storage_percentage
     *
     * @param int $binlog_storage_percentage binlog_storage_percentage
     *
     * @return $this
     */
    public function setBinlogStoragePercentage($binlog_storage_percentage)
    {
        $this->container['binlog_storage_percentage'] = $binlog_storage_percentage;

        return $this;
    }

    /**
     * Gets data_backup_all_retention
     *
     * @return bool
     */
    public function getDataBackupAllRetention()
    {
        return $this->container['data_backup_all_retention'];
    }

    /**
     * Sets data_backup_all_retention
     *
     * @param bool $data_backup_all_retention data_backup_all_retention
     *
     * @return $this
     */
    public function setDataBackupAllRetention($data_backup_all_retention)
    {
        $this->container['data_backup_all_retention'] = $data_backup_all_retention;

        return $this;
    }

    /**
     * Gets data_backup_encryption_enabled
     *
     * @return bool
     */
    public function getDataBackupEncryptionEnabled()
    {
        return $this->container['data_backup_encryption_enabled'];
    }

    /**
     * Sets data_backup_encryption_enabled
     *
     * @param bool $data_backup_encryption_enabled data_backup_encryption_enabled
     *
     * @return $this
     */
    public function setDataBackupEncryptionEnabled($data_backup_encryption_enabled)
    {
        $this->container['data_backup_encryption_enabled'] = $data_backup_encryption_enabled;

        return $this;
    }

    /**
     * Gets data_backup_retention_day
     *
     * @return int
     */
    public function getDataBackupRetentionDay()
    {
        return $this->container['data_backup_retention_day'];
    }

    /**
     * Sets data_backup_retention_day
     *
     * @param int $data_backup_retention_day data_backup_retention_day
     *
     * @return $this
     */
    public function setDataBackupRetentionDay($data_backup_retention_day)
    {
        $this->container['data_backup_retention_day'] = $data_backup_retention_day;

        return $this;
    }

    /**
     * Gets data_full_backup_periods
     *
     * @return string[]
     */
    public function getDataFullBackupPeriods()
    {
        return $this->container['data_full_backup_periods'];
    }

    /**
     * Sets data_full_backup_periods
     *
     * @param string[] $data_full_backup_periods data_full_backup_periods
     *
     * @return $this
     */
    public function setDataFullBackupPeriods($data_full_backup_periods)
    {
        $this->container['data_full_backup_periods'] = $data_full_backup_periods;

        return $this;
    }

    /**
     * Gets data_full_backup_start_utc_hour
     *
     * @return int
     */
    public function getDataFullBackupStartUtcHour()
    {
        return $this->container['data_full_backup_start_utc_hour'];
    }

    /**
     * Sets data_full_backup_start_utc_hour
     *
     * @param int $data_full_backup_start_utc_hour data_full_backup_start_utc_hour
     *
     * @return $this
     */
    public function setDataFullBackupStartUtcHour($data_full_backup_start_utc_hour)
    {
        $this->container['data_full_backup_start_utc_hour'] = $data_full_backup_start_utc_hour;

        return $this;
    }

    /**
     * Gets data_full_backup_time
     *
     * @return string
     */
    public function getDataFullBackupTime()
    {
        return $this->container['data_full_backup_time'];
    }

    /**
     * Sets data_full_backup_time
     *
     * @param string $data_full_backup_time data_full_backup_time
     *
     * @return $this
     */
    public function setDataFullBackupTime($data_full_backup_time)
    {
        $this->container['data_full_backup_time'] = $data_full_backup_time;

        return $this;
    }

    /**
     * Gets data_incr_backup_periods
     *
     * @return string[]
     */
    public function getDataIncrBackupPeriods()
    {
        return $this->container['data_incr_backup_periods'];
    }

    /**
     * Sets data_incr_backup_periods
     *
     * @param string[] $data_incr_backup_periods data_incr_backup_periods
     *
     * @return $this
     */
    public function setDataIncrBackupPeriods($data_incr_backup_periods)
    {
        $this->container['data_incr_backup_periods'] = $data_incr_backup_periods;

        return $this;
    }

    /**
     * Gets data_keep_days_after_released
     *
     * @return int
     */
    public function getDataKeepDaysAfterReleased()
    {
        return $this->container['data_keep_days_after_released'];
    }

    /**
     * Sets data_keep_days_after_released
     *
     * @param int $data_keep_days_after_released data_keep_days_after_released
     *
     * @return $this
     */
    public function setDataKeepDaysAfterReleased($data_keep_days_after_released)
    {
        $this->container['data_keep_days_after_released'] = $data_keep_days_after_released;

        return $this;
    }

    /**
     * Gets data_keep_policy_after_released
     *
     * @return string
     */
    public function getDataKeepPolicyAfterReleased()
    {
        return $this->container['data_keep_policy_after_released'];
    }

    /**
     * Sets data_keep_policy_after_released
     *
     * @param string $data_keep_policy_after_released data_keep_policy_after_released
     *
     * @return $this
     */
    public function setDataKeepPolicyAfterReleased($data_keep_policy_after_released)
    {
        $this->container['data_keep_policy_after_released'] = $data_keep_policy_after_released;

        return $this;
    }

    /**
     * Gets high_frequency_snapshot_backup_enable
     *
     * @return bool
     */
    public function getHighFrequencySnapshotBackupEnable()
    {
        return $this->container['high_frequency_snapshot_backup_enable'];
    }

    /**
     * Sets high_frequency_snapshot_backup_enable
     *
     * @param bool $high_frequency_snapshot_backup_enable high_frequency_snapshot_backup_enable
     *
     * @return $this
     */
    public function setHighFrequencySnapshotBackupEnable($high_frequency_snapshot_backup_enable)
    {
        $this->container['high_frequency_snapshot_backup_enable'] = $high_frequency_snapshot_backup_enable;

        return $this;
    }

    /**
     * Gets high_frequency_snapshot_backup_second_period
     *
     * @return int
     */
    public function getHighFrequencySnapshotBackupSecondPeriod()
    {
        return $this->container['high_frequency_snapshot_backup_second_period'];
    }

    /**
     * Sets high_frequency_snapshot_backup_second_period
     *
     * @param int $high_frequency_snapshot_backup_second_period high_frequency_snapshot_backup_second_period
     *
     * @return $this
     */
    public function setHighFrequencySnapshotBackupSecondPeriod($high_frequency_snapshot_backup_second_period)
    {
        $this->container['high_frequency_snapshot_backup_second_period'] = $high_frequency_snapshot_backup_second_period;

        return $this;
    }

    /**
     * Gets hourly_incr_backup_enable
     *
     * @return bool
     */
    public function getHourlyIncrBackupEnable()
    {
        return $this->container['hourly_incr_backup_enable'];
    }

    /**
     * Sets hourly_incr_backup_enable
     *
     * @param bool $hourly_incr_backup_enable hourly_incr_backup_enable
     *
     * @return $this
     */
    public function setHourlyIncrBackupEnable($hourly_incr_backup_enable)
    {
        $this->container['hourly_incr_backup_enable'] = $hourly_incr_backup_enable;

        return $this;
    }

    /**
     * Gets incr_backup_hour_period
     *
     * @return int
     */
    public function getIncrBackupHourPeriod()
    {
        return $this->container['incr_backup_hour_period'];
    }

    /**
     * Sets incr_backup_hour_period
     *
     * @param int $incr_backup_hour_period incr_backup_hour_period
     *
     * @return $this
     */
    public function setIncrBackupHourPeriod($incr_backup_hour_period)
    {
        $this->container['incr_backup_hour_period'] = $incr_backup_hour_period;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets lock_ddl_time
     *
     * @return int
     */
    public function getLockDdlTime()
    {
        return $this->container['lock_ddl_time'];
    }

    /**
     * Sets lock_ddl_time
     *
     * @param int $lock_ddl_time lock_ddl_time
     *
     * @return $this
     */
    public function setLockDdlTime($lock_ddl_time)
    {
        $this->container['lock_ddl_time'] = $lock_ddl_time;

        return $this;
    }

    /**
     * Gets log_backup_retention_day
     *
     * @return int
     */
    public function getLogBackupRetentionDay()
    {
        return $this->container['log_backup_retention_day'];
    }

    /**
     * Sets log_backup_retention_day
     *
     * @param int $log_backup_retention_day log_backup_retention_day
     *
     * @return $this
     */
    public function setLogBackupRetentionDay($log_backup_retention_day)
    {
        $this->container['log_backup_retention_day'] = $log_backup_retention_day;

        return $this;
    }

    /**
     * Gets public_download_enable
     *
     * @return bool
     */
    public function getPublicDownloadEnable()
    {
        return $this->container['public_download_enable'];
    }

    /**
     * Sets public_download_enable
     *
     * @param bool $public_download_enable public_download_enable
     *
     * @return $this
     */
    public function setPublicDownloadEnable($public_download_enable)
    {
        $this->container['public_download_enable'] = $public_download_enable;

        return $this;
    }

    /**
     * Gets retention_policy_synced
     *
     * @return bool
     */
    public function getRetentionPolicySynced()
    {
        return $this->container['retention_policy_synced'];
    }

    /**
     * Sets retention_policy_synced
     *
     * @param bool $retention_policy_synced retention_policy_synced
     *
     * @return $this
     */
    public function setRetentionPolicySynced($retention_policy_synced)
    {
        $this->container['retention_policy_synced'] = $retention_policy_synced;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

