<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RebuildDBInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RebuildDBInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_list_ids' => 'string[]',
        'auto_storage_scaling_config' => '\Volcengine\Rdsmysqlv2\Model\AutoStorageScalingConfigForRebuildDBInstanceInput',
        'backup_id' => 'string',
        'charge_info' => '\Volcengine\Rdsmysqlv2\Model\ChargeInfoForRebuildDBInstanceInput',
        'db_param_group_id' => 'string',
        'deletion_protection' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'instance_tags' => '\Volcengine\Rdsmysqlv2\Model\InstanceTagForRebuildDBInstanceInput[]',
        'node_info' => '\Volcengine\Rdsmysqlv2\Model\NodeInfoForRebuildDBInstanceInput[]',
        'port' => 'int',
        'project_name' => 'string',
        'proxy_node_custom' => '\Volcengine\Rdsmysqlv2\Model\ProxyNodeCustomForRebuildDBInstanceInput',
        'request_source' => 'string',
        'storage_space' => 'int',
        'storage_type' => 'string',
        'subnet_id' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_list_ids' => null,
        'auto_storage_scaling_config' => null,
        'backup_id' => null,
        'charge_info' => null,
        'db_param_group_id' => null,
        'deletion_protection' => null,
        'instance_id' => null,
        'instance_name' => null,
        'instance_tags' => null,
        'node_info' => null,
        'port' => 'int32',
        'project_name' => null,
        'proxy_node_custom' => null,
        'request_source' => null,
        'storage_space' => 'int32',
        'storage_type' => null,
        'subnet_id' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_list_ids' => 'AllowListIds',
        'auto_storage_scaling_config' => 'AutoStorageScalingConfig',
        'backup_id' => 'BackupId',
        'charge_info' => 'ChargeInfo',
        'db_param_group_id' => 'DBParamGroupId',
        'deletion_protection' => 'DeletionProtection',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'instance_tags' => 'InstanceTags',
        'node_info' => 'NodeInfo',
        'port' => 'Port',
        'project_name' => 'ProjectName',
        'proxy_node_custom' => 'ProxyNodeCustom',
        'request_source' => 'RequestSource',
        'storage_space' => 'StorageSpace',
        'storage_type' => 'StorageType',
        'subnet_id' => 'SubnetId',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_list_ids' => 'setAllowListIds',
        'auto_storage_scaling_config' => 'setAutoStorageScalingConfig',
        'backup_id' => 'setBackupId',
        'charge_info' => 'setChargeInfo',
        'db_param_group_id' => 'setDbParamGroupId',
        'deletion_protection' => 'setDeletionProtection',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'instance_tags' => 'setInstanceTags',
        'node_info' => 'setNodeInfo',
        'port' => 'setPort',
        'project_name' => 'setProjectName',
        'proxy_node_custom' => 'setProxyNodeCustom',
        'request_source' => 'setRequestSource',
        'storage_space' => 'setStorageSpace',
        'storage_type' => 'setStorageType',
        'subnet_id' => 'setSubnetId',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_list_ids' => 'getAllowListIds',
        'auto_storage_scaling_config' => 'getAutoStorageScalingConfig',
        'backup_id' => 'getBackupId',
        'charge_info' => 'getChargeInfo',
        'db_param_group_id' => 'getDbParamGroupId',
        'deletion_protection' => 'getDeletionProtection',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'instance_tags' => 'getInstanceTags',
        'node_info' => 'getNodeInfo',
        'port' => 'getPort',
        'project_name' => 'getProjectName',
        'proxy_node_custom' => 'getProxyNodeCustom',
        'request_source' => 'getRequestSource',
        'storage_space' => 'getStorageSpace',
        'storage_type' => 'getStorageType',
        'subnet_id' => 'getSubnetId',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_list_ids'] = isset($data['allow_list_ids']) ? $data['allow_list_ids'] : null;
        $this->container['auto_storage_scaling_config'] = isset($data['auto_storage_scaling_config']) ? $data['auto_storage_scaling_config'] : null;
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['charge_info'] = isset($data['charge_info']) ? $data['charge_info'] : null;
        $this->container['db_param_group_id'] = isset($data['db_param_group_id']) ? $data['db_param_group_id'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_tags'] = isset($data['instance_tags']) ? $data['instance_tags'] : null;
        $this->container['node_info'] = isset($data['node_info']) ? $data['node_info'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['proxy_node_custom'] = isset($data['proxy_node_custom']) ? $data['proxy_node_custom'] : null;
        $this->container['request_source'] = isset($data['request_source']) ? $data['request_source'] : null;
        $this->container['storage_space'] = isset($data['storage_space']) ? $data['storage_space'] : null;
        $this->container['storage_type'] = isset($data['storage_type']) ? $data['storage_type'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_list_ids
     *
     * @return string[]
     */
    public function getAllowListIds()
    {
        return $this->container['allow_list_ids'];
    }

    /**
     * Sets allow_list_ids
     *
     * @param string[] $allow_list_ids allow_list_ids
     *
     * @return $this
     */
    public function setAllowListIds($allow_list_ids)
    {
        $this->container['allow_list_ids'] = $allow_list_ids;

        return $this;
    }

    /**
     * Gets auto_storage_scaling_config
     *
     * @return \Volcengine\Rdsmysqlv2\Model\AutoStorageScalingConfigForRebuildDBInstanceInput
     */
    public function getAutoStorageScalingConfig()
    {
        return $this->container['auto_storage_scaling_config'];
    }

    /**
     * Sets auto_storage_scaling_config
     *
     * @param \Volcengine\Rdsmysqlv2\Model\AutoStorageScalingConfigForRebuildDBInstanceInput $auto_storage_scaling_config auto_storage_scaling_config
     *
     * @return $this
     */
    public function setAutoStorageScalingConfig($auto_storage_scaling_config)
    {
        $this->container['auto_storage_scaling_config'] = $auto_storage_scaling_config;

        return $this;
    }

    /**
     * Gets backup_id
     *
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     *
     * @param string $backup_id backup_id
     *
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets charge_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\ChargeInfoForRebuildDBInstanceInput
     */
    public function getChargeInfo()
    {
        return $this->container['charge_info'];
    }

    /**
     * Sets charge_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\ChargeInfoForRebuildDBInstanceInput $charge_info charge_info
     *
     * @return $this
     */
    public function setChargeInfo($charge_info)
    {
        $this->container['charge_info'] = $charge_info;

        return $this;
    }

    /**
     * Gets db_param_group_id
     *
     * @return string
     */
    public function getDbParamGroupId()
    {
        return $this->container['db_param_group_id'];
    }

    /**
     * Sets db_param_group_id
     *
     * @param string $db_param_group_id db_param_group_id
     *
     * @return $this
     */
    public function setDbParamGroupId($db_param_group_id)
    {
        $this->container['db_param_group_id'] = $db_param_group_id;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_tags
     *
     * @return \Volcengine\Rdsmysqlv2\Model\InstanceTagForRebuildDBInstanceInput[]
     */
    public function getInstanceTags()
    {
        return $this->container['instance_tags'];
    }

    /**
     * Sets instance_tags
     *
     * @param \Volcengine\Rdsmysqlv2\Model\InstanceTagForRebuildDBInstanceInput[] $instance_tags instance_tags
     *
     * @return $this
     */
    public function setInstanceTags($instance_tags)
    {
        $this->container['instance_tags'] = $instance_tags;

        return $this;
    }

    /**
     * Gets node_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\NodeInfoForRebuildDBInstanceInput[]
     */
    public function getNodeInfo()
    {
        return $this->container['node_info'];
    }

    /**
     * Sets node_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\NodeInfoForRebuildDBInstanceInput[] $node_info node_info
     *
     * @return $this
     */
    public function setNodeInfo($node_info)
    {
        $this->container['node_info'] = $node_info;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets proxy_node_custom
     *
     * @return \Volcengine\Rdsmysqlv2\Model\ProxyNodeCustomForRebuildDBInstanceInput
     */
    public function getProxyNodeCustom()
    {
        return $this->container['proxy_node_custom'];
    }

    /**
     * Sets proxy_node_custom
     *
     * @param \Volcengine\Rdsmysqlv2\Model\ProxyNodeCustomForRebuildDBInstanceInput $proxy_node_custom proxy_node_custom
     *
     * @return $this
     */
    public function setProxyNodeCustom($proxy_node_custom)
    {
        $this->container['proxy_node_custom'] = $proxy_node_custom;

        return $this;
    }

    /**
     * Gets request_source
     *
     * @return string
     */
    public function getRequestSource()
    {
        return $this->container['request_source'];
    }

    /**
     * Sets request_source
     *
     * @param string $request_source request_source
     *
     * @return $this
     */
    public function setRequestSource($request_source)
    {
        $this->container['request_source'] = $request_source;

        return $this;
    }

    /**
     * Gets storage_space
     *
     * @return int
     */
    public function getStorageSpace()
    {
        return $this->container['storage_space'];
    }

    /**
     * Sets storage_space
     *
     * @param int $storage_space storage_space
     *
     * @return $this
     */
    public function setStorageSpace($storage_space)
    {
        $this->container['storage_space'] = $storage_space;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string $storage_type storage_type
     *
     * @return $this
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

