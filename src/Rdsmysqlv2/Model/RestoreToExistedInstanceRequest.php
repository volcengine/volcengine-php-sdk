<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RestoreToExistedInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RestoreToExistedInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_id' => 'string',
        'fast_mode' => 'bool',
        'restore_time' => 'string',
        'restore_type' => 'string',
        'source_db_instance_id' => 'string',
        'table_meta' => '\Volcengine\Rdsmysqlv2\Model\TableMetaForRestoreToExistedInstanceInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_id' => null,
        'fast_mode' => null,
        'restore_time' => null,
        'restore_type' => null,
        'source_db_instance_id' => null,
        'table_meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_id' => 'BackupId',
        'fast_mode' => 'FastMode',
        'restore_time' => 'RestoreTime',
        'restore_type' => 'RestoreType',
        'source_db_instance_id' => 'SourceDBInstanceId',
        'table_meta' => 'TableMeta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_id' => 'setBackupId',
        'fast_mode' => 'setFastMode',
        'restore_time' => 'setRestoreTime',
        'restore_type' => 'setRestoreType',
        'source_db_instance_id' => 'setSourceDbInstanceId',
        'table_meta' => 'setTableMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_id' => 'getBackupId',
        'fast_mode' => 'getFastMode',
        'restore_time' => 'getRestoreTime',
        'restore_type' => 'getRestoreType',
        'source_db_instance_id' => 'getSourceDbInstanceId',
        'table_meta' => 'getTableMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['fast_mode'] = isset($data['fast_mode']) ? $data['fast_mode'] : null;
        $this->container['restore_time'] = isset($data['restore_time']) ? $data['restore_time'] : null;
        $this->container['restore_type'] = isset($data['restore_type']) ? $data['restore_type'] : null;
        $this->container['source_db_instance_id'] = isset($data['source_db_instance_id']) ? $data['source_db_instance_id'] : null;
        $this->container['table_meta'] = isset($data['table_meta']) ? $data['table_meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source_db_instance_id'] === null) {
            $invalidProperties[] = "'source_db_instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_id
     *
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     *
     * @param string $backup_id backup_id
     *
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets fast_mode
     *
     * @return bool
     */
    public function getFastMode()
    {
        return $this->container['fast_mode'];
    }

    /**
     * Sets fast_mode
     *
     * @param bool $fast_mode fast_mode
     *
     * @return $this
     */
    public function setFastMode($fast_mode)
    {
        $this->container['fast_mode'] = $fast_mode;

        return $this;
    }

    /**
     * Gets restore_time
     *
     * @return string
     */
    public function getRestoreTime()
    {
        return $this->container['restore_time'];
    }

    /**
     * Sets restore_time
     *
     * @param string $restore_time restore_time
     *
     * @return $this
     */
    public function setRestoreTime($restore_time)
    {
        $this->container['restore_time'] = $restore_time;

        return $this;
    }

    /**
     * Gets restore_type
     *
     * @return string
     */
    public function getRestoreType()
    {
        return $this->container['restore_type'];
    }

    /**
     * Sets restore_type
     *
     * @param string $restore_type restore_type
     *
     * @return $this
     */
    public function setRestoreType($restore_type)
    {
        $this->container['restore_type'] = $restore_type;

        return $this;
    }

    /**
     * Gets source_db_instance_id
     *
     * @return string
     */
    public function getSourceDbInstanceId()
    {
        return $this->container['source_db_instance_id'];
    }

    /**
     * Sets source_db_instance_id
     *
     * @param string $source_db_instance_id source_db_instance_id
     *
     * @return $this
     */
    public function setSourceDbInstanceId($source_db_instance_id)
    {
        $this->container['source_db_instance_id'] = $source_db_instance_id;

        return $this;
    }

    /**
     * Gets table_meta
     *
     * @return \Volcengine\Rdsmysqlv2\Model\TableMetaForRestoreToExistedInstanceInput[]
     */
    public function getTableMeta()
    {
        return $this->container['table_meta'];
    }

    /**
     * Sets table_meta
     *
     * @param \Volcengine\Rdsmysqlv2\Model\TableMetaForRestoreToExistedInstanceInput[] $table_meta table_meta
     *
     * @return $this
     */
    public function setTableMeta($table_meta)
    {
        $this->container['table_meta'] = $table_meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

