<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TemplateParamForDescribeParameterTemplateOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateParamForDescribeParameterTemplateOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_value' => 'string',
        'description' => 'string',
        'expect_value' => 'string',
        'expression' => 'string',
        'name' => 'string',
        'restart' => 'bool',
        'running_value' => 'string',
        'value_range' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_value' => null,
        'description' => null,
        'expect_value' => null,
        'expression' => null,
        'name' => null,
        'restart' => null,
        'running_value' => null,
        'value_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_value' => 'DefaultValue',
        'description' => 'Description',
        'expect_value' => 'ExpectValue',
        'expression' => 'Expression',
        'name' => 'Name',
        'restart' => 'Restart',
        'running_value' => 'RunningValue',
        'value_range' => 'ValueRange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_value' => 'setDefaultValue',
        'description' => 'setDescription',
        'expect_value' => 'setExpectValue',
        'expression' => 'setExpression',
        'name' => 'setName',
        'restart' => 'setRestart',
        'running_value' => 'setRunningValue',
        'value_range' => 'setValueRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_value' => 'getDefaultValue',
        'description' => 'getDescription',
        'expect_value' => 'getExpectValue',
        'expression' => 'getExpression',
        'name' => 'getName',
        'restart' => 'getRestart',
        'running_value' => 'getRunningValue',
        'value_range' => 'getValueRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expect_value'] = isset($data['expect_value']) ? $data['expect_value'] : null;
        $this->container['expression'] = isset($data['expression']) ? $data['expression'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['restart'] = isset($data['restart']) ? $data['restart'] : null;
        $this->container['running_value'] = isset($data['running_value']) ? $data['running_value'] : null;
        $this->container['value_range'] = isset($data['value_range']) ? $data['value_range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expect_value
     *
     * @return string
     */
    public function getExpectValue()
    {
        return $this->container['expect_value'];
    }

    /**
     * Sets expect_value
     *
     * @param string $expect_value expect_value
     *
     * @return $this
     */
    public function setExpectValue($expect_value)
    {
        $this->container['expect_value'] = $expect_value;

        return $this;
    }

    /**
     * Gets expression
     *
     * @return string
     */
    public function getExpression()
    {
        return $this->container['expression'];
    }

    /**
     * Sets expression
     *
     * @param string $expression expression
     *
     * @return $this
     */
    public function setExpression($expression)
    {
        $this->container['expression'] = $expression;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets restart
     *
     * @return bool
     */
    public function getRestart()
    {
        return $this->container['restart'];
    }

    /**
     * Sets restart
     *
     * @param bool $restart restart
     *
     * @return $this
     */
    public function setRestart($restart)
    {
        $this->container['restart'] = $restart;

        return $this;
    }

    /**
     * Gets running_value
     *
     * @return string
     */
    public function getRunningValue()
    {
        return $this->container['running_value'];
    }

    /**
     * Sets running_value
     *
     * @param string $running_value running_value
     *
     * @return $this
     */
    public function setRunningValue($running_value)
    {
        $this->container['running_value'] = $running_value;

        return $this;
    }

    /**
     * Gets value_range
     *
     * @return string
     */
    public function getValueRange()
    {
        return $this->container['value_range'];
    }

    /**
     * Sets value_range
     *
     * @param string $value_range value_range
     *
     * @return $this
     */
    public function setValueRange($value_range)
    {
        $this->container['value_range'] = $value_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

