<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DiagnosticsInfoForDescribeDiagnosticsInfosOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiagnosticsInfoForDescribeDiagnosticsInfosOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diagnostics_items' => '\Volcengine\Rdsmysqlv2\Model\DiagnosticsItemForDescribeDiagnosticsInfosOutput[]',
        'diagnostics_record_id' => 'string',
        'diagnostics_result' => 'string',
        'ecs_info' => '\Volcengine\Rdsmysqlv2\Model\EcsInfoForDescribeDiagnosticsInfosOutput',
        'endpoint_info' => '\Volcengine\Rdsmysqlv2\Model\EndpointInfoForDescribeDiagnosticsInfosOutput',
        'instance_id' => 'string',
        'public_address_info' => '\Volcengine\Rdsmysqlv2\Model\PublicAddressInfoForDescribeDiagnosticsInfosOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diagnostics_items' => null,
        'diagnostics_record_id' => null,
        'diagnostics_result' => null,
        'ecs_info' => null,
        'endpoint_info' => null,
        'instance_id' => null,
        'public_address_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diagnostics_items' => 'DiagnosticsItems',
        'diagnostics_record_id' => 'DiagnosticsRecordId',
        'diagnostics_result' => 'DiagnosticsResult',
        'ecs_info' => 'EcsInfo',
        'endpoint_info' => 'EndpointInfo',
        'instance_id' => 'InstanceId',
        'public_address_info' => 'PublicAddressInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diagnostics_items' => 'setDiagnosticsItems',
        'diagnostics_record_id' => 'setDiagnosticsRecordId',
        'diagnostics_result' => 'setDiagnosticsResult',
        'ecs_info' => 'setEcsInfo',
        'endpoint_info' => 'setEndpointInfo',
        'instance_id' => 'setInstanceId',
        'public_address_info' => 'setPublicAddressInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diagnostics_items' => 'getDiagnosticsItems',
        'diagnostics_record_id' => 'getDiagnosticsRecordId',
        'diagnostics_result' => 'getDiagnosticsResult',
        'ecs_info' => 'getEcsInfo',
        'endpoint_info' => 'getEndpointInfo',
        'instance_id' => 'getInstanceId',
        'public_address_info' => 'getPublicAddressInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diagnostics_items'] = isset($data['diagnostics_items']) ? $data['diagnostics_items'] : null;
        $this->container['diagnostics_record_id'] = isset($data['diagnostics_record_id']) ? $data['diagnostics_record_id'] : null;
        $this->container['diagnostics_result'] = isset($data['diagnostics_result']) ? $data['diagnostics_result'] : null;
        $this->container['ecs_info'] = isset($data['ecs_info']) ? $data['ecs_info'] : null;
        $this->container['endpoint_info'] = isset($data['endpoint_info']) ? $data['endpoint_info'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['public_address_info'] = isset($data['public_address_info']) ? $data['public_address_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diagnostics_items
     *
     * @return \Volcengine\Rdsmysqlv2\Model\DiagnosticsItemForDescribeDiagnosticsInfosOutput[]
     */
    public function getDiagnosticsItems()
    {
        return $this->container['diagnostics_items'];
    }

    /**
     * Sets diagnostics_items
     *
     * @param \Volcengine\Rdsmysqlv2\Model\DiagnosticsItemForDescribeDiagnosticsInfosOutput[] $diagnostics_items diagnostics_items
     *
     * @return $this
     */
    public function setDiagnosticsItems($diagnostics_items)
    {
        $this->container['diagnostics_items'] = $diagnostics_items;

        return $this;
    }

    /**
     * Gets diagnostics_record_id
     *
     * @return string
     */
    public function getDiagnosticsRecordId()
    {
        return $this->container['diagnostics_record_id'];
    }

    /**
     * Sets diagnostics_record_id
     *
     * @param string $diagnostics_record_id diagnostics_record_id
     *
     * @return $this
     */
    public function setDiagnosticsRecordId($diagnostics_record_id)
    {
        $this->container['diagnostics_record_id'] = $diagnostics_record_id;

        return $this;
    }

    /**
     * Gets diagnostics_result
     *
     * @return string
     */
    public function getDiagnosticsResult()
    {
        return $this->container['diagnostics_result'];
    }

    /**
     * Sets diagnostics_result
     *
     * @param string $diagnostics_result diagnostics_result
     *
     * @return $this
     */
    public function setDiagnosticsResult($diagnostics_result)
    {
        $this->container['diagnostics_result'] = $diagnostics_result;

        return $this;
    }

    /**
     * Gets ecs_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\EcsInfoForDescribeDiagnosticsInfosOutput
     */
    public function getEcsInfo()
    {
        return $this->container['ecs_info'];
    }

    /**
     * Sets ecs_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\EcsInfoForDescribeDiagnosticsInfosOutput $ecs_info ecs_info
     *
     * @return $this
     */
    public function setEcsInfo($ecs_info)
    {
        $this->container['ecs_info'] = $ecs_info;

        return $this;
    }

    /**
     * Gets endpoint_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\EndpointInfoForDescribeDiagnosticsInfosOutput
     */
    public function getEndpointInfo()
    {
        return $this->container['endpoint_info'];
    }

    /**
     * Sets endpoint_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\EndpointInfoForDescribeDiagnosticsInfosOutput $endpoint_info endpoint_info
     *
     * @return $this
     */
    public function setEndpointInfo($endpoint_info)
    {
        $this->container['endpoint_info'] = $endpoint_info;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets public_address_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\PublicAddressInfoForDescribeDiagnosticsInfosOutput
     */
    public function getPublicAddressInfo()
    {
        return $this->container['public_address_info'];
    }

    /**
     * Sets public_address_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\PublicAddressInfoForDescribeDiagnosticsInfosOutput $public_address_info public_address_info
     *
     * @return $this
     */
    public function setPublicAddressInfo($public_address_info)
    {
        $this->container['public_address_info'] = $public_address_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

