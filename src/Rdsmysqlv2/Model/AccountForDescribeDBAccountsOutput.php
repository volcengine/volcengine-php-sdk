<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AccountForDescribeDBAccountsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountForDescribeDBAccountsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_desc' => 'string',
        'account_name' => 'string',
        'account_privileges' => '\Volcengine\Rdsmysqlv2\Model\AccountPrivilegeForDescribeDBAccountsOutput[]',
        'account_privileges_sql' => 'string[]',
        'account_status' => 'string',
        'account_type' => 'string',
        'global_account_privileges' => 'string[]',
        'has_table_column_privilege_db_names' => 'string[]',
        'host' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_desc' => null,
        'account_name' => null,
        'account_privileges' => null,
        'account_privileges_sql' => null,
        'account_status' => null,
        'account_type' => null,
        'global_account_privileges' => null,
        'has_table_column_privilege_db_names' => null,
        'host' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_desc' => 'AccountDesc',
        'account_name' => 'AccountName',
        'account_privileges' => 'AccountPrivileges',
        'account_privileges_sql' => 'AccountPrivilegesSQL',
        'account_status' => 'AccountStatus',
        'account_type' => 'AccountType',
        'global_account_privileges' => 'GlobalAccountPrivileges',
        'has_table_column_privilege_db_names' => 'HasTableColumnPrivilegeDBNames',
        'host' => 'Host'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_desc' => 'setAccountDesc',
        'account_name' => 'setAccountName',
        'account_privileges' => 'setAccountPrivileges',
        'account_privileges_sql' => 'setAccountPrivilegesSql',
        'account_status' => 'setAccountStatus',
        'account_type' => 'setAccountType',
        'global_account_privileges' => 'setGlobalAccountPrivileges',
        'has_table_column_privilege_db_names' => 'setHasTableColumnPrivilegeDbNames',
        'host' => 'setHost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_desc' => 'getAccountDesc',
        'account_name' => 'getAccountName',
        'account_privileges' => 'getAccountPrivileges',
        'account_privileges_sql' => 'getAccountPrivilegesSql',
        'account_status' => 'getAccountStatus',
        'account_type' => 'getAccountType',
        'global_account_privileges' => 'getGlobalAccountPrivileges',
        'has_table_column_privilege_db_names' => 'getHasTableColumnPrivilegeDbNames',
        'host' => 'getHost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_desc'] = isset($data['account_desc']) ? $data['account_desc'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['account_privileges'] = isset($data['account_privileges']) ? $data['account_privileges'] : null;
        $this->container['account_privileges_sql'] = isset($data['account_privileges_sql']) ? $data['account_privileges_sql'] : null;
        $this->container['account_status'] = isset($data['account_status']) ? $data['account_status'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['global_account_privileges'] = isset($data['global_account_privileges']) ? $data['global_account_privileges'] : null;
        $this->container['has_table_column_privilege_db_names'] = isset($data['has_table_column_privilege_db_names']) ? $data['has_table_column_privilege_db_names'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_desc
     *
     * @return string
     */
    public function getAccountDesc()
    {
        return $this->container['account_desc'];
    }

    /**
     * Sets account_desc
     *
     * @param string $account_desc account_desc
     *
     * @return $this
     */
    public function setAccountDesc($account_desc)
    {
        $this->container['account_desc'] = $account_desc;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_privileges
     *
     * @return \Volcengine\Rdsmysqlv2\Model\AccountPrivilegeForDescribeDBAccountsOutput[]
     */
    public function getAccountPrivileges()
    {
        return $this->container['account_privileges'];
    }

    /**
     * Sets account_privileges
     *
     * @param \Volcengine\Rdsmysqlv2\Model\AccountPrivilegeForDescribeDBAccountsOutput[] $account_privileges account_privileges
     *
     * @return $this
     */
    public function setAccountPrivileges($account_privileges)
    {
        $this->container['account_privileges'] = $account_privileges;

        return $this;
    }

    /**
     * Gets account_privileges_sql
     *
     * @return string[]
     */
    public function getAccountPrivilegesSql()
    {
        return $this->container['account_privileges_sql'];
    }

    /**
     * Sets account_privileges_sql
     *
     * @param string[] $account_privileges_sql account_privileges_sql
     *
     * @return $this
     */
    public function setAccountPrivilegesSql($account_privileges_sql)
    {
        $this->container['account_privileges_sql'] = $account_privileges_sql;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string $account_status account_status
     *
     * @return $this
     */
    public function setAccountStatus($account_status)
    {
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type account_type
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets global_account_privileges
     *
     * @return string[]
     */
    public function getGlobalAccountPrivileges()
    {
        return $this->container['global_account_privileges'];
    }

    /**
     * Sets global_account_privileges
     *
     * @param string[] $global_account_privileges global_account_privileges
     *
     * @return $this
     */
    public function setGlobalAccountPrivileges($global_account_privileges)
    {
        $this->container['global_account_privileges'] = $global_account_privileges;

        return $this;
    }

    /**
     * Gets has_table_column_privilege_db_names
     *
     * @return string[]
     */
    public function getHasTableColumnPrivilegeDbNames()
    {
        return $this->container['has_table_column_privilege_db_names'];
    }

    /**
     * Sets has_table_column_privilege_db_names
     *
     * @param string[] $has_table_column_privilege_db_names has_table_column_privilege_db_names
     *
     * @return $this
     */
    public function setHasTableColumnPrivilegeDbNames($has_table_column_privilege_db_names)
    {
        $this->container['has_table_column_privilege_db_names'] = $has_table_column_privilege_db_names;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

