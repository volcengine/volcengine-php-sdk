<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBProxyPriceDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBProxyPriceDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_method' => 'string',
        'charge_item_prices' => '\Volcengine\Rdsmysqlv2\Model\ChargeItemPriceForDescribeDBProxyPriceDetailOutput[]',
        'currency' => 'string',
        'describe_db_instance_price_detail_str' => '\Volcengine\Rdsmysqlv2\Model\DescribeDBInstancePriceDetailStrForDescribeDBProxyPriceDetailOutput',
        'describe_db_proxy_price_detail_str' => '\Volcengine\Rdsmysqlv2\Model\DescribeDBProxyPriceDetailStrForDescribeDBProxyPriceDetailOutput',
        'discount_price' => 'double',
        'hide_price_info' => 'bool',
        'original_price' => 'double',
        'payable_price' => 'double',
        'quantity' => 'int',
        'refund_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_method' => null,
        'charge_item_prices' => null,
        'currency' => null,
        'describe_db_instance_price_detail_str' => null,
        'describe_db_proxy_price_detail_str' => null,
        'discount_price' => 'double',
        'hide_price_info' => null,
        'original_price' => 'double',
        'payable_price' => 'double',
        'quantity' => 'int32',
        'refund_amount' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_method' => 'BillingMethod',
        'charge_item_prices' => 'ChargeItemPrices',
        'currency' => 'Currency',
        'describe_db_instance_price_detail_str' => 'DescribeDBInstancePriceDetailStr',
        'describe_db_proxy_price_detail_str' => 'DescribeDBProxyPriceDetailStr',
        'discount_price' => 'DiscountPrice',
        'hide_price_info' => 'HidePriceInfo',
        'original_price' => 'OriginalPrice',
        'payable_price' => 'PayablePrice',
        'quantity' => 'Quantity',
        'refund_amount' => 'RefundAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_method' => 'setBillingMethod',
        'charge_item_prices' => 'setChargeItemPrices',
        'currency' => 'setCurrency',
        'describe_db_instance_price_detail_str' => 'setDescribeDbInstancePriceDetailStr',
        'describe_db_proxy_price_detail_str' => 'setDescribeDbProxyPriceDetailStr',
        'discount_price' => 'setDiscountPrice',
        'hide_price_info' => 'setHidePriceInfo',
        'original_price' => 'setOriginalPrice',
        'payable_price' => 'setPayablePrice',
        'quantity' => 'setQuantity',
        'refund_amount' => 'setRefundAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_method' => 'getBillingMethod',
        'charge_item_prices' => 'getChargeItemPrices',
        'currency' => 'getCurrency',
        'describe_db_instance_price_detail_str' => 'getDescribeDbInstancePriceDetailStr',
        'describe_db_proxy_price_detail_str' => 'getDescribeDbProxyPriceDetailStr',
        'discount_price' => 'getDiscountPrice',
        'hide_price_info' => 'getHidePriceInfo',
        'original_price' => 'getOriginalPrice',
        'payable_price' => 'getPayablePrice',
        'quantity' => 'getQuantity',
        'refund_amount' => 'getRefundAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_method'] = isset($data['billing_method']) ? $data['billing_method'] : null;
        $this->container['charge_item_prices'] = isset($data['charge_item_prices']) ? $data['charge_item_prices'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['describe_db_instance_price_detail_str'] = isset($data['describe_db_instance_price_detail_str']) ? $data['describe_db_instance_price_detail_str'] : null;
        $this->container['describe_db_proxy_price_detail_str'] = isset($data['describe_db_proxy_price_detail_str']) ? $data['describe_db_proxy_price_detail_str'] : null;
        $this->container['discount_price'] = isset($data['discount_price']) ? $data['discount_price'] : null;
        $this->container['hide_price_info'] = isset($data['hide_price_info']) ? $data['hide_price_info'] : null;
        $this->container['original_price'] = isset($data['original_price']) ? $data['original_price'] : null;
        $this->container['payable_price'] = isset($data['payable_price']) ? $data['payable_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['refund_amount'] = isset($data['refund_amount']) ? $data['refund_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_method
     *
     * @return string
     */
    public function getBillingMethod()
    {
        return $this->container['billing_method'];
    }

    /**
     * Sets billing_method
     *
     * @param string $billing_method billing_method
     *
     * @return $this
     */
    public function setBillingMethod($billing_method)
    {
        $this->container['billing_method'] = $billing_method;

        return $this;
    }

    /**
     * Gets charge_item_prices
     *
     * @return \Volcengine\Rdsmysqlv2\Model\ChargeItemPriceForDescribeDBProxyPriceDetailOutput[]
     */
    public function getChargeItemPrices()
    {
        return $this->container['charge_item_prices'];
    }

    /**
     * Sets charge_item_prices
     *
     * @param \Volcengine\Rdsmysqlv2\Model\ChargeItemPriceForDescribeDBProxyPriceDetailOutput[] $charge_item_prices charge_item_prices
     *
     * @return $this
     */
    public function setChargeItemPrices($charge_item_prices)
    {
        $this->container['charge_item_prices'] = $charge_item_prices;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets describe_db_instance_price_detail_str
     *
     * @return \Volcengine\Rdsmysqlv2\Model\DescribeDBInstancePriceDetailStrForDescribeDBProxyPriceDetailOutput
     */
    public function getDescribeDbInstancePriceDetailStr()
    {
        return $this->container['describe_db_instance_price_detail_str'];
    }

    /**
     * Sets describe_db_instance_price_detail_str
     *
     * @param \Volcengine\Rdsmysqlv2\Model\DescribeDBInstancePriceDetailStrForDescribeDBProxyPriceDetailOutput $describe_db_instance_price_detail_str describe_db_instance_price_detail_str
     *
     * @return $this
     */
    public function setDescribeDbInstancePriceDetailStr($describe_db_instance_price_detail_str)
    {
        $this->container['describe_db_instance_price_detail_str'] = $describe_db_instance_price_detail_str;

        return $this;
    }

    /**
     * Gets describe_db_proxy_price_detail_str
     *
     * @return \Volcengine\Rdsmysqlv2\Model\DescribeDBProxyPriceDetailStrForDescribeDBProxyPriceDetailOutput
     */
    public function getDescribeDbProxyPriceDetailStr()
    {
        return $this->container['describe_db_proxy_price_detail_str'];
    }

    /**
     * Sets describe_db_proxy_price_detail_str
     *
     * @param \Volcengine\Rdsmysqlv2\Model\DescribeDBProxyPriceDetailStrForDescribeDBProxyPriceDetailOutput $describe_db_proxy_price_detail_str describe_db_proxy_price_detail_str
     *
     * @return $this
     */
    public function setDescribeDbProxyPriceDetailStr($describe_db_proxy_price_detail_str)
    {
        $this->container['describe_db_proxy_price_detail_str'] = $describe_db_proxy_price_detail_str;

        return $this;
    }

    /**
     * Gets discount_price
     *
     * @return double
     */
    public function getDiscountPrice()
    {
        return $this->container['discount_price'];
    }

    /**
     * Sets discount_price
     *
     * @param double $discount_price discount_price
     *
     * @return $this
     */
    public function setDiscountPrice($discount_price)
    {
        $this->container['discount_price'] = $discount_price;

        return $this;
    }

    /**
     * Gets hide_price_info
     *
     * @return bool
     */
    public function getHidePriceInfo()
    {
        return $this->container['hide_price_info'];
    }

    /**
     * Sets hide_price_info
     *
     * @param bool $hide_price_info hide_price_info
     *
     * @return $this
     */
    public function setHidePriceInfo($hide_price_info)
    {
        $this->container['hide_price_info'] = $hide_price_info;

        return $this;
    }

    /**
     * Gets original_price
     *
     * @return double
     */
    public function getOriginalPrice()
    {
        return $this->container['original_price'];
    }

    /**
     * Sets original_price
     *
     * @param double $original_price original_price
     *
     * @return $this
     */
    public function setOriginalPrice($original_price)
    {
        $this->container['original_price'] = $original_price;

        return $this;
    }

    /**
     * Gets payable_price
     *
     * @return double
     */
    public function getPayablePrice()
    {
        return $this->container['payable_price'];
    }

    /**
     * Sets payable_price
     *
     * @param double $payable_price payable_price
     *
     * @return $this
     */
    public function setPayablePrice($payable_price)
    {
        $this->container['payable_price'] = $payable_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return float
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param float $refund_amount refund_amount
     *
     * @return $this
     */
    public function setRefundAmount($refund_amount)
    {
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

