<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyDBInstanceSSLRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyDBInstanceSSLRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
        'reload_ssl_certificate' => 'bool',
        'ssl_enable' => 'bool',
        'specified_switch_end_time' => 'string',
        'specified_switch_start_time' => 'string',
        'switch_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
        'reload_ssl_certificate' => null,
        'ssl_enable' => null,
        'specified_switch_end_time' => null,
        'specified_switch_start_time' => null,
        'switch_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'InstanceId',
        'reload_ssl_certificate' => 'ReloadSSLCertificate',
        'ssl_enable' => 'SSLEnable',
        'specified_switch_end_time' => 'SpecifiedSwitchEndTime',
        'specified_switch_start_time' => 'SpecifiedSwitchStartTime',
        'switch_type' => 'SwitchType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
        'reload_ssl_certificate' => 'setReloadSslCertificate',
        'ssl_enable' => 'setSslEnable',
        'specified_switch_end_time' => 'setSpecifiedSwitchEndTime',
        'specified_switch_start_time' => 'setSpecifiedSwitchStartTime',
        'switch_type' => 'setSwitchType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
        'reload_ssl_certificate' => 'getReloadSslCertificate',
        'ssl_enable' => 'getSslEnable',
        'specified_switch_end_time' => 'getSpecifiedSwitchEndTime',
        'specified_switch_start_time' => 'getSpecifiedSwitchStartTime',
        'switch_type' => 'getSwitchType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['reload_ssl_certificate'] = isset($data['reload_ssl_certificate']) ? $data['reload_ssl_certificate'] : null;
        $this->container['ssl_enable'] = isset($data['ssl_enable']) ? $data['ssl_enable'] : null;
        $this->container['specified_switch_end_time'] = isset($data['specified_switch_end_time']) ? $data['specified_switch_end_time'] : null;
        $this->container['specified_switch_start_time'] = isset($data['specified_switch_start_time']) ? $data['specified_switch_start_time'] : null;
        $this->container['switch_type'] = isset($data['switch_type']) ? $data['switch_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets reload_ssl_certificate
     *
     * @return bool
     */
    public function getReloadSslCertificate()
    {
        return $this->container['reload_ssl_certificate'];
    }

    /**
     * Sets reload_ssl_certificate
     *
     * @param bool $reload_ssl_certificate reload_ssl_certificate
     *
     * @return $this
     */
    public function setReloadSslCertificate($reload_ssl_certificate)
    {
        $this->container['reload_ssl_certificate'] = $reload_ssl_certificate;

        return $this;
    }

    /**
     * Gets ssl_enable
     *
     * @return bool
     */
    public function getSslEnable()
    {
        return $this->container['ssl_enable'];
    }

    /**
     * Sets ssl_enable
     *
     * @param bool $ssl_enable ssl_enable
     *
     * @return $this
     */
    public function setSslEnable($ssl_enable)
    {
        $this->container['ssl_enable'] = $ssl_enable;

        return $this;
    }

    /**
     * Gets specified_switch_end_time
     *
     * @return string
     */
    public function getSpecifiedSwitchEndTime()
    {
        return $this->container['specified_switch_end_time'];
    }

    /**
     * Sets specified_switch_end_time
     *
     * @param string $specified_switch_end_time specified_switch_end_time
     *
     * @return $this
     */
    public function setSpecifiedSwitchEndTime($specified_switch_end_time)
    {
        $this->container['specified_switch_end_time'] = $specified_switch_end_time;

        return $this;
    }

    /**
     * Gets specified_switch_start_time
     *
     * @return string
     */
    public function getSpecifiedSwitchStartTime()
    {
        return $this->container['specified_switch_start_time'];
    }

    /**
     * Sets specified_switch_start_time
     *
     * @param string $specified_switch_start_time specified_switch_start_time
     *
     * @return $this
     */
    public function setSpecifiedSwitchStartTime($specified_switch_start_time)
    {
        $this->container['specified_switch_start_time'] = $specified_switch_start_time;

        return $this;
    }

    /**
     * Gets switch_type
     *
     * @return string
     */
    public function getSwitchType()
    {
        return $this->container['switch_type'];
    }

    /**
     * Sets switch_type
     *
     * @param string $switch_type switch_type
     *
     * @return $this
     */
    public function setSwitchType($switch_type)
    {
        $this->container['switch_type'] = $switch_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

