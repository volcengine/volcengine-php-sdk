<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyTaskRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyTaskRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
        'modify_begin_time' => 'string',
        'modify_end_time' => 'string',
        'modify_type' => 'string',
        'project_name' => 'string',
        'switch_time' => 'string',
        'task_event_operation' => 'string',
        'task_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
        'modify_begin_time' => null,
        'modify_end_time' => null,
        'modify_type' => null,
        'project_name' => null,
        'switch_time' => null,
        'task_event_operation' => null,
        'task_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'InstanceId',
        'modify_begin_time' => 'ModifyBeginTime',
        'modify_end_time' => 'ModifyEndTime',
        'modify_type' => 'ModifyType',
        'project_name' => 'ProjectName',
        'switch_time' => 'SwitchTime',
        'task_event_operation' => 'TaskEventOperation',
        'task_id' => 'TaskId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
        'modify_begin_time' => 'setModifyBeginTime',
        'modify_end_time' => 'setModifyEndTime',
        'modify_type' => 'setModifyType',
        'project_name' => 'setProjectName',
        'switch_time' => 'setSwitchTime',
        'task_event_operation' => 'setTaskEventOperation',
        'task_id' => 'setTaskId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
        'modify_begin_time' => 'getModifyBeginTime',
        'modify_end_time' => 'getModifyEndTime',
        'modify_type' => 'getModifyType',
        'project_name' => 'getProjectName',
        'switch_time' => 'getSwitchTime',
        'task_event_operation' => 'getTaskEventOperation',
        'task_id' => 'getTaskId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['modify_begin_time'] = isset($data['modify_begin_time']) ? $data['modify_begin_time'] : null;
        $this->container['modify_end_time'] = isset($data['modify_end_time']) ? $data['modify_end_time'] : null;
        $this->container['modify_type'] = isset($data['modify_type']) ? $data['modify_type'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['switch_time'] = isset($data['switch_time']) ? $data['switch_time'] : null;
        $this->container['task_event_operation'] = isset($data['task_event_operation']) ? $data['task_event_operation'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        if ($this->container['task_event_operation'] === null) {
            $invalidProperties[] = "'task_event_operation' can't be null";
        }
        if ($this->container['task_id'] === null) {
            $invalidProperties[] = "'task_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets modify_begin_time
     *
     * @return string
     */
    public function getModifyBeginTime()
    {
        return $this->container['modify_begin_time'];
    }

    /**
     * Sets modify_begin_time
     *
     * @param string $modify_begin_time modify_begin_time
     *
     * @return $this
     */
    public function setModifyBeginTime($modify_begin_time)
    {
        $this->container['modify_begin_time'] = $modify_begin_time;

        return $this;
    }

    /**
     * Gets modify_end_time
     *
     * @return string
     */
    public function getModifyEndTime()
    {
        return $this->container['modify_end_time'];
    }

    /**
     * Sets modify_end_time
     *
     * @param string $modify_end_time modify_end_time
     *
     * @return $this
     */
    public function setModifyEndTime($modify_end_time)
    {
        $this->container['modify_end_time'] = $modify_end_time;

        return $this;
    }

    /**
     * Gets modify_type
     *
     * @return string
     */
    public function getModifyType()
    {
        return $this->container['modify_type'];
    }

    /**
     * Sets modify_type
     *
     * @param string $modify_type modify_type
     *
     * @return $this
     */
    public function setModifyType($modify_type)
    {
        $this->container['modify_type'] = $modify_type;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets switch_time
     *
     * @return string
     */
    public function getSwitchTime()
    {
        return $this->container['switch_time'];
    }

    /**
     * Sets switch_time
     *
     * @param string $switch_time switch_time
     *
     * @return $this
     */
    public function setSwitchTime($switch_time)
    {
        $this->container['switch_time'] = $switch_time;

        return $this;
    }

    /**
     * Gets task_event_operation
     *
     * @return string
     */
    public function getTaskEventOperation()
    {
        return $this->container['task_event_operation'];
    }

    /**
     * Sets task_event_operation
     *
     * @param string $task_event_operation task_event_operation
     *
     * @return $this
     */
    public function setTaskEventOperation($task_event_operation)
    {
        $this->container['task_event_operation'] = $task_event_operation;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

