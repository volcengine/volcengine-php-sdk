<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateDrDBInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDrDBInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_storage_scaling_config' => '\Volcengine\Rdsmysqlv2\Model\AutoStorageScalingConfigForCreateDrDBInstanceInput',
        'deletion_protection' => 'string',
        'instance_name' => 'string',
        'master_instance_id' => 'string',
        'master_region' => 'string',
        'node_info' => '\Volcengine\Rdsmysqlv2\Model\NodeInfoForCreateDrDBInstanceInput[]',
        'proxy_node_custom' => '\Volcengine\Rdsmysqlv2\Model\ProxyNodeCustomForCreateDrDBInstanceInput',
        'storage_space' => 'int',
        'subnet_id' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_storage_scaling_config' => null,
        'deletion_protection' => null,
        'instance_name' => null,
        'master_instance_id' => null,
        'master_region' => null,
        'node_info' => null,
        'proxy_node_custom' => null,
        'storage_space' => 'int32',
        'subnet_id' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_storage_scaling_config' => 'AutoStorageScalingConfig',
        'deletion_protection' => 'DeletionProtection',
        'instance_name' => 'InstanceName',
        'master_instance_id' => 'MasterInstanceId',
        'master_region' => 'MasterRegion',
        'node_info' => 'NodeInfo',
        'proxy_node_custom' => 'ProxyNodeCustom',
        'storage_space' => 'StorageSpace',
        'subnet_id' => 'SubnetId',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_storage_scaling_config' => 'setAutoStorageScalingConfig',
        'deletion_protection' => 'setDeletionProtection',
        'instance_name' => 'setInstanceName',
        'master_instance_id' => 'setMasterInstanceId',
        'master_region' => 'setMasterRegion',
        'node_info' => 'setNodeInfo',
        'proxy_node_custom' => 'setProxyNodeCustom',
        'storage_space' => 'setStorageSpace',
        'subnet_id' => 'setSubnetId',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_storage_scaling_config' => 'getAutoStorageScalingConfig',
        'deletion_protection' => 'getDeletionProtection',
        'instance_name' => 'getInstanceName',
        'master_instance_id' => 'getMasterInstanceId',
        'master_region' => 'getMasterRegion',
        'node_info' => 'getNodeInfo',
        'proxy_node_custom' => 'getProxyNodeCustom',
        'storage_space' => 'getStorageSpace',
        'subnet_id' => 'getSubnetId',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_storage_scaling_config'] = isset($data['auto_storage_scaling_config']) ? $data['auto_storage_scaling_config'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['master_instance_id'] = isset($data['master_instance_id']) ? $data['master_instance_id'] : null;
        $this->container['master_region'] = isset($data['master_region']) ? $data['master_region'] : null;
        $this->container['node_info'] = isset($data['node_info']) ? $data['node_info'] : null;
        $this->container['proxy_node_custom'] = isset($data['proxy_node_custom']) ? $data['proxy_node_custom'] : null;
        $this->container['storage_space'] = isset($data['storage_space']) ? $data['storage_space'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['master_instance_id'] === null) {
            $invalidProperties[] = "'master_instance_id' can't be null";
        }
        if ($this->container['master_region'] === null) {
            $invalidProperties[] = "'master_region' can't be null";
        }
        if ($this->container['storage_space'] === null) {
            $invalidProperties[] = "'storage_space' can't be null";
        }
        if ($this->container['subnet_id'] === null) {
            $invalidProperties[] = "'subnet_id' can't be null";
        }
        if ($this->container['vpc_id'] === null) {
            $invalidProperties[] = "'vpc_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_storage_scaling_config
     *
     * @return \Volcengine\Rdsmysqlv2\Model\AutoStorageScalingConfigForCreateDrDBInstanceInput
     */
    public function getAutoStorageScalingConfig()
    {
        return $this->container['auto_storage_scaling_config'];
    }

    /**
     * Sets auto_storage_scaling_config
     *
     * @param \Volcengine\Rdsmysqlv2\Model\AutoStorageScalingConfigForCreateDrDBInstanceInput $auto_storage_scaling_config auto_storage_scaling_config
     *
     * @return $this
     */
    public function setAutoStorageScalingConfig($auto_storage_scaling_config)
    {
        $this->container['auto_storage_scaling_config'] = $auto_storage_scaling_config;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets master_instance_id
     *
     * @return string
     */
    public function getMasterInstanceId()
    {
        return $this->container['master_instance_id'];
    }

    /**
     * Sets master_instance_id
     *
     * @param string $master_instance_id master_instance_id
     *
     * @return $this
     */
    public function setMasterInstanceId($master_instance_id)
    {
        $this->container['master_instance_id'] = $master_instance_id;

        return $this;
    }

    /**
     * Gets master_region
     *
     * @return string
     */
    public function getMasterRegion()
    {
        return $this->container['master_region'];
    }

    /**
     * Sets master_region
     *
     * @param string $master_region master_region
     *
     * @return $this
     */
    public function setMasterRegion($master_region)
    {
        $this->container['master_region'] = $master_region;

        return $this;
    }

    /**
     * Gets node_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\NodeInfoForCreateDrDBInstanceInput[]
     */
    public function getNodeInfo()
    {
        return $this->container['node_info'];
    }

    /**
     * Sets node_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\NodeInfoForCreateDrDBInstanceInput[] $node_info node_info
     *
     * @return $this
     */
    public function setNodeInfo($node_info)
    {
        $this->container['node_info'] = $node_info;

        return $this;
    }

    /**
     * Gets proxy_node_custom
     *
     * @return \Volcengine\Rdsmysqlv2\Model\ProxyNodeCustomForCreateDrDBInstanceInput
     */
    public function getProxyNodeCustom()
    {
        return $this->container['proxy_node_custom'];
    }

    /**
     * Sets proxy_node_custom
     *
     * @param \Volcengine\Rdsmysqlv2\Model\ProxyNodeCustomForCreateDrDBInstanceInput $proxy_node_custom proxy_node_custom
     *
     * @return $this
     */
    public function setProxyNodeCustom($proxy_node_custom)
    {
        $this->container['proxy_node_custom'] = $proxy_node_custom;

        return $this;
    }

    /**
     * Gets storage_space
     *
     * @return int
     */
    public function getStorageSpace()
    {
        return $this->container['storage_space'];
    }

    /**
     * Sets storage_space
     *
     * @param int $storage_space storage_space
     *
     * @return $this
     */
    public function setStorageSpace($storage_space)
    {
        $this->container['storage_space'] = $storage_space;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

