<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class EndpointInfoForDescribeDiagnosticsInfosOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EndpointInfoForDescribeDiagnosticsInfosOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endpoint_id' => 'string',
        'endpoint_name' => 'string',
        'priave_domain' => 'string',
        'private_ipv4_address' => 'string',
        'private_ipv6_address' => 'string',
        'public_domain' => 'string',
        'public_ip_address' => 'string',
        'vpc_id' => 'string',
        'vpc_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endpoint_id' => null,
        'endpoint_name' => null,
        'priave_domain' => null,
        'private_ipv4_address' => null,
        'private_ipv6_address' => null,
        'public_domain' => null,
        'public_ip_address' => null,
        'vpc_id' => null,
        'vpc_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoint_id' => 'EndpointId',
        'endpoint_name' => 'EndpointName',
        'priave_domain' => 'PriaveDomain',
        'private_ipv4_address' => 'PrivateIpv4Address',
        'private_ipv6_address' => 'PrivateIpv6Address',
        'public_domain' => 'PublicDomain',
        'public_ip_address' => 'PublicIpAddress',
        'vpc_id' => 'VpcId',
        'vpc_name' => 'VpcName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoint_id' => 'setEndpointId',
        'endpoint_name' => 'setEndpointName',
        'priave_domain' => 'setPriaveDomain',
        'private_ipv4_address' => 'setPrivateIpv4Address',
        'private_ipv6_address' => 'setPrivateIpv6Address',
        'public_domain' => 'setPublicDomain',
        'public_ip_address' => 'setPublicIpAddress',
        'vpc_id' => 'setVpcId',
        'vpc_name' => 'setVpcName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoint_id' => 'getEndpointId',
        'endpoint_name' => 'getEndpointName',
        'priave_domain' => 'getPriaveDomain',
        'private_ipv4_address' => 'getPrivateIpv4Address',
        'private_ipv6_address' => 'getPrivateIpv6Address',
        'public_domain' => 'getPublicDomain',
        'public_ip_address' => 'getPublicIpAddress',
        'vpc_id' => 'getVpcId',
        'vpc_name' => 'getVpcName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endpoint_id'] = isset($data['endpoint_id']) ? $data['endpoint_id'] : null;
        $this->container['endpoint_name'] = isset($data['endpoint_name']) ? $data['endpoint_name'] : null;
        $this->container['priave_domain'] = isset($data['priave_domain']) ? $data['priave_domain'] : null;
        $this->container['private_ipv4_address'] = isset($data['private_ipv4_address']) ? $data['private_ipv4_address'] : null;
        $this->container['private_ipv6_address'] = isset($data['private_ipv6_address']) ? $data['private_ipv6_address'] : null;
        $this->container['public_domain'] = isset($data['public_domain']) ? $data['public_domain'] : null;
        $this->container['public_ip_address'] = isset($data['public_ip_address']) ? $data['public_ip_address'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['vpc_name'] = isset($data['vpc_name']) ? $data['vpc_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoint_id
     *
     * @return string
     */
    public function getEndpointId()
    {
        return $this->container['endpoint_id'];
    }

    /**
     * Sets endpoint_id
     *
     * @param string $endpoint_id endpoint_id
     *
     * @return $this
     */
    public function setEndpointId($endpoint_id)
    {
        $this->container['endpoint_id'] = $endpoint_id;

        return $this;
    }

    /**
     * Gets endpoint_name
     *
     * @return string
     */
    public function getEndpointName()
    {
        return $this->container['endpoint_name'];
    }

    /**
     * Sets endpoint_name
     *
     * @param string $endpoint_name endpoint_name
     *
     * @return $this
     */
    public function setEndpointName($endpoint_name)
    {
        $this->container['endpoint_name'] = $endpoint_name;

        return $this;
    }

    /**
     * Gets priave_domain
     *
     * @return string
     */
    public function getPriaveDomain()
    {
        return $this->container['priave_domain'];
    }

    /**
     * Sets priave_domain
     *
     * @param string $priave_domain priave_domain
     *
     * @return $this
     */
    public function setPriaveDomain($priave_domain)
    {
        $this->container['priave_domain'] = $priave_domain;

        return $this;
    }

    /**
     * Gets private_ipv4_address
     *
     * @return string
     */
    public function getPrivateIpv4Address()
    {
        return $this->container['private_ipv4_address'];
    }

    /**
     * Sets private_ipv4_address
     *
     * @param string $private_ipv4_address private_ipv4_address
     *
     * @return $this
     */
    public function setPrivateIpv4Address($private_ipv4_address)
    {
        $this->container['private_ipv4_address'] = $private_ipv4_address;

        return $this;
    }

    /**
     * Gets private_ipv6_address
     *
     * @return string
     */
    public function getPrivateIpv6Address()
    {
        return $this->container['private_ipv6_address'];
    }

    /**
     * Sets private_ipv6_address
     *
     * @param string $private_ipv6_address private_ipv6_address
     *
     * @return $this
     */
    public function setPrivateIpv6Address($private_ipv6_address)
    {
        $this->container['private_ipv6_address'] = $private_ipv6_address;

        return $this;
    }

    /**
     * Gets public_domain
     *
     * @return string
     */
    public function getPublicDomain()
    {
        return $this->container['public_domain'];
    }

    /**
     * Sets public_domain
     *
     * @param string $public_domain public_domain
     *
     * @return $this
     */
    public function setPublicDomain($public_domain)
    {
        $this->container['public_domain'] = $public_domain;

        return $this;
    }

    /**
     * Gets public_ip_address
     *
     * @return string
     */
    public function getPublicIpAddress()
    {
        return $this->container['public_ip_address'];
    }

    /**
     * Sets public_ip_address
     *
     * @param string $public_ip_address public_ip_address
     *
     * @return $this
     */
    public function setPublicIpAddress($public_ip_address)
    {
        $this->container['public_ip_address'] = $public_ip_address;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets vpc_name
     *
     * @return string
     */
    public function getVpcName()
    {
        return $this->container['vpc_name'];
    }

    /**
     * Sets vpc_name
     *
     * @param string $vpc_name vpc_name
     *
     * @return $this
     */
    public function setVpcName($vpc_name)
    {
        $this->container['vpc_name'] = $vpc_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

