<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceSpecsInfoForDescribeDBInstanceSpecsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceSpecsInfoForDescribeDBInstanceSpecsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connection' => 'int',
        'db_engine_version' => 'string',
        'iops' => 'int',
        'instance_type' => 'string',
        'memory' => 'int',
        'qps' => 'int',
        'region_id' => 'string',
        'spec_code' => 'string',
        'spec_family' => 'string',
        'spec_status' => 'string',
        'storage_max' => 'int',
        'storage_min' => 'int',
        'storage_step' => 'int',
        'storage_type' => 'string',
        'vcpu' => 'int',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connection' => 'int32',
        'db_engine_version' => null,
        'iops' => 'int32',
        'instance_type' => null,
        'memory' => 'int32',
        'qps' => 'int32',
        'region_id' => null,
        'spec_code' => null,
        'spec_family' => null,
        'spec_status' => null,
        'storage_max' => 'int32',
        'storage_min' => 'int32',
        'storage_step' => 'int32',
        'storage_type' => null,
        'vcpu' => 'int32',
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection' => 'Connection',
        'db_engine_version' => 'DBEngineVersion',
        'iops' => 'IOPS',
        'instance_type' => 'InstanceType',
        'memory' => 'Memory',
        'qps' => 'QPS',
        'region_id' => 'RegionId',
        'spec_code' => 'SpecCode',
        'spec_family' => 'SpecFamily',
        'spec_status' => 'SpecStatus',
        'storage_max' => 'StorageMax',
        'storage_min' => 'StorageMin',
        'storage_step' => 'StorageStep',
        'storage_type' => 'StorageType',
        'vcpu' => 'VCPU',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection' => 'setConnection',
        'db_engine_version' => 'setDbEngineVersion',
        'iops' => 'setIops',
        'instance_type' => 'setInstanceType',
        'memory' => 'setMemory',
        'qps' => 'setQps',
        'region_id' => 'setRegionId',
        'spec_code' => 'setSpecCode',
        'spec_family' => 'setSpecFamily',
        'spec_status' => 'setSpecStatus',
        'storage_max' => 'setStorageMax',
        'storage_min' => 'setStorageMin',
        'storage_step' => 'setStorageStep',
        'storage_type' => 'setStorageType',
        'vcpu' => 'setVcpu',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection' => 'getConnection',
        'db_engine_version' => 'getDbEngineVersion',
        'iops' => 'getIops',
        'instance_type' => 'getInstanceType',
        'memory' => 'getMemory',
        'qps' => 'getQps',
        'region_id' => 'getRegionId',
        'spec_code' => 'getSpecCode',
        'spec_family' => 'getSpecFamily',
        'spec_status' => 'getSpecStatus',
        'storage_max' => 'getStorageMax',
        'storage_min' => 'getStorageMin',
        'storage_step' => 'getStorageStep',
        'storage_type' => 'getStorageType',
        'vcpu' => 'getVcpu',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['iops'] = isset($data['iops']) ? $data['iops'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['qps'] = isset($data['qps']) ? $data['qps'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['spec_code'] = isset($data['spec_code']) ? $data['spec_code'] : null;
        $this->container['spec_family'] = isset($data['spec_family']) ? $data['spec_family'] : null;
        $this->container['spec_status'] = isset($data['spec_status']) ? $data['spec_status'] : null;
        $this->container['storage_max'] = isset($data['storage_max']) ? $data['storage_max'] : null;
        $this->container['storage_min'] = isset($data['storage_min']) ? $data['storage_min'] : null;
        $this->container['storage_step'] = isset($data['storage_step']) ? $data['storage_step'] : null;
        $this->container['storage_type'] = isset($data['storage_type']) ? $data['storage_type'] : null;
        $this->container['vcpu'] = isset($data['vcpu']) ? $data['vcpu'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection
     *
     * @return int
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     *
     * @param int $connection connection
     *
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets iops
     *
     * @return int
     */
    public function getIops()
    {
        return $this->container['iops'];
    }

    /**
     * Sets iops
     *
     * @param int $iops iops
     *
     * @return $this
     */
    public function setIops($iops)
    {
        $this->container['iops'] = $iops;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets qps
     *
     * @return int
     */
    public function getQps()
    {
        return $this->container['qps'];
    }

    /**
     * Sets qps
     *
     * @param int $qps qps
     *
     * @return $this
     */
    public function setQps($qps)
    {
        $this->container['qps'] = $qps;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets spec_code
     *
     * @return string
     */
    public function getSpecCode()
    {
        return $this->container['spec_code'];
    }

    /**
     * Sets spec_code
     *
     * @param string $spec_code spec_code
     *
     * @return $this
     */
    public function setSpecCode($spec_code)
    {
        $this->container['spec_code'] = $spec_code;

        return $this;
    }

    /**
     * Gets spec_family
     *
     * @return string
     */
    public function getSpecFamily()
    {
        return $this->container['spec_family'];
    }

    /**
     * Sets spec_family
     *
     * @param string $spec_family spec_family
     *
     * @return $this
     */
    public function setSpecFamily($spec_family)
    {
        $this->container['spec_family'] = $spec_family;

        return $this;
    }

    /**
     * Gets spec_status
     *
     * @return string
     */
    public function getSpecStatus()
    {
        return $this->container['spec_status'];
    }

    /**
     * Sets spec_status
     *
     * @param string $spec_status spec_status
     *
     * @return $this
     */
    public function setSpecStatus($spec_status)
    {
        $this->container['spec_status'] = $spec_status;

        return $this;
    }

    /**
     * Gets storage_max
     *
     * @return int
     */
    public function getStorageMax()
    {
        return $this->container['storage_max'];
    }

    /**
     * Sets storage_max
     *
     * @param int $storage_max storage_max
     *
     * @return $this
     */
    public function setStorageMax($storage_max)
    {
        $this->container['storage_max'] = $storage_max;

        return $this;
    }

    /**
     * Gets storage_min
     *
     * @return int
     */
    public function getStorageMin()
    {
        return $this->container['storage_min'];
    }

    /**
     * Sets storage_min
     *
     * @param int $storage_min storage_min
     *
     * @return $this
     */
    public function setStorageMin($storage_min)
    {
        $this->container['storage_min'] = $storage_min;

        return $this;
    }

    /**
     * Gets storage_step
     *
     * @return int
     */
    public function getStorageStep()
    {
        return $this->container['storage_step'];
    }

    /**
     * Sets storage_step
     *
     * @param int $storage_step storage_step
     *
     * @return $this
     */
    public function setStorageStep($storage_step)
    {
        $this->container['storage_step'] = $storage_step;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string $storage_type storage_type
     *
     * @return $this
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets vcpu
     *
     * @return int
     */
    public function getVcpu()
    {
        return $this->container['vcpu'];
    }

    /**
     * Sets vcpu
     *
     * @param int $vcpu vcpu
     *
     * @return $this
     */
    public function setVcpu($vcpu)
    {
        $this->container['vcpu'] = $vcpu;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

