<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBProxyConfigResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBProxyConfigResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'binlog_dump' => 'bool',
        'check_modify_db_proxy_allowed' => '\Volcengine\Rdsmysqlv2\Model\CheckModifyDBProxyAllowedForDescribeDBProxyConfigOutput',
        'check_modify_db_proxy_allowed_v2' => '\Volcengine\Rdsmysqlv2\Model\CheckModifyDBProxyAllowedV2ForDescribeDBProxyConfigOutput[]',
        'connection_pool_type' => 'string',
        'db_proxy_status' => 'string',
        'feature_states' => '\Volcengine\Rdsmysqlv2\Model\FeatureStateForDescribeDBProxyConfigOutput[]',
        'global_read_only' => 'bool',
        'instance_id' => 'string',
        'proxy_resource_info' => '\Volcengine\Rdsmysqlv2\Model\ProxyResourceInfoForDescribeDBProxyConfigOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'binlog_dump' => null,
        'check_modify_db_proxy_allowed' => null,
        'check_modify_db_proxy_allowed_v2' => null,
        'connection_pool_type' => null,
        'db_proxy_status' => null,
        'feature_states' => null,
        'global_read_only' => null,
        'instance_id' => null,
        'proxy_resource_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'binlog_dump' => 'BinlogDump',
        'check_modify_db_proxy_allowed' => 'CheckModifyDBProxyAllowed',
        'check_modify_db_proxy_allowed_v2' => 'CheckModifyDBProxyAllowedV2',
        'connection_pool_type' => 'ConnectionPoolType',
        'db_proxy_status' => 'DBProxyStatus',
        'feature_states' => 'FeatureStates',
        'global_read_only' => 'GlobalReadOnly',
        'instance_id' => 'InstanceId',
        'proxy_resource_info' => 'ProxyResourceInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'binlog_dump' => 'setBinlogDump',
        'check_modify_db_proxy_allowed' => 'setCheckModifyDbProxyAllowed',
        'check_modify_db_proxy_allowed_v2' => 'setCheckModifyDbProxyAllowedV2',
        'connection_pool_type' => 'setConnectionPoolType',
        'db_proxy_status' => 'setDbProxyStatus',
        'feature_states' => 'setFeatureStates',
        'global_read_only' => 'setGlobalReadOnly',
        'instance_id' => 'setInstanceId',
        'proxy_resource_info' => 'setProxyResourceInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'binlog_dump' => 'getBinlogDump',
        'check_modify_db_proxy_allowed' => 'getCheckModifyDbProxyAllowed',
        'check_modify_db_proxy_allowed_v2' => 'getCheckModifyDbProxyAllowedV2',
        'connection_pool_type' => 'getConnectionPoolType',
        'db_proxy_status' => 'getDbProxyStatus',
        'feature_states' => 'getFeatureStates',
        'global_read_only' => 'getGlobalReadOnly',
        'instance_id' => 'getInstanceId',
        'proxy_resource_info' => 'getProxyResourceInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['binlog_dump'] = isset($data['binlog_dump']) ? $data['binlog_dump'] : null;
        $this->container['check_modify_db_proxy_allowed'] = isset($data['check_modify_db_proxy_allowed']) ? $data['check_modify_db_proxy_allowed'] : null;
        $this->container['check_modify_db_proxy_allowed_v2'] = isset($data['check_modify_db_proxy_allowed_v2']) ? $data['check_modify_db_proxy_allowed_v2'] : null;
        $this->container['connection_pool_type'] = isset($data['connection_pool_type']) ? $data['connection_pool_type'] : null;
        $this->container['db_proxy_status'] = isset($data['db_proxy_status']) ? $data['db_proxy_status'] : null;
        $this->container['feature_states'] = isset($data['feature_states']) ? $data['feature_states'] : null;
        $this->container['global_read_only'] = isset($data['global_read_only']) ? $data['global_read_only'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['proxy_resource_info'] = isset($data['proxy_resource_info']) ? $data['proxy_resource_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets binlog_dump
     *
     * @return bool
     */
    public function getBinlogDump()
    {
        return $this->container['binlog_dump'];
    }

    /**
     * Sets binlog_dump
     *
     * @param bool $binlog_dump binlog_dump
     *
     * @return $this
     */
    public function setBinlogDump($binlog_dump)
    {
        $this->container['binlog_dump'] = $binlog_dump;

        return $this;
    }

    /**
     * Gets check_modify_db_proxy_allowed
     *
     * @return \Volcengine\Rdsmysqlv2\Model\CheckModifyDBProxyAllowedForDescribeDBProxyConfigOutput
     */
    public function getCheckModifyDbProxyAllowed()
    {
        return $this->container['check_modify_db_proxy_allowed'];
    }

    /**
     * Sets check_modify_db_proxy_allowed
     *
     * @param \Volcengine\Rdsmysqlv2\Model\CheckModifyDBProxyAllowedForDescribeDBProxyConfigOutput $check_modify_db_proxy_allowed check_modify_db_proxy_allowed
     *
     * @return $this
     */
    public function setCheckModifyDbProxyAllowed($check_modify_db_proxy_allowed)
    {
        $this->container['check_modify_db_proxy_allowed'] = $check_modify_db_proxy_allowed;

        return $this;
    }

    /**
     * Gets check_modify_db_proxy_allowed_v2
     *
     * @return \Volcengine\Rdsmysqlv2\Model\CheckModifyDBProxyAllowedV2ForDescribeDBProxyConfigOutput[]
     */
    public function getCheckModifyDbProxyAllowedV2()
    {
        return $this->container['check_modify_db_proxy_allowed_v2'];
    }

    /**
     * Sets check_modify_db_proxy_allowed_v2
     *
     * @param \Volcengine\Rdsmysqlv2\Model\CheckModifyDBProxyAllowedV2ForDescribeDBProxyConfigOutput[] $check_modify_db_proxy_allowed_v2 check_modify_db_proxy_allowed_v2
     *
     * @return $this
     */
    public function setCheckModifyDbProxyAllowedV2($check_modify_db_proxy_allowed_v2)
    {
        $this->container['check_modify_db_proxy_allowed_v2'] = $check_modify_db_proxy_allowed_v2;

        return $this;
    }

    /**
     * Gets connection_pool_type
     *
     * @return string
     */
    public function getConnectionPoolType()
    {
        return $this->container['connection_pool_type'];
    }

    /**
     * Sets connection_pool_type
     *
     * @param string $connection_pool_type connection_pool_type
     *
     * @return $this
     */
    public function setConnectionPoolType($connection_pool_type)
    {
        $this->container['connection_pool_type'] = $connection_pool_type;

        return $this;
    }

    /**
     * Gets db_proxy_status
     *
     * @return string
     */
    public function getDbProxyStatus()
    {
        return $this->container['db_proxy_status'];
    }

    /**
     * Sets db_proxy_status
     *
     * @param string $db_proxy_status db_proxy_status
     *
     * @return $this
     */
    public function setDbProxyStatus($db_proxy_status)
    {
        $this->container['db_proxy_status'] = $db_proxy_status;

        return $this;
    }

    /**
     * Gets feature_states
     *
     * @return \Volcengine\Rdsmysqlv2\Model\FeatureStateForDescribeDBProxyConfigOutput[]
     */
    public function getFeatureStates()
    {
        return $this->container['feature_states'];
    }

    /**
     * Sets feature_states
     *
     * @param \Volcengine\Rdsmysqlv2\Model\FeatureStateForDescribeDBProxyConfigOutput[] $feature_states feature_states
     *
     * @return $this
     */
    public function setFeatureStates($feature_states)
    {
        $this->container['feature_states'] = $feature_states;

        return $this;
    }

    /**
     * Gets global_read_only
     *
     * @return bool
     */
    public function getGlobalReadOnly()
    {
        return $this->container['global_read_only'];
    }

    /**
     * Sets global_read_only
     *
     * @param bool $global_read_only global_read_only
     *
     * @return $this
     */
    public function setGlobalReadOnly($global_read_only)
    {
        $this->container['global_read_only'] = $global_read_only;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets proxy_resource_info
     *
     * @return \Volcengine\Rdsmysqlv2\Model\ProxyResourceInfoForDescribeDBProxyConfigOutput
     */
    public function getProxyResourceInfo()
    {
        return $this->container['proxy_resource_info'];
    }

    /**
     * Sets proxy_resource_info
     *
     * @param \Volcengine\Rdsmysqlv2\Model\ProxyResourceInfoForDescribeDBProxyConfigOutput $proxy_resource_info proxy_resource_info
     *
     * @return $this
     */
    public function setProxyResourceInfo($proxy_resource_info)
    {
        $this->container['proxy_resource_info'] = $proxy_resource_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

