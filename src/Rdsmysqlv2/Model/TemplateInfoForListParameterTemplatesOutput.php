<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TemplateInfoForListParameterTemplatesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateInfoForListParameterTemplatesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'create_time' => 'string',
        'need_restart' => 'bool',
        'parameter_num' => 'int',
        'project_name' => 'string',
        'template_category' => 'string',
        'template_desc' => 'string',
        'template_id' => 'string',
        'template_name' => 'string',
        'template_params' => '\Volcengine\Rdsmysqlv2\Model\TemplateParamForListParameterTemplatesOutput[]',
        'template_source' => 'string',
        'template_type' => 'string',
        'template_type_version' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'create_time' => null,
        'need_restart' => null,
        'parameter_num' => 'int64',
        'project_name' => null,
        'template_category' => null,
        'template_desc' => null,
        'template_id' => null,
        'template_name' => null,
        'template_params' => null,
        'template_source' => null,
        'template_type' => null,
        'template_type_version' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'create_time' => 'CreateTime',
        'need_restart' => 'NeedRestart',
        'parameter_num' => 'ParameterNum',
        'project_name' => 'ProjectName',
        'template_category' => 'TemplateCategory',
        'template_desc' => 'TemplateDesc',
        'template_id' => 'TemplateId',
        'template_name' => 'TemplateName',
        'template_params' => 'TemplateParams',
        'template_source' => 'TemplateSource',
        'template_type' => 'TemplateType',
        'template_type_version' => 'TemplateTypeVersion',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'create_time' => 'setCreateTime',
        'need_restart' => 'setNeedRestart',
        'parameter_num' => 'setParameterNum',
        'project_name' => 'setProjectName',
        'template_category' => 'setTemplateCategory',
        'template_desc' => 'setTemplateDesc',
        'template_id' => 'setTemplateId',
        'template_name' => 'setTemplateName',
        'template_params' => 'setTemplateParams',
        'template_source' => 'setTemplateSource',
        'template_type' => 'setTemplateType',
        'template_type_version' => 'setTemplateTypeVersion',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'create_time' => 'getCreateTime',
        'need_restart' => 'getNeedRestart',
        'parameter_num' => 'getParameterNum',
        'project_name' => 'getProjectName',
        'template_category' => 'getTemplateCategory',
        'template_desc' => 'getTemplateDesc',
        'template_id' => 'getTemplateId',
        'template_name' => 'getTemplateName',
        'template_params' => 'getTemplateParams',
        'template_source' => 'getTemplateSource',
        'template_type' => 'getTemplateType',
        'template_type_version' => 'getTemplateTypeVersion',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['need_restart'] = isset($data['need_restart']) ? $data['need_restart'] : null;
        $this->container['parameter_num'] = isset($data['parameter_num']) ? $data['parameter_num'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['template_category'] = isset($data['template_category']) ? $data['template_category'] : null;
        $this->container['template_desc'] = isset($data['template_desc']) ? $data['template_desc'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['template_params'] = isset($data['template_params']) ? $data['template_params'] : null;
        $this->container['template_source'] = isset($data['template_source']) ? $data['template_source'] : null;
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
        $this->container['template_type_version'] = isset($data['template_type_version']) ? $data['template_type_version'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets need_restart
     *
     * @return bool
     */
    public function getNeedRestart()
    {
        return $this->container['need_restart'];
    }

    /**
     * Sets need_restart
     *
     * @param bool $need_restart need_restart
     *
     * @return $this
     */
    public function setNeedRestart($need_restart)
    {
        $this->container['need_restart'] = $need_restart;

        return $this;
    }

    /**
     * Gets parameter_num
     *
     * @return int
     */
    public function getParameterNum()
    {
        return $this->container['parameter_num'];
    }

    /**
     * Sets parameter_num
     *
     * @param int $parameter_num parameter_num
     *
     * @return $this
     */
    public function setParameterNum($parameter_num)
    {
        $this->container['parameter_num'] = $parameter_num;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets template_category
     *
     * @return string
     */
    public function getTemplateCategory()
    {
        return $this->container['template_category'];
    }

    /**
     * Sets template_category
     *
     * @param string $template_category template_category
     *
     * @return $this
     */
    public function setTemplateCategory($template_category)
    {
        $this->container['template_category'] = $template_category;

        return $this;
    }

    /**
     * Gets template_desc
     *
     * @return string
     */
    public function getTemplateDesc()
    {
        return $this->container['template_desc'];
    }

    /**
     * Sets template_desc
     *
     * @param string $template_desc template_desc
     *
     * @return $this
     */
    public function setTemplateDesc($template_desc)
    {
        $this->container['template_desc'] = $template_desc;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name template_name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets template_params
     *
     * @return \Volcengine\Rdsmysqlv2\Model\TemplateParamForListParameterTemplatesOutput[]
     */
    public function getTemplateParams()
    {
        return $this->container['template_params'];
    }

    /**
     * Sets template_params
     *
     * @param \Volcengine\Rdsmysqlv2\Model\TemplateParamForListParameterTemplatesOutput[] $template_params template_params
     *
     * @return $this
     */
    public function setTemplateParams($template_params)
    {
        $this->container['template_params'] = $template_params;

        return $this;
    }

    /**
     * Gets template_source
     *
     * @return string
     */
    public function getTemplateSource()
    {
        return $this->container['template_source'];
    }

    /**
     * Sets template_source
     *
     * @param string $template_source template_source
     *
     * @return $this
     */
    public function setTemplateSource($template_source)
    {
        $this->container['template_source'] = $template_source;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string $template_type template_type
     *
     * @return $this
     */
    public function setTemplateType($template_type)
    {
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets template_type_version
     *
     * @return string
     */
    public function getTemplateTypeVersion()
    {
        return $this->container['template_type_version'];
    }

    /**
     * Sets template_type_version
     *
     * @param string $template_type_version template_type_version
     *
     * @return $this
     */
    public function setTemplateTypeVersion($template_type_version)
    {
        $this->container['template_type_version'] = $template_type_version;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

