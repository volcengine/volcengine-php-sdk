<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyDBEndpointRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyDBEndpointRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_add_new_nodes' => 'bool',
        'connect_all_slave_nodes' => 'bool',
        'connection_pool_type' => 'string',
        'description' => 'string',
        'enable_connection_persistent' => 'bool',
        'endpoint_id' => 'string',
        'endpoint_name' => 'string',
        'idle_connection_reclaim' => 'bool',
        'implicit_trans_split' => 'bool',
        'instance_id' => 'string',
        'master_node_routing' => 'bool',
        'master_protector_timeout' => 'int',
        'multi_statements_mode' => 'string',
        'nodes' => 'string',
        'overload_protection' => 'bool',
        'read_only_node_distribution_type' => 'string',
        'read_only_node_max_delay_time' => 'int',
        'read_only_node_weight' => '\Volcengine\Rdsmysqlv2\Model\ReadOnlyNodeWeightForModifyDBEndpointInput[]',
        'read_write_mode' => 'string',
        'read_write_spliting' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_add_new_nodes' => null,
        'connect_all_slave_nodes' => null,
        'connection_pool_type' => null,
        'description' => null,
        'enable_connection_persistent' => null,
        'endpoint_id' => null,
        'endpoint_name' => null,
        'idle_connection_reclaim' => null,
        'implicit_trans_split' => null,
        'instance_id' => null,
        'master_node_routing' => null,
        'master_protector_timeout' => 'int32',
        'multi_statements_mode' => null,
        'nodes' => null,
        'overload_protection' => null,
        'read_only_node_distribution_type' => null,
        'read_only_node_max_delay_time' => 'int32',
        'read_only_node_weight' => null,
        'read_write_mode' => null,
        'read_write_spliting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_add_new_nodes' => 'AutoAddNewNodes',
        'connect_all_slave_nodes' => 'ConnectAllSlaveNodes',
        'connection_pool_type' => 'ConnectionPoolType',
        'description' => 'Description',
        'enable_connection_persistent' => 'EnableConnectionPersistent',
        'endpoint_id' => 'EndpointId',
        'endpoint_name' => 'EndpointName',
        'idle_connection_reclaim' => 'IdleConnectionReclaim',
        'implicit_trans_split' => 'ImplicitTransSplit',
        'instance_id' => 'InstanceId',
        'master_node_routing' => 'MasterNodeRouting',
        'master_protector_timeout' => 'MasterProtectorTimeout',
        'multi_statements_mode' => 'MultiStatementsMode',
        'nodes' => 'Nodes',
        'overload_protection' => 'OverloadProtection',
        'read_only_node_distribution_type' => 'ReadOnlyNodeDistributionType',
        'read_only_node_max_delay_time' => 'ReadOnlyNodeMaxDelayTime',
        'read_only_node_weight' => 'ReadOnlyNodeWeight',
        'read_write_mode' => 'ReadWriteMode',
        'read_write_spliting' => 'ReadWriteSpliting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_add_new_nodes' => 'setAutoAddNewNodes',
        'connect_all_slave_nodes' => 'setConnectAllSlaveNodes',
        'connection_pool_type' => 'setConnectionPoolType',
        'description' => 'setDescription',
        'enable_connection_persistent' => 'setEnableConnectionPersistent',
        'endpoint_id' => 'setEndpointId',
        'endpoint_name' => 'setEndpointName',
        'idle_connection_reclaim' => 'setIdleConnectionReclaim',
        'implicit_trans_split' => 'setImplicitTransSplit',
        'instance_id' => 'setInstanceId',
        'master_node_routing' => 'setMasterNodeRouting',
        'master_protector_timeout' => 'setMasterProtectorTimeout',
        'multi_statements_mode' => 'setMultiStatementsMode',
        'nodes' => 'setNodes',
        'overload_protection' => 'setOverloadProtection',
        'read_only_node_distribution_type' => 'setReadOnlyNodeDistributionType',
        'read_only_node_max_delay_time' => 'setReadOnlyNodeMaxDelayTime',
        'read_only_node_weight' => 'setReadOnlyNodeWeight',
        'read_write_mode' => 'setReadWriteMode',
        'read_write_spliting' => 'setReadWriteSpliting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_add_new_nodes' => 'getAutoAddNewNodes',
        'connect_all_slave_nodes' => 'getConnectAllSlaveNodes',
        'connection_pool_type' => 'getConnectionPoolType',
        'description' => 'getDescription',
        'enable_connection_persistent' => 'getEnableConnectionPersistent',
        'endpoint_id' => 'getEndpointId',
        'endpoint_name' => 'getEndpointName',
        'idle_connection_reclaim' => 'getIdleConnectionReclaim',
        'implicit_trans_split' => 'getImplicitTransSplit',
        'instance_id' => 'getInstanceId',
        'master_node_routing' => 'getMasterNodeRouting',
        'master_protector_timeout' => 'getMasterProtectorTimeout',
        'multi_statements_mode' => 'getMultiStatementsMode',
        'nodes' => 'getNodes',
        'overload_protection' => 'getOverloadProtection',
        'read_only_node_distribution_type' => 'getReadOnlyNodeDistributionType',
        'read_only_node_max_delay_time' => 'getReadOnlyNodeMaxDelayTime',
        'read_only_node_weight' => 'getReadOnlyNodeWeight',
        'read_write_mode' => 'getReadWriteMode',
        'read_write_spliting' => 'getReadWriteSpliting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_add_new_nodes'] = isset($data['auto_add_new_nodes']) ? $data['auto_add_new_nodes'] : null;
        $this->container['connect_all_slave_nodes'] = isset($data['connect_all_slave_nodes']) ? $data['connect_all_slave_nodes'] : null;
        $this->container['connection_pool_type'] = isset($data['connection_pool_type']) ? $data['connection_pool_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enable_connection_persistent'] = isset($data['enable_connection_persistent']) ? $data['enable_connection_persistent'] : null;
        $this->container['endpoint_id'] = isset($data['endpoint_id']) ? $data['endpoint_id'] : null;
        $this->container['endpoint_name'] = isset($data['endpoint_name']) ? $data['endpoint_name'] : null;
        $this->container['idle_connection_reclaim'] = isset($data['idle_connection_reclaim']) ? $data['idle_connection_reclaim'] : null;
        $this->container['implicit_trans_split'] = isset($data['implicit_trans_split']) ? $data['implicit_trans_split'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['master_node_routing'] = isset($data['master_node_routing']) ? $data['master_node_routing'] : null;
        $this->container['master_protector_timeout'] = isset($data['master_protector_timeout']) ? $data['master_protector_timeout'] : null;
        $this->container['multi_statements_mode'] = isset($data['multi_statements_mode']) ? $data['multi_statements_mode'] : null;
        $this->container['nodes'] = isset($data['nodes']) ? $data['nodes'] : null;
        $this->container['overload_protection'] = isset($data['overload_protection']) ? $data['overload_protection'] : null;
        $this->container['read_only_node_distribution_type'] = isset($data['read_only_node_distribution_type']) ? $data['read_only_node_distribution_type'] : null;
        $this->container['read_only_node_max_delay_time'] = isset($data['read_only_node_max_delay_time']) ? $data['read_only_node_max_delay_time'] : null;
        $this->container['read_only_node_weight'] = isset($data['read_only_node_weight']) ? $data['read_only_node_weight'] : null;
        $this->container['read_write_mode'] = isset($data['read_write_mode']) ? $data['read_write_mode'] : null;
        $this->container['read_write_spliting'] = isset($data['read_write_spliting']) ? $data['read_write_spliting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['endpoint_id'] === null) {
            $invalidProperties[] = "'endpoint_id' can't be null";
        }
        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_add_new_nodes
     *
     * @return bool
     */
    public function getAutoAddNewNodes()
    {
        return $this->container['auto_add_new_nodes'];
    }

    /**
     * Sets auto_add_new_nodes
     *
     * @param bool $auto_add_new_nodes auto_add_new_nodes
     *
     * @return $this
     */
    public function setAutoAddNewNodes($auto_add_new_nodes)
    {
        $this->container['auto_add_new_nodes'] = $auto_add_new_nodes;

        return $this;
    }

    /**
     * Gets connect_all_slave_nodes
     *
     * @return bool
     */
    public function getConnectAllSlaveNodes()
    {
        return $this->container['connect_all_slave_nodes'];
    }

    /**
     * Sets connect_all_slave_nodes
     *
     * @param bool $connect_all_slave_nodes connect_all_slave_nodes
     *
     * @return $this
     */
    public function setConnectAllSlaveNodes($connect_all_slave_nodes)
    {
        $this->container['connect_all_slave_nodes'] = $connect_all_slave_nodes;

        return $this;
    }

    /**
     * Gets connection_pool_type
     *
     * @return string
     */
    public function getConnectionPoolType()
    {
        return $this->container['connection_pool_type'];
    }

    /**
     * Sets connection_pool_type
     *
     * @param string $connection_pool_type connection_pool_type
     *
     * @return $this
     */
    public function setConnectionPoolType($connection_pool_type)
    {
        $this->container['connection_pool_type'] = $connection_pool_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enable_connection_persistent
     *
     * @return bool
     */
    public function getEnableConnectionPersistent()
    {
        return $this->container['enable_connection_persistent'];
    }

    /**
     * Sets enable_connection_persistent
     *
     * @param bool $enable_connection_persistent enable_connection_persistent
     *
     * @return $this
     */
    public function setEnableConnectionPersistent($enable_connection_persistent)
    {
        $this->container['enable_connection_persistent'] = $enable_connection_persistent;

        return $this;
    }

    /**
     * Gets endpoint_id
     *
     * @return string
     */
    public function getEndpointId()
    {
        return $this->container['endpoint_id'];
    }

    /**
     * Sets endpoint_id
     *
     * @param string $endpoint_id endpoint_id
     *
     * @return $this
     */
    public function setEndpointId($endpoint_id)
    {
        $this->container['endpoint_id'] = $endpoint_id;

        return $this;
    }

    /**
     * Gets endpoint_name
     *
     * @return string
     */
    public function getEndpointName()
    {
        return $this->container['endpoint_name'];
    }

    /**
     * Sets endpoint_name
     *
     * @param string $endpoint_name endpoint_name
     *
     * @return $this
     */
    public function setEndpointName($endpoint_name)
    {
        $this->container['endpoint_name'] = $endpoint_name;

        return $this;
    }

    /**
     * Gets idle_connection_reclaim
     *
     * @return bool
     */
    public function getIdleConnectionReclaim()
    {
        return $this->container['idle_connection_reclaim'];
    }

    /**
     * Sets idle_connection_reclaim
     *
     * @param bool $idle_connection_reclaim idle_connection_reclaim
     *
     * @return $this
     */
    public function setIdleConnectionReclaim($idle_connection_reclaim)
    {
        $this->container['idle_connection_reclaim'] = $idle_connection_reclaim;

        return $this;
    }

    /**
     * Gets implicit_trans_split
     *
     * @return bool
     */
    public function getImplicitTransSplit()
    {
        return $this->container['implicit_trans_split'];
    }

    /**
     * Sets implicit_trans_split
     *
     * @param bool $implicit_trans_split implicit_trans_split
     *
     * @return $this
     */
    public function setImplicitTransSplit($implicit_trans_split)
    {
        $this->container['implicit_trans_split'] = $implicit_trans_split;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets master_node_routing
     *
     * @return bool
     */
    public function getMasterNodeRouting()
    {
        return $this->container['master_node_routing'];
    }

    /**
     * Sets master_node_routing
     *
     * @param bool $master_node_routing master_node_routing
     *
     * @return $this
     */
    public function setMasterNodeRouting($master_node_routing)
    {
        $this->container['master_node_routing'] = $master_node_routing;

        return $this;
    }

    /**
     * Gets master_protector_timeout
     *
     * @return int
     */
    public function getMasterProtectorTimeout()
    {
        return $this->container['master_protector_timeout'];
    }

    /**
     * Sets master_protector_timeout
     *
     * @param int $master_protector_timeout master_protector_timeout
     *
     * @return $this
     */
    public function setMasterProtectorTimeout($master_protector_timeout)
    {
        $this->container['master_protector_timeout'] = $master_protector_timeout;

        return $this;
    }

    /**
     * Gets multi_statements_mode
     *
     * @return string
     */
    public function getMultiStatementsMode()
    {
        return $this->container['multi_statements_mode'];
    }

    /**
     * Sets multi_statements_mode
     *
     * @param string $multi_statements_mode multi_statements_mode
     *
     * @return $this
     */
    public function setMultiStatementsMode($multi_statements_mode)
    {
        $this->container['multi_statements_mode'] = $multi_statements_mode;

        return $this;
    }

    /**
     * Gets nodes
     *
     * @return string
     */
    public function getNodes()
    {
        return $this->container['nodes'];
    }

    /**
     * Sets nodes
     *
     * @param string $nodes nodes
     *
     * @return $this
     */
    public function setNodes($nodes)
    {
        $this->container['nodes'] = $nodes;

        return $this;
    }

    /**
     * Gets overload_protection
     *
     * @return bool
     */
    public function getOverloadProtection()
    {
        return $this->container['overload_protection'];
    }

    /**
     * Sets overload_protection
     *
     * @param bool $overload_protection overload_protection
     *
     * @return $this
     */
    public function setOverloadProtection($overload_protection)
    {
        $this->container['overload_protection'] = $overload_protection;

        return $this;
    }

    /**
     * Gets read_only_node_distribution_type
     *
     * @return string
     */
    public function getReadOnlyNodeDistributionType()
    {
        return $this->container['read_only_node_distribution_type'];
    }

    /**
     * Sets read_only_node_distribution_type
     *
     * @param string $read_only_node_distribution_type read_only_node_distribution_type
     *
     * @return $this
     */
    public function setReadOnlyNodeDistributionType($read_only_node_distribution_type)
    {
        $this->container['read_only_node_distribution_type'] = $read_only_node_distribution_type;

        return $this;
    }

    /**
     * Gets read_only_node_max_delay_time
     *
     * @return int
     */
    public function getReadOnlyNodeMaxDelayTime()
    {
        return $this->container['read_only_node_max_delay_time'];
    }

    /**
     * Sets read_only_node_max_delay_time
     *
     * @param int $read_only_node_max_delay_time read_only_node_max_delay_time
     *
     * @return $this
     */
    public function setReadOnlyNodeMaxDelayTime($read_only_node_max_delay_time)
    {
        $this->container['read_only_node_max_delay_time'] = $read_only_node_max_delay_time;

        return $this;
    }

    /**
     * Gets read_only_node_weight
     *
     * @return \Volcengine\Rdsmysqlv2\Model\ReadOnlyNodeWeightForModifyDBEndpointInput[]
     */
    public function getReadOnlyNodeWeight()
    {
        return $this->container['read_only_node_weight'];
    }

    /**
     * Sets read_only_node_weight
     *
     * @param \Volcengine\Rdsmysqlv2\Model\ReadOnlyNodeWeightForModifyDBEndpointInput[] $read_only_node_weight read_only_node_weight
     *
     * @return $this
     */
    public function setReadOnlyNodeWeight($read_only_node_weight)
    {
        $this->container['read_only_node_weight'] = $read_only_node_weight;

        return $this;
    }

    /**
     * Gets read_write_mode
     *
     * @return string
     */
    public function getReadWriteMode()
    {
        return $this->container['read_write_mode'];
    }

    /**
     * Sets read_write_mode
     *
     * @param string $read_write_mode read_write_mode
     *
     * @return $this
     */
    public function setReadWriteMode($read_write_mode)
    {
        $this->container['read_write_mode'] = $read_write_mode;

        return $this;
    }

    /**
     * Gets read_write_spliting
     *
     * @return bool
     */
    public function getReadWriteSpliting()
    {
        return $this->container['read_write_spliting'];
    }

    /**
     * Sets read_write_spliting
     *
     * @param bool $read_write_spliting read_write_spliting
     *
     * @return $this
     */
    public function setReadWriteSpliting($read_write_spliting)
    {
        $this->container['read_write_spliting'] = $read_write_spliting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

