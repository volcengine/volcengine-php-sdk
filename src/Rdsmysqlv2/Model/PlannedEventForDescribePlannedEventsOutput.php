<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PlannedEventForDescribePlannedEventsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlannedEventForDescribePlannedEventsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_impact' => 'string',
        'db_engine' => 'string',
        'event_action' => 'string',
        'event_id' => 'string',
        'event_name' => 'string',
        'event_type' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'max_delay_time' => 'string',
        'origin_begin_time' => 'string',
        'planned_begin_time' => 'string',
        'planned_end_time' => 'string',
        'planned_event_description' => 'string',
        'planned_event_reason' => 'string',
        'planned_switch_begin_time' => 'string',
        'planned_switch_end_time' => 'string',
        'region' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'business_impact' => null,
        'db_engine' => null,
        'event_action' => null,
        'event_id' => null,
        'event_name' => null,
        'event_type' => null,
        'instance_id' => null,
        'instance_name' => null,
        'max_delay_time' => null,
        'origin_begin_time' => null,
        'planned_begin_time' => null,
        'planned_end_time' => null,
        'planned_event_description' => null,
        'planned_event_reason' => null,
        'planned_switch_begin_time' => null,
        'planned_switch_end_time' => null,
        'region' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_impact' => 'BusinessImpact',
        'db_engine' => 'DBEngine',
        'event_action' => 'EventAction',
        'event_id' => 'EventID',
        'event_name' => 'EventName',
        'event_type' => 'EventType',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'max_delay_time' => 'MaxDelayTime',
        'origin_begin_time' => 'OriginBeginTime',
        'planned_begin_time' => 'PlannedBeginTime',
        'planned_end_time' => 'PlannedEndTime',
        'planned_event_description' => 'PlannedEventDescription',
        'planned_event_reason' => 'PlannedEventReason',
        'planned_switch_begin_time' => 'PlannedSwitchBeginTime',
        'planned_switch_end_time' => 'PlannedSwitchEndTime',
        'region' => 'Region',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_impact' => 'setBusinessImpact',
        'db_engine' => 'setDbEngine',
        'event_action' => 'setEventAction',
        'event_id' => 'setEventId',
        'event_name' => 'setEventName',
        'event_type' => 'setEventType',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'max_delay_time' => 'setMaxDelayTime',
        'origin_begin_time' => 'setOriginBeginTime',
        'planned_begin_time' => 'setPlannedBeginTime',
        'planned_end_time' => 'setPlannedEndTime',
        'planned_event_description' => 'setPlannedEventDescription',
        'planned_event_reason' => 'setPlannedEventReason',
        'planned_switch_begin_time' => 'setPlannedSwitchBeginTime',
        'planned_switch_end_time' => 'setPlannedSwitchEndTime',
        'region' => 'setRegion',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_impact' => 'getBusinessImpact',
        'db_engine' => 'getDbEngine',
        'event_action' => 'getEventAction',
        'event_id' => 'getEventId',
        'event_name' => 'getEventName',
        'event_type' => 'getEventType',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'max_delay_time' => 'getMaxDelayTime',
        'origin_begin_time' => 'getOriginBeginTime',
        'planned_begin_time' => 'getPlannedBeginTime',
        'planned_end_time' => 'getPlannedEndTime',
        'planned_event_description' => 'getPlannedEventDescription',
        'planned_event_reason' => 'getPlannedEventReason',
        'planned_switch_begin_time' => 'getPlannedSwitchBeginTime',
        'planned_switch_end_time' => 'getPlannedSwitchEndTime',
        'region' => 'getRegion',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_impact'] = isset($data['business_impact']) ? $data['business_impact'] : null;
        $this->container['db_engine'] = isset($data['db_engine']) ? $data['db_engine'] : null;
        $this->container['event_action'] = isset($data['event_action']) ? $data['event_action'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['max_delay_time'] = isset($data['max_delay_time']) ? $data['max_delay_time'] : null;
        $this->container['origin_begin_time'] = isset($data['origin_begin_time']) ? $data['origin_begin_time'] : null;
        $this->container['planned_begin_time'] = isset($data['planned_begin_time']) ? $data['planned_begin_time'] : null;
        $this->container['planned_end_time'] = isset($data['planned_end_time']) ? $data['planned_end_time'] : null;
        $this->container['planned_event_description'] = isset($data['planned_event_description']) ? $data['planned_event_description'] : null;
        $this->container['planned_event_reason'] = isset($data['planned_event_reason']) ? $data['planned_event_reason'] : null;
        $this->container['planned_switch_begin_time'] = isset($data['planned_switch_begin_time']) ? $data['planned_switch_begin_time'] : null;
        $this->container['planned_switch_end_time'] = isset($data['planned_switch_end_time']) ? $data['planned_switch_end_time'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_impact
     *
     * @return string
     */
    public function getBusinessImpact()
    {
        return $this->container['business_impact'];
    }

    /**
     * Sets business_impact
     *
     * @param string $business_impact business_impact
     *
     * @return $this
     */
    public function setBusinessImpact($business_impact)
    {
        $this->container['business_impact'] = $business_impact;

        return $this;
    }

    /**
     * Gets db_engine
     *
     * @return string
     */
    public function getDbEngine()
    {
        return $this->container['db_engine'];
    }

    /**
     * Sets db_engine
     *
     * @param string $db_engine db_engine
     *
     * @return $this
     */
    public function setDbEngine($db_engine)
    {
        $this->container['db_engine'] = $db_engine;

        return $this;
    }

    /**
     * Gets event_action
     *
     * @return string
     */
    public function getEventAction()
    {
        return $this->container['event_action'];
    }

    /**
     * Sets event_action
     *
     * @param string $event_action event_action
     *
     * @return $this
     */
    public function setEventAction($event_action)
    {
        $this->container['event_action'] = $event_action;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name event_name
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type event_type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets max_delay_time
     *
     * @return string
     */
    public function getMaxDelayTime()
    {
        return $this->container['max_delay_time'];
    }

    /**
     * Sets max_delay_time
     *
     * @param string $max_delay_time max_delay_time
     *
     * @return $this
     */
    public function setMaxDelayTime($max_delay_time)
    {
        $this->container['max_delay_time'] = $max_delay_time;

        return $this;
    }

    /**
     * Gets origin_begin_time
     *
     * @return string
     */
    public function getOriginBeginTime()
    {
        return $this->container['origin_begin_time'];
    }

    /**
     * Sets origin_begin_time
     *
     * @param string $origin_begin_time origin_begin_time
     *
     * @return $this
     */
    public function setOriginBeginTime($origin_begin_time)
    {
        $this->container['origin_begin_time'] = $origin_begin_time;

        return $this;
    }

    /**
     * Gets planned_begin_time
     *
     * @return string
     */
    public function getPlannedBeginTime()
    {
        return $this->container['planned_begin_time'];
    }

    /**
     * Sets planned_begin_time
     *
     * @param string $planned_begin_time planned_begin_time
     *
     * @return $this
     */
    public function setPlannedBeginTime($planned_begin_time)
    {
        $this->container['planned_begin_time'] = $planned_begin_time;

        return $this;
    }

    /**
     * Gets planned_end_time
     *
     * @return string
     */
    public function getPlannedEndTime()
    {
        return $this->container['planned_end_time'];
    }

    /**
     * Sets planned_end_time
     *
     * @param string $planned_end_time planned_end_time
     *
     * @return $this
     */
    public function setPlannedEndTime($planned_end_time)
    {
        $this->container['planned_end_time'] = $planned_end_time;

        return $this;
    }

    /**
     * Gets planned_event_description
     *
     * @return string
     */
    public function getPlannedEventDescription()
    {
        return $this->container['planned_event_description'];
    }

    /**
     * Sets planned_event_description
     *
     * @param string $planned_event_description planned_event_description
     *
     * @return $this
     */
    public function setPlannedEventDescription($planned_event_description)
    {
        $this->container['planned_event_description'] = $planned_event_description;

        return $this;
    }

    /**
     * Gets planned_event_reason
     *
     * @return string
     */
    public function getPlannedEventReason()
    {
        return $this->container['planned_event_reason'];
    }

    /**
     * Sets planned_event_reason
     *
     * @param string $planned_event_reason planned_event_reason
     *
     * @return $this
     */
    public function setPlannedEventReason($planned_event_reason)
    {
        $this->container['planned_event_reason'] = $planned_event_reason;

        return $this;
    }

    /**
     * Gets planned_switch_begin_time
     *
     * @return string
     */
    public function getPlannedSwitchBeginTime()
    {
        return $this->container['planned_switch_begin_time'];
    }

    /**
     * Sets planned_switch_begin_time
     *
     * @param string $planned_switch_begin_time planned_switch_begin_time
     *
     * @return $this
     */
    public function setPlannedSwitchBeginTime($planned_switch_begin_time)
    {
        $this->container['planned_switch_begin_time'] = $planned_switch_begin_time;

        return $this;
    }

    /**
     * Gets planned_switch_end_time
     *
     * @return string
     */
    public function getPlannedSwitchEndTime()
    {
        return $this->container['planned_switch_end_time'];
    }

    /**
     * Sets planned_switch_end_time
     *
     * @param string $planned_switch_end_time planned_switch_end_time
     *
     * @return $this
     */
    public function setPlannedSwitchEndTime($planned_switch_end_time)
    {
        $this->container['planned_switch_end_time'] = $planned_switch_end_time;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

