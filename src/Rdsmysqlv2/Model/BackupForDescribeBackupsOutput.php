<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BackupForDescribeBackupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BackupForDescribeBackupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_end_time' => 'string',
        'backup_file_name' => 'string',
        'backup_file_size' => 'int',
        'backup_id' => 'string',
        'backup_method' => 'string',
        'backup_region' => 'string',
        'backup_start_time' => 'string',
        'backup_status' => 'string',
        'backup_type' => 'string',
        'consistent_time' => 'string',
        'create_type' => 'string',
        'db_engine_version' => 'string',
        'db_table_infos' => '\Volcengine\Rdsmysqlv2\Model\DBTableInfoForDescribeBackupsOutput[]',
        'download_status' => 'string',
        'error_message' => 'string',
        'expired_time' => 'string',
        'is_encrypted' => 'bool',
        'is_expired' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_end_time' => null,
        'backup_file_name' => null,
        'backup_file_size' => 'int64',
        'backup_id' => null,
        'backup_method' => null,
        'backup_region' => null,
        'backup_start_time' => null,
        'backup_status' => null,
        'backup_type' => null,
        'consistent_time' => null,
        'create_type' => null,
        'db_engine_version' => null,
        'db_table_infos' => null,
        'download_status' => null,
        'error_message' => null,
        'expired_time' => null,
        'is_encrypted' => null,
        'is_expired' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_end_time' => 'BackupEndTime',
        'backup_file_name' => 'BackupFileName',
        'backup_file_size' => 'BackupFileSize',
        'backup_id' => 'BackupId',
        'backup_method' => 'BackupMethod',
        'backup_region' => 'BackupRegion',
        'backup_start_time' => 'BackupStartTime',
        'backup_status' => 'BackupStatus',
        'backup_type' => 'BackupType',
        'consistent_time' => 'ConsistentTime',
        'create_type' => 'CreateType',
        'db_engine_version' => 'DBEngineVersion',
        'db_table_infos' => 'DBTableInfos',
        'download_status' => 'DownloadStatus',
        'error_message' => 'ErrorMessage',
        'expired_time' => 'ExpiredTime',
        'is_encrypted' => 'IsEncrypted',
        'is_expired' => 'IsExpired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_end_time' => 'setBackupEndTime',
        'backup_file_name' => 'setBackupFileName',
        'backup_file_size' => 'setBackupFileSize',
        'backup_id' => 'setBackupId',
        'backup_method' => 'setBackupMethod',
        'backup_region' => 'setBackupRegion',
        'backup_start_time' => 'setBackupStartTime',
        'backup_status' => 'setBackupStatus',
        'backup_type' => 'setBackupType',
        'consistent_time' => 'setConsistentTime',
        'create_type' => 'setCreateType',
        'db_engine_version' => 'setDbEngineVersion',
        'db_table_infos' => 'setDbTableInfos',
        'download_status' => 'setDownloadStatus',
        'error_message' => 'setErrorMessage',
        'expired_time' => 'setExpiredTime',
        'is_encrypted' => 'setIsEncrypted',
        'is_expired' => 'setIsExpired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_end_time' => 'getBackupEndTime',
        'backup_file_name' => 'getBackupFileName',
        'backup_file_size' => 'getBackupFileSize',
        'backup_id' => 'getBackupId',
        'backup_method' => 'getBackupMethod',
        'backup_region' => 'getBackupRegion',
        'backup_start_time' => 'getBackupStartTime',
        'backup_status' => 'getBackupStatus',
        'backup_type' => 'getBackupType',
        'consistent_time' => 'getConsistentTime',
        'create_type' => 'getCreateType',
        'db_engine_version' => 'getDbEngineVersion',
        'db_table_infos' => 'getDbTableInfos',
        'download_status' => 'getDownloadStatus',
        'error_message' => 'getErrorMessage',
        'expired_time' => 'getExpiredTime',
        'is_encrypted' => 'getIsEncrypted',
        'is_expired' => 'getIsExpired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_end_time'] = isset($data['backup_end_time']) ? $data['backup_end_time'] : null;
        $this->container['backup_file_name'] = isset($data['backup_file_name']) ? $data['backup_file_name'] : null;
        $this->container['backup_file_size'] = isset($data['backup_file_size']) ? $data['backup_file_size'] : null;
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['backup_method'] = isset($data['backup_method']) ? $data['backup_method'] : null;
        $this->container['backup_region'] = isset($data['backup_region']) ? $data['backup_region'] : null;
        $this->container['backup_start_time'] = isset($data['backup_start_time']) ? $data['backup_start_time'] : null;
        $this->container['backup_status'] = isset($data['backup_status']) ? $data['backup_status'] : null;
        $this->container['backup_type'] = isset($data['backup_type']) ? $data['backup_type'] : null;
        $this->container['consistent_time'] = isset($data['consistent_time']) ? $data['consistent_time'] : null;
        $this->container['create_type'] = isset($data['create_type']) ? $data['create_type'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['db_table_infos'] = isset($data['db_table_infos']) ? $data['db_table_infos'] : null;
        $this->container['download_status'] = isset($data['download_status']) ? $data['download_status'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['is_encrypted'] = isset($data['is_encrypted']) ? $data['is_encrypted'] : null;
        $this->container['is_expired'] = isset($data['is_expired']) ? $data['is_expired'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_end_time
     *
     * @return string
     */
    public function getBackupEndTime()
    {
        return $this->container['backup_end_time'];
    }

    /**
     * Sets backup_end_time
     *
     * @param string $backup_end_time backup_end_time
     *
     * @return $this
     */
    public function setBackupEndTime($backup_end_time)
    {
        $this->container['backup_end_time'] = $backup_end_time;

        return $this;
    }

    /**
     * Gets backup_file_name
     *
     * @return string
     */
    public function getBackupFileName()
    {
        return $this->container['backup_file_name'];
    }

    /**
     * Sets backup_file_name
     *
     * @param string $backup_file_name backup_file_name
     *
     * @return $this
     */
    public function setBackupFileName($backup_file_name)
    {
        $this->container['backup_file_name'] = $backup_file_name;

        return $this;
    }

    /**
     * Gets backup_file_size
     *
     * @return int
     */
    public function getBackupFileSize()
    {
        return $this->container['backup_file_size'];
    }

    /**
     * Sets backup_file_size
     *
     * @param int $backup_file_size backup_file_size
     *
     * @return $this
     */
    public function setBackupFileSize($backup_file_size)
    {
        $this->container['backup_file_size'] = $backup_file_size;

        return $this;
    }

    /**
     * Gets backup_id
     *
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     *
     * @param string $backup_id backup_id
     *
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets backup_method
     *
     * @return string
     */
    public function getBackupMethod()
    {
        return $this->container['backup_method'];
    }

    /**
     * Sets backup_method
     *
     * @param string $backup_method backup_method
     *
     * @return $this
     */
    public function setBackupMethod($backup_method)
    {
        $this->container['backup_method'] = $backup_method;

        return $this;
    }

    /**
     * Gets backup_region
     *
     * @return string
     */
    public function getBackupRegion()
    {
        return $this->container['backup_region'];
    }

    /**
     * Sets backup_region
     *
     * @param string $backup_region backup_region
     *
     * @return $this
     */
    public function setBackupRegion($backup_region)
    {
        $this->container['backup_region'] = $backup_region;

        return $this;
    }

    /**
     * Gets backup_start_time
     *
     * @return string
     */
    public function getBackupStartTime()
    {
        return $this->container['backup_start_time'];
    }

    /**
     * Sets backup_start_time
     *
     * @param string $backup_start_time backup_start_time
     *
     * @return $this
     */
    public function setBackupStartTime($backup_start_time)
    {
        $this->container['backup_start_time'] = $backup_start_time;

        return $this;
    }

    /**
     * Gets backup_status
     *
     * @return string
     */
    public function getBackupStatus()
    {
        return $this->container['backup_status'];
    }

    /**
     * Sets backup_status
     *
     * @param string $backup_status backup_status
     *
     * @return $this
     */
    public function setBackupStatus($backup_status)
    {
        $this->container['backup_status'] = $backup_status;

        return $this;
    }

    /**
     * Gets backup_type
     *
     * @return string
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param string $backup_type backup_type
     *
     * @return $this
     */
    public function setBackupType($backup_type)
    {
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets consistent_time
     *
     * @return string
     */
    public function getConsistentTime()
    {
        return $this->container['consistent_time'];
    }

    /**
     * Sets consistent_time
     *
     * @param string $consistent_time consistent_time
     *
     * @return $this
     */
    public function setConsistentTime($consistent_time)
    {
        $this->container['consistent_time'] = $consistent_time;

        return $this;
    }

    /**
     * Gets create_type
     *
     * @return string
     */
    public function getCreateType()
    {
        return $this->container['create_type'];
    }

    /**
     * Sets create_type
     *
     * @param string $create_type create_type
     *
     * @return $this
     */
    public function setCreateType($create_type)
    {
        $this->container['create_type'] = $create_type;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets db_table_infos
     *
     * @return \Volcengine\Rdsmysqlv2\Model\DBTableInfoForDescribeBackupsOutput[]
     */
    public function getDbTableInfos()
    {
        return $this->container['db_table_infos'];
    }

    /**
     * Sets db_table_infos
     *
     * @param \Volcengine\Rdsmysqlv2\Model\DBTableInfoForDescribeBackupsOutput[] $db_table_infos db_table_infos
     *
     * @return $this
     */
    public function setDbTableInfos($db_table_infos)
    {
        $this->container['db_table_infos'] = $db_table_infos;

        return $this;
    }

    /**
     * Gets download_status
     *
     * @return string
     */
    public function getDownloadStatus()
    {
        return $this->container['download_status'];
    }

    /**
     * Sets download_status
     *
     * @param string $download_status download_status
     *
     * @return $this
     */
    public function setDownloadStatus($download_status)
    {
        $this->container['download_status'] = $download_status;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool $is_encrypted is_encrypted
     *
     * @return $this
     */
    public function setIsEncrypted($is_encrypted)
    {
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets is_expired
     *
     * @return bool
     */
    public function getIsExpired()
    {
        return $this->container['is_expired'];
    }

    /**
     * Sets is_expired
     *
     * @param bool $is_expired is_expired
     *
     * @return $this
     */
    public function setIsExpired($is_expired)
    {
        $this->container['is_expired'] = $is_expired;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

