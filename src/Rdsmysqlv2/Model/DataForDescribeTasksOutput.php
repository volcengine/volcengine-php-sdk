<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForDescribeTasksOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForDescribeTasksOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cost_time_ms' => 'int',
        'create_time' => 'string',
        'finish_time' => 'string',
        'origin_config' => 'string',
        'progress' => 'int',
        'related_instance_infos' => '\Volcengine\Rdsmysqlv2\Model\RelatedInstanceInfosForDescribeTasksOutput',
        'scheduled_execute_end_time' => 'string',
        'scheduled_execute_start_time' => 'string',
        'scheduled_switch_end_time' => 'string',
        'scheduled_switch_start_time' => 'string',
        'start_time' => 'string',
        'task_action' => 'string',
        'task_category' => 'string',
        'task_desc' => 'string',
        'task_id' => 'string',
        'task_params' => 'string',
        'task_progress' => '\Volcengine\Rdsmysqlv2\Model\TaskProgressForDescribeTasksOutput[]',
        'task_source' => 'string',
        'task_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cost_time_ms' => 'int64',
        'create_time' => null,
        'finish_time' => null,
        'origin_config' => null,
        'progress' => 'int32',
        'related_instance_infos' => null,
        'scheduled_execute_end_time' => null,
        'scheduled_execute_start_time' => null,
        'scheduled_switch_end_time' => null,
        'scheduled_switch_start_time' => null,
        'start_time' => null,
        'task_action' => null,
        'task_category' => null,
        'task_desc' => null,
        'task_id' => null,
        'task_params' => null,
        'task_progress' => null,
        'task_source' => null,
        'task_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost_time_ms' => 'CostTimeMS',
        'create_time' => 'CreateTime',
        'finish_time' => 'FinishTime',
        'origin_config' => 'OriginConfig',
        'progress' => 'Progress',
        'related_instance_infos' => 'RelatedInstanceInfos',
        'scheduled_execute_end_time' => 'ScheduledExecuteEndTime',
        'scheduled_execute_start_time' => 'ScheduledExecuteStartTime',
        'scheduled_switch_end_time' => 'ScheduledSwitchEndTime',
        'scheduled_switch_start_time' => 'ScheduledSwitchStartTime',
        'start_time' => 'StartTime',
        'task_action' => 'TaskAction',
        'task_category' => 'TaskCategory',
        'task_desc' => 'TaskDesc',
        'task_id' => 'TaskId',
        'task_params' => 'TaskParams',
        'task_progress' => 'TaskProgress',
        'task_source' => 'TaskSource',
        'task_status' => 'TaskStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost_time_ms' => 'setCostTimeMs',
        'create_time' => 'setCreateTime',
        'finish_time' => 'setFinishTime',
        'origin_config' => 'setOriginConfig',
        'progress' => 'setProgress',
        'related_instance_infos' => 'setRelatedInstanceInfos',
        'scheduled_execute_end_time' => 'setScheduledExecuteEndTime',
        'scheduled_execute_start_time' => 'setScheduledExecuteStartTime',
        'scheduled_switch_end_time' => 'setScheduledSwitchEndTime',
        'scheduled_switch_start_time' => 'setScheduledSwitchStartTime',
        'start_time' => 'setStartTime',
        'task_action' => 'setTaskAction',
        'task_category' => 'setTaskCategory',
        'task_desc' => 'setTaskDesc',
        'task_id' => 'setTaskId',
        'task_params' => 'setTaskParams',
        'task_progress' => 'setTaskProgress',
        'task_source' => 'setTaskSource',
        'task_status' => 'setTaskStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost_time_ms' => 'getCostTimeMs',
        'create_time' => 'getCreateTime',
        'finish_time' => 'getFinishTime',
        'origin_config' => 'getOriginConfig',
        'progress' => 'getProgress',
        'related_instance_infos' => 'getRelatedInstanceInfos',
        'scheduled_execute_end_time' => 'getScheduledExecuteEndTime',
        'scheduled_execute_start_time' => 'getScheduledExecuteStartTime',
        'scheduled_switch_end_time' => 'getScheduledSwitchEndTime',
        'scheduled_switch_start_time' => 'getScheduledSwitchStartTime',
        'start_time' => 'getStartTime',
        'task_action' => 'getTaskAction',
        'task_category' => 'getTaskCategory',
        'task_desc' => 'getTaskDesc',
        'task_id' => 'getTaskId',
        'task_params' => 'getTaskParams',
        'task_progress' => 'getTaskProgress',
        'task_source' => 'getTaskSource',
        'task_status' => 'getTaskStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost_time_ms'] = isset($data['cost_time_ms']) ? $data['cost_time_ms'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['finish_time'] = isset($data['finish_time']) ? $data['finish_time'] : null;
        $this->container['origin_config'] = isset($data['origin_config']) ? $data['origin_config'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['related_instance_infos'] = isset($data['related_instance_infos']) ? $data['related_instance_infos'] : null;
        $this->container['scheduled_execute_end_time'] = isset($data['scheduled_execute_end_time']) ? $data['scheduled_execute_end_time'] : null;
        $this->container['scheduled_execute_start_time'] = isset($data['scheduled_execute_start_time']) ? $data['scheduled_execute_start_time'] : null;
        $this->container['scheduled_switch_end_time'] = isset($data['scheduled_switch_end_time']) ? $data['scheduled_switch_end_time'] : null;
        $this->container['scheduled_switch_start_time'] = isset($data['scheduled_switch_start_time']) ? $data['scheduled_switch_start_time'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['task_action'] = isset($data['task_action']) ? $data['task_action'] : null;
        $this->container['task_category'] = isset($data['task_category']) ? $data['task_category'] : null;
        $this->container['task_desc'] = isset($data['task_desc']) ? $data['task_desc'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_params'] = isset($data['task_params']) ? $data['task_params'] : null;
        $this->container['task_progress'] = isset($data['task_progress']) ? $data['task_progress'] : null;
        $this->container['task_source'] = isset($data['task_source']) ? $data['task_source'] : null;
        $this->container['task_status'] = isset($data['task_status']) ? $data['task_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost_time_ms
     *
     * @return int
     */
    public function getCostTimeMs()
    {
        return $this->container['cost_time_ms'];
    }

    /**
     * Sets cost_time_ms
     *
     * @param int $cost_time_ms cost_time_ms
     *
     * @return $this
     */
    public function setCostTimeMs($cost_time_ms)
    {
        $this->container['cost_time_ms'] = $cost_time_ms;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets finish_time
     *
     * @return string
     */
    public function getFinishTime()
    {
        return $this->container['finish_time'];
    }

    /**
     * Sets finish_time
     *
     * @param string $finish_time finish_time
     *
     * @return $this
     */
    public function setFinishTime($finish_time)
    {
        $this->container['finish_time'] = $finish_time;

        return $this;
    }

    /**
     * Gets origin_config
     *
     * @return string
     */
    public function getOriginConfig()
    {
        return $this->container['origin_config'];
    }

    /**
     * Sets origin_config
     *
     * @param string $origin_config origin_config
     *
     * @return $this
     */
    public function setOriginConfig($origin_config)
    {
        $this->container['origin_config'] = $origin_config;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int $progress progress
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets related_instance_infos
     *
     * @return \Volcengine\Rdsmysqlv2\Model\RelatedInstanceInfosForDescribeTasksOutput
     */
    public function getRelatedInstanceInfos()
    {
        return $this->container['related_instance_infos'];
    }

    /**
     * Sets related_instance_infos
     *
     * @param \Volcengine\Rdsmysqlv2\Model\RelatedInstanceInfosForDescribeTasksOutput $related_instance_infos related_instance_infos
     *
     * @return $this
     */
    public function setRelatedInstanceInfos($related_instance_infos)
    {
        $this->container['related_instance_infos'] = $related_instance_infos;

        return $this;
    }

    /**
     * Gets scheduled_execute_end_time
     *
     * @return string
     */
    public function getScheduledExecuteEndTime()
    {
        return $this->container['scheduled_execute_end_time'];
    }

    /**
     * Sets scheduled_execute_end_time
     *
     * @param string $scheduled_execute_end_time scheduled_execute_end_time
     *
     * @return $this
     */
    public function setScheduledExecuteEndTime($scheduled_execute_end_time)
    {
        $this->container['scheduled_execute_end_time'] = $scheduled_execute_end_time;

        return $this;
    }

    /**
     * Gets scheduled_execute_start_time
     *
     * @return string
     */
    public function getScheduledExecuteStartTime()
    {
        return $this->container['scheduled_execute_start_time'];
    }

    /**
     * Sets scheduled_execute_start_time
     *
     * @param string $scheduled_execute_start_time scheduled_execute_start_time
     *
     * @return $this
     */
    public function setScheduledExecuteStartTime($scheduled_execute_start_time)
    {
        $this->container['scheduled_execute_start_time'] = $scheduled_execute_start_time;

        return $this;
    }

    /**
     * Gets scheduled_switch_end_time
     *
     * @return string
     */
    public function getScheduledSwitchEndTime()
    {
        return $this->container['scheduled_switch_end_time'];
    }

    /**
     * Sets scheduled_switch_end_time
     *
     * @param string $scheduled_switch_end_time scheduled_switch_end_time
     *
     * @return $this
     */
    public function setScheduledSwitchEndTime($scheduled_switch_end_time)
    {
        $this->container['scheduled_switch_end_time'] = $scheduled_switch_end_time;

        return $this;
    }

    /**
     * Gets scheduled_switch_start_time
     *
     * @return string
     */
    public function getScheduledSwitchStartTime()
    {
        return $this->container['scheduled_switch_start_time'];
    }

    /**
     * Sets scheduled_switch_start_time
     *
     * @param string $scheduled_switch_start_time scheduled_switch_start_time
     *
     * @return $this
     */
    public function setScheduledSwitchStartTime($scheduled_switch_start_time)
    {
        $this->container['scheduled_switch_start_time'] = $scheduled_switch_start_time;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets task_action
     *
     * @return string
     */
    public function getTaskAction()
    {
        return $this->container['task_action'];
    }

    /**
     * Sets task_action
     *
     * @param string $task_action task_action
     *
     * @return $this
     */
    public function setTaskAction($task_action)
    {
        $this->container['task_action'] = $task_action;

        return $this;
    }

    /**
     * Gets task_category
     *
     * @return string
     */
    public function getTaskCategory()
    {
        return $this->container['task_category'];
    }

    /**
     * Sets task_category
     *
     * @param string $task_category task_category
     *
     * @return $this
     */
    public function setTaskCategory($task_category)
    {
        $this->container['task_category'] = $task_category;

        return $this;
    }

    /**
     * Gets task_desc
     *
     * @return string
     */
    public function getTaskDesc()
    {
        return $this->container['task_desc'];
    }

    /**
     * Sets task_desc
     *
     * @param string $task_desc task_desc
     *
     * @return $this
     */
    public function setTaskDesc($task_desc)
    {
        $this->container['task_desc'] = $task_desc;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_params
     *
     * @return string
     */
    public function getTaskParams()
    {
        return $this->container['task_params'];
    }

    /**
     * Sets task_params
     *
     * @param string $task_params task_params
     *
     * @return $this
     */
    public function setTaskParams($task_params)
    {
        $this->container['task_params'] = $task_params;

        return $this;
    }

    /**
     * Gets task_progress
     *
     * @return \Volcengine\Rdsmysqlv2\Model\TaskProgressForDescribeTasksOutput[]
     */
    public function getTaskProgress()
    {
        return $this->container['task_progress'];
    }

    /**
     * Sets task_progress
     *
     * @param \Volcengine\Rdsmysqlv2\Model\TaskProgressForDescribeTasksOutput[] $task_progress task_progress
     *
     * @return $this
     */
    public function setTaskProgress($task_progress)
    {
        $this->container['task_progress'] = $task_progress;

        return $this;
    }

    /**
     * Gets task_source
     *
     * @return string
     */
    public function getTaskSource()
    {
        return $this->container['task_source'];
    }

    /**
     * Sets task_source
     *
     * @param string $task_source task_source
     *
     * @return $this
     */
    public function setTaskSource($task_source)
    {
        $this->container['task_source'] = $task_source;

        return $this;
    }

    /**
     * Gets task_status
     *
     * @return string
     */
    public function getTaskStatus()
    {
        return $this->container['task_status'];
    }

    /**
     * Sets task_status
     *
     * @param string $task_status task_status
     *
     * @return $this
     */
    public function setTaskStatus($task_status)
    {
        $this->container['task_status'] = $task_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

