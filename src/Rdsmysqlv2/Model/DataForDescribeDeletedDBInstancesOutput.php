<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Rdsmysqlv2\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForDescribeDeletedDBInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForDescribeDeletedDBInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_expiration_time' => 'string',
        'create_time' => 'string',
        'db_engine_version' => 'string',
        'data_keep_days' => 'int',
        'data_keep_policy' => 'string',
        'deletion_time' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'instance_status' => 'string',
        'instance_type' => 'string',
        'node_spec' => 'string',
        'project_name' => 'string',
        'storage_space' => 'int',
        'storage_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_expiration_time' => null,
        'create_time' => null,
        'db_engine_version' => null,
        'data_keep_days' => 'int32',
        'data_keep_policy' => null,
        'deletion_time' => null,
        'instance_id' => null,
        'instance_name' => null,
        'instance_status' => null,
        'instance_type' => null,
        'node_spec' => null,
        'project_name' => null,
        'storage_space' => 'int32',
        'storage_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_expiration_time' => 'BackupExpirationTime',
        'create_time' => 'CreateTime',
        'db_engine_version' => 'DBEngineVersion',
        'data_keep_days' => 'DataKeepDays',
        'data_keep_policy' => 'DataKeepPolicy',
        'deletion_time' => 'DeletionTime',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'instance_status' => 'InstanceStatus',
        'instance_type' => 'InstanceType',
        'node_spec' => 'NodeSpec',
        'project_name' => 'ProjectName',
        'storage_space' => 'StorageSpace',
        'storage_type' => 'StorageType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_expiration_time' => 'setBackupExpirationTime',
        'create_time' => 'setCreateTime',
        'db_engine_version' => 'setDbEngineVersion',
        'data_keep_days' => 'setDataKeepDays',
        'data_keep_policy' => 'setDataKeepPolicy',
        'deletion_time' => 'setDeletionTime',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'instance_status' => 'setInstanceStatus',
        'instance_type' => 'setInstanceType',
        'node_spec' => 'setNodeSpec',
        'project_name' => 'setProjectName',
        'storage_space' => 'setStorageSpace',
        'storage_type' => 'setStorageType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_expiration_time' => 'getBackupExpirationTime',
        'create_time' => 'getCreateTime',
        'db_engine_version' => 'getDbEngineVersion',
        'data_keep_days' => 'getDataKeepDays',
        'data_keep_policy' => 'getDataKeepPolicy',
        'deletion_time' => 'getDeletionTime',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'instance_status' => 'getInstanceStatus',
        'instance_type' => 'getInstanceType',
        'node_spec' => 'getNodeSpec',
        'project_name' => 'getProjectName',
        'storage_space' => 'getStorageSpace',
        'storage_type' => 'getStorageType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_expiration_time'] = isset($data['backup_expiration_time']) ? $data['backup_expiration_time'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['data_keep_days'] = isset($data['data_keep_days']) ? $data['data_keep_days'] : null;
        $this->container['data_keep_policy'] = isset($data['data_keep_policy']) ? $data['data_keep_policy'] : null;
        $this->container['deletion_time'] = isset($data['deletion_time']) ? $data['deletion_time'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_status'] = isset($data['instance_status']) ? $data['instance_status'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['node_spec'] = isset($data['node_spec']) ? $data['node_spec'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['storage_space'] = isset($data['storage_space']) ? $data['storage_space'] : null;
        $this->container['storage_type'] = isset($data['storage_type']) ? $data['storage_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_expiration_time
     *
     * @return string
     */
    public function getBackupExpirationTime()
    {
        return $this->container['backup_expiration_time'];
    }

    /**
     * Sets backup_expiration_time
     *
     * @param string $backup_expiration_time backup_expiration_time
     *
     * @return $this
     */
    public function setBackupExpirationTime($backup_expiration_time)
    {
        $this->container['backup_expiration_time'] = $backup_expiration_time;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets data_keep_days
     *
     * @return int
     */
    public function getDataKeepDays()
    {
        return $this->container['data_keep_days'];
    }

    /**
     * Sets data_keep_days
     *
     * @param int $data_keep_days data_keep_days
     *
     * @return $this
     */
    public function setDataKeepDays($data_keep_days)
    {
        $this->container['data_keep_days'] = $data_keep_days;

        return $this;
    }

    /**
     * Gets data_keep_policy
     *
     * @return string
     */
    public function getDataKeepPolicy()
    {
        return $this->container['data_keep_policy'];
    }

    /**
     * Sets data_keep_policy
     *
     * @param string $data_keep_policy data_keep_policy
     *
     * @return $this
     */
    public function setDataKeepPolicy($data_keep_policy)
    {
        $this->container['data_keep_policy'] = $data_keep_policy;

        return $this;
    }

    /**
     * Gets deletion_time
     *
     * @return string
     */
    public function getDeletionTime()
    {
        return $this->container['deletion_time'];
    }

    /**
     * Sets deletion_time
     *
     * @param string $deletion_time deletion_time
     *
     * @return $this
     */
    public function setDeletionTime($deletion_time)
    {
        $this->container['deletion_time'] = $deletion_time;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_status
     *
     * @return string
     */
    public function getInstanceStatus()
    {
        return $this->container['instance_status'];
    }

    /**
     * Sets instance_status
     *
     * @param string $instance_status instance_status
     *
     * @return $this
     */
    public function setInstanceStatus($instance_status)
    {
        $this->container['instance_status'] = $instance_status;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets node_spec
     *
     * @return string
     */
    public function getNodeSpec()
    {
        return $this->container['node_spec'];
    }

    /**
     * Sets node_spec
     *
     * @param string $node_spec node_spec
     *
     * @return $this
     */
    public function setNodeSpec($node_spec)
    {
        $this->container['node_spec'] = $node_spec;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets storage_space
     *
     * @return int
     */
    public function getStorageSpace()
    {
        return $this->container['storage_space'];
    }

    /**
     * Sets storage_space
     *
     * @param int $storage_space storage_space
     *
     * @return $this
     */
    public function setStorageSpace($storage_space)
    {
        $this->container['storage_space'] = $storage_space;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string $storage_type storage_type
     *
     * @return $this
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

