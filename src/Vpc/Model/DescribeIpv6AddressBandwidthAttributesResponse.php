<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeIpv6AddressBandwidthAttributesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeIpv6AddressBandwidthAttributesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allocation_id' => 'string',
        'bandwidth' => 'int',
        'bandwidth_package_id' => 'string',
        'billing_type' => 'int',
        'business_status' => 'string',
        'creation_time' => 'string',
        'delete_time' => 'string',
        'isp' => 'string',
        'instance_id' => 'string',
        'instance_type' => 'string',
        'ipv6_address' => 'string',
        'ipv6_gateway_id' => 'string',
        'lock_reason' => 'string',
        'network_type' => 'string',
        'overdue_time' => 'string',
        'project_name' => 'string',
        'request_id' => 'string',
        'service_managed' => 'bool',
        'status' => 'string',
        'tags' => '\Volcengine\Vpc\Model\TagForDescribeIpv6AddressBandwidthAttributesOutput[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allocation_id' => null,
        'bandwidth' => null,
        'bandwidth_package_id' => null,
        'billing_type' => null,
        'business_status' => null,
        'creation_time' => null,
        'delete_time' => null,
        'isp' => null,
        'instance_id' => null,
        'instance_type' => null,
        'ipv6_address' => null,
        'ipv6_gateway_id' => null,
        'lock_reason' => null,
        'network_type' => null,
        'overdue_time' => null,
        'project_name' => null,
        'request_id' => null,
        'service_managed' => null,
        'status' => null,
        'tags' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocation_id' => 'AllocationId',
        'bandwidth' => 'Bandwidth',
        'bandwidth_package_id' => 'BandwidthPackageId',
        'billing_type' => 'BillingType',
        'business_status' => 'BusinessStatus',
        'creation_time' => 'CreationTime',
        'delete_time' => 'DeleteTime',
        'isp' => 'ISP',
        'instance_id' => 'InstanceId',
        'instance_type' => 'InstanceType',
        'ipv6_address' => 'Ipv6Address',
        'ipv6_gateway_id' => 'Ipv6GatewayId',
        'lock_reason' => 'LockReason',
        'network_type' => 'NetworkType',
        'overdue_time' => 'OverdueTime',
        'project_name' => 'ProjectName',
        'request_id' => 'RequestId',
        'service_managed' => 'ServiceManaged',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocation_id' => 'setAllocationId',
        'bandwidth' => 'setBandwidth',
        'bandwidth_package_id' => 'setBandwidthPackageId',
        'billing_type' => 'setBillingType',
        'business_status' => 'setBusinessStatus',
        'creation_time' => 'setCreationTime',
        'delete_time' => 'setDeleteTime',
        'isp' => 'setIsp',
        'instance_id' => 'setInstanceId',
        'instance_type' => 'setInstanceType',
        'ipv6_address' => 'setIpv6Address',
        'ipv6_gateway_id' => 'setIpv6GatewayId',
        'lock_reason' => 'setLockReason',
        'network_type' => 'setNetworkType',
        'overdue_time' => 'setOverdueTime',
        'project_name' => 'setProjectName',
        'request_id' => 'setRequestId',
        'service_managed' => 'setServiceManaged',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocation_id' => 'getAllocationId',
        'bandwidth' => 'getBandwidth',
        'bandwidth_package_id' => 'getBandwidthPackageId',
        'billing_type' => 'getBillingType',
        'business_status' => 'getBusinessStatus',
        'creation_time' => 'getCreationTime',
        'delete_time' => 'getDeleteTime',
        'isp' => 'getIsp',
        'instance_id' => 'getInstanceId',
        'instance_type' => 'getInstanceType',
        'ipv6_address' => 'getIpv6Address',
        'ipv6_gateway_id' => 'getIpv6GatewayId',
        'lock_reason' => 'getLockReason',
        'network_type' => 'getNetworkType',
        'overdue_time' => 'getOverdueTime',
        'project_name' => 'getProjectName',
        'request_id' => 'getRequestId',
        'service_managed' => 'getServiceManaged',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocation_id'] = isset($data['allocation_id']) ? $data['allocation_id'] : null;
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['bandwidth_package_id'] = isset($data['bandwidth_package_id']) ? $data['bandwidth_package_id'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['business_status'] = isset($data['business_status']) ? $data['business_status'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['delete_time'] = isset($data['delete_time']) ? $data['delete_time'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['ipv6_address'] = isset($data['ipv6_address']) ? $data['ipv6_address'] : null;
        $this->container['ipv6_gateway_id'] = isset($data['ipv6_gateway_id']) ? $data['ipv6_gateway_id'] : null;
        $this->container['lock_reason'] = isset($data['lock_reason']) ? $data['lock_reason'] : null;
        $this->container['network_type'] = isset($data['network_type']) ? $data['network_type'] : null;
        $this->container['overdue_time'] = isset($data['overdue_time']) ? $data['overdue_time'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['service_managed'] = isset($data['service_managed']) ? $data['service_managed'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocation_id
     *
     * @return string
     */
    public function getAllocationId()
    {
        return $this->container['allocation_id'];
    }

    /**
     * Sets allocation_id
     *
     * @param string $allocation_id allocation_id
     *
     * @return $this
     */
    public function setAllocationId($allocation_id)
    {
        $this->container['allocation_id'] = $allocation_id;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets bandwidth_package_id
     *
     * @return string
     */
    public function getBandwidthPackageId()
    {
        return $this->container['bandwidth_package_id'];
    }

    /**
     * Sets bandwidth_package_id
     *
     * @param string $bandwidth_package_id bandwidth_package_id
     *
     * @return $this
     */
    public function setBandwidthPackageId($bandwidth_package_id)
    {
        $this->container['bandwidth_package_id'] = $bandwidth_package_id;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return int
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param int $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets business_status
     *
     * @return string
     */
    public function getBusinessStatus()
    {
        return $this->container['business_status'];
    }

    /**
     * Sets business_status
     *
     * @param string $business_status business_status
     *
     * @return $this
     */
    public function setBusinessStatus($business_status)
    {
        $this->container['business_status'] = $business_status;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets delete_time
     *
     * @return string
     */
    public function getDeleteTime()
    {
        return $this->container['delete_time'];
    }

    /**
     * Sets delete_time
     *
     * @param string $delete_time delete_time
     *
     * @return $this
     */
    public function setDeleteTime($delete_time)
    {
        $this->container['delete_time'] = $delete_time;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets ipv6_address
     *
     * @return string
     */
    public function getIpv6Address()
    {
        return $this->container['ipv6_address'];
    }

    /**
     * Sets ipv6_address
     *
     * @param string $ipv6_address ipv6_address
     *
     * @return $this
     */
    public function setIpv6Address($ipv6_address)
    {
        $this->container['ipv6_address'] = $ipv6_address;

        return $this;
    }

    /**
     * Gets ipv6_gateway_id
     *
     * @return string
     */
    public function getIpv6GatewayId()
    {
        return $this->container['ipv6_gateway_id'];
    }

    /**
     * Sets ipv6_gateway_id
     *
     * @param string $ipv6_gateway_id ipv6_gateway_id
     *
     * @return $this
     */
    public function setIpv6GatewayId($ipv6_gateway_id)
    {
        $this->container['ipv6_gateway_id'] = $ipv6_gateway_id;

        return $this;
    }

    /**
     * Gets lock_reason
     *
     * @return string
     */
    public function getLockReason()
    {
        return $this->container['lock_reason'];
    }

    /**
     * Sets lock_reason
     *
     * @param string $lock_reason lock_reason
     *
     * @return $this
     */
    public function setLockReason($lock_reason)
    {
        $this->container['lock_reason'] = $lock_reason;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string $network_type network_type
     *
     * @return $this
     */
    public function setNetworkType($network_type)
    {
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets overdue_time
     *
     * @return string
     */
    public function getOverdueTime()
    {
        return $this->container['overdue_time'];
    }

    /**
     * Sets overdue_time
     *
     * @param string $overdue_time overdue_time
     *
     * @return $this
     */
    public function setOverdueTime($overdue_time)
    {
        $this->container['overdue_time'] = $overdue_time;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets service_managed
     *
     * @return bool
     */
    public function getServiceManaged()
    {
        return $this->container['service_managed'];
    }

    /**
     * Sets service_managed
     *
     * @param bool $service_managed service_managed
     *
     * @return $this
     */
    public function setServiceManaged($service_managed)
    {
        $this->container['service_managed'] = $service_managed;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForDescribeIpv6AddressBandwidthAttributesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForDescribeIpv6AddressBandwidthAttributesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

