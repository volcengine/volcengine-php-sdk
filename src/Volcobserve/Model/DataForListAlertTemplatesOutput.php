<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Volcobserve\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListAlertTemplatesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListAlertTemplatesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applied_project_name' => 'string',
        'created_at' => 'string',
        'description' => 'string',
        'id' => 'string',
        'name' => 'string',
        'no_data' => '\Volcengine\Volcobserve\Model\NoDataForListAlertTemplatesOutput',
        'notify_mode' => 'string',
        'object_groups' => '\Volcengine\Volcobserve\Model\ObjectGroupForListAlertTemplatesOutput[]',
        'recovery_notify' => '\Volcengine\Volcobserve\Model\RecoveryNotifyForListAlertTemplatesOutput',
        'silence_time' => 'int',
        'template_rules' => '\Volcengine\Volcobserve\Model\TemplateRuleForListAlertTemplatesOutput[]',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applied_project_name' => null,
        'created_at' => null,
        'description' => null,
        'id' => null,
        'name' => null,
        'no_data' => null,
        'notify_mode' => null,
        'object_groups' => null,
        'recovery_notify' => null,
        'silence_time' => null,
        'template_rules' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applied_project_name' => 'AppliedProjectName',
        'created_at' => 'CreatedAt',
        'description' => 'Description',
        'id' => 'Id',
        'name' => 'Name',
        'no_data' => 'NoData',
        'notify_mode' => 'NotifyMode',
        'object_groups' => 'ObjectGroups',
        'recovery_notify' => 'RecoveryNotify',
        'silence_time' => 'SilenceTime',
        'template_rules' => 'TemplateRules',
        'updated_at' => 'UpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applied_project_name' => 'setAppliedProjectName',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'id' => 'setId',
        'name' => 'setName',
        'no_data' => 'setNoData',
        'notify_mode' => 'setNotifyMode',
        'object_groups' => 'setObjectGroups',
        'recovery_notify' => 'setRecoveryNotify',
        'silence_time' => 'setSilenceTime',
        'template_rules' => 'setTemplateRules',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applied_project_name' => 'getAppliedProjectName',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'id' => 'getId',
        'name' => 'getName',
        'no_data' => 'getNoData',
        'notify_mode' => 'getNotifyMode',
        'object_groups' => 'getObjectGroups',
        'recovery_notify' => 'getRecoveryNotify',
        'silence_time' => 'getSilenceTime',
        'template_rules' => 'getTemplateRules',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applied_project_name'] = isset($data['applied_project_name']) ? $data['applied_project_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['no_data'] = isset($data['no_data']) ? $data['no_data'] : null;
        $this->container['notify_mode'] = isset($data['notify_mode']) ? $data['notify_mode'] : null;
        $this->container['object_groups'] = isset($data['object_groups']) ? $data['object_groups'] : null;
        $this->container['recovery_notify'] = isset($data['recovery_notify']) ? $data['recovery_notify'] : null;
        $this->container['silence_time'] = isset($data['silence_time']) ? $data['silence_time'] : null;
        $this->container['template_rules'] = isset($data['template_rules']) ? $data['template_rules'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applied_project_name
     *
     * @return string
     */
    public function getAppliedProjectName()
    {
        return $this->container['applied_project_name'];
    }

    /**
     * Sets applied_project_name
     *
     * @param string $applied_project_name applied_project_name
     *
     * @return $this
     */
    public function setAppliedProjectName($applied_project_name)
    {
        $this->container['applied_project_name'] = $applied_project_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets no_data
     *
     * @return \Volcengine\Volcobserve\Model\NoDataForListAlertTemplatesOutput
     */
    public function getNoData()
    {
        return $this->container['no_data'];
    }

    /**
     * Sets no_data
     *
     * @param \Volcengine\Volcobserve\Model\NoDataForListAlertTemplatesOutput $no_data no_data
     *
     * @return $this
     */
    public function setNoData($no_data)
    {
        $this->container['no_data'] = $no_data;

        return $this;
    }

    /**
     * Gets notify_mode
     *
     * @return string
     */
    public function getNotifyMode()
    {
        return $this->container['notify_mode'];
    }

    /**
     * Sets notify_mode
     *
     * @param string $notify_mode notify_mode
     *
     * @return $this
     */
    public function setNotifyMode($notify_mode)
    {
        $this->container['notify_mode'] = $notify_mode;

        return $this;
    }

    /**
     * Gets object_groups
     *
     * @return \Volcengine\Volcobserve\Model\ObjectGroupForListAlertTemplatesOutput[]
     */
    public function getObjectGroups()
    {
        return $this->container['object_groups'];
    }

    /**
     * Sets object_groups
     *
     * @param \Volcengine\Volcobserve\Model\ObjectGroupForListAlertTemplatesOutput[] $object_groups object_groups
     *
     * @return $this
     */
    public function setObjectGroups($object_groups)
    {
        $this->container['object_groups'] = $object_groups;

        return $this;
    }

    /**
     * Gets recovery_notify
     *
     * @return \Volcengine\Volcobserve\Model\RecoveryNotifyForListAlertTemplatesOutput
     */
    public function getRecoveryNotify()
    {
        return $this->container['recovery_notify'];
    }

    /**
     * Sets recovery_notify
     *
     * @param \Volcengine\Volcobserve\Model\RecoveryNotifyForListAlertTemplatesOutput $recovery_notify recovery_notify
     *
     * @return $this
     */
    public function setRecoveryNotify($recovery_notify)
    {
        $this->container['recovery_notify'] = $recovery_notify;

        return $this;
    }

    /**
     * Gets silence_time
     *
     * @return int
     */
    public function getSilenceTime()
    {
        return $this->container['silence_time'];
    }

    /**
     * Sets silence_time
     *
     * @param int $silence_time silence_time
     *
     * @return $this
     */
    public function setSilenceTime($silence_time)
    {
        $this->container['silence_time'] = $silence_time;

        return $this;
    }

    /**
     * Gets template_rules
     *
     * @return \Volcengine\Volcobserve\Model\TemplateRuleForListAlertTemplatesOutput[]
     */
    public function getTemplateRules()
    {
        return $this->container['template_rules'];
    }

    /**
     * Sets template_rules
     *
     * @param \Volcengine\Volcobserve\Model\TemplateRuleForListAlertTemplatesOutput[] $template_rules template_rules
     *
     * @return $this
     */
    public function setTemplateRules($template_rules)
    {
        $this->container['template_rules'] = $template_rules;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

