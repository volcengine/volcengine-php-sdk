<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Volcobserve\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NotificationForUpdateNotificationInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationForUpdateNotificationInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_methods' => 'string[]',
        'contact_group_ids' => 'string[]',
        'level' => 'string',
        'notify_templates' => '\Volcengine\Volcobserve\Model\NotifyTemplateForUpdateNotificationInput[]',
        'webhook_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_methods' => null,
        'contact_group_ids' => null,
        'level' => null,
        'notify_templates' => null,
        'webhook_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_methods' => 'AlertMethods',
        'contact_group_ids' => 'ContactGroupIds',
        'level' => 'Level',
        'notify_templates' => 'NotifyTemplates',
        'webhook_ids' => 'WebhookIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_methods' => 'setAlertMethods',
        'contact_group_ids' => 'setContactGroupIds',
        'level' => 'setLevel',
        'notify_templates' => 'setNotifyTemplates',
        'webhook_ids' => 'setWebhookIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_methods' => 'getAlertMethods',
        'contact_group_ids' => 'getContactGroupIds',
        'level' => 'getLevel',
        'notify_templates' => 'getNotifyTemplates',
        'webhook_ids' => 'getWebhookIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ALERT_METHODS_EMAIL = 'Email';
    const ALERT_METHODS_PHONE = 'Phone';
    const ALERT_METHODS_SMS = 'SMS';
    const ALERT_METHODS_WEBHOOK = 'Webhook';
    const LEVEL_NOTICE = 'notice';
    const LEVEL_WARNING = 'warning';
    const LEVEL_CRITICAL = 'critical';
    const LEVEL_RECOVERY = 'recovery';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlertMethodsAllowableValues()
    {
        return [
            self::ALERT_METHODS_EMAIL,
            self::ALERT_METHODS_PHONE,
            self::ALERT_METHODS_SMS,
            self::ALERT_METHODS_WEBHOOK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLevelAllowableValues()
    {
        return [
            self::LEVEL_NOTICE,
            self::LEVEL_WARNING,
            self::LEVEL_CRITICAL,
            self::LEVEL_RECOVERY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_methods'] = isset($data['alert_methods']) ? $data['alert_methods'] : null;
        $this->container['contact_group_ids'] = isset($data['contact_group_ids']) ? $data['contact_group_ids'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['notify_templates'] = isset($data['notify_templates']) ? $data['notify_templates'] : null;
        $this->container['webhook_ids'] = isset($data['webhook_ids']) ? $data['webhook_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($this->container['level']) && !in_array($this->container['level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_methods
     *
     * @return string[]
     */
    public function getAlertMethods()
    {
        return $this->container['alert_methods'];
    }

    /**
     * Sets alert_methods
     *
     * @param string[] $alert_methods alert_methods
     *
     * @return $this
     */
    public function setAlertMethods($alert_methods)
    {
        $allowedValues = $this->getAlertMethodsAllowableValues();
        if (!is_null($alert_methods) && array_diff($alert_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'alert_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alert_methods'] = $alert_methods;

        return $this;
    }

    /**
     * Gets contact_group_ids
     *
     * @return string[]
     */
    public function getContactGroupIds()
    {
        return $this->container['contact_group_ids'];
    }

    /**
     * Sets contact_group_ids
     *
     * @param string[] $contact_group_ids contact_group_ids
     *
     * @return $this
     */
    public function setContactGroupIds($contact_group_ids)
    {
        $this->container['contact_group_ids'] = $contact_group_ids;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($level) && !in_array($level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets notify_templates
     *
     * @return \Volcengine\Volcobserve\Model\NotifyTemplateForUpdateNotificationInput[]
     */
    public function getNotifyTemplates()
    {
        return $this->container['notify_templates'];
    }

    /**
     * Sets notify_templates
     *
     * @param \Volcengine\Volcobserve\Model\NotifyTemplateForUpdateNotificationInput[] $notify_templates notify_templates
     *
     * @return $this
     */
    public function setNotifyTemplates($notify_templates)
    {
        $this->container['notify_templates'] = $notify_templates;

        return $this;
    }

    /**
     * Gets webhook_ids
     *
     * @return string[]
     */
    public function getWebhookIds()
    {
        return $this->container['webhook_ids'];
    }

    /**
     * Sets webhook_ids
     *
     * @param string[] $webhook_ids webhook_ids
     *
     * @return $this
     */
    public function setWebhookIds($webhook_ids)
    {
        $this->container['webhook_ids'] = $webhook_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

