<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BudgetAlertMessageDetailListForQueryBudgetDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetAlertMessageDetailListForQueryBudgetDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email_send_switch' => 'int',
        'internal_send_switch' => 'int',
        'message_send_switch' => 'int',
        'recipient_email' => 'string',
        'recipient_id' => 'int',
        'recipient_message' => 'string',
        'recipient_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email_send_switch' => 'int32',
        'internal_send_switch' => 'int32',
        'message_send_switch' => 'int32',
        'recipient_email' => null,
        'recipient_id' => 'int64',
        'recipient_message' => null,
        'recipient_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_send_switch' => 'EmailSendSwitch',
        'internal_send_switch' => 'InternalSendSwitch',
        'message_send_switch' => 'MessageSendSwitch',
        'recipient_email' => 'RecipientEmail',
        'recipient_id' => 'RecipientID',
        'recipient_message' => 'RecipientMessage',
        'recipient_name' => 'RecipientName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_send_switch' => 'setEmailSendSwitch',
        'internal_send_switch' => 'setInternalSendSwitch',
        'message_send_switch' => 'setMessageSendSwitch',
        'recipient_email' => 'setRecipientEmail',
        'recipient_id' => 'setRecipientId',
        'recipient_message' => 'setRecipientMessage',
        'recipient_name' => 'setRecipientName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_send_switch' => 'getEmailSendSwitch',
        'internal_send_switch' => 'getInternalSendSwitch',
        'message_send_switch' => 'getMessageSendSwitch',
        'recipient_email' => 'getRecipientEmail',
        'recipient_id' => 'getRecipientId',
        'recipient_message' => 'getRecipientMessage',
        'recipient_name' => 'getRecipientName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_send_switch'] = isset($data['email_send_switch']) ? $data['email_send_switch'] : null;
        $this->container['internal_send_switch'] = isset($data['internal_send_switch']) ? $data['internal_send_switch'] : null;
        $this->container['message_send_switch'] = isset($data['message_send_switch']) ? $data['message_send_switch'] : null;
        $this->container['recipient_email'] = isset($data['recipient_email']) ? $data['recipient_email'] : null;
        $this->container['recipient_id'] = isset($data['recipient_id']) ? $data['recipient_id'] : null;
        $this->container['recipient_message'] = isset($data['recipient_message']) ? $data['recipient_message'] : null;
        $this->container['recipient_name'] = isset($data['recipient_name']) ? $data['recipient_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_send_switch
     *
     * @return int
     */
    public function getEmailSendSwitch()
    {
        return $this->container['email_send_switch'];
    }

    /**
     * Sets email_send_switch
     *
     * @param int $email_send_switch email_send_switch
     *
     * @return $this
     */
    public function setEmailSendSwitch($email_send_switch)
    {
        $this->container['email_send_switch'] = $email_send_switch;

        return $this;
    }

    /**
     * Gets internal_send_switch
     *
     * @return int
     */
    public function getInternalSendSwitch()
    {
        return $this->container['internal_send_switch'];
    }

    /**
     * Sets internal_send_switch
     *
     * @param int $internal_send_switch internal_send_switch
     *
     * @return $this
     */
    public function setInternalSendSwitch($internal_send_switch)
    {
        $this->container['internal_send_switch'] = $internal_send_switch;

        return $this;
    }

    /**
     * Gets message_send_switch
     *
     * @return int
     */
    public function getMessageSendSwitch()
    {
        return $this->container['message_send_switch'];
    }

    /**
     * Sets message_send_switch
     *
     * @param int $message_send_switch message_send_switch
     *
     * @return $this
     */
    public function setMessageSendSwitch($message_send_switch)
    {
        $this->container['message_send_switch'] = $message_send_switch;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string $recipient_email recipient_email
     *
     * @return $this
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets recipient_id
     *
     * @return int
     */
    public function getRecipientId()
    {
        return $this->container['recipient_id'];
    }

    /**
     * Sets recipient_id
     *
     * @param int $recipient_id recipient_id
     *
     * @return $this
     */
    public function setRecipientId($recipient_id)
    {
        $this->container['recipient_id'] = $recipient_id;

        return $this;
    }

    /**
     * Gets recipient_message
     *
     * @return string
     */
    public function getRecipientMessage()
    {
        return $this->container['recipient_message'];
    }

    /**
     * Sets recipient_message
     *
     * @param string $recipient_message recipient_message
     *
     * @return $this
     */
    public function setRecipientMessage($recipient_message)
    {
        $this->container['recipient_message'] = $recipient_message;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name recipient_name
     *
     * @return $this
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

