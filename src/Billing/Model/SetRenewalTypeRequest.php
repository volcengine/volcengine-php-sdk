<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SetRenewalTypeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SetRenewalTypeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'instance_id' => 'string',
        'product' => 'string',
        'renew_type' => 'string',
        'renewal_duration' => 'int',
        'renewal_duration_unit' => 'string',
        'renewal_times' => 'int',
        'set_renewal_related_instance' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'instance_id' => null,
        'product' => null,
        'renew_type' => null,
        'renewal_duration' => 'int64',
        'renewal_duration_unit' => null,
        'renewal_times' => 'int64',
        'set_renewal_related_instance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'instance_id' => 'InstanceID',
        'product' => 'Product',
        'renew_type' => 'RenewType',
        'renewal_duration' => 'RenewalDuration',
        'renewal_duration_unit' => 'RenewalDurationUnit',
        'renewal_times' => 'RenewalTimes',
        'set_renewal_related_instance' => 'SetRenewalRelatedInstance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'instance_id' => 'setInstanceId',
        'product' => 'setProduct',
        'renew_type' => 'setRenewType',
        'renewal_duration' => 'setRenewalDuration',
        'renewal_duration_unit' => 'setRenewalDurationUnit',
        'renewal_times' => 'setRenewalTimes',
        'set_renewal_related_instance' => 'setSetRenewalRelatedInstance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'instance_id' => 'getInstanceId',
        'product' => 'getProduct',
        'renew_type' => 'getRenewType',
        'renewal_duration' => 'getRenewalDuration',
        'renewal_duration_unit' => 'getRenewalDurationUnit',
        'renewal_times' => 'getRenewalTimes',
        'set_renewal_related_instance' => 'getSetRenewalRelatedInstance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['renew_type'] = isset($data['renew_type']) ? $data['renew_type'] : null;
        $this->container['renewal_duration'] = isset($data['renewal_duration']) ? $data['renewal_duration'] : null;
        $this->container['renewal_duration_unit'] = isset($data['renewal_duration_unit']) ? $data['renewal_duration_unit'] : null;
        $this->container['renewal_times'] = isset($data['renewal_times']) ? $data['renewal_times'] : null;
        $this->container['set_renewal_related_instance'] = isset($data['set_renewal_related_instance']) ? $data['set_renewal_related_instance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['renew_type'] === null) {
            $invalidProperties[] = "'renew_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets renew_type
     *
     * @return string
     */
    public function getRenewType()
    {
        return $this->container['renew_type'];
    }

    /**
     * Sets renew_type
     *
     * @param string $renew_type renew_type
     *
     * @return $this
     */
    public function setRenewType($renew_type)
    {
        $this->container['renew_type'] = $renew_type;

        return $this;
    }

    /**
     * Gets renewal_duration
     *
     * @return int
     */
    public function getRenewalDuration()
    {
        return $this->container['renewal_duration'];
    }

    /**
     * Sets renewal_duration
     *
     * @param int $renewal_duration renewal_duration
     *
     * @return $this
     */
    public function setRenewalDuration($renewal_duration)
    {
        $this->container['renewal_duration'] = $renewal_duration;

        return $this;
    }

    /**
     * Gets renewal_duration_unit
     *
     * @return string
     */
    public function getRenewalDurationUnit()
    {
        return $this->container['renewal_duration_unit'];
    }

    /**
     * Sets renewal_duration_unit
     *
     * @param string $renewal_duration_unit renewal_duration_unit
     *
     * @return $this
     */
    public function setRenewalDurationUnit($renewal_duration_unit)
    {
        $this->container['renewal_duration_unit'] = $renewal_duration_unit;

        return $this;
    }

    /**
     * Gets renewal_times
     *
     * @return int
     */
    public function getRenewalTimes()
    {
        return $this->container['renewal_times'];
    }

    /**
     * Sets renewal_times
     *
     * @param int $renewal_times renewal_times
     *
     * @return $this
     */
    public function setRenewalTimes($renewal_times)
    {
        $this->container['renewal_times'] = $renewal_times;

        return $this;
    }

    /**
     * Gets set_renewal_related_instance
     *
     * @return bool
     */
    public function getSetRenewalRelatedInstance()
    {
        return $this->container['set_renewal_related_instance'];
    }

    /**
     * Sets set_renewal_related_instance
     *
     * @param bool $set_renewal_related_instance set_renewal_related_instance
     *
     * @return $this
     */
    public function setSetRenewalRelatedInstance($set_renewal_related_instance)
    {
        $this->container['set_renewal_related_instance'] = $set_renewal_related_instance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

