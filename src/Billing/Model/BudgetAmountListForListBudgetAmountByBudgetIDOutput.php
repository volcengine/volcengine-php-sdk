<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BudgetAmountListForListBudgetAmountByBudgetIDOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetAmountListForListBudgetAmountByBudgetIDOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actual_amount' => 'string',
        'budget_amount' => 'string',
        'budget_amount_id' => 'string',
        'budget_period' => 'string',
        'difference' => 'string',
        'ratio' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actual_amount' => null,
        'budget_amount' => null,
        'budget_amount_id' => null,
        'budget_period' => null,
        'difference' => null,
        'ratio' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_amount' => 'ActualAmount',
        'budget_amount' => 'BudgetAmount',
        'budget_amount_id' => 'BudgetAmountID',
        'budget_period' => 'BudgetPeriod',
        'difference' => 'Difference',
        'ratio' => 'Ratio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_amount' => 'setActualAmount',
        'budget_amount' => 'setBudgetAmount',
        'budget_amount_id' => 'setBudgetAmountId',
        'budget_period' => 'setBudgetPeriod',
        'difference' => 'setDifference',
        'ratio' => 'setRatio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_amount' => 'getActualAmount',
        'budget_amount' => 'getBudgetAmount',
        'budget_amount_id' => 'getBudgetAmountId',
        'budget_period' => 'getBudgetPeriod',
        'difference' => 'getDifference',
        'ratio' => 'getRatio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actual_amount'] = isset($data['actual_amount']) ? $data['actual_amount'] : null;
        $this->container['budget_amount'] = isset($data['budget_amount']) ? $data['budget_amount'] : null;
        $this->container['budget_amount_id'] = isset($data['budget_amount_id']) ? $data['budget_amount_id'] : null;
        $this->container['budget_period'] = isset($data['budget_period']) ? $data['budget_period'] : null;
        $this->container['difference'] = isset($data['difference']) ? $data['difference'] : null;
        $this->container['ratio'] = isset($data['ratio']) ? $data['ratio'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_amount
     *
     * @return string
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param string $actual_amount actual_amount
     *
     * @return $this
     */
    public function setActualAmount($actual_amount)
    {
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets budget_amount
     *
     * @return string
     */
    public function getBudgetAmount()
    {
        return $this->container['budget_amount'];
    }

    /**
     * Sets budget_amount
     *
     * @param string $budget_amount budget_amount
     *
     * @return $this
     */
    public function setBudgetAmount($budget_amount)
    {
        $this->container['budget_amount'] = $budget_amount;

        return $this;
    }

    /**
     * Gets budget_amount_id
     *
     * @return string
     */
    public function getBudgetAmountId()
    {
        return $this->container['budget_amount_id'];
    }

    /**
     * Sets budget_amount_id
     *
     * @param string $budget_amount_id budget_amount_id
     *
     * @return $this
     */
    public function setBudgetAmountId($budget_amount_id)
    {
        $this->container['budget_amount_id'] = $budget_amount_id;

        return $this;
    }

    /**
     * Gets budget_period
     *
     * @return string
     */
    public function getBudgetPeriod()
    {
        return $this->container['budget_period'];
    }

    /**
     * Sets budget_period
     *
     * @param string $budget_period budget_period
     *
     * @return $this
     */
    public function setBudgetPeriod($budget_period)
    {
        $this->container['budget_period'] = $budget_period;

        return $this;
    }

    /**
     * Gets difference
     *
     * @return string
     */
    public function getDifference()
    {
        return $this->container['difference'];
    }

    /**
     * Sets difference
     *
     * @param string $difference difference
     *
     * @return $this
     */
    public function setDifference($difference)
    {
        $this->container['difference'] = $difference;

        return $this;
    }

    /**
     * Gets ratio
     *
     * @return string
     */
    public function getRatio()
    {
        return $this->container['ratio'];
    }

    /**
     * Sets ratio
     *
     * @param string $ratio ratio
     *
     * @return $this
     */
    public function setRatio($ratio)
    {
        $this->container['ratio'] = $ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

