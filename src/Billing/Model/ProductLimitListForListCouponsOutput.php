<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ProductLimitListForListCouponsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductLimitListForListCouponsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_method' => 'string',
        'charge_item_code' => 'string',
        'charge_item_type' => 'int',
        'configuration_code' => 'string',
        'configuration_name' => 'string',
        'configuration_type' => 'int',
        'product_code' => 'string',
        'product_name' => 'string',
        'time_limit_lower' => 'int',
        'time_limit_upper' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_method' => null,
        'charge_item_code' => null,
        'charge_item_type' => 'int32',
        'configuration_code' => null,
        'configuration_name' => null,
        'configuration_type' => 'int32',
        'product_code' => null,
        'product_name' => null,
        'time_limit_lower' => 'int32',
        'time_limit_upper' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_method' => 'BillingMethod',
        'charge_item_code' => 'ChargeItemCode',
        'charge_item_type' => 'ChargeItemType',
        'configuration_code' => 'ConfigurationCode',
        'configuration_name' => 'ConfigurationName',
        'configuration_type' => 'ConfigurationType',
        'product_code' => 'ProductCode',
        'product_name' => 'ProductName',
        'time_limit_lower' => 'TimeLimitLower',
        'time_limit_upper' => 'TimeLimitUpper'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_method' => 'setBillingMethod',
        'charge_item_code' => 'setChargeItemCode',
        'charge_item_type' => 'setChargeItemType',
        'configuration_code' => 'setConfigurationCode',
        'configuration_name' => 'setConfigurationName',
        'configuration_type' => 'setConfigurationType',
        'product_code' => 'setProductCode',
        'product_name' => 'setProductName',
        'time_limit_lower' => 'setTimeLimitLower',
        'time_limit_upper' => 'setTimeLimitUpper'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_method' => 'getBillingMethod',
        'charge_item_code' => 'getChargeItemCode',
        'charge_item_type' => 'getChargeItemType',
        'configuration_code' => 'getConfigurationCode',
        'configuration_name' => 'getConfigurationName',
        'configuration_type' => 'getConfigurationType',
        'product_code' => 'getProductCode',
        'product_name' => 'getProductName',
        'time_limit_lower' => 'getTimeLimitLower',
        'time_limit_upper' => 'getTimeLimitUpper'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_method'] = isset($data['billing_method']) ? $data['billing_method'] : null;
        $this->container['charge_item_code'] = isset($data['charge_item_code']) ? $data['charge_item_code'] : null;
        $this->container['charge_item_type'] = isset($data['charge_item_type']) ? $data['charge_item_type'] : null;
        $this->container['configuration_code'] = isset($data['configuration_code']) ? $data['configuration_code'] : null;
        $this->container['configuration_name'] = isset($data['configuration_name']) ? $data['configuration_name'] : null;
        $this->container['configuration_type'] = isset($data['configuration_type']) ? $data['configuration_type'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['time_limit_lower'] = isset($data['time_limit_lower']) ? $data['time_limit_lower'] : null;
        $this->container['time_limit_upper'] = isset($data['time_limit_upper']) ? $data['time_limit_upper'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_method
     *
     * @return string
     */
    public function getBillingMethod()
    {
        return $this->container['billing_method'];
    }

    /**
     * Sets billing_method
     *
     * @param string $billing_method billing_method
     *
     * @return $this
     */
    public function setBillingMethod($billing_method)
    {
        $this->container['billing_method'] = $billing_method;

        return $this;
    }

    /**
     * Gets charge_item_code
     *
     * @return string
     */
    public function getChargeItemCode()
    {
        return $this->container['charge_item_code'];
    }

    /**
     * Sets charge_item_code
     *
     * @param string $charge_item_code charge_item_code
     *
     * @return $this
     */
    public function setChargeItemCode($charge_item_code)
    {
        $this->container['charge_item_code'] = $charge_item_code;

        return $this;
    }

    /**
     * Gets charge_item_type
     *
     * @return int
     */
    public function getChargeItemType()
    {
        return $this->container['charge_item_type'];
    }

    /**
     * Sets charge_item_type
     *
     * @param int $charge_item_type charge_item_type
     *
     * @return $this
     */
    public function setChargeItemType($charge_item_type)
    {
        $this->container['charge_item_type'] = $charge_item_type;

        return $this;
    }

    /**
     * Gets configuration_code
     *
     * @return string
     */
    public function getConfigurationCode()
    {
        return $this->container['configuration_code'];
    }

    /**
     * Sets configuration_code
     *
     * @param string $configuration_code configuration_code
     *
     * @return $this
     */
    public function setConfigurationCode($configuration_code)
    {
        $this->container['configuration_code'] = $configuration_code;

        return $this;
    }

    /**
     * Gets configuration_name
     *
     * @return string
     */
    public function getConfigurationName()
    {
        return $this->container['configuration_name'];
    }

    /**
     * Sets configuration_name
     *
     * @param string $configuration_name configuration_name
     *
     * @return $this
     */
    public function setConfigurationName($configuration_name)
    {
        $this->container['configuration_name'] = $configuration_name;

        return $this;
    }

    /**
     * Gets configuration_type
     *
     * @return int
     */
    public function getConfigurationType()
    {
        return $this->container['configuration_type'];
    }

    /**
     * Sets configuration_type
     *
     * @param int $configuration_type configuration_type
     *
     * @return $this
     */
    public function setConfigurationType($configuration_type)
    {
        $this->container['configuration_type'] = $configuration_type;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code product_code
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets time_limit_lower
     *
     * @return int
     */
    public function getTimeLimitLower()
    {
        return $this->container['time_limit_lower'];
    }

    /**
     * Sets time_limit_lower
     *
     * @param int $time_limit_lower time_limit_lower
     *
     * @return $this
     */
    public function setTimeLimitLower($time_limit_lower)
    {
        $this->container['time_limit_lower'] = $time_limit_lower;

        return $this;
    }

    /**
     * Gets time_limit_upper
     *
     * @return int
     */
    public function getTimeLimitUpper()
    {
        return $this->container['time_limit_upper'];
    }

    /**
     * Sets time_limit_upper
     *
     * @param int $time_limit_upper time_limit_upper
     *
     * @return $this
     */
    public function setTimeLimitUpper($time_limit_upper)
    {
        $this->container['time_limit_upper'] = $time_limit_upper;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

