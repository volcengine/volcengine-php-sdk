<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BudgetListForListBudgetOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetListForListBudgetOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actual_amount' => 'string',
        'budget_amount' => 'string',
        'budget_end_time' => 'string',
        'budget_id' => 'string',
        'budget_name' => 'string',
        'budget_start_time' => 'string',
        'budget_type' => 'string',
        'period' => 'string',
        'ratio' => 'string',
        'status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actual_amount' => null,
        'budget_amount' => null,
        'budget_end_time' => null,
        'budget_id' => null,
        'budget_name' => null,
        'budget_start_time' => null,
        'budget_type' => null,
        'period' => null,
        'ratio' => null,
        'status' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_amount' => 'ActualAmount',
        'budget_amount' => 'BudgetAmount',
        'budget_end_time' => 'BudgetEndTime',
        'budget_id' => 'BudgetID',
        'budget_name' => 'BudgetName',
        'budget_start_time' => 'BudgetStartTime',
        'budget_type' => 'BudgetType',
        'period' => 'Period',
        'ratio' => 'Ratio',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_amount' => 'setActualAmount',
        'budget_amount' => 'setBudgetAmount',
        'budget_end_time' => 'setBudgetEndTime',
        'budget_id' => 'setBudgetId',
        'budget_name' => 'setBudgetName',
        'budget_start_time' => 'setBudgetStartTime',
        'budget_type' => 'setBudgetType',
        'period' => 'setPeriod',
        'ratio' => 'setRatio',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_amount' => 'getActualAmount',
        'budget_amount' => 'getBudgetAmount',
        'budget_end_time' => 'getBudgetEndTime',
        'budget_id' => 'getBudgetId',
        'budget_name' => 'getBudgetName',
        'budget_start_time' => 'getBudgetStartTime',
        'budget_type' => 'getBudgetType',
        'period' => 'getPeriod',
        'ratio' => 'getRatio',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BUDGET_TYPE_COST_BUDGET = 'cost_budget';
    const PERIOD_MONTH = 'month';
    const PERIOD_QUARTER = 'quarter';
    const PERIOD_YEAR = 'year';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBudgetTypeAllowableValues()
    {
        return [
            self::BUDGET_TYPE_COST_BUDGET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_MONTH,
            self::PERIOD_QUARTER,
            self::PERIOD_YEAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actual_amount'] = isset($data['actual_amount']) ? $data['actual_amount'] : null;
        $this->container['budget_amount'] = isset($data['budget_amount']) ? $data['budget_amount'] : null;
        $this->container['budget_end_time'] = isset($data['budget_end_time']) ? $data['budget_end_time'] : null;
        $this->container['budget_id'] = isset($data['budget_id']) ? $data['budget_id'] : null;
        $this->container['budget_name'] = isset($data['budget_name']) ? $data['budget_name'] : null;
        $this->container['budget_start_time'] = isset($data['budget_start_time']) ? $data['budget_start_time'] : null;
        $this->container['budget_type'] = isset($data['budget_type']) ? $data['budget_type'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['ratio'] = isset($data['ratio']) ? $data['ratio'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBudgetTypeAllowableValues();
        if (!is_null($this->container['budget_type']) && !in_array($this->container['budget_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'budget_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($this->container['period']) && !in_array($this->container['period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_amount
     *
     * @return string
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param string $actual_amount actual_amount
     *
     * @return $this
     */
    public function setActualAmount($actual_amount)
    {
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets budget_amount
     *
     * @return string
     */
    public function getBudgetAmount()
    {
        return $this->container['budget_amount'];
    }

    /**
     * Sets budget_amount
     *
     * @param string $budget_amount budget_amount
     *
     * @return $this
     */
    public function setBudgetAmount($budget_amount)
    {
        $this->container['budget_amount'] = $budget_amount;

        return $this;
    }

    /**
     * Gets budget_end_time
     *
     * @return string
     */
    public function getBudgetEndTime()
    {
        return $this->container['budget_end_time'];
    }

    /**
     * Sets budget_end_time
     *
     * @param string $budget_end_time budget_end_time
     *
     * @return $this
     */
    public function setBudgetEndTime($budget_end_time)
    {
        $this->container['budget_end_time'] = $budget_end_time;

        return $this;
    }

    /**
     * Gets budget_id
     *
     * @return string
     */
    public function getBudgetId()
    {
        return $this->container['budget_id'];
    }

    /**
     * Sets budget_id
     *
     * @param string $budget_id budget_id
     *
     * @return $this
     */
    public function setBudgetId($budget_id)
    {
        $this->container['budget_id'] = $budget_id;

        return $this;
    }

    /**
     * Gets budget_name
     *
     * @return string
     */
    public function getBudgetName()
    {
        return $this->container['budget_name'];
    }

    /**
     * Sets budget_name
     *
     * @param string $budget_name budget_name
     *
     * @return $this
     */
    public function setBudgetName($budget_name)
    {
        $this->container['budget_name'] = $budget_name;

        return $this;
    }

    /**
     * Gets budget_start_time
     *
     * @return string
     */
    public function getBudgetStartTime()
    {
        return $this->container['budget_start_time'];
    }

    /**
     * Sets budget_start_time
     *
     * @param string $budget_start_time budget_start_time
     *
     * @return $this
     */
    public function setBudgetStartTime($budget_start_time)
    {
        $this->container['budget_start_time'] = $budget_start_time;

        return $this;
    }

    /**
     * Gets budget_type
     *
     * @return string
     */
    public function getBudgetType()
    {
        return $this->container['budget_type'];
    }

    /**
     * Sets budget_type
     *
     * @param string $budget_type budget_type
     *
     * @return $this
     */
    public function setBudgetType($budget_type)
    {
        $allowedValues = $this->getBudgetTypeAllowableValues();
        if (!is_null($budget_type) && !in_array($budget_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'budget_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['budget_type'] = $budget_type;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($period) && !in_array($period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets ratio
     *
     * @return string
     */
    public function getRatio()
    {
        return $this->container['ratio'];
    }

    /**
     * Sets ratio
     *
     * @param string $ratio ratio
     *
     * @return $this
     */
    public function setRatio($ratio)
    {
        $this->container['ratio'] = $ratio;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

