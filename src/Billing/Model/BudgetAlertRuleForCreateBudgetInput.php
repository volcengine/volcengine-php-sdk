<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BudgetAlertRuleForCreateBudgetInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetAlertRuleForCreateBudgetInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'budget_alert_item' => 'string',
        'budget_alert_rule_id' => 'string',
        'budget_alert_threshold' => 'string',
        'budget_alert_threshold_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'budget_alert_item' => null,
        'budget_alert_rule_id' => null,
        'budget_alert_threshold' => null,
        'budget_alert_threshold_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'budget_alert_item' => 'BudgetAlertItem',
        'budget_alert_rule_id' => 'BudgetAlertRuleID',
        'budget_alert_threshold' => 'BudgetAlertThreshold',
        'budget_alert_threshold_type' => 'BudgetAlertThresholdType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'budget_alert_item' => 'setBudgetAlertItem',
        'budget_alert_rule_id' => 'setBudgetAlertRuleId',
        'budget_alert_threshold' => 'setBudgetAlertThreshold',
        'budget_alert_threshold_type' => 'setBudgetAlertThresholdType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'budget_alert_item' => 'getBudgetAlertItem',
        'budget_alert_rule_id' => 'getBudgetAlertRuleId',
        'budget_alert_threshold' => 'getBudgetAlertThreshold',
        'budget_alert_threshold_type' => 'getBudgetAlertThresholdType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BUDGET_ALERT_ITEM_ACTUAL_AMOUNT = 'actual_amount';
    const BUDGET_ALERT_THRESHOLD_TYPE_AMOUNT = 'amount';
    const BUDGET_ALERT_THRESHOLD_TYPE_RATIO = 'ratio';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBudgetAlertItemAllowableValues()
    {
        return [
            self::BUDGET_ALERT_ITEM_ACTUAL_AMOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBudgetAlertThresholdTypeAllowableValues()
    {
        return [
            self::BUDGET_ALERT_THRESHOLD_TYPE_AMOUNT,
            self::BUDGET_ALERT_THRESHOLD_TYPE_RATIO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['budget_alert_item'] = isset($data['budget_alert_item']) ? $data['budget_alert_item'] : null;
        $this->container['budget_alert_rule_id'] = isset($data['budget_alert_rule_id']) ? $data['budget_alert_rule_id'] : null;
        $this->container['budget_alert_threshold'] = isset($data['budget_alert_threshold']) ? $data['budget_alert_threshold'] : null;
        $this->container['budget_alert_threshold_type'] = isset($data['budget_alert_threshold_type']) ? $data['budget_alert_threshold_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBudgetAlertItemAllowableValues();
        if (!is_null($this->container['budget_alert_item']) && !in_array($this->container['budget_alert_item'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'budget_alert_item', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBudgetAlertThresholdTypeAllowableValues();
        if (!is_null($this->container['budget_alert_threshold_type']) && !in_array($this->container['budget_alert_threshold_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'budget_alert_threshold_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets budget_alert_item
     *
     * @return string
     */
    public function getBudgetAlertItem()
    {
        return $this->container['budget_alert_item'];
    }

    /**
     * Sets budget_alert_item
     *
     * @param string $budget_alert_item budget_alert_item
     *
     * @return $this
     */
    public function setBudgetAlertItem($budget_alert_item)
    {
        $allowedValues = $this->getBudgetAlertItemAllowableValues();
        if (!is_null($budget_alert_item) && !in_array($budget_alert_item, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'budget_alert_item', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['budget_alert_item'] = $budget_alert_item;

        return $this;
    }

    /**
     * Gets budget_alert_rule_id
     *
     * @return string
     */
    public function getBudgetAlertRuleId()
    {
        return $this->container['budget_alert_rule_id'];
    }

    /**
     * Sets budget_alert_rule_id
     *
     * @param string $budget_alert_rule_id budget_alert_rule_id
     *
     * @return $this
     */
    public function setBudgetAlertRuleId($budget_alert_rule_id)
    {
        $this->container['budget_alert_rule_id'] = $budget_alert_rule_id;

        return $this;
    }

    /**
     * Gets budget_alert_threshold
     *
     * @return string
     */
    public function getBudgetAlertThreshold()
    {
        return $this->container['budget_alert_threshold'];
    }

    /**
     * Sets budget_alert_threshold
     *
     * @param string $budget_alert_threshold budget_alert_threshold
     *
     * @return $this
     */
    public function setBudgetAlertThreshold($budget_alert_threshold)
    {
        $this->container['budget_alert_threshold'] = $budget_alert_threshold;

        return $this;
    }

    /**
     * Gets budget_alert_threshold_type
     *
     * @return string
     */
    public function getBudgetAlertThresholdType()
    {
        return $this->container['budget_alert_threshold_type'];
    }

    /**
     * Sets budget_alert_threshold_type
     *
     * @param string $budget_alert_threshold_type budget_alert_threshold_type
     *
     * @return $this
     */
    public function setBudgetAlertThresholdType($budget_alert_threshold_type)
    {
        $allowedValues = $this->getBudgetAlertThresholdTypeAllowableValues();
        if (!is_null($budget_alert_threshold_type) && !in_array($budget_alert_threshold_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'budget_alert_threshold_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['budget_alert_threshold_type'] = $budget_alert_threshold_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

