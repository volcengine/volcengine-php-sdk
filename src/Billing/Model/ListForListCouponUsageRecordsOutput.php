<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListForListCouponUsageRecordsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListForListCouponUsageRecordsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'change_amount' => 'double',
        'change_type' => 'int',
        'coupon_id' => 'string',
        'created_time' => 'string',
        'pay_type' => 'string',
        'product_code' => 'string',
        'product_name' => 'string',
        'sub_business_id' => 'string',
        'user_account_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int32',
        'change_amount' => 'double',
        'change_type' => 'int32',
        'coupon_id' => null,
        'created_time' => null,
        'pay_type' => null,
        'product_code' => null,
        'product_name' => null,
        'sub_business_id' => null,
        'user_account_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'change_amount' => 'ChangeAmount',
        'change_type' => 'ChangeType',
        'coupon_id' => 'CouponID',
        'created_time' => 'CreatedTime',
        'pay_type' => 'PayType',
        'product_code' => 'ProductCode',
        'product_name' => 'ProductName',
        'sub_business_id' => 'SubBusinessID',
        'user_account_id' => 'UserAccountID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'change_amount' => 'setChangeAmount',
        'change_type' => 'setChangeType',
        'coupon_id' => 'setCouponId',
        'created_time' => 'setCreatedTime',
        'pay_type' => 'setPayType',
        'product_code' => 'setProductCode',
        'product_name' => 'setProductName',
        'sub_business_id' => 'setSubBusinessId',
        'user_account_id' => 'setUserAccountId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'change_amount' => 'getChangeAmount',
        'change_type' => 'getChangeType',
        'coupon_id' => 'getCouponId',
        'created_time' => 'getCreatedTime',
        'pay_type' => 'getPayType',
        'product_code' => 'getProductCode',
        'product_name' => 'getProductName',
        'sub_business_id' => 'getSubBusinessId',
        'user_account_id' => 'getUserAccountId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['change_amount'] = isset($data['change_amount']) ? $data['change_amount'] : null;
        $this->container['change_type'] = isset($data['change_type']) ? $data['change_type'] : null;
        $this->container['coupon_id'] = isset($data['coupon_id']) ? $data['coupon_id'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['pay_type'] = isset($data['pay_type']) ? $data['pay_type'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['sub_business_id'] = isset($data['sub_business_id']) ? $data['sub_business_id'] : null;
        $this->container['user_account_id'] = isset($data['user_account_id']) ? $data['user_account_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets change_amount
     *
     * @return double
     */
    public function getChangeAmount()
    {
        return $this->container['change_amount'];
    }

    /**
     * Sets change_amount
     *
     * @param double $change_amount change_amount
     *
     * @return $this
     */
    public function setChangeAmount($change_amount)
    {
        $this->container['change_amount'] = $change_amount;

        return $this;
    }

    /**
     * Gets change_type
     *
     * @return int
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param int $change_type change_type
     *
     * @return $this
     */
    public function setChangeType($change_type)
    {
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets coupon_id
     *
     * @return string
     */
    public function getCouponId()
    {
        return $this->container['coupon_id'];
    }

    /**
     * Sets coupon_id
     *
     * @param string $coupon_id coupon_id
     *
     * @return $this
     */
    public function setCouponId($coupon_id)
    {
        $this->container['coupon_id'] = $coupon_id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string $pay_type pay_type
     *
     * @return $this
     */
    public function setPayType($pay_type)
    {
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code product_code
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets sub_business_id
     *
     * @return string
     */
    public function getSubBusinessId()
    {
        return $this->container['sub_business_id'];
    }

    /**
     * Sets sub_business_id
     *
     * @param string $sub_business_id sub_business_id
     *
     * @return $this
     */
    public function setSubBusinessId($sub_business_id)
    {
        $this->container['sub_business_id'] = $sub_business_id;

        return $this;
    }

    /**
     * Gets user_account_id
     *
     * @return int
     */
    public function getUserAccountId()
    {
        return $this->container['user_account_id'];
    }

    /**
     * Sets user_account_id
     *
     * @param int $user_account_id user_account_id
     *
     * @return $this
     */
    public function setUserAccountId($user_account_id)
    {
        $this->container['user_account_id'] = $user_account_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

