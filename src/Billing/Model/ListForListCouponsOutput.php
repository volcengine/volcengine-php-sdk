<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListForListCouponsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListForListCouponsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'acquire_time' => 'string',
        'amount_limit' => 'double',
        'assigned_owner_id_list' => 'int[]',
        'begin_time' => 'string',
        'coupon_id' => 'string',
        'coupon_name' => 'string',
        'expired_time' => 'string',
        'order_type_limit' => 'string',
        'pay_type_limit' => 'string',
        'product_limit_list' => '\Volcengine\Billing\Model\ProductLimitListForListCouponsOutput[]',
        'remaining_amount' => 'double',
        'remark' => 'string',
        'status' => 'int',
        'usage_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int32',
        'acquire_time' => null,
        'amount_limit' => 'double',
        'assigned_owner_id_list' => 'int32',
        'begin_time' => null,
        'coupon_id' => null,
        'coupon_name' => null,
        'expired_time' => null,
        'order_type_limit' => null,
        'pay_type_limit' => null,
        'product_limit_list' => null,
        'remaining_amount' => 'double',
        'remark' => null,
        'status' => 'int32',
        'usage_limit' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'acquire_time' => 'AcquireTime',
        'amount_limit' => 'AmountLimit',
        'assigned_owner_id_list' => 'AssignedOwnerIDList',
        'begin_time' => 'BeginTime',
        'coupon_id' => 'CouponID',
        'coupon_name' => 'CouponName',
        'expired_time' => 'ExpiredTime',
        'order_type_limit' => 'OrderTypeLimit',
        'pay_type_limit' => 'PayTypeLimit',
        'product_limit_list' => 'ProductLimitList',
        'remaining_amount' => 'RemainingAmount',
        'remark' => 'Remark',
        'status' => 'Status',
        'usage_limit' => 'UsageLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'acquire_time' => 'setAcquireTime',
        'amount_limit' => 'setAmountLimit',
        'assigned_owner_id_list' => 'setAssignedOwnerIdList',
        'begin_time' => 'setBeginTime',
        'coupon_id' => 'setCouponId',
        'coupon_name' => 'setCouponName',
        'expired_time' => 'setExpiredTime',
        'order_type_limit' => 'setOrderTypeLimit',
        'pay_type_limit' => 'setPayTypeLimit',
        'product_limit_list' => 'setProductLimitList',
        'remaining_amount' => 'setRemainingAmount',
        'remark' => 'setRemark',
        'status' => 'setStatus',
        'usage_limit' => 'setUsageLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'acquire_time' => 'getAcquireTime',
        'amount_limit' => 'getAmountLimit',
        'assigned_owner_id_list' => 'getAssignedOwnerIdList',
        'begin_time' => 'getBeginTime',
        'coupon_id' => 'getCouponId',
        'coupon_name' => 'getCouponName',
        'expired_time' => 'getExpiredTime',
        'order_type_limit' => 'getOrderTypeLimit',
        'pay_type_limit' => 'getPayTypeLimit',
        'product_limit_list' => 'getProductLimitList',
        'remaining_amount' => 'getRemainingAmount',
        'remark' => 'getRemark',
        'status' => 'getStatus',
        'usage_limit' => 'getUsageLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['acquire_time'] = isset($data['acquire_time']) ? $data['acquire_time'] : null;
        $this->container['amount_limit'] = isset($data['amount_limit']) ? $data['amount_limit'] : null;
        $this->container['assigned_owner_id_list'] = isset($data['assigned_owner_id_list']) ? $data['assigned_owner_id_list'] : null;
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['coupon_id'] = isset($data['coupon_id']) ? $data['coupon_id'] : null;
        $this->container['coupon_name'] = isset($data['coupon_name']) ? $data['coupon_name'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['order_type_limit'] = isset($data['order_type_limit']) ? $data['order_type_limit'] : null;
        $this->container['pay_type_limit'] = isset($data['pay_type_limit']) ? $data['pay_type_limit'] : null;
        $this->container['product_limit_list'] = isset($data['product_limit_list']) ? $data['product_limit_list'] : null;
        $this->container['remaining_amount'] = isset($data['remaining_amount']) ? $data['remaining_amount'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['usage_limit'] = isset($data['usage_limit']) ? $data['usage_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets acquire_time
     *
     * @return string
     */
    public function getAcquireTime()
    {
        return $this->container['acquire_time'];
    }

    /**
     * Sets acquire_time
     *
     * @param string $acquire_time acquire_time
     *
     * @return $this
     */
    public function setAcquireTime($acquire_time)
    {
        $this->container['acquire_time'] = $acquire_time;

        return $this;
    }

    /**
     * Gets amount_limit
     *
     * @return double
     */
    public function getAmountLimit()
    {
        return $this->container['amount_limit'];
    }

    /**
     * Sets amount_limit
     *
     * @param double $amount_limit amount_limit
     *
     * @return $this
     */
    public function setAmountLimit($amount_limit)
    {
        $this->container['amount_limit'] = $amount_limit;

        return $this;
    }

    /**
     * Gets assigned_owner_id_list
     *
     * @return int[]
     */
    public function getAssignedOwnerIdList()
    {
        return $this->container['assigned_owner_id_list'];
    }

    /**
     * Sets assigned_owner_id_list
     *
     * @param int[] $assigned_owner_id_list assigned_owner_id_list
     *
     * @return $this
     */
    public function setAssignedOwnerIdList($assigned_owner_id_list)
    {
        $this->container['assigned_owner_id_list'] = $assigned_owner_id_list;

        return $this;
    }

    /**
     * Gets begin_time
     *
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     *
     * @param string $begin_time begin_time
     *
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets coupon_id
     *
     * @return string
     */
    public function getCouponId()
    {
        return $this->container['coupon_id'];
    }

    /**
     * Sets coupon_id
     *
     * @param string $coupon_id coupon_id
     *
     * @return $this
     */
    public function setCouponId($coupon_id)
    {
        $this->container['coupon_id'] = $coupon_id;

        return $this;
    }

    /**
     * Gets coupon_name
     *
     * @return string
     */
    public function getCouponName()
    {
        return $this->container['coupon_name'];
    }

    /**
     * Sets coupon_name
     *
     * @param string $coupon_name coupon_name
     *
     * @return $this
     */
    public function setCouponName($coupon_name)
    {
        $this->container['coupon_name'] = $coupon_name;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets order_type_limit
     *
     * @return string
     */
    public function getOrderTypeLimit()
    {
        return $this->container['order_type_limit'];
    }

    /**
     * Sets order_type_limit
     *
     * @param string $order_type_limit order_type_limit
     *
     * @return $this
     */
    public function setOrderTypeLimit($order_type_limit)
    {
        $this->container['order_type_limit'] = $order_type_limit;

        return $this;
    }

    /**
     * Gets pay_type_limit
     *
     * @return string
     */
    public function getPayTypeLimit()
    {
        return $this->container['pay_type_limit'];
    }

    /**
     * Sets pay_type_limit
     *
     * @param string $pay_type_limit pay_type_limit
     *
     * @return $this
     */
    public function setPayTypeLimit($pay_type_limit)
    {
        $this->container['pay_type_limit'] = $pay_type_limit;

        return $this;
    }

    /**
     * Gets product_limit_list
     *
     * @return \Volcengine\Billing\Model\ProductLimitListForListCouponsOutput[]
     */
    public function getProductLimitList()
    {
        return $this->container['product_limit_list'];
    }

    /**
     * Sets product_limit_list
     *
     * @param \Volcengine\Billing\Model\ProductLimitListForListCouponsOutput[] $product_limit_list product_limit_list
     *
     * @return $this
     */
    public function setProductLimitList($product_limit_list)
    {
        $this->container['product_limit_list'] = $product_limit_list;

        return $this;
    }

    /**
     * Gets remaining_amount
     *
     * @return double
     */
    public function getRemainingAmount()
    {
        return $this->container['remaining_amount'];
    }

    /**
     * Sets remaining_amount
     *
     * @param double $remaining_amount remaining_amount
     *
     * @return $this
     */
    public function setRemainingAmount($remaining_amount)
    {
        $this->container['remaining_amount'] = $remaining_amount;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets usage_limit
     *
     * @return int
     */
    public function getUsageLimit()
    {
        return $this->container['usage_limit'];
    }

    /**
     * Sets usage_limit
     *
     * @param int $usage_limit usage_limit
     *
     * @return $this
     */
    public function setUsageLimit($usage_limit)
    {
        $this->container['usage_limit'] = $usage_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

