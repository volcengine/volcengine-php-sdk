<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Coze20250601\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UserForListCozeUserOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserForListCozeUserOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coze_user_id' => 'string',
        'coze_user_in_enterprise' => 'string',
        'coze_user_name' => 'string',
        'created_time' => 'string',
        'updated_time' => 'string',
        'user_id' => 'string',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coze_user_id' => null,
        'coze_user_in_enterprise' => null,
        'coze_user_name' => null,
        'created_time' => null,
        'updated_time' => null,
        'user_id' => null,
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coze_user_id' => 'CozeUserId',
        'coze_user_in_enterprise' => 'CozeUserInEnterprise',
        'coze_user_name' => 'CozeUserName',
        'created_time' => 'CreatedTime',
        'updated_time' => 'UpdatedTime',
        'user_id' => 'UserId',
        'user_name' => 'UserName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coze_user_id' => 'setCozeUserId',
        'coze_user_in_enterprise' => 'setCozeUserInEnterprise',
        'coze_user_name' => 'setCozeUserName',
        'created_time' => 'setCreatedTime',
        'updated_time' => 'setUpdatedTime',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coze_user_id' => 'getCozeUserId',
        'coze_user_in_enterprise' => 'getCozeUserInEnterprise',
        'coze_user_name' => 'getCozeUserName',
        'created_time' => 'getCreatedTime',
        'updated_time' => 'getUpdatedTime',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coze_user_id'] = isset($data['coze_user_id']) ? $data['coze_user_id'] : null;
        $this->container['coze_user_in_enterprise'] = isset($data['coze_user_in_enterprise']) ? $data['coze_user_in_enterprise'] : null;
        $this->container['coze_user_name'] = isset($data['coze_user_name']) ? $data['coze_user_name'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coze_user_id
     *
     * @return string
     */
    public function getCozeUserId()
    {
        return $this->container['coze_user_id'];
    }

    /**
     * Sets coze_user_id
     *
     * @param string $coze_user_id coze_user_id
     *
     * @return $this
     */
    public function setCozeUserId($coze_user_id)
    {
        $this->container['coze_user_id'] = $coze_user_id;

        return $this;
    }

    /**
     * Gets coze_user_in_enterprise
     *
     * @return string
     */
    public function getCozeUserInEnterprise()
    {
        return $this->container['coze_user_in_enterprise'];
    }

    /**
     * Sets coze_user_in_enterprise
     *
     * @param string $coze_user_in_enterprise coze_user_in_enterprise
     *
     * @return $this
     */
    public function setCozeUserInEnterprise($coze_user_in_enterprise)
    {
        $this->container['coze_user_in_enterprise'] = $coze_user_in_enterprise;

        return $this;
    }

    /**
     * Gets coze_user_name
     *
     * @return string
     */
    public function getCozeUserName()
    {
        return $this->container['coze_user_name'];
    }

    /**
     * Sets coze_user_name
     *
     * @param string $coze_user_name coze_user_name
     *
     * @return $this
     */
    public function setCozeUserName($coze_user_name)
    {
        $this->container['coze_user_name'] = $coze_user_name;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return string
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param string $updated_time updated_time
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

