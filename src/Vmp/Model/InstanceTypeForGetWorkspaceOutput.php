<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceTypeForGetWorkspaceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceTypeForGetWorkspaceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_series' => 'int',
        'availability_zone_replicas' => 'int',
        'calculate_price_params' => '\Volcengine\Vmp\Model\CalculatePriceParamForGetWorkspaceOutput[]',
        'downsampling_periods' => 'string[]',
        'id' => 'string',
        'ingest_samples_per_second' => 'int',
        'query_concurrency' => 'int',
        'query_per_second' => 'int',
        'replicas_per_zone' => 'int',
        'retention_period' => 'string',
        'scan_samples_per_second' => 'int',
        'scan_series_per_second' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_series' => 'int32',
        'availability_zone_replicas' => 'int32',
        'calculate_price_params' => null,
        'downsampling_periods' => null,
        'id' => null,
        'ingest_samples_per_second' => 'int32',
        'query_concurrency' => 'int32',
        'query_per_second' => 'int32',
        'replicas_per_zone' => 'int32',
        'retention_period' => null,
        'scan_samples_per_second' => 'int64',
        'scan_series_per_second' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_series' => 'ActiveSeries',
        'availability_zone_replicas' => 'AvailabilityZoneReplicas',
        'calculate_price_params' => 'CalculatePriceParams',
        'downsampling_periods' => 'DownsamplingPeriods',
        'id' => 'Id',
        'ingest_samples_per_second' => 'IngestSamplesPerSecond',
        'query_concurrency' => 'QueryConcurrency',
        'query_per_second' => 'QueryPerSecond',
        'replicas_per_zone' => 'ReplicasPerZone',
        'retention_period' => 'RetentionPeriod',
        'scan_samples_per_second' => 'ScanSamplesPerSecond',
        'scan_series_per_second' => 'ScanSeriesPerSecond'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_series' => 'setActiveSeries',
        'availability_zone_replicas' => 'setAvailabilityZoneReplicas',
        'calculate_price_params' => 'setCalculatePriceParams',
        'downsampling_periods' => 'setDownsamplingPeriods',
        'id' => 'setId',
        'ingest_samples_per_second' => 'setIngestSamplesPerSecond',
        'query_concurrency' => 'setQueryConcurrency',
        'query_per_second' => 'setQueryPerSecond',
        'replicas_per_zone' => 'setReplicasPerZone',
        'retention_period' => 'setRetentionPeriod',
        'scan_samples_per_second' => 'setScanSamplesPerSecond',
        'scan_series_per_second' => 'setScanSeriesPerSecond'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_series' => 'getActiveSeries',
        'availability_zone_replicas' => 'getAvailabilityZoneReplicas',
        'calculate_price_params' => 'getCalculatePriceParams',
        'downsampling_periods' => 'getDownsamplingPeriods',
        'id' => 'getId',
        'ingest_samples_per_second' => 'getIngestSamplesPerSecond',
        'query_concurrency' => 'getQueryConcurrency',
        'query_per_second' => 'getQueryPerSecond',
        'replicas_per_zone' => 'getReplicasPerZone',
        'retention_period' => 'getRetentionPeriod',
        'scan_samples_per_second' => 'getScanSamplesPerSecond',
        'scan_series_per_second' => 'getScanSeriesPerSecond'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_series'] = isset($data['active_series']) ? $data['active_series'] : null;
        $this->container['availability_zone_replicas'] = isset($data['availability_zone_replicas']) ? $data['availability_zone_replicas'] : null;
        $this->container['calculate_price_params'] = isset($data['calculate_price_params']) ? $data['calculate_price_params'] : null;
        $this->container['downsampling_periods'] = isset($data['downsampling_periods']) ? $data['downsampling_periods'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ingest_samples_per_second'] = isset($data['ingest_samples_per_second']) ? $data['ingest_samples_per_second'] : null;
        $this->container['query_concurrency'] = isset($data['query_concurrency']) ? $data['query_concurrency'] : null;
        $this->container['query_per_second'] = isset($data['query_per_second']) ? $data['query_per_second'] : null;
        $this->container['replicas_per_zone'] = isset($data['replicas_per_zone']) ? $data['replicas_per_zone'] : null;
        $this->container['retention_period'] = isset($data['retention_period']) ? $data['retention_period'] : null;
        $this->container['scan_samples_per_second'] = isset($data['scan_samples_per_second']) ? $data['scan_samples_per_second'] : null;
        $this->container['scan_series_per_second'] = isset($data['scan_series_per_second']) ? $data['scan_series_per_second'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_series
     *
     * @return int
     */
    public function getActiveSeries()
    {
        return $this->container['active_series'];
    }

    /**
     * Sets active_series
     *
     * @param int $active_series active_series
     *
     * @return $this
     */
    public function setActiveSeries($active_series)
    {
        $this->container['active_series'] = $active_series;

        return $this;
    }

    /**
     * Gets availability_zone_replicas
     *
     * @return int
     */
    public function getAvailabilityZoneReplicas()
    {
        return $this->container['availability_zone_replicas'];
    }

    /**
     * Sets availability_zone_replicas
     *
     * @param int $availability_zone_replicas availability_zone_replicas
     *
     * @return $this
     */
    public function setAvailabilityZoneReplicas($availability_zone_replicas)
    {
        $this->container['availability_zone_replicas'] = $availability_zone_replicas;

        return $this;
    }

    /**
     * Gets calculate_price_params
     *
     * @return \Volcengine\Vmp\Model\CalculatePriceParamForGetWorkspaceOutput[]
     */
    public function getCalculatePriceParams()
    {
        return $this->container['calculate_price_params'];
    }

    /**
     * Sets calculate_price_params
     *
     * @param \Volcengine\Vmp\Model\CalculatePriceParamForGetWorkspaceOutput[] $calculate_price_params calculate_price_params
     *
     * @return $this
     */
    public function setCalculatePriceParams($calculate_price_params)
    {
        $this->container['calculate_price_params'] = $calculate_price_params;

        return $this;
    }

    /**
     * Gets downsampling_periods
     *
     * @return string[]
     */
    public function getDownsamplingPeriods()
    {
        return $this->container['downsampling_periods'];
    }

    /**
     * Sets downsampling_periods
     *
     * @param string[] $downsampling_periods downsampling_periods
     *
     * @return $this
     */
    public function setDownsamplingPeriods($downsampling_periods)
    {
        $this->container['downsampling_periods'] = $downsampling_periods;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ingest_samples_per_second
     *
     * @return int
     */
    public function getIngestSamplesPerSecond()
    {
        return $this->container['ingest_samples_per_second'];
    }

    /**
     * Sets ingest_samples_per_second
     *
     * @param int $ingest_samples_per_second ingest_samples_per_second
     *
     * @return $this
     */
    public function setIngestSamplesPerSecond($ingest_samples_per_second)
    {
        $this->container['ingest_samples_per_second'] = $ingest_samples_per_second;

        return $this;
    }

    /**
     * Gets query_concurrency
     *
     * @return int
     */
    public function getQueryConcurrency()
    {
        return $this->container['query_concurrency'];
    }

    /**
     * Sets query_concurrency
     *
     * @param int $query_concurrency query_concurrency
     *
     * @return $this
     */
    public function setQueryConcurrency($query_concurrency)
    {
        $this->container['query_concurrency'] = $query_concurrency;

        return $this;
    }

    /**
     * Gets query_per_second
     *
     * @return int
     */
    public function getQueryPerSecond()
    {
        return $this->container['query_per_second'];
    }

    /**
     * Sets query_per_second
     *
     * @param int $query_per_second query_per_second
     *
     * @return $this
     */
    public function setQueryPerSecond($query_per_second)
    {
        $this->container['query_per_second'] = $query_per_second;

        return $this;
    }

    /**
     * Gets replicas_per_zone
     *
     * @return int
     */
    public function getReplicasPerZone()
    {
        return $this->container['replicas_per_zone'];
    }

    /**
     * Sets replicas_per_zone
     *
     * @param int $replicas_per_zone replicas_per_zone
     *
     * @return $this
     */
    public function setReplicasPerZone($replicas_per_zone)
    {
        $this->container['replicas_per_zone'] = $replicas_per_zone;

        return $this;
    }

    /**
     * Gets retention_period
     *
     * @return string
     */
    public function getRetentionPeriod()
    {
        return $this->container['retention_period'];
    }

    /**
     * Sets retention_period
     *
     * @param string $retention_period retention_period
     *
     * @return $this
     */
    public function setRetentionPeriod($retention_period)
    {
        $this->container['retention_period'] = $retention_period;

        return $this;
    }

    /**
     * Gets scan_samples_per_second
     *
     * @return int
     */
    public function getScanSamplesPerSecond()
    {
        return $this->container['scan_samples_per_second'];
    }

    /**
     * Sets scan_samples_per_second
     *
     * @param int $scan_samples_per_second scan_samples_per_second
     *
     * @return $this
     */
    public function setScanSamplesPerSecond($scan_samples_per_second)
    {
        $this->container['scan_samples_per_second'] = $scan_samples_per_second;

        return $this;
    }

    /**
     * Gets scan_series_per_second
     *
     * @return int
     */
    public function getScanSeriesPerSecond()
    {
        return $this->container['scan_series_per_second'];
    }

    /**
     * Sets scan_series_per_second
     *
     * @param int $scan_series_per_second scan_series_per_second
     *
     * @return $this
     */
    public function setScanSeriesPerSecond($scan_series_per_second)
    {
        $this->container['scan_series_per_second'] = $scan_series_per_second;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

