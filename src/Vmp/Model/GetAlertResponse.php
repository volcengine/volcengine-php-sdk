<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetAlertResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAlertResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alerting_rule_id' => 'string',
        'alerting_rule_query' => '\Volcengine\Vmp\Model\AlertingRuleQueryForGetAlertOutput',
        'alerting_rule_type' => 'string',
        'current_level' => 'string',
        'current_phase' => 'string',
        'id' => 'string',
        'initial_alert_timestamp' => 'string',
        'last_alert_timestamp' => 'string',
        'levels' => '\Volcengine\Vmp\Model\LevelForGetAlertOutput[]',
        'resolve_timestamp' => 'string',
        'resource' => '\Volcengine\Vmp\Model\ResourceForGetAlertOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alerting_rule_id' => null,
        'alerting_rule_query' => null,
        'alerting_rule_type' => null,
        'current_level' => null,
        'current_phase' => null,
        'id' => null,
        'initial_alert_timestamp' => null,
        'last_alert_timestamp' => null,
        'levels' => null,
        'resolve_timestamp' => null,
        'resource' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alerting_rule_id' => 'AlertingRuleId',
        'alerting_rule_query' => 'AlertingRuleQuery',
        'alerting_rule_type' => 'AlertingRuleType',
        'current_level' => 'CurrentLevel',
        'current_phase' => 'CurrentPhase',
        'id' => 'Id',
        'initial_alert_timestamp' => 'InitialAlertTimestamp',
        'last_alert_timestamp' => 'LastAlertTimestamp',
        'levels' => 'Levels',
        'resolve_timestamp' => 'ResolveTimestamp',
        'resource' => 'Resource'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alerting_rule_id' => 'setAlertingRuleId',
        'alerting_rule_query' => 'setAlertingRuleQuery',
        'alerting_rule_type' => 'setAlertingRuleType',
        'current_level' => 'setCurrentLevel',
        'current_phase' => 'setCurrentPhase',
        'id' => 'setId',
        'initial_alert_timestamp' => 'setInitialAlertTimestamp',
        'last_alert_timestamp' => 'setLastAlertTimestamp',
        'levels' => 'setLevels',
        'resolve_timestamp' => 'setResolveTimestamp',
        'resource' => 'setResource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alerting_rule_id' => 'getAlertingRuleId',
        'alerting_rule_query' => 'getAlertingRuleQuery',
        'alerting_rule_type' => 'getAlertingRuleType',
        'current_level' => 'getCurrentLevel',
        'current_phase' => 'getCurrentPhase',
        'id' => 'getId',
        'initial_alert_timestamp' => 'getInitialAlertTimestamp',
        'last_alert_timestamp' => 'getLastAlertTimestamp',
        'levels' => 'getLevels',
        'resolve_timestamp' => 'getResolveTimestamp',
        'resource' => 'getResource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alerting_rule_id'] = isset($data['alerting_rule_id']) ? $data['alerting_rule_id'] : null;
        $this->container['alerting_rule_query'] = isset($data['alerting_rule_query']) ? $data['alerting_rule_query'] : null;
        $this->container['alerting_rule_type'] = isset($data['alerting_rule_type']) ? $data['alerting_rule_type'] : null;
        $this->container['current_level'] = isset($data['current_level']) ? $data['current_level'] : null;
        $this->container['current_phase'] = isset($data['current_phase']) ? $data['current_phase'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['initial_alert_timestamp'] = isset($data['initial_alert_timestamp']) ? $data['initial_alert_timestamp'] : null;
        $this->container['last_alert_timestamp'] = isset($data['last_alert_timestamp']) ? $data['last_alert_timestamp'] : null;
        $this->container['levels'] = isset($data['levels']) ? $data['levels'] : null;
        $this->container['resolve_timestamp'] = isset($data['resolve_timestamp']) ? $data['resolve_timestamp'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alerting_rule_id
     *
     * @return string
     */
    public function getAlertingRuleId()
    {
        return $this->container['alerting_rule_id'];
    }

    /**
     * Sets alerting_rule_id
     *
     * @param string $alerting_rule_id alerting_rule_id
     *
     * @return $this
     */
    public function setAlertingRuleId($alerting_rule_id)
    {
        $this->container['alerting_rule_id'] = $alerting_rule_id;

        return $this;
    }

    /**
     * Gets alerting_rule_query
     *
     * @return \Volcengine\Vmp\Model\AlertingRuleQueryForGetAlertOutput
     */
    public function getAlertingRuleQuery()
    {
        return $this->container['alerting_rule_query'];
    }

    /**
     * Sets alerting_rule_query
     *
     * @param \Volcengine\Vmp\Model\AlertingRuleQueryForGetAlertOutput $alerting_rule_query alerting_rule_query
     *
     * @return $this
     */
    public function setAlertingRuleQuery($alerting_rule_query)
    {
        $this->container['alerting_rule_query'] = $alerting_rule_query;

        return $this;
    }

    /**
     * Gets alerting_rule_type
     *
     * @return string
     */
    public function getAlertingRuleType()
    {
        return $this->container['alerting_rule_type'];
    }

    /**
     * Sets alerting_rule_type
     *
     * @param string $alerting_rule_type alerting_rule_type
     *
     * @return $this
     */
    public function setAlertingRuleType($alerting_rule_type)
    {
        $this->container['alerting_rule_type'] = $alerting_rule_type;

        return $this;
    }

    /**
     * Gets current_level
     *
     * @return string
     */
    public function getCurrentLevel()
    {
        return $this->container['current_level'];
    }

    /**
     * Sets current_level
     *
     * @param string $current_level current_level
     *
     * @return $this
     */
    public function setCurrentLevel($current_level)
    {
        $this->container['current_level'] = $current_level;

        return $this;
    }

    /**
     * Gets current_phase
     *
     * @return string
     */
    public function getCurrentPhase()
    {
        return $this->container['current_phase'];
    }

    /**
     * Sets current_phase
     *
     * @param string $current_phase current_phase
     *
     * @return $this
     */
    public function setCurrentPhase($current_phase)
    {
        $this->container['current_phase'] = $current_phase;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initial_alert_timestamp
     *
     * @return string
     */
    public function getInitialAlertTimestamp()
    {
        return $this->container['initial_alert_timestamp'];
    }

    /**
     * Sets initial_alert_timestamp
     *
     * @param string $initial_alert_timestamp initial_alert_timestamp
     *
     * @return $this
     */
    public function setInitialAlertTimestamp($initial_alert_timestamp)
    {
        $this->container['initial_alert_timestamp'] = $initial_alert_timestamp;

        return $this;
    }

    /**
     * Gets last_alert_timestamp
     *
     * @return string
     */
    public function getLastAlertTimestamp()
    {
        return $this->container['last_alert_timestamp'];
    }

    /**
     * Sets last_alert_timestamp
     *
     * @param string $last_alert_timestamp last_alert_timestamp
     *
     * @return $this
     */
    public function setLastAlertTimestamp($last_alert_timestamp)
    {
        $this->container['last_alert_timestamp'] = $last_alert_timestamp;

        return $this;
    }

    /**
     * Gets levels
     *
     * @return \Volcengine\Vmp\Model\LevelForGetAlertOutput[]
     */
    public function getLevels()
    {
        return $this->container['levels'];
    }

    /**
     * Sets levels
     *
     * @param \Volcengine\Vmp\Model\LevelForGetAlertOutput[] $levels levels
     *
     * @return $this
     */
    public function setLevels($levels)
    {
        $this->container['levels'] = $levels;

        return $this;
    }

    /**
     * Gets resolve_timestamp
     *
     * @return string
     */
    public function getResolveTimestamp()
    {
        return $this->container['resolve_timestamp'];
    }

    /**
     * Sets resolve_timestamp
     *
     * @param string $resolve_timestamp resolve_timestamp
     *
     * @return $this
     */
    public function setResolveTimestamp($resolve_timestamp)
    {
        $this->container['resolve_timestamp'] = $resolve_timestamp;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \Volcengine\Vmp\Model\ResourceForGetAlertOutput
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \Volcengine\Vmp\Model\ResourceForGetAlertOutput $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

