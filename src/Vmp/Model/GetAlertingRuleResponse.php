<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetAlertingRuleResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAlertingRuleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'annotations' => '\Volcengine\Vmp\Model\AnnotationForGetAlertingRuleOutput[]',
        'create_time' => 'string',
        'description' => 'string',
        'group_id' => 'string',
        'id' => 'string',
        'labels' => '\Volcengine\Vmp\Model\LabelForGetAlertingRuleOutput[]',
        'levels' => '\Volcengine\Vmp\Model\LevelForGetAlertingRuleOutput[]',
        'name' => 'string',
        'notify_group_policy_id' => 'string',
        'notify_policy_id' => 'string',
        'project_name' => 'string',
        'query' => '\Volcengine\Vmp\Model\QueryForGetAlertingRuleOutput',
        'status' => 'string',
        'tags' => '\Volcengine\Vmp\Model\TagForGetAlertingRuleOutput[]',
        'type' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'annotations' => null,
        'create_time' => null,
        'description' => null,
        'group_id' => null,
        'id' => null,
        'labels' => null,
        'levels' => null,
        'name' => null,
        'notify_group_policy_id' => null,
        'notify_policy_id' => null,
        'project_name' => null,
        'query' => null,
        'status' => null,
        'tags' => null,
        'type' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annotations' => 'Annotations',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'group_id' => 'GroupId',
        'id' => 'Id',
        'labels' => 'Labels',
        'levels' => 'Levels',
        'name' => 'Name',
        'notify_group_policy_id' => 'NotifyGroupPolicyId',
        'notify_policy_id' => 'NotifyPolicyId',
        'project_name' => 'ProjectName',
        'query' => 'Query',
        'status' => 'Status',
        'tags' => 'Tags',
        'type' => 'Type',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annotations' => 'setAnnotations',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'group_id' => 'setGroupId',
        'id' => 'setId',
        'labels' => 'setLabels',
        'levels' => 'setLevels',
        'name' => 'setName',
        'notify_group_policy_id' => 'setNotifyGroupPolicyId',
        'notify_policy_id' => 'setNotifyPolicyId',
        'project_name' => 'setProjectName',
        'query' => 'setQuery',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'type' => 'setType',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annotations' => 'getAnnotations',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'group_id' => 'getGroupId',
        'id' => 'getId',
        'labels' => 'getLabels',
        'levels' => 'getLevels',
        'name' => 'getName',
        'notify_group_policy_id' => 'getNotifyGroupPolicyId',
        'notify_policy_id' => 'getNotifyPolicyId',
        'project_name' => 'getProjectName',
        'query' => 'getQuery',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'type' => 'getType',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annotations'] = isset($data['annotations']) ? $data['annotations'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['levels'] = isset($data['levels']) ? $data['levels'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notify_group_policy_id'] = isset($data['notify_group_policy_id']) ? $data['notify_group_policy_id'] : null;
        $this->container['notify_policy_id'] = isset($data['notify_policy_id']) ? $data['notify_policy_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annotations
     *
     * @return \Volcengine\Vmp\Model\AnnotationForGetAlertingRuleOutput[]
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     *
     * @param \Volcengine\Vmp\Model\AnnotationForGetAlertingRuleOutput[] $annotations annotations
     *
     * @return $this
     */
    public function setAnnotations($annotations)
    {
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Volcengine\Vmp\Model\LabelForGetAlertingRuleOutput[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Volcengine\Vmp\Model\LabelForGetAlertingRuleOutput[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets levels
     *
     * @return \Volcengine\Vmp\Model\LevelForGetAlertingRuleOutput[]
     */
    public function getLevels()
    {
        return $this->container['levels'];
    }

    /**
     * Sets levels
     *
     * @param \Volcengine\Vmp\Model\LevelForGetAlertingRuleOutput[] $levels levels
     *
     * @return $this
     */
    public function setLevels($levels)
    {
        $this->container['levels'] = $levels;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notify_group_policy_id
     *
     * @return string
     */
    public function getNotifyGroupPolicyId()
    {
        return $this->container['notify_group_policy_id'];
    }

    /**
     * Sets notify_group_policy_id
     *
     * @param string $notify_group_policy_id notify_group_policy_id
     *
     * @return $this
     */
    public function setNotifyGroupPolicyId($notify_group_policy_id)
    {
        $this->container['notify_group_policy_id'] = $notify_group_policy_id;

        return $this;
    }

    /**
     * Gets notify_policy_id
     *
     * @return string
     */
    public function getNotifyPolicyId()
    {
        return $this->container['notify_policy_id'];
    }

    /**
     * Sets notify_policy_id
     *
     * @param string $notify_policy_id notify_policy_id
     *
     * @return $this
     */
    public function setNotifyPolicyId($notify_policy_id)
    {
        $this->container['notify_policy_id'] = $notify_policy_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \Volcengine\Vmp\Model\QueryForGetAlertingRuleOutput
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \Volcengine\Vmp\Model\QueryForGetAlertingRuleOutput $query query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vmp\Model\TagForGetAlertingRuleOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vmp\Model\TagForGetAlertingRuleOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

