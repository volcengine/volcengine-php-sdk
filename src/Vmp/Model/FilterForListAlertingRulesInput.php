<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FilterForListAlertingRulesInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilterForListAlertingRulesInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_ids' => 'string[]',
        'ids' => 'string[]',
        'name' => 'string',
        'notify_group_policy_ids' => 'string[]',
        'notify_policy_ids' => 'string[]',
        'status' => 'string',
        'template_ids' => 'string[]',
        'type' => 'string',
        'workspace_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group_ids' => null,
        'ids' => null,
        'name' => null,
        'notify_group_policy_ids' => null,
        'notify_policy_ids' => null,
        'status' => null,
        'template_ids' => null,
        'type' => null,
        'workspace_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_ids' => 'GroupIds',
        'ids' => 'Ids',
        'name' => 'Name',
        'notify_group_policy_ids' => 'NotifyGroupPolicyIds',
        'notify_policy_ids' => 'NotifyPolicyIds',
        'status' => 'Status',
        'template_ids' => 'TemplateIds',
        'type' => 'Type',
        'workspace_id' => 'WorkspaceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_ids' => 'setGroupIds',
        'ids' => 'setIds',
        'name' => 'setName',
        'notify_group_policy_ids' => 'setNotifyGroupPolicyIds',
        'notify_policy_ids' => 'setNotifyPolicyIds',
        'status' => 'setStatus',
        'template_ids' => 'setTemplateIds',
        'type' => 'setType',
        'workspace_id' => 'setWorkspaceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_ids' => 'getGroupIds',
        'ids' => 'getIds',
        'name' => 'getName',
        'notify_group_policy_ids' => 'getNotifyGroupPolicyIds',
        'notify_policy_ids' => 'getNotifyPolicyIds',
        'status' => 'getStatus',
        'template_ids' => 'getTemplateIds',
        'type' => 'getType',
        'workspace_id' => 'getWorkspaceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['ids'] = isset($data['ids']) ? $data['ids'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notify_group_policy_ids'] = isset($data['notify_group_policy_ids']) ? $data['notify_group_policy_ids'] : null;
        $this->container['notify_policy_ids'] = isset($data['notify_policy_ids']) ? $data['notify_policy_ids'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['template_ids'] = isset($data['template_ids']) ? $data['template_ids'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['workspace_id'] = isset($data['workspace_id']) ? $data['workspace_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_ids
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[] $group_ids group_ids
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets ids
     *
     * @return string[]
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param string[] $ids ids
     *
     * @return $this
     */
    public function setIds($ids)
    {
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notify_group_policy_ids
     *
     * @return string[]
     */
    public function getNotifyGroupPolicyIds()
    {
        return $this->container['notify_group_policy_ids'];
    }

    /**
     * Sets notify_group_policy_ids
     *
     * @param string[] $notify_group_policy_ids notify_group_policy_ids
     *
     * @return $this
     */
    public function setNotifyGroupPolicyIds($notify_group_policy_ids)
    {
        $this->container['notify_group_policy_ids'] = $notify_group_policy_ids;

        return $this;
    }

    /**
     * Gets notify_policy_ids
     *
     * @return string[]
     */
    public function getNotifyPolicyIds()
    {
        return $this->container['notify_policy_ids'];
    }

    /**
     * Sets notify_policy_ids
     *
     * @param string[] $notify_policy_ids notify_policy_ids
     *
     * @return $this
     */
    public function setNotifyPolicyIds($notify_policy_ids)
    {
        $this->container['notify_policy_ids'] = $notify_policy_ids;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets template_ids
     *
     * @return string[]
     */
    public function getTemplateIds()
    {
        return $this->container['template_ids'];
    }

    /**
     * Sets template_ids
     *
     * @param string[] $template_ids template_ids
     *
     * @return $this
     */
    public function setTemplateIds($template_ids)
    {
        $this->container['template_ids'] = $template_ids;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id workspace_id
     *
     * @return $this
     */
    public function setWorkspaceId($workspace_id)
    {
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

