<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListRulesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListRulesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expr' => 'string',
        'kind' => 'string',
        'labels' => '\Volcengine\Vmp\Model\LabelForListRulesOutput[]',
        'last_evaluation' => 'string',
        'name' => 'string',
        'reason' => 'string',
        'rule_file_name' => 'string',
        'rule_group_name' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expr' => null,
        'kind' => null,
        'labels' => null,
        'last_evaluation' => null,
        'name' => null,
        'reason' => null,
        'rule_file_name' => null,
        'rule_group_name' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expr' => 'Expr',
        'kind' => 'Kind',
        'labels' => 'Labels',
        'last_evaluation' => 'LastEvaluation',
        'name' => 'Name',
        'reason' => 'Reason',
        'rule_file_name' => 'RuleFileName',
        'rule_group_name' => 'RuleGroupName',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expr' => 'setExpr',
        'kind' => 'setKind',
        'labels' => 'setLabels',
        'last_evaluation' => 'setLastEvaluation',
        'name' => 'setName',
        'reason' => 'setReason',
        'rule_file_name' => 'setRuleFileName',
        'rule_group_name' => 'setRuleGroupName',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expr' => 'getExpr',
        'kind' => 'getKind',
        'labels' => 'getLabels',
        'last_evaluation' => 'getLastEvaluation',
        'name' => 'getName',
        'reason' => 'getReason',
        'rule_file_name' => 'getRuleFileName',
        'rule_group_name' => 'getRuleGroupName',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expr'] = isset($data['expr']) ? $data['expr'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['last_evaluation'] = isset($data['last_evaluation']) ? $data['last_evaluation'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['rule_file_name'] = isset($data['rule_file_name']) ? $data['rule_file_name'] : null;
        $this->container['rule_group_name'] = isset($data['rule_group_name']) ? $data['rule_group_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expr
     *
     * @return string
     */
    public function getExpr()
    {
        return $this->container['expr'];
    }

    /**
     * Sets expr
     *
     * @param string $expr expr
     *
     * @return $this
     */
    public function setExpr($expr)
    {
        $this->container['expr'] = $expr;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind kind
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Volcengine\Vmp\Model\LabelForListRulesOutput[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Volcengine\Vmp\Model\LabelForListRulesOutput[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets last_evaluation
     *
     * @return string
     */
    public function getLastEvaluation()
    {
        return $this->container['last_evaluation'];
    }

    /**
     * Sets last_evaluation
     *
     * @param string $last_evaluation last_evaluation
     *
     * @return $this
     */
    public function setLastEvaluation($last_evaluation)
    {
        $this->container['last_evaluation'] = $last_evaluation;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets rule_file_name
     *
     * @return string
     */
    public function getRuleFileName()
    {
        return $this->container['rule_file_name'];
    }

    /**
     * Sets rule_file_name
     *
     * @param string $rule_file_name rule_file_name
     *
     * @return $this
     */
    public function setRuleFileName($rule_file_name)
    {
        $this->container['rule_file_name'] = $rule_file_name;

        return $this;
    }

    /**
     * Gets rule_group_name
     *
     * @return string
     */
    public function getRuleGroupName()
    {
        return $this->container['rule_group_name'];
    }

    /**
     * Sets rule_group_name
     *
     * @param string $rule_group_name rule_group_name
     *
     * @return $this
     */
    public function setRuleGroupName($rule_group_name)
    {
        $this->container['rule_group_name'] = $rule_group_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

