<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListSilencePoliciesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListSilencePoliciesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_delete_time' => 'string',
        'create_time' => 'string',
        'description' => 'string',
        'id' => 'string',
        'metric_label_matchers' => '\Volcengine\Vmp\Model\MetricLabelMatcherForListSilencePoliciesOutput[]',
        'name' => 'string',
        'source' => 'string',
        'status' => 'string',
        'time_range_matchers' => '\Volcengine\Vmp\Model\TimeRangeMatcherForListSilencePoliciesOutput[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_delete_time' => null,
        'create_time' => null,
        'description' => null,
        'id' => null,
        'metric_label_matchers' => null,
        'name' => null,
        'source' => null,
        'status' => null,
        'time_range_matchers' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_delete_time' => 'AutoDeleteTime',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'id' => 'Id',
        'metric_label_matchers' => 'MetricLabelMatchers',
        'name' => 'Name',
        'source' => 'Source',
        'status' => 'Status',
        'time_range_matchers' => 'TimeRangeMatchers',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_delete_time' => 'setAutoDeleteTime',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'id' => 'setId',
        'metric_label_matchers' => 'setMetricLabelMatchers',
        'name' => 'setName',
        'source' => 'setSource',
        'status' => 'setStatus',
        'time_range_matchers' => 'setTimeRangeMatchers',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_delete_time' => 'getAutoDeleteTime',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'id' => 'getId',
        'metric_label_matchers' => 'getMetricLabelMatchers',
        'name' => 'getName',
        'source' => 'getSource',
        'status' => 'getStatus',
        'time_range_matchers' => 'getTimeRangeMatchers',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_delete_time'] = isset($data['auto_delete_time']) ? $data['auto_delete_time'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['metric_label_matchers'] = isset($data['metric_label_matchers']) ? $data['metric_label_matchers'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['time_range_matchers'] = isset($data['time_range_matchers']) ? $data['time_range_matchers'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_delete_time
     *
     * @return string
     */
    public function getAutoDeleteTime()
    {
        return $this->container['auto_delete_time'];
    }

    /**
     * Sets auto_delete_time
     *
     * @param string $auto_delete_time auto_delete_time
     *
     * @return $this
     */
    public function setAutoDeleteTime($auto_delete_time)
    {
        $this->container['auto_delete_time'] = $auto_delete_time;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets metric_label_matchers
     *
     * @return \Volcengine\Vmp\Model\MetricLabelMatcherForListSilencePoliciesOutput[]
     */
    public function getMetricLabelMatchers()
    {
        return $this->container['metric_label_matchers'];
    }

    /**
     * Sets metric_label_matchers
     *
     * @param \Volcengine\Vmp\Model\MetricLabelMatcherForListSilencePoliciesOutput[] $metric_label_matchers metric_label_matchers
     *
     * @return $this
     */
    public function setMetricLabelMatchers($metric_label_matchers)
    {
        $this->container['metric_label_matchers'] = $metric_label_matchers;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets time_range_matchers
     *
     * @return \Volcengine\Vmp\Model\TimeRangeMatcherForListSilencePoliciesOutput[]
     */
    public function getTimeRangeMatchers()
    {
        return $this->container['time_range_matchers'];
    }

    /**
     * Sets time_range_matchers
     *
     * @param \Volcengine\Vmp\Model\TimeRangeMatcherForListSilencePoliciesOutput[] $time_range_matchers time_range_matchers
     *
     * @return $this
     */
    public function setTimeRangeMatchers($time_range_matchers)
    {
        $this->container['time_range_matchers'] = $time_range_matchers;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

