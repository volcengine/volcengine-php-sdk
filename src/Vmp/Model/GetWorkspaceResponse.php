<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetWorkspaceResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetWorkspaceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'delete_protection_enabled' => 'bool',
        'description' => 'string',
        'id' => 'string',
        'instance_type' => '\Volcengine\Vmp\Model\InstanceTypeForGetWorkspaceOutput',
        'instance_type_id' => 'string',
        'name' => 'string',
        'overdue_reclaim_time' => 'string',
        'project_name' => 'string',
        'prometheus_push_intranet_endpoint' => 'string',
        'prometheus_query_intranet_endpoint' => 'string',
        'prometheus_write_intranet_endpoint' => 'string',
        'public_access_enabled' => 'bool',
        'public_query_bandwidth' => 'int',
        'public_write_bandwidth' => 'int',
        'quota' => '\Volcengine\Vmp\Model\QuotaForGetWorkspaceOutput',
        'search_latency_offset' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Vmp\Model\TagForGetWorkspaceOutput[]',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'delete_protection_enabled' => null,
        'description' => null,
        'id' => null,
        'instance_type' => null,
        'instance_type_id' => null,
        'name' => null,
        'overdue_reclaim_time' => null,
        'project_name' => null,
        'prometheus_push_intranet_endpoint' => null,
        'prometheus_query_intranet_endpoint' => null,
        'prometheus_write_intranet_endpoint' => null,
        'public_access_enabled' => null,
        'public_query_bandwidth' => 'int64',
        'public_write_bandwidth' => 'int64',
        'quota' => null,
        'search_latency_offset' => null,
        'status' => null,
        'tags' => null,
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'CreateTime',
        'delete_protection_enabled' => 'DeleteProtectionEnabled',
        'description' => 'Description',
        'id' => 'Id',
        'instance_type' => 'InstanceType',
        'instance_type_id' => 'InstanceTypeId',
        'name' => 'Name',
        'overdue_reclaim_time' => 'OverdueReclaimTime',
        'project_name' => 'ProjectName',
        'prometheus_push_intranet_endpoint' => 'PrometheusPushIntranetEndpoint',
        'prometheus_query_intranet_endpoint' => 'PrometheusQueryIntranetEndpoint',
        'prometheus_write_intranet_endpoint' => 'PrometheusWriteIntranetEndpoint',
        'public_access_enabled' => 'PublicAccessEnabled',
        'public_query_bandwidth' => 'PublicQueryBandwidth',
        'public_write_bandwidth' => 'PublicWriteBandwidth',
        'quota' => 'Quota',
        'search_latency_offset' => 'SearchLatencyOffset',
        'status' => 'Status',
        'tags' => 'Tags',
        'username' => 'Username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'delete_protection_enabled' => 'setDeleteProtectionEnabled',
        'description' => 'setDescription',
        'id' => 'setId',
        'instance_type' => 'setInstanceType',
        'instance_type_id' => 'setInstanceTypeId',
        'name' => 'setName',
        'overdue_reclaim_time' => 'setOverdueReclaimTime',
        'project_name' => 'setProjectName',
        'prometheus_push_intranet_endpoint' => 'setPrometheusPushIntranetEndpoint',
        'prometheus_query_intranet_endpoint' => 'setPrometheusQueryIntranetEndpoint',
        'prometheus_write_intranet_endpoint' => 'setPrometheusWriteIntranetEndpoint',
        'public_access_enabled' => 'setPublicAccessEnabled',
        'public_query_bandwidth' => 'setPublicQueryBandwidth',
        'public_write_bandwidth' => 'setPublicWriteBandwidth',
        'quota' => 'setQuota',
        'search_latency_offset' => 'setSearchLatencyOffset',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'delete_protection_enabled' => 'getDeleteProtectionEnabled',
        'description' => 'getDescription',
        'id' => 'getId',
        'instance_type' => 'getInstanceType',
        'instance_type_id' => 'getInstanceTypeId',
        'name' => 'getName',
        'overdue_reclaim_time' => 'getOverdueReclaimTime',
        'project_name' => 'getProjectName',
        'prometheus_push_intranet_endpoint' => 'getPrometheusPushIntranetEndpoint',
        'prometheus_query_intranet_endpoint' => 'getPrometheusQueryIntranetEndpoint',
        'prometheus_write_intranet_endpoint' => 'getPrometheusWriteIntranetEndpoint',
        'public_access_enabled' => 'getPublicAccessEnabled',
        'public_query_bandwidth' => 'getPublicQueryBandwidth',
        'public_write_bandwidth' => 'getPublicWriteBandwidth',
        'quota' => 'getQuota',
        'search_latency_offset' => 'getSearchLatencyOffset',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['delete_protection_enabled'] = isset($data['delete_protection_enabled']) ? $data['delete_protection_enabled'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['instance_type_id'] = isset($data['instance_type_id']) ? $data['instance_type_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['overdue_reclaim_time'] = isset($data['overdue_reclaim_time']) ? $data['overdue_reclaim_time'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['prometheus_push_intranet_endpoint'] = isset($data['prometheus_push_intranet_endpoint']) ? $data['prometheus_push_intranet_endpoint'] : null;
        $this->container['prometheus_query_intranet_endpoint'] = isset($data['prometheus_query_intranet_endpoint']) ? $data['prometheus_query_intranet_endpoint'] : null;
        $this->container['prometheus_write_intranet_endpoint'] = isset($data['prometheus_write_intranet_endpoint']) ? $data['prometheus_write_intranet_endpoint'] : null;
        $this->container['public_access_enabled'] = isset($data['public_access_enabled']) ? $data['public_access_enabled'] : null;
        $this->container['public_query_bandwidth'] = isset($data['public_query_bandwidth']) ? $data['public_query_bandwidth'] : null;
        $this->container['public_write_bandwidth'] = isset($data['public_write_bandwidth']) ? $data['public_write_bandwidth'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['search_latency_offset'] = isset($data['search_latency_offset']) ? $data['search_latency_offset'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets delete_protection_enabled
     *
     * @return bool
     */
    public function getDeleteProtectionEnabled()
    {
        return $this->container['delete_protection_enabled'];
    }

    /**
     * Sets delete_protection_enabled
     *
     * @param bool $delete_protection_enabled delete_protection_enabled
     *
     * @return $this
     */
    public function setDeleteProtectionEnabled($delete_protection_enabled)
    {
        $this->container['delete_protection_enabled'] = $delete_protection_enabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return \Volcengine\Vmp\Model\InstanceTypeForGetWorkspaceOutput
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param \Volcengine\Vmp\Model\InstanceTypeForGetWorkspaceOutput $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets instance_type_id
     *
     * @return string
     */
    public function getInstanceTypeId()
    {
        return $this->container['instance_type_id'];
    }

    /**
     * Sets instance_type_id
     *
     * @param string $instance_type_id instance_type_id
     *
     * @return $this
     */
    public function setInstanceTypeId($instance_type_id)
    {
        $this->container['instance_type_id'] = $instance_type_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets overdue_reclaim_time
     *
     * @return string
     */
    public function getOverdueReclaimTime()
    {
        return $this->container['overdue_reclaim_time'];
    }

    /**
     * Sets overdue_reclaim_time
     *
     * @param string $overdue_reclaim_time overdue_reclaim_time
     *
     * @return $this
     */
    public function setOverdueReclaimTime($overdue_reclaim_time)
    {
        $this->container['overdue_reclaim_time'] = $overdue_reclaim_time;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets prometheus_push_intranet_endpoint
     *
     * @return string
     */
    public function getPrometheusPushIntranetEndpoint()
    {
        return $this->container['prometheus_push_intranet_endpoint'];
    }

    /**
     * Sets prometheus_push_intranet_endpoint
     *
     * @param string $prometheus_push_intranet_endpoint prometheus_push_intranet_endpoint
     *
     * @return $this
     */
    public function setPrometheusPushIntranetEndpoint($prometheus_push_intranet_endpoint)
    {
        $this->container['prometheus_push_intranet_endpoint'] = $prometheus_push_intranet_endpoint;

        return $this;
    }

    /**
     * Gets prometheus_query_intranet_endpoint
     *
     * @return string
     */
    public function getPrometheusQueryIntranetEndpoint()
    {
        return $this->container['prometheus_query_intranet_endpoint'];
    }

    /**
     * Sets prometheus_query_intranet_endpoint
     *
     * @param string $prometheus_query_intranet_endpoint prometheus_query_intranet_endpoint
     *
     * @return $this
     */
    public function setPrometheusQueryIntranetEndpoint($prometheus_query_intranet_endpoint)
    {
        $this->container['prometheus_query_intranet_endpoint'] = $prometheus_query_intranet_endpoint;

        return $this;
    }

    /**
     * Gets prometheus_write_intranet_endpoint
     *
     * @return string
     */
    public function getPrometheusWriteIntranetEndpoint()
    {
        return $this->container['prometheus_write_intranet_endpoint'];
    }

    /**
     * Sets prometheus_write_intranet_endpoint
     *
     * @param string $prometheus_write_intranet_endpoint prometheus_write_intranet_endpoint
     *
     * @return $this
     */
    public function setPrometheusWriteIntranetEndpoint($prometheus_write_intranet_endpoint)
    {
        $this->container['prometheus_write_intranet_endpoint'] = $prometheus_write_intranet_endpoint;

        return $this;
    }

    /**
     * Gets public_access_enabled
     *
     * @return bool
     */
    public function getPublicAccessEnabled()
    {
        return $this->container['public_access_enabled'];
    }

    /**
     * Sets public_access_enabled
     *
     * @param bool $public_access_enabled public_access_enabled
     *
     * @return $this
     */
    public function setPublicAccessEnabled($public_access_enabled)
    {
        $this->container['public_access_enabled'] = $public_access_enabled;

        return $this;
    }

    /**
     * Gets public_query_bandwidth
     *
     * @return int
     */
    public function getPublicQueryBandwidth()
    {
        return $this->container['public_query_bandwidth'];
    }

    /**
     * Sets public_query_bandwidth
     *
     * @param int $public_query_bandwidth public_query_bandwidth
     *
     * @return $this
     */
    public function setPublicQueryBandwidth($public_query_bandwidth)
    {
        $this->container['public_query_bandwidth'] = $public_query_bandwidth;

        return $this;
    }

    /**
     * Gets public_write_bandwidth
     *
     * @return int
     */
    public function getPublicWriteBandwidth()
    {
        return $this->container['public_write_bandwidth'];
    }

    /**
     * Sets public_write_bandwidth
     *
     * @param int $public_write_bandwidth public_write_bandwidth
     *
     * @return $this
     */
    public function setPublicWriteBandwidth($public_write_bandwidth)
    {
        $this->container['public_write_bandwidth'] = $public_write_bandwidth;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \Volcengine\Vmp\Model\QuotaForGetWorkspaceOutput
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \Volcengine\Vmp\Model\QuotaForGetWorkspaceOutput $quota quota
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets search_latency_offset
     *
     * @return string
     */
    public function getSearchLatencyOffset()
    {
        return $this->container['search_latency_offset'];
    }

    /**
     * Sets search_latency_offset
     *
     * @param string $search_latency_offset search_latency_offset
     *
     * @return $this
     */
    public function setSearchLatencyOffset($search_latency_offset)
    {
        $this->container['search_latency_offset'] = $search_latency_offset;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vmp\Model\TagForGetWorkspaceOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vmp\Model\TagForGetWorkspaceOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

