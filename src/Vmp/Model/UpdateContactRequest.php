<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vmp\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateContactRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateContactRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contact_group_ids' => 'string[]',
        'ding_talk_bot_webhook' => '\Volcengine\Vmp\Model\DingTalkBotWebhookForUpdateContactInput',
        'email' => 'string',
        'id' => 'string',
        'lark_bot_webhook' => '\Volcengine\Vmp\Model\LarkBotWebhookForUpdateContactInput',
        'name' => 'string',
        'we_com_bot_webhook' => '\Volcengine\Vmp\Model\WeComBotWebhookForUpdateContactInput',
        'webhook' => '\Volcengine\Vmp\Model\WebhookForUpdateContactInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contact_group_ids' => null,
        'ding_talk_bot_webhook' => null,
        'email' => null,
        'id' => null,
        'lark_bot_webhook' => null,
        'name' => null,
        'we_com_bot_webhook' => null,
        'webhook' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_group_ids' => 'ContactGroupIds',
        'ding_talk_bot_webhook' => 'DingTalkBotWebhook',
        'email' => 'Email',
        'id' => 'Id',
        'lark_bot_webhook' => 'LarkBotWebhook',
        'name' => 'Name',
        'we_com_bot_webhook' => 'WeComBotWebhook',
        'webhook' => 'Webhook'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_group_ids' => 'setContactGroupIds',
        'ding_talk_bot_webhook' => 'setDingTalkBotWebhook',
        'email' => 'setEmail',
        'id' => 'setId',
        'lark_bot_webhook' => 'setLarkBotWebhook',
        'name' => 'setName',
        'we_com_bot_webhook' => 'setWeComBotWebhook',
        'webhook' => 'setWebhook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_group_ids' => 'getContactGroupIds',
        'ding_talk_bot_webhook' => 'getDingTalkBotWebhook',
        'email' => 'getEmail',
        'id' => 'getId',
        'lark_bot_webhook' => 'getLarkBotWebhook',
        'name' => 'getName',
        'we_com_bot_webhook' => 'getWeComBotWebhook',
        'webhook' => 'getWebhook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_group_ids'] = isset($data['contact_group_ids']) ? $data['contact_group_ids'] : null;
        $this->container['ding_talk_bot_webhook'] = isset($data['ding_talk_bot_webhook']) ? $data['ding_talk_bot_webhook'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lark_bot_webhook'] = isset($data['lark_bot_webhook']) ? $data['lark_bot_webhook'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['we_com_bot_webhook'] = isset($data['we_com_bot_webhook']) ? $data['we_com_bot_webhook'] : null;
        $this->container['webhook'] = isset($data['webhook']) ? $data['webhook'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_group_ids
     *
     * @return string[]
     */
    public function getContactGroupIds()
    {
        return $this->container['contact_group_ids'];
    }

    /**
     * Sets contact_group_ids
     *
     * @param string[] $contact_group_ids contact_group_ids
     *
     * @return $this
     */
    public function setContactGroupIds($contact_group_ids)
    {
        $this->container['contact_group_ids'] = $contact_group_ids;

        return $this;
    }

    /**
     * Gets ding_talk_bot_webhook
     *
     * @return \Volcengine\Vmp\Model\DingTalkBotWebhookForUpdateContactInput
     */
    public function getDingTalkBotWebhook()
    {
        return $this->container['ding_talk_bot_webhook'];
    }

    /**
     * Sets ding_talk_bot_webhook
     *
     * @param \Volcengine\Vmp\Model\DingTalkBotWebhookForUpdateContactInput $ding_talk_bot_webhook ding_talk_bot_webhook
     *
     * @return $this
     */
    public function setDingTalkBotWebhook($ding_talk_bot_webhook)
    {
        $this->container['ding_talk_bot_webhook'] = $ding_talk_bot_webhook;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lark_bot_webhook
     *
     * @return \Volcengine\Vmp\Model\LarkBotWebhookForUpdateContactInput
     */
    public function getLarkBotWebhook()
    {
        return $this->container['lark_bot_webhook'];
    }

    /**
     * Sets lark_bot_webhook
     *
     * @param \Volcengine\Vmp\Model\LarkBotWebhookForUpdateContactInput $lark_bot_webhook lark_bot_webhook
     *
     * @return $this
     */
    public function setLarkBotWebhook($lark_bot_webhook)
    {
        $this->container['lark_bot_webhook'] = $lark_bot_webhook;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets we_com_bot_webhook
     *
     * @return \Volcengine\Vmp\Model\WeComBotWebhookForUpdateContactInput
     */
    public function getWeComBotWebhook()
    {
        return $this->container['we_com_bot_webhook'];
    }

    /**
     * Sets we_com_bot_webhook
     *
     * @param \Volcengine\Vmp\Model\WeComBotWebhookForUpdateContactInput $we_com_bot_webhook we_com_bot_webhook
     *
     * @return $this
     */
    public function setWeComBotWebhook($we_com_bot_webhook)
    {
        $this->container['we_com_bot_webhook'] = $we_com_bot_webhook;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return \Volcengine\Vmp\Model\WebhookForUpdateContactInput
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param \Volcengine\Vmp\Model\WebhookForUpdateContactInput $webhook webhook
     *
     * @return $this
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

