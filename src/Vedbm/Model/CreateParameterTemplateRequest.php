<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateParameterTemplateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateParameterTemplateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'template_category' => 'string',
        'template_description' => 'string',
        'template_name' => 'string',
        'template_parameters' => '\Volcengine\Vedbm\Model\TemplateParameterForCreateParameterTemplateInput[]',
        'template_type' => 'string',
        'template_type_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'template_category' => null,
        'template_description' => null,
        'template_name' => null,
        'template_parameters' => null,
        'template_type' => null,
        'template_type_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'template_category' => 'TemplateCategory',
        'template_description' => 'TemplateDescription',
        'template_name' => 'TemplateName',
        'template_parameters' => 'TemplateParameters',
        'template_type' => 'TemplateType',
        'template_type_version' => 'TemplateTypeVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'template_category' => 'setTemplateCategory',
        'template_description' => 'setTemplateDescription',
        'template_name' => 'setTemplateName',
        'template_parameters' => 'setTemplateParameters',
        'template_type' => 'setTemplateType',
        'template_type_version' => 'setTemplateTypeVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'template_category' => 'getTemplateCategory',
        'template_description' => 'getTemplateDescription',
        'template_name' => 'getTemplateName',
        'template_parameters' => 'getTemplateParameters',
        'template_type' => 'getTemplateType',
        'template_type_version' => 'getTemplateTypeVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TEMPLATE_CATEGORY_DB_ENGINE = 'DBEngine';
    const TEMPLATE_TYPE_MY_SQL = 'MySQL';
    const TEMPLATE_TYPE_VERSION_MY_SQL_5_7 = 'MySQL_5_7';
    const TEMPLATE_TYPE_VERSION_MY_SQL_8_0 = 'MySQL_8_0';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateCategoryAllowableValues()
    {
        return [
            self::TEMPLATE_CATEGORY_DB_ENGINE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_MY_SQL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeVersionAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_VERSION_MY_SQL_5_7,
            self::TEMPLATE_TYPE_VERSION_MY_SQL_8_0,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['template_category'] = isset($data['template_category']) ? $data['template_category'] : null;
        $this->container['template_description'] = isset($data['template_description']) ? $data['template_description'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['template_parameters'] = isset($data['template_parameters']) ? $data['template_parameters'] : null;
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
        $this->container['template_type_version'] = isset($data['template_type_version']) ? $data['template_type_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['template_category'] === null) {
            $invalidProperties[] = "'template_category' can't be null";
        }
        $allowedValues = $this->getTemplateCategoryAllowableValues();
        if (!is_null($this->container['template_category']) && !in_array($this->container['template_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['template_name'] === null) {
            $invalidProperties[] = "'template_name' can't be null";
        }
        if ($this->container['template_type'] === null) {
            $invalidProperties[] = "'template_type' can't be null";
        }
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($this->container['template_type']) && !in_array($this->container['template_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['template_type_version'] === null) {
            $invalidProperties[] = "'template_type_version' can't be null";
        }
        $allowedValues = $this->getTemplateTypeVersionAllowableValues();
        if (!is_null($this->container['template_type_version']) && !in_array($this->container['template_type_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_type_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets template_category
     *
     * @return string
     */
    public function getTemplateCategory()
    {
        return $this->container['template_category'];
    }

    /**
     * Sets template_category
     *
     * @param string $template_category template_category
     *
     * @return $this
     */
    public function setTemplateCategory($template_category)
    {
        $allowedValues = $this->getTemplateCategoryAllowableValues();
        if (!in_array($template_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_category'] = $template_category;

        return $this;
    }

    /**
     * Gets template_description
     *
     * @return string
     */
    public function getTemplateDescription()
    {
        return $this->container['template_description'];
    }

    /**
     * Sets template_description
     *
     * @param string $template_description template_description
     *
     * @return $this
     */
    public function setTemplateDescription($template_description)
    {
        $this->container['template_description'] = $template_description;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name template_name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets template_parameters
     *
     * @return \Volcengine\Vedbm\Model\TemplateParameterForCreateParameterTemplateInput[]
     */
    public function getTemplateParameters()
    {
        return $this->container['template_parameters'];
    }

    /**
     * Sets template_parameters
     *
     * @param \Volcengine\Vedbm\Model\TemplateParameterForCreateParameterTemplateInput[] $template_parameters template_parameters
     *
     * @return $this
     */
    public function setTemplateParameters($template_parameters)
    {
        $this->container['template_parameters'] = $template_parameters;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string $template_type template_type
     *
     * @return $this
     */
    public function setTemplateType($template_type)
    {
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!in_array($template_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets template_type_version
     *
     * @return string
     */
    public function getTemplateTypeVersion()
    {
        return $this->container['template_type_version'];
    }

    /**
     * Sets template_type_version
     *
     * @param string $template_type_version template_type_version
     *
     * @return $this
     */
    public function setTemplateTypeVersion($template_type_version)
    {
        $allowedValues = $this->getTemplateTypeVersionAllowableValues();
        if (!in_array($template_type_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_type_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type_version'] = $template_type_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

