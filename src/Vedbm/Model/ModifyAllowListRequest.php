<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyAllowListRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyAllowListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_list' => 'string',
        'allow_list_desc' => 'string',
        'allow_list_id' => 'string',
        'allow_list_name' => 'string',
        'apply_instance_num' => 'int',
        'modify_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_list' => null,
        'allow_list_desc' => null,
        'allow_list_id' => null,
        'allow_list_name' => null,
        'apply_instance_num' => 'int32',
        'modify_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_list' => 'AllowList',
        'allow_list_desc' => 'AllowListDesc',
        'allow_list_id' => 'AllowListId',
        'allow_list_name' => 'AllowListName',
        'apply_instance_num' => 'ApplyInstanceNum',
        'modify_mode' => 'ModifyMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_list' => 'setAllowList',
        'allow_list_desc' => 'setAllowListDesc',
        'allow_list_id' => 'setAllowListId',
        'allow_list_name' => 'setAllowListName',
        'apply_instance_num' => 'setApplyInstanceNum',
        'modify_mode' => 'setModifyMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_list' => 'getAllowList',
        'allow_list_desc' => 'getAllowListDesc',
        'allow_list_id' => 'getAllowListId',
        'allow_list_name' => 'getAllowListName',
        'apply_instance_num' => 'getApplyInstanceNum',
        'modify_mode' => 'getModifyMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODIFY_MODE_APPEND = 'Append';
    const MODIFY_MODE_COVER = 'Cover';
    const MODIFY_MODE_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModifyModeAllowableValues()
    {
        return [
            self::MODIFY_MODE_APPEND,
            self::MODIFY_MODE_COVER,
            self::MODIFY_MODE_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_list'] = isset($data['allow_list']) ? $data['allow_list'] : null;
        $this->container['allow_list_desc'] = isset($data['allow_list_desc']) ? $data['allow_list_desc'] : null;
        $this->container['allow_list_id'] = isset($data['allow_list_id']) ? $data['allow_list_id'] : null;
        $this->container['allow_list_name'] = isset($data['allow_list_name']) ? $data['allow_list_name'] : null;
        $this->container['apply_instance_num'] = isset($data['apply_instance_num']) ? $data['apply_instance_num'] : null;
        $this->container['modify_mode'] = isset($data['modify_mode']) ? $data['modify_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['allow_list_id'] === null) {
            $invalidProperties[] = "'allow_list_id' can't be null";
        }
        if ($this->container['allow_list_name'] === null) {
            $invalidProperties[] = "'allow_list_name' can't be null";
        }
        $allowedValues = $this->getModifyModeAllowableValues();
        if (!is_null($this->container['modify_mode']) && !in_array($this->container['modify_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'modify_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_list
     *
     * @return string
     */
    public function getAllowList()
    {
        return $this->container['allow_list'];
    }

    /**
     * Sets allow_list
     *
     * @param string $allow_list allow_list
     *
     * @return $this
     */
    public function setAllowList($allow_list)
    {
        $this->container['allow_list'] = $allow_list;

        return $this;
    }

    /**
     * Gets allow_list_desc
     *
     * @return string
     */
    public function getAllowListDesc()
    {
        return $this->container['allow_list_desc'];
    }

    /**
     * Sets allow_list_desc
     *
     * @param string $allow_list_desc allow_list_desc
     *
     * @return $this
     */
    public function setAllowListDesc($allow_list_desc)
    {
        $this->container['allow_list_desc'] = $allow_list_desc;

        return $this;
    }

    /**
     * Gets allow_list_id
     *
     * @return string
     */
    public function getAllowListId()
    {
        return $this->container['allow_list_id'];
    }

    /**
     * Sets allow_list_id
     *
     * @param string $allow_list_id allow_list_id
     *
     * @return $this
     */
    public function setAllowListId($allow_list_id)
    {
        $this->container['allow_list_id'] = $allow_list_id;

        return $this;
    }

    /**
     * Gets allow_list_name
     *
     * @return string
     */
    public function getAllowListName()
    {
        return $this->container['allow_list_name'];
    }

    /**
     * Sets allow_list_name
     *
     * @param string $allow_list_name allow_list_name
     *
     * @return $this
     */
    public function setAllowListName($allow_list_name)
    {
        $this->container['allow_list_name'] = $allow_list_name;

        return $this;
    }

    /**
     * Gets apply_instance_num
     *
     * @return int
     */
    public function getApplyInstanceNum()
    {
        return $this->container['apply_instance_num'];
    }

    /**
     * Sets apply_instance_num
     *
     * @param int $apply_instance_num apply_instance_num
     *
     * @return $this
     */
    public function setApplyInstanceNum($apply_instance_num)
    {
        $this->container['apply_instance_num'] = $apply_instance_num;

        return $this;
    }

    /**
     * Gets modify_mode
     *
     * @return string
     */
    public function getModifyMode()
    {
        return $this->container['modify_mode'];
    }

    /**
     * Sets modify_mode
     *
     * @param string $modify_mode modify_mode
     *
     * @return $this
     */
    public function setModifyMode($modify_mode)
    {
        $allowedValues = $this->getModifyModeAllowableValues();
        if (!is_null($modify_mode) && !in_array($modify_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'modify_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modify_mode'] = $modify_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

