<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateDBEndpointRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDBEndpointRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_add_new_nodes' => 'bool',
        'consist_level' => 'string',
        'consist_timeout' => 'int',
        'consist_timeout_action' => 'string',
        'description' => 'string',
        'distributed_transaction' => 'bool',
        'endpoint_name' => 'string',
        'endpoint_type' => 'string',
        'instance_id' => 'string',
        'master_accept_read_requests' => 'bool',
        'nodes' => 'string',
        'read_write_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_add_new_nodes' => null,
        'consist_level' => null,
        'consist_timeout' => 'int32',
        'consist_timeout_action' => null,
        'description' => null,
        'distributed_transaction' => null,
        'endpoint_name' => null,
        'endpoint_type' => null,
        'instance_id' => null,
        'master_accept_read_requests' => null,
        'nodes' => null,
        'read_write_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_add_new_nodes' => 'AutoAddNewNodes',
        'consist_level' => 'ConsistLevel',
        'consist_timeout' => 'ConsistTimeout',
        'consist_timeout_action' => 'ConsistTimeoutAction',
        'description' => 'Description',
        'distributed_transaction' => 'DistributedTransaction',
        'endpoint_name' => 'EndpointName',
        'endpoint_type' => 'EndpointType',
        'instance_id' => 'InstanceId',
        'master_accept_read_requests' => 'MasterAcceptReadRequests',
        'nodes' => 'Nodes',
        'read_write_mode' => 'ReadWriteMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_add_new_nodes' => 'setAutoAddNewNodes',
        'consist_level' => 'setConsistLevel',
        'consist_timeout' => 'setConsistTimeout',
        'consist_timeout_action' => 'setConsistTimeoutAction',
        'description' => 'setDescription',
        'distributed_transaction' => 'setDistributedTransaction',
        'endpoint_name' => 'setEndpointName',
        'endpoint_type' => 'setEndpointType',
        'instance_id' => 'setInstanceId',
        'master_accept_read_requests' => 'setMasterAcceptReadRequests',
        'nodes' => 'setNodes',
        'read_write_mode' => 'setReadWriteMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_add_new_nodes' => 'getAutoAddNewNodes',
        'consist_level' => 'getConsistLevel',
        'consist_timeout' => 'getConsistTimeout',
        'consist_timeout_action' => 'getConsistTimeoutAction',
        'description' => 'getDescription',
        'distributed_transaction' => 'getDistributedTransaction',
        'endpoint_name' => 'getEndpointName',
        'endpoint_type' => 'getEndpointType',
        'instance_id' => 'getInstanceId',
        'master_accept_read_requests' => 'getMasterAcceptReadRequests',
        'nodes' => 'getNodes',
        'read_write_mode' => 'getReadWriteMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONSIST_LEVEL_EVENTUAL = 'Eventual';
    const CONSIST_LEVEL__GLOBAL = 'Global';
    const CONSIST_LEVEL_SESSION = 'Session';
    const CONSIST_TIMEOUT_ACTION_READ_MASTER = 'ReadMaster';
    const CONSIST_TIMEOUT_ACTION_RETURN_ERROR = 'ReturnError';
    const ENDPOINT_TYPE_CUSTOM = 'Custom';
    const READ_WRITE_MODE_READ_ONLY = 'ReadOnly';
    const READ_WRITE_MODE_READ_WRITE = 'ReadWrite';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsistLevelAllowableValues()
    {
        return [
            self::CONSIST_LEVEL_EVENTUAL,
            self::CONSIST_LEVEL__GLOBAL,
            self::CONSIST_LEVEL_SESSION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsistTimeoutActionAllowableValues()
    {
        return [
            self::CONSIST_TIMEOUT_ACTION_READ_MASTER,
            self::CONSIST_TIMEOUT_ACTION_RETURN_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndpointTypeAllowableValues()
    {
        return [
            self::ENDPOINT_TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReadWriteModeAllowableValues()
    {
        return [
            self::READ_WRITE_MODE_READ_ONLY,
            self::READ_WRITE_MODE_READ_WRITE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_add_new_nodes'] = isset($data['auto_add_new_nodes']) ? $data['auto_add_new_nodes'] : null;
        $this->container['consist_level'] = isset($data['consist_level']) ? $data['consist_level'] : null;
        $this->container['consist_timeout'] = isset($data['consist_timeout']) ? $data['consist_timeout'] : null;
        $this->container['consist_timeout_action'] = isset($data['consist_timeout_action']) ? $data['consist_timeout_action'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['distributed_transaction'] = isset($data['distributed_transaction']) ? $data['distributed_transaction'] : null;
        $this->container['endpoint_name'] = isset($data['endpoint_name']) ? $data['endpoint_name'] : null;
        $this->container['endpoint_type'] = isset($data['endpoint_type']) ? $data['endpoint_type'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['master_accept_read_requests'] = isset($data['master_accept_read_requests']) ? $data['master_accept_read_requests'] : null;
        $this->container['nodes'] = isset($data['nodes']) ? $data['nodes'] : null;
        $this->container['read_write_mode'] = isset($data['read_write_mode']) ? $data['read_write_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getConsistLevelAllowableValues();
        if (!is_null($this->container['consist_level']) && !in_array($this->container['consist_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'consist_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConsistTimeoutActionAllowableValues();
        if (!is_null($this->container['consist_timeout_action']) && !in_array($this->container['consist_timeout_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'consist_timeout_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['endpoint_type'] === null) {
            $invalidProperties[] = "'endpoint_type' can't be null";
        }
        $allowedValues = $this->getEndpointTypeAllowableValues();
        if (!is_null($this->container['endpoint_type']) && !in_array($this->container['endpoint_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'endpoint_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        if ($this->container['nodes'] === null) {
            $invalidProperties[] = "'nodes' can't be null";
        }
        $allowedValues = $this->getReadWriteModeAllowableValues();
        if (!is_null($this->container['read_write_mode']) && !in_array($this->container['read_write_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'read_write_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_add_new_nodes
     *
     * @return bool
     */
    public function getAutoAddNewNodes()
    {
        return $this->container['auto_add_new_nodes'];
    }

    /**
     * Sets auto_add_new_nodes
     *
     * @param bool $auto_add_new_nodes auto_add_new_nodes
     *
     * @return $this
     */
    public function setAutoAddNewNodes($auto_add_new_nodes)
    {
        $this->container['auto_add_new_nodes'] = $auto_add_new_nodes;

        return $this;
    }

    /**
     * Gets consist_level
     *
     * @return string
     */
    public function getConsistLevel()
    {
        return $this->container['consist_level'];
    }

    /**
     * Sets consist_level
     *
     * @param string $consist_level consist_level
     *
     * @return $this
     */
    public function setConsistLevel($consist_level)
    {
        $allowedValues = $this->getConsistLevelAllowableValues();
        if (!is_null($consist_level) && !in_array($consist_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'consist_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consist_level'] = $consist_level;

        return $this;
    }

    /**
     * Gets consist_timeout
     *
     * @return int
     */
    public function getConsistTimeout()
    {
        return $this->container['consist_timeout'];
    }

    /**
     * Sets consist_timeout
     *
     * @param int $consist_timeout consist_timeout
     *
     * @return $this
     */
    public function setConsistTimeout($consist_timeout)
    {
        $this->container['consist_timeout'] = $consist_timeout;

        return $this;
    }

    /**
     * Gets consist_timeout_action
     *
     * @return string
     */
    public function getConsistTimeoutAction()
    {
        return $this->container['consist_timeout_action'];
    }

    /**
     * Sets consist_timeout_action
     *
     * @param string $consist_timeout_action consist_timeout_action
     *
     * @return $this
     */
    public function setConsistTimeoutAction($consist_timeout_action)
    {
        $allowedValues = $this->getConsistTimeoutActionAllowableValues();
        if (!is_null($consist_timeout_action) && !in_array($consist_timeout_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'consist_timeout_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consist_timeout_action'] = $consist_timeout_action;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets distributed_transaction
     *
     * @return bool
     */
    public function getDistributedTransaction()
    {
        return $this->container['distributed_transaction'];
    }

    /**
     * Sets distributed_transaction
     *
     * @param bool $distributed_transaction distributed_transaction
     *
     * @return $this
     */
    public function setDistributedTransaction($distributed_transaction)
    {
        $this->container['distributed_transaction'] = $distributed_transaction;

        return $this;
    }

    /**
     * Gets endpoint_name
     *
     * @return string
     */
    public function getEndpointName()
    {
        return $this->container['endpoint_name'];
    }

    /**
     * Sets endpoint_name
     *
     * @param string $endpoint_name endpoint_name
     *
     * @return $this
     */
    public function setEndpointName($endpoint_name)
    {
        $this->container['endpoint_name'] = $endpoint_name;

        return $this;
    }

    /**
     * Gets endpoint_type
     *
     * @return string
     */
    public function getEndpointType()
    {
        return $this->container['endpoint_type'];
    }

    /**
     * Sets endpoint_type
     *
     * @param string $endpoint_type endpoint_type
     *
     * @return $this
     */
    public function setEndpointType($endpoint_type)
    {
        $allowedValues = $this->getEndpointTypeAllowableValues();
        if (!in_array($endpoint_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'endpoint_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['endpoint_type'] = $endpoint_type;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets master_accept_read_requests
     *
     * @return bool
     */
    public function getMasterAcceptReadRequests()
    {
        return $this->container['master_accept_read_requests'];
    }

    /**
     * Sets master_accept_read_requests
     *
     * @param bool $master_accept_read_requests master_accept_read_requests
     *
     * @return $this
     */
    public function setMasterAcceptReadRequests($master_accept_read_requests)
    {
        $this->container['master_accept_read_requests'] = $master_accept_read_requests;

        return $this;
    }

    /**
     * Gets nodes
     *
     * @return string
     */
    public function getNodes()
    {
        return $this->container['nodes'];
    }

    /**
     * Sets nodes
     *
     * @param string $nodes nodes
     *
     * @return $this
     */
    public function setNodes($nodes)
    {
        $this->container['nodes'] = $nodes;

        return $this;
    }

    /**
     * Gets read_write_mode
     *
     * @return string
     */
    public function getReadWriteMode()
    {
        return $this->container['read_write_mode'];
    }

    /**
     * Sets read_write_mode
     *
     * @param string $read_write_mode read_write_mode
     *
     * @return $this
     */
    public function setReadWriteMode($read_write_mode)
    {
        $allowedValues = $this->getReadWriteModeAllowableValues();
        if (!is_null($read_write_mode) && !in_array($read_write_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'read_write_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['read_write_mode'] = $read_write_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

