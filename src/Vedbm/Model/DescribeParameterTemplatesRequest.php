<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeParameterTemplatesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeParameterTemplatesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_number' => 'int',
        'page_size' => 'int',
        'template_category' => 'string',
        'template_id' => 'string',
        'template_name' => 'string',
        'template_source' => 'string',
        'template_type' => 'string',
        'template_type_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_number' => 'int32',
        'page_size' => 'int32',
        'template_category' => null,
        'template_id' => null,
        'template_name' => null,
        'template_source' => null,
        'template_type' => null,
        'template_type_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'template_category' => 'TemplateCategory',
        'template_id' => 'TemplateId',
        'template_name' => 'TemplateName',
        'template_source' => 'TemplateSource',
        'template_type' => 'TemplateType',
        'template_type_version' => 'TemplateTypeVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'template_category' => 'setTemplateCategory',
        'template_id' => 'setTemplateId',
        'template_name' => 'setTemplateName',
        'template_source' => 'setTemplateSource',
        'template_type' => 'setTemplateType',
        'template_type_version' => 'setTemplateTypeVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'template_category' => 'getTemplateCategory',
        'template_id' => 'getTemplateId',
        'template_name' => 'getTemplateName',
        'template_source' => 'getTemplateSource',
        'template_type' => 'getTemplateType',
        'template_type_version' => 'getTemplateTypeVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TEMPLATE_CATEGORY_DB_ENGINE = 'DBEngine';
    const TEMPLATE_SOURCE_SYSTEM = 'System';
    const TEMPLATE_SOURCE_USER = 'User';
    const TEMPLATE_TYPE_MY_SQL = 'MySQL';
    const TEMPLATE_TYPE_VERSION_MY_SQL_5_7 = 'MySQL_5_7';
    const TEMPLATE_TYPE_VERSION_MY_SQL_8_0 = 'MySQL_8_0';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateCategoryAllowableValues()
    {
        return [
            self::TEMPLATE_CATEGORY_DB_ENGINE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateSourceAllowableValues()
    {
        return [
            self::TEMPLATE_SOURCE_SYSTEM,
            self::TEMPLATE_SOURCE_USER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_MY_SQL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeVersionAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_VERSION_MY_SQL_5_7,
            self::TEMPLATE_TYPE_VERSION_MY_SQL_8_0,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['template_category'] = isset($data['template_category']) ? $data['template_category'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['template_source'] = isset($data['template_source']) ? $data['template_source'] : null;
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
        $this->container['template_type_version'] = isset($data['template_type_version']) ? $data['template_type_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['page_number'] === null) {
            $invalidProperties[] = "'page_number' can't be null";
        }
        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        $allowedValues = $this->getTemplateCategoryAllowableValues();
        if (!is_null($this->container['template_category']) && !in_array($this->container['template_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTemplateSourceAllowableValues();
        if (!is_null($this->container['template_source']) && !in_array($this->container['template_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($this->container['template_type']) && !in_array($this->container['template_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTemplateTypeVersionAllowableValues();
        if (!is_null($this->container['template_type_version']) && !in_array($this->container['template_type_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_type_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets template_category
     *
     * @return string
     */
    public function getTemplateCategory()
    {
        return $this->container['template_category'];
    }

    /**
     * Sets template_category
     *
     * @param string $template_category template_category
     *
     * @return $this
     */
    public function setTemplateCategory($template_category)
    {
        $allowedValues = $this->getTemplateCategoryAllowableValues();
        if (!is_null($template_category) && !in_array($template_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_category'] = $template_category;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name template_name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets template_source
     *
     * @return string
     */
    public function getTemplateSource()
    {
        return $this->container['template_source'];
    }

    /**
     * Sets template_source
     *
     * @param string $template_source template_source
     *
     * @return $this
     */
    public function setTemplateSource($template_source)
    {
        $allowedValues = $this->getTemplateSourceAllowableValues();
        if (!is_null($template_source) && !in_array($template_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_source'] = $template_source;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string $template_type template_type
     *
     * @return $this
     */
    public function setTemplateType($template_type)
    {
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($template_type) && !in_array($template_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets template_type_version
     *
     * @return string
     */
    public function getTemplateTypeVersion()
    {
        return $this->container['template_type_version'];
    }

    /**
     * Sets template_type_version
     *
     * @param string $template_type_version template_type_version
     *
     * @return $this
     */
    public function setTemplateTypeVersion($template_type_version)
    {
        $allowedValues = $this->getTemplateTypeVersionAllowableValues();
        if (!is_null($template_type_version) && !in_array($template_type_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_type_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type_version'] = $template_type_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

