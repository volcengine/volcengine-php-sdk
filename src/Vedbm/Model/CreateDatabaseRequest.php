<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateDatabaseRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDatabaseRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'character_set_name' => 'string',
        'db_desc' => 'string',
        'db_name' => 'string',
        'databases_privileges' => '\Volcengine\Vedbm\Model\DatabasesPrivilegeForCreateDatabaseInput[]',
        'instance_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'character_set_name' => null,
        'db_desc' => null,
        'db_name' => null,
        'databases_privileges' => null,
        'instance_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'character_set_name' => 'CharacterSetName',
        'db_desc' => 'DBDesc',
        'db_name' => 'DBName',
        'databases_privileges' => 'DatabasesPrivileges',
        'instance_id' => 'InstanceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'character_set_name' => 'setCharacterSetName',
        'db_desc' => 'setDbDesc',
        'db_name' => 'setDbName',
        'databases_privileges' => 'setDatabasesPrivileges',
        'instance_id' => 'setInstanceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'character_set_name' => 'getCharacterSetName',
        'db_desc' => 'getDbDesc',
        'db_name' => 'getDbName',
        'databases_privileges' => 'getDatabasesPrivileges',
        'instance_id' => 'getInstanceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHARACTER_SET_NAME_ASCII = 'ascii';
    const CHARACTER_SET_NAME_LATIN1 = 'latin1';
    const CHARACTER_SET_NAME_UTF8 = 'utf8';
    const CHARACTER_SET_NAME_UTF8MB4 = 'utf8mb4';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCharacterSetNameAllowableValues()
    {
        return [
            self::CHARACTER_SET_NAME_ASCII,
            self::CHARACTER_SET_NAME_LATIN1,
            self::CHARACTER_SET_NAME_UTF8,
            self::CHARACTER_SET_NAME_UTF8MB4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['character_set_name'] = isset($data['character_set_name']) ? $data['character_set_name'] : null;
        $this->container['db_desc'] = isset($data['db_desc']) ? $data['db_desc'] : null;
        $this->container['db_name'] = isset($data['db_name']) ? $data['db_name'] : null;
        $this->container['databases_privileges'] = isset($data['databases_privileges']) ? $data['databases_privileges'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCharacterSetNameAllowableValues();
        if (!is_null($this->container['character_set_name']) && !in_array($this->container['character_set_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'character_set_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['db_name'] === null) {
            $invalidProperties[] = "'db_name' can't be null";
        }
        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets character_set_name
     *
     * @return string
     */
    public function getCharacterSetName()
    {
        return $this->container['character_set_name'];
    }

    /**
     * Sets character_set_name
     *
     * @param string $character_set_name character_set_name
     *
     * @return $this
     */
    public function setCharacterSetName($character_set_name)
    {
        $allowedValues = $this->getCharacterSetNameAllowableValues();
        if (!is_null($character_set_name) && !in_array($character_set_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'character_set_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['character_set_name'] = $character_set_name;

        return $this;
    }

    /**
     * Gets db_desc
     *
     * @return string
     */
    public function getDbDesc()
    {
        return $this->container['db_desc'];
    }

    /**
     * Sets db_desc
     *
     * @param string $db_desc db_desc
     *
     * @return $this
     */
    public function setDbDesc($db_desc)
    {
        $this->container['db_desc'] = $db_desc;

        return $this;
    }

    /**
     * Gets db_name
     *
     * @return string
     */
    public function getDbName()
    {
        return $this->container['db_name'];
    }

    /**
     * Sets db_name
     *
     * @param string $db_name db_name
     *
     * @return $this
     */
    public function setDbName($db_name)
    {
        $this->container['db_name'] = $db_name;

        return $this;
    }

    /**
     * Gets databases_privileges
     *
     * @return \Volcengine\Vedbm\Model\DatabasesPrivilegeForCreateDatabaseInput[]
     */
    public function getDatabasesPrivileges()
    {
        return $this->container['databases_privileges'];
    }

    /**
     * Sets databases_privileges
     *
     * @param \Volcengine\Vedbm\Model\DatabasesPrivilegeForCreateDatabaseInput[] $databases_privileges databases_privileges
     *
     * @return $this
     */
    public function setDatabasesPrivileges($databases_privileges)
    {
        $this->container['databases_privileges'] = $databases_privileges;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

