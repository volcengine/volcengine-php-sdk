<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateDBInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDBInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_renew' => 'bool',
        'charge_type' => 'string',
        'db_engine_version' => 'string',
        'db_minor_version' => 'string',
        'db_time_zone' => 'string',
        'deletion_protection' => 'string',
        'instance_name' => 'string',
        'lower_case_table_names' => 'string',
        'node_number' => 'int',
        'node_spec' => 'string',
        'number' => 'int',
        'period' => 'int',
        'period_unit' => 'string',
        'port' => 'int',
        'pre_paid_storage_in_gb' => 'int',
        'project_name' => 'string',
        'storage_charge_type' => 'string',
        'subnet_id' => 'string',
        'super_account_name' => 'string',
        'super_account_password' => 'string',
        'tags' => '\Volcengine\Vedbm\Model\TagForCreateDBInstanceInput[]',
        'template_id' => 'string',
        'vpc_id' => 'string',
        'zone_ids' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_renew' => null,
        'charge_type' => null,
        'db_engine_version' => null,
        'db_minor_version' => null,
        'db_time_zone' => null,
        'deletion_protection' => null,
        'instance_name' => null,
        'lower_case_table_names' => null,
        'node_number' => 'int32',
        'node_spec' => null,
        'number' => 'int32',
        'period' => 'int32',
        'period_unit' => null,
        'port' => 'int32',
        'pre_paid_storage_in_gb' => 'int32',
        'project_name' => null,
        'storage_charge_type' => null,
        'subnet_id' => null,
        'super_account_name' => null,
        'super_account_password' => null,
        'tags' => null,
        'template_id' => null,
        'vpc_id' => null,
        'zone_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_renew' => 'AutoRenew',
        'charge_type' => 'ChargeType',
        'db_engine_version' => 'DBEngineVersion',
        'db_minor_version' => 'DBMinorVersion',
        'db_time_zone' => 'DBTimeZone',
        'deletion_protection' => 'DeletionProtection',
        'instance_name' => 'InstanceName',
        'lower_case_table_names' => 'LowerCaseTableNames',
        'node_number' => 'NodeNumber',
        'node_spec' => 'NodeSpec',
        'number' => 'Number',
        'period' => 'Period',
        'period_unit' => 'PeriodUnit',
        'port' => 'Port',
        'pre_paid_storage_in_gb' => 'PrePaidStorageInGB',
        'project_name' => 'ProjectName',
        'storage_charge_type' => 'StorageChargeType',
        'subnet_id' => 'SubnetId',
        'super_account_name' => 'SuperAccountName',
        'super_account_password' => 'SuperAccountPassword',
        'tags' => 'Tags',
        'template_id' => 'TemplateId',
        'vpc_id' => 'VpcId',
        'zone_ids' => 'ZoneIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_renew' => 'setAutoRenew',
        'charge_type' => 'setChargeType',
        'db_engine_version' => 'setDbEngineVersion',
        'db_minor_version' => 'setDbMinorVersion',
        'db_time_zone' => 'setDbTimeZone',
        'deletion_protection' => 'setDeletionProtection',
        'instance_name' => 'setInstanceName',
        'lower_case_table_names' => 'setLowerCaseTableNames',
        'node_number' => 'setNodeNumber',
        'node_spec' => 'setNodeSpec',
        'number' => 'setNumber',
        'period' => 'setPeriod',
        'period_unit' => 'setPeriodUnit',
        'port' => 'setPort',
        'pre_paid_storage_in_gb' => 'setPrePaidStorageInGb',
        'project_name' => 'setProjectName',
        'storage_charge_type' => 'setStorageChargeType',
        'subnet_id' => 'setSubnetId',
        'super_account_name' => 'setSuperAccountName',
        'super_account_password' => 'setSuperAccountPassword',
        'tags' => 'setTags',
        'template_id' => 'setTemplateId',
        'vpc_id' => 'setVpcId',
        'zone_ids' => 'setZoneIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_renew' => 'getAutoRenew',
        'charge_type' => 'getChargeType',
        'db_engine_version' => 'getDbEngineVersion',
        'db_minor_version' => 'getDbMinorVersion',
        'db_time_zone' => 'getDbTimeZone',
        'deletion_protection' => 'getDeletionProtection',
        'instance_name' => 'getInstanceName',
        'lower_case_table_names' => 'getLowerCaseTableNames',
        'node_number' => 'getNodeNumber',
        'node_spec' => 'getNodeSpec',
        'number' => 'getNumber',
        'period' => 'getPeriod',
        'period_unit' => 'getPeriodUnit',
        'port' => 'getPort',
        'pre_paid_storage_in_gb' => 'getPrePaidStorageInGb',
        'project_name' => 'getProjectName',
        'storage_charge_type' => 'getStorageChargeType',
        'subnet_id' => 'getSubnetId',
        'super_account_name' => 'getSuperAccountName',
        'super_account_password' => 'getSuperAccountPassword',
        'tags' => 'getTags',
        'template_id' => 'getTemplateId',
        'vpc_id' => 'getVpcId',
        'zone_ids' => 'getZoneIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHARGE_TYPE_POST_PAID = 'PostPaid';
    const CHARGE_TYPE_PRE_PAID = 'PrePaid';
    const DB_ENGINE_VERSION_MY_SQL_5_7 = 'MySQL_5_7';
    const DB_ENGINE_VERSION_MY_SQL_8_0 = 'MySQL_8_0';
    const DB_MINOR_VERSION__20 = '2.0';
    const DB_MINOR_VERSION__30 = '3.0';
    const DB_MINOR_VERSION__31 = '3.1';
    const DB_MINOR_VERSION__32 = '3.2';
    const DB_MINOR_VERSION__33 = '3.3';
    const DELETION_PROTECTION_DISABLED = 'disabled';
    const DELETION_PROTECTION_ENABLED = 'enabled';
    const LOWER_CASE_TABLE_NAMES__0 = '0';
    const LOWER_CASE_TABLE_NAMES__1 = '1';
    const NODE_SPEC_VEDBMYSQLG42XLARGE = 'vedb.mysql.g4.2xlarge';
    const NODE_SPEC_VEDBMYSQLG44XLARGE = 'vedb.mysql.g4.4xlarge';
    const NODE_SPEC_VEDBMYSQLG4LARGE = 'vedb.mysql.g4.large';
    const NODE_SPEC_VEDBMYSQLG4XLARGE = 'vedb.mysql.g4.xlarge';
    const NODE_SPEC_VEDBMYSQLG82XLARGE = 'vedb.mysql.g8.2xlarge';
    const NODE_SPEC_VEDBMYSQLX42XLARGE = 'vedb.mysql.x4.2xlarge';
    const NODE_SPEC_VEDBMYSQLX44XLARGE = 'vedb.mysql.x4.4xlarge';
    const NODE_SPEC_VEDBMYSQLX48XLARGE = 'vedb.mysql.x4.8xlarge';
    const NODE_SPEC_VEDBMYSQLX4LARGE = 'vedb.mysql.x4.large';
    const NODE_SPEC_VEDBMYSQLX4XLARGE = 'vedb.mysql.x4.xlarge';
    const NODE_SPEC_VEDBMYSQLX82XLARGE = 'vedb.mysql.x8.2xlarge';
    const NODE_SPEC_VEDBMYSQLX84XLARGE = 'vedb.mysql.x8.4xlarge';
    const NODE_SPEC_VEDBMYSQLX86XLARGE = 'vedb.mysql.x8.6xlarge';
    const NODE_SPEC_VEDBMYSQLX88XLARGE = 'vedb.mysql.x8.8xlarge';
    const NODE_SPEC_VEDBMYSQLX8LARGE = 'vedb.mysql.x8.large';
    const NODE_SPEC_VEDBMYSQLX8XLARGE = 'vedb.mysql.x8.xlarge';
    const PERIOD_UNIT_MONTH = 'Month';
    const PERIOD_UNIT_YEAR = 'Year';
    const STORAGE_CHARGE_TYPE_POST_PAID = 'PostPaid';
    const STORAGE_CHARGE_TYPE_PRE_PAID = 'PrePaid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeTypeAllowableValues()
    {
        return [
            self::CHARGE_TYPE_POST_PAID,
            self::CHARGE_TYPE_PRE_PAID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDbEngineVersionAllowableValues()
    {
        return [
            self::DB_ENGINE_VERSION_MY_SQL_5_7,
            self::DB_ENGINE_VERSION_MY_SQL_8_0,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDbMinorVersionAllowableValues()
    {
        return [
            self::DB_MINOR_VERSION__20,
            self::DB_MINOR_VERSION__30,
            self::DB_MINOR_VERSION__31,
            self::DB_MINOR_VERSION__32,
            self::DB_MINOR_VERSION__33,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeletionProtectionAllowableValues()
    {
        return [
            self::DELETION_PROTECTION_DISABLED,
            self::DELETION_PROTECTION_ENABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLowerCaseTableNamesAllowableValues()
    {
        return [
            self::LOWER_CASE_TABLE_NAMES__0,
            self::LOWER_CASE_TABLE_NAMES__1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNodeSpecAllowableValues()
    {
        return [
            self::NODE_SPEC_VEDBMYSQLG42XLARGE,
            self::NODE_SPEC_VEDBMYSQLG44XLARGE,
            self::NODE_SPEC_VEDBMYSQLG4LARGE,
            self::NODE_SPEC_VEDBMYSQLG4XLARGE,
            self::NODE_SPEC_VEDBMYSQLG82XLARGE,
            self::NODE_SPEC_VEDBMYSQLX42XLARGE,
            self::NODE_SPEC_VEDBMYSQLX44XLARGE,
            self::NODE_SPEC_VEDBMYSQLX48XLARGE,
            self::NODE_SPEC_VEDBMYSQLX4LARGE,
            self::NODE_SPEC_VEDBMYSQLX4XLARGE,
            self::NODE_SPEC_VEDBMYSQLX82XLARGE,
            self::NODE_SPEC_VEDBMYSQLX84XLARGE,
            self::NODE_SPEC_VEDBMYSQLX86XLARGE,
            self::NODE_SPEC_VEDBMYSQLX88XLARGE,
            self::NODE_SPEC_VEDBMYSQLX8LARGE,
            self::NODE_SPEC_VEDBMYSQLX8XLARGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodUnitAllowableValues()
    {
        return [
            self::PERIOD_UNIT_MONTH,
            self::PERIOD_UNIT_YEAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorageChargeTypeAllowableValues()
    {
        return [
            self::STORAGE_CHARGE_TYPE_POST_PAID,
            self::STORAGE_CHARGE_TYPE_PRE_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['db_minor_version'] = isset($data['db_minor_version']) ? $data['db_minor_version'] : null;
        $this->container['db_time_zone'] = isset($data['db_time_zone']) ? $data['db_time_zone'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['lower_case_table_names'] = isset($data['lower_case_table_names']) ? $data['lower_case_table_names'] : null;
        $this->container['node_number'] = isset($data['node_number']) ? $data['node_number'] : null;
        $this->container['node_spec'] = isset($data['node_spec']) ? $data['node_spec'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['period_unit'] = isset($data['period_unit']) ? $data['period_unit'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['pre_paid_storage_in_gb'] = isset($data['pre_paid_storage_in_gb']) ? $data['pre_paid_storage_in_gb'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['storage_charge_type'] = isset($data['storage_charge_type']) ? $data['storage_charge_type'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['super_account_name'] = isset($data['super_account_name']) ? $data['super_account_name'] : null;
        $this->container['super_account_password'] = isset($data['super_account_password']) ? $data['super_account_password'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_ids'] = isset($data['zone_ids']) ? $data['zone_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['charge_type'] === null) {
            $invalidProperties[] = "'charge_type' can't be null";
        }
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($this->container['charge_type']) && !in_array($this->container['charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['db_engine_version'] === null) {
            $invalidProperties[] = "'db_engine_version' can't be null";
        }
        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($this->container['db_engine_version']) && !in_array($this->container['db_engine_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'db_engine_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDbMinorVersionAllowableValues();
        if (!is_null($this->container['db_minor_version']) && !in_array($this->container['db_minor_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'db_minor_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeletionProtectionAllowableValues();
        if (!is_null($this->container['deletion_protection']) && !in_array($this->container['deletion_protection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deletion_protection', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLowerCaseTableNamesAllowableValues();
        if (!is_null($this->container['lower_case_table_names']) && !in_array($this->container['lower_case_table_names'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lower_case_table_names', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['node_number'] === null) {
            $invalidProperties[] = "'node_number' can't be null";
        }
        if ($this->container['node_spec'] === null) {
            $invalidProperties[] = "'node_spec' can't be null";
        }
        $allowedValues = $this->getNodeSpecAllowableValues();
        if (!is_null($this->container['node_spec']) && !in_array($this->container['node_spec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'node_spec', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPeriodUnitAllowableValues();
        if (!is_null($this->container['period_unit']) && !in_array($this->container['period_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'period_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($this->container['storage_charge_type']) && !in_array($this->container['storage_charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storage_charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['subnet_id'] === null) {
            $invalidProperties[] = "'subnet_id' can't be null";
        }
        if ($this->container['vpc_id'] === null) {
            $invalidProperties[] = "'vpc_id' can't be null";
        }
        if ($this->container['zone_ids'] === null) {
            $invalidProperties[] = "'zone_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!in_array($charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!in_array($db_engine_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'db_engine_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets db_minor_version
     *
     * @return string
     */
    public function getDbMinorVersion()
    {
        return $this->container['db_minor_version'];
    }

    /**
     * Sets db_minor_version
     *
     * @param string $db_minor_version db_minor_version
     *
     * @return $this
     */
    public function setDbMinorVersion($db_minor_version)
    {
        $allowedValues = $this->getDbMinorVersionAllowableValues();
        if (!is_null($db_minor_version) && !in_array($db_minor_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'db_minor_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['db_minor_version'] = $db_minor_version;

        return $this;
    }

    /**
     * Gets db_time_zone
     *
     * @return string
     */
    public function getDbTimeZone()
    {
        return $this->container['db_time_zone'];
    }

    /**
     * Sets db_time_zone
     *
     * @param string $db_time_zone db_time_zone
     *
     * @return $this
     */
    public function setDbTimeZone($db_time_zone)
    {
        $this->container['db_time_zone'] = $db_time_zone;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $allowedValues = $this->getDeletionProtectionAllowableValues();
        if (!is_null($deletion_protection) && !in_array($deletion_protection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deletion_protection', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets lower_case_table_names
     *
     * @return string
     */
    public function getLowerCaseTableNames()
    {
        return $this->container['lower_case_table_names'];
    }

    /**
     * Sets lower_case_table_names
     *
     * @param string $lower_case_table_names lower_case_table_names
     *
     * @return $this
     */
    public function setLowerCaseTableNames($lower_case_table_names)
    {
        $allowedValues = $this->getLowerCaseTableNamesAllowableValues();
        if (!is_null($lower_case_table_names) && !in_array($lower_case_table_names, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lower_case_table_names', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lower_case_table_names'] = $lower_case_table_names;

        return $this;
    }

    /**
     * Gets node_number
     *
     * @return int
     */
    public function getNodeNumber()
    {
        return $this->container['node_number'];
    }

    /**
     * Sets node_number
     *
     * @param int $node_number node_number
     *
     * @return $this
     */
    public function setNodeNumber($node_number)
    {
        $this->container['node_number'] = $node_number;

        return $this;
    }

    /**
     * Gets node_spec
     *
     * @return string
     */
    public function getNodeSpec()
    {
        return $this->container['node_spec'];
    }

    /**
     * Sets node_spec
     *
     * @param string $node_spec node_spec
     *
     * @return $this
     */
    public function setNodeSpec($node_spec)
    {
        $allowedValues = $this->getNodeSpecAllowableValues();
        if (!in_array($node_spec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'node_spec', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['node_spec'] = $node_spec;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets period_unit
     *
     * @return string
     */
    public function getPeriodUnit()
    {
        return $this->container['period_unit'];
    }

    /**
     * Sets period_unit
     *
     * @param string $period_unit period_unit
     *
     * @return $this
     */
    public function setPeriodUnit($period_unit)
    {
        $allowedValues = $this->getPeriodUnitAllowableValues();
        if (!is_null($period_unit) && !in_array($period_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'period_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period_unit'] = $period_unit;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets pre_paid_storage_in_gb
     *
     * @return int
     */
    public function getPrePaidStorageInGb()
    {
        return $this->container['pre_paid_storage_in_gb'];
    }

    /**
     * Sets pre_paid_storage_in_gb
     *
     * @param int $pre_paid_storage_in_gb pre_paid_storage_in_gb
     *
     * @return $this
     */
    public function setPrePaidStorageInGb($pre_paid_storage_in_gb)
    {
        $this->container['pre_paid_storage_in_gb'] = $pre_paid_storage_in_gb;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets storage_charge_type
     *
     * @return string
     */
    public function getStorageChargeType()
    {
        return $this->container['storage_charge_type'];
    }

    /**
     * Sets storage_charge_type
     *
     * @param string $storage_charge_type storage_charge_type
     *
     * @return $this
     */
    public function setStorageChargeType($storage_charge_type)
    {
        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($storage_charge_type) && !in_array($storage_charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storage_charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storage_charge_type'] = $storage_charge_type;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets super_account_name
     *
     * @return string
     */
    public function getSuperAccountName()
    {
        return $this->container['super_account_name'];
    }

    /**
     * Sets super_account_name
     *
     * @param string $super_account_name super_account_name
     *
     * @return $this
     */
    public function setSuperAccountName($super_account_name)
    {
        $this->container['super_account_name'] = $super_account_name;

        return $this;
    }

    /**
     * Gets super_account_password
     *
     * @return string
     */
    public function getSuperAccountPassword()
    {
        return $this->container['super_account_password'];
    }

    /**
     * Sets super_account_password
     *
     * @param string $super_account_password super_account_password
     *
     * @return $this
     */
    public function setSuperAccountPassword($super_account_password)
    {
        $this->container['super_account_password'] = $super_account_password;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vedbm\Model\TagForCreateDBInstanceInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vedbm\Model\TagForCreateDBInstanceInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_ids
     *
     * @return string
     */
    public function getZoneIds()
    {
        return $this->container['zone_ids'];
    }

    /**
     * Sets zone_ids
     *
     * @param string $zone_ids zone_ids
     *
     * @return $this
     */
    public function setZoneIds($zone_ids)
    {
        $this->container['zone_ids'] = $zone_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

