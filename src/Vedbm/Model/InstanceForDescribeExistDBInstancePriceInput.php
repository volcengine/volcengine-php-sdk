<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceForDescribeExistDBInstancePriceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceForDescribeExistDBInstancePriceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
        'node_specs' => '\Volcengine\Vedbm\Model\NodeSpecForDescribeExistDBInstancePriceInput[]',
        'pre_paid_storage_in_gb' => 'int',
        'storage_charge_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
        'node_specs' => null,
        'pre_paid_storage_in_gb' => 'int32',
        'storage_charge_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'InstanceId',
        'node_specs' => 'NodeSpecs',
        'pre_paid_storage_in_gb' => 'PrePaidStorageInGB',
        'storage_charge_type' => 'StorageChargeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
        'node_specs' => 'setNodeSpecs',
        'pre_paid_storage_in_gb' => 'setPrePaidStorageInGb',
        'storage_charge_type' => 'setStorageChargeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
        'node_specs' => 'getNodeSpecs',
        'pre_paid_storage_in_gb' => 'getPrePaidStorageInGb',
        'storage_charge_type' => 'getStorageChargeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STORAGE_CHARGE_TYPE_POST_PAID = 'PostPaid';
    const STORAGE_CHARGE_TYPE_PRE_PAID = 'PrePaid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorageChargeTypeAllowableValues()
    {
        return [
            self::STORAGE_CHARGE_TYPE_POST_PAID,
            self::STORAGE_CHARGE_TYPE_PRE_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['node_specs'] = isset($data['node_specs']) ? $data['node_specs'] : null;
        $this->container['pre_paid_storage_in_gb'] = isset($data['pre_paid_storage_in_gb']) ? $data['pre_paid_storage_in_gb'] : null;
        $this->container['storage_charge_type'] = isset($data['storage_charge_type']) ? $data['storage_charge_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($this->container['storage_charge_type']) && !in_array($this->container['storage_charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storage_charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets node_specs
     *
     * @return \Volcengine\Vedbm\Model\NodeSpecForDescribeExistDBInstancePriceInput[]
     */
    public function getNodeSpecs()
    {
        return $this->container['node_specs'];
    }

    /**
     * Sets node_specs
     *
     * @param \Volcengine\Vedbm\Model\NodeSpecForDescribeExistDBInstancePriceInput[] $node_specs node_specs
     *
     * @return $this
     */
    public function setNodeSpecs($node_specs)
    {
        $this->container['node_specs'] = $node_specs;

        return $this;
    }

    /**
     * Gets pre_paid_storage_in_gb
     *
     * @return int
     */
    public function getPrePaidStorageInGb()
    {
        return $this->container['pre_paid_storage_in_gb'];
    }

    /**
     * Sets pre_paid_storage_in_gb
     *
     * @param int $pre_paid_storage_in_gb pre_paid_storage_in_gb
     *
     * @return $this
     */
    public function setPrePaidStorageInGb($pre_paid_storage_in_gb)
    {
        $this->container['pre_paid_storage_in_gb'] = $pre_paid_storage_in_gb;

        return $this;
    }

    /**
     * Gets storage_charge_type
     *
     * @return string
     */
    public function getStorageChargeType()
    {
        return $this->container['storage_charge_type'];
    }

    /**
     * Sets storage_charge_type
     *
     * @param string $storage_charge_type storage_charge_type
     *
     * @return $this
     */
    public function setStorageChargeType($storage_charge_type)
    {
        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($storage_charge_type) && !in_array($storage_charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storage_charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storage_charge_type'] = $storage_charge_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

