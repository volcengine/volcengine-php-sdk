<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceForDescribeDBInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceForDescribeDBInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_detail' => '\Volcengine\Vedbm\Model\ChargeDetailForDescribeDBInstancesOutput',
        'create_time' => 'string',
        'db_engine_version' => 'string',
        'db_revision_version' => 'string',
        'deletion_protection' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'instance_status' => 'string',
        'lower_case_table_names' => 'string',
        'nodes' => '\Volcengine\Vedbm\Model\NodeForDescribeDBInstancesOutput[]',
        'pre_paid_storage_in_gb' => 'int',
        'project_name' => 'string',
        'region_id' => 'string',
        'spec_family' => 'string',
        'storage_charge_type' => 'string',
        'storage_used_gi_b' => 'double',
        'subnet_id' => 'string',
        'tags' => '\Volcengine\Vedbm\Model\TagForDescribeDBInstancesOutput[]',
        'time_zone' => 'string',
        'vpc_id' => 'string',
        'zone_ids' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_detail' => null,
        'create_time' => null,
        'db_engine_version' => null,
        'db_revision_version' => null,
        'deletion_protection' => null,
        'instance_id' => null,
        'instance_name' => null,
        'instance_status' => null,
        'lower_case_table_names' => null,
        'nodes' => null,
        'pre_paid_storage_in_gb' => 'int32',
        'project_name' => null,
        'region_id' => null,
        'spec_family' => null,
        'storage_charge_type' => null,
        'storage_used_gi_b' => 'double',
        'subnet_id' => null,
        'tags' => null,
        'time_zone' => null,
        'vpc_id' => null,
        'zone_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_detail' => 'ChargeDetail',
        'create_time' => 'CreateTime',
        'db_engine_version' => 'DBEngineVersion',
        'db_revision_version' => 'DBRevisionVersion',
        'deletion_protection' => 'DeletionProtection',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'instance_status' => 'InstanceStatus',
        'lower_case_table_names' => 'LowerCaseTableNames',
        'nodes' => 'Nodes',
        'pre_paid_storage_in_gb' => 'PrePaidStorageInGB',
        'project_name' => 'ProjectName',
        'region_id' => 'RegionId',
        'spec_family' => 'SpecFamily',
        'storage_charge_type' => 'StorageChargeType',
        'storage_used_gi_b' => 'StorageUsedGiB',
        'subnet_id' => 'SubnetId',
        'tags' => 'Tags',
        'time_zone' => 'TimeZone',
        'vpc_id' => 'VpcId',
        'zone_ids' => 'ZoneIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_detail' => 'setChargeDetail',
        'create_time' => 'setCreateTime',
        'db_engine_version' => 'setDbEngineVersion',
        'db_revision_version' => 'setDbRevisionVersion',
        'deletion_protection' => 'setDeletionProtection',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'instance_status' => 'setInstanceStatus',
        'lower_case_table_names' => 'setLowerCaseTableNames',
        'nodes' => 'setNodes',
        'pre_paid_storage_in_gb' => 'setPrePaidStorageInGb',
        'project_name' => 'setProjectName',
        'region_id' => 'setRegionId',
        'spec_family' => 'setSpecFamily',
        'storage_charge_type' => 'setStorageChargeType',
        'storage_used_gi_b' => 'setStorageUsedGiB',
        'subnet_id' => 'setSubnetId',
        'tags' => 'setTags',
        'time_zone' => 'setTimeZone',
        'vpc_id' => 'setVpcId',
        'zone_ids' => 'setZoneIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_detail' => 'getChargeDetail',
        'create_time' => 'getCreateTime',
        'db_engine_version' => 'getDbEngineVersion',
        'db_revision_version' => 'getDbRevisionVersion',
        'deletion_protection' => 'getDeletionProtection',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'instance_status' => 'getInstanceStatus',
        'lower_case_table_names' => 'getLowerCaseTableNames',
        'nodes' => 'getNodes',
        'pre_paid_storage_in_gb' => 'getPrePaidStorageInGb',
        'project_name' => 'getProjectName',
        'region_id' => 'getRegionId',
        'spec_family' => 'getSpecFamily',
        'storage_charge_type' => 'getStorageChargeType',
        'storage_used_gi_b' => 'getStorageUsedGiB',
        'subnet_id' => 'getSubnetId',
        'tags' => 'getTags',
        'time_zone' => 'getTimeZone',
        'vpc_id' => 'getVpcId',
        'zone_ids' => 'getZoneIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DB_ENGINE_VERSION_MY_SQL_5_7 = 'MySQL_5_7';
    const DB_ENGINE_VERSION_MY_SQL_8_0 = 'MySQL_8_0';
    const DELETION_PROTECTION_DISABLED = 'disabled';
    const DELETION_PROTECTION_ENABLED = 'enabled';
    const INSTANCE_STATUS_ADDRESS_MODIFYING = 'AddressModifying';
    const INSTANCE_STATUS_ALLOW_LIST_MAINTAINING = 'AllowListMaintaining';
    const INSTANCE_STATUS_CREATE_FAILED = 'CreateFailed';
    const INSTANCE_STATUS_CREATING = 'Creating';
    const INSTANCE_STATUS_DELETING = 'Deleting';
    const INSTANCE_STATUS_ERROR = 'Error';
    const INSTANCE_STATUS_EXPIRED = 'Expired';
    const INSTANCE_STATUS_OWING = 'Owing';
    const INSTANCE_STATUS_PRIMARY_CHANGING = 'PrimaryChanging';
    const INSTANCE_STATUS_RECLAIMING = 'Reclaiming';
    const INSTANCE_STATUS_RESTARTING = 'Restarting';
    const INSTANCE_STATUS_RESTORING = 'Restoring';
    const INSTANCE_STATUS_RESUMING = 'Resuming';
    const INSTANCE_STATUS_RUNNING = 'Running';
    const INSTANCE_STATUS_SCALING = 'Scaling';
    const INSTANCE_STATUS_UPGRADING = 'Upgrading';
    const INSTANCE_STATUS_WAITING_PAID = 'WaitingPaid';
    const STORAGE_CHARGE_TYPE_POST_PAID = 'PostPaid';
    const STORAGE_CHARGE_TYPE_PRE_PAID = 'PrePaid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDbEngineVersionAllowableValues()
    {
        return [
            self::DB_ENGINE_VERSION_MY_SQL_5_7,
            self::DB_ENGINE_VERSION_MY_SQL_8_0,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeletionProtectionAllowableValues()
    {
        return [
            self::DELETION_PROTECTION_DISABLED,
            self::DELETION_PROTECTION_ENABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstanceStatusAllowableValues()
    {
        return [
            self::INSTANCE_STATUS_ADDRESS_MODIFYING,
            self::INSTANCE_STATUS_ALLOW_LIST_MAINTAINING,
            self::INSTANCE_STATUS_CREATE_FAILED,
            self::INSTANCE_STATUS_CREATING,
            self::INSTANCE_STATUS_DELETING,
            self::INSTANCE_STATUS_ERROR,
            self::INSTANCE_STATUS_EXPIRED,
            self::INSTANCE_STATUS_OWING,
            self::INSTANCE_STATUS_PRIMARY_CHANGING,
            self::INSTANCE_STATUS_RECLAIMING,
            self::INSTANCE_STATUS_RESTARTING,
            self::INSTANCE_STATUS_RESTORING,
            self::INSTANCE_STATUS_RESUMING,
            self::INSTANCE_STATUS_RUNNING,
            self::INSTANCE_STATUS_SCALING,
            self::INSTANCE_STATUS_UPGRADING,
            self::INSTANCE_STATUS_WAITING_PAID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorageChargeTypeAllowableValues()
    {
        return [
            self::STORAGE_CHARGE_TYPE_POST_PAID,
            self::STORAGE_CHARGE_TYPE_PRE_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_detail'] = isset($data['charge_detail']) ? $data['charge_detail'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['db_revision_version'] = isset($data['db_revision_version']) ? $data['db_revision_version'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_status'] = isset($data['instance_status']) ? $data['instance_status'] : null;
        $this->container['lower_case_table_names'] = isset($data['lower_case_table_names']) ? $data['lower_case_table_names'] : null;
        $this->container['nodes'] = isset($data['nodes']) ? $data['nodes'] : null;
        $this->container['pre_paid_storage_in_gb'] = isset($data['pre_paid_storage_in_gb']) ? $data['pre_paid_storage_in_gb'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['spec_family'] = isset($data['spec_family']) ? $data['spec_family'] : null;
        $this->container['storage_charge_type'] = isset($data['storage_charge_type']) ? $data['storage_charge_type'] : null;
        $this->container['storage_used_gi_b'] = isset($data['storage_used_gi_b']) ? $data['storage_used_gi_b'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_ids'] = isset($data['zone_ids']) ? $data['zone_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($this->container['db_engine_version']) && !in_array($this->container['db_engine_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'db_engine_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeletionProtectionAllowableValues();
        if (!is_null($this->container['deletion_protection']) && !in_array($this->container['deletion_protection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deletion_protection', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInstanceStatusAllowableValues();
        if (!is_null($this->container['instance_status']) && !in_array($this->container['instance_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'instance_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($this->container['storage_charge_type']) && !in_array($this->container['storage_charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storage_charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_detail
     *
     * @return \Volcengine\Vedbm\Model\ChargeDetailForDescribeDBInstancesOutput
     */
    public function getChargeDetail()
    {
        return $this->container['charge_detail'];
    }

    /**
     * Sets charge_detail
     *
     * @param \Volcengine\Vedbm\Model\ChargeDetailForDescribeDBInstancesOutput $charge_detail charge_detail
     *
     * @return $this
     */
    public function setChargeDetail($charge_detail)
    {
        $this->container['charge_detail'] = $charge_detail;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($db_engine_version) && !in_array($db_engine_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'db_engine_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets db_revision_version
     *
     * @return string
     */
    public function getDbRevisionVersion()
    {
        return $this->container['db_revision_version'];
    }

    /**
     * Sets db_revision_version
     *
     * @param string $db_revision_version db_revision_version
     *
     * @return $this
     */
    public function setDbRevisionVersion($db_revision_version)
    {
        $this->container['db_revision_version'] = $db_revision_version;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return string
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param string $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $allowedValues = $this->getDeletionProtectionAllowableValues();
        if (!is_null($deletion_protection) && !in_array($deletion_protection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deletion_protection', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_status
     *
     * @return string
     */
    public function getInstanceStatus()
    {
        return $this->container['instance_status'];
    }

    /**
     * Sets instance_status
     *
     * @param string $instance_status instance_status
     *
     * @return $this
     */
    public function setInstanceStatus($instance_status)
    {
        $allowedValues = $this->getInstanceStatusAllowableValues();
        if (!is_null($instance_status) && !in_array($instance_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'instance_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['instance_status'] = $instance_status;

        return $this;
    }

    /**
     * Gets lower_case_table_names
     *
     * @return string
     */
    public function getLowerCaseTableNames()
    {
        return $this->container['lower_case_table_names'];
    }

    /**
     * Sets lower_case_table_names
     *
     * @param string $lower_case_table_names lower_case_table_names
     *
     * @return $this
     */
    public function setLowerCaseTableNames($lower_case_table_names)
    {
        $this->container['lower_case_table_names'] = $lower_case_table_names;

        return $this;
    }

    /**
     * Gets nodes
     *
     * @return \Volcengine\Vedbm\Model\NodeForDescribeDBInstancesOutput[]
     */
    public function getNodes()
    {
        return $this->container['nodes'];
    }

    /**
     * Sets nodes
     *
     * @param \Volcengine\Vedbm\Model\NodeForDescribeDBInstancesOutput[] $nodes nodes
     *
     * @return $this
     */
    public function setNodes($nodes)
    {
        $this->container['nodes'] = $nodes;

        return $this;
    }

    /**
     * Gets pre_paid_storage_in_gb
     *
     * @return int
     */
    public function getPrePaidStorageInGb()
    {
        return $this->container['pre_paid_storage_in_gb'];
    }

    /**
     * Sets pre_paid_storage_in_gb
     *
     * @param int $pre_paid_storage_in_gb pre_paid_storage_in_gb
     *
     * @return $this
     */
    public function setPrePaidStorageInGb($pre_paid_storage_in_gb)
    {
        $this->container['pre_paid_storage_in_gb'] = $pre_paid_storage_in_gb;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets spec_family
     *
     * @return string
     */
    public function getSpecFamily()
    {
        return $this->container['spec_family'];
    }

    /**
     * Sets spec_family
     *
     * @param string $spec_family spec_family
     *
     * @return $this
     */
    public function setSpecFamily($spec_family)
    {
        $this->container['spec_family'] = $spec_family;

        return $this;
    }

    /**
     * Gets storage_charge_type
     *
     * @return string
     */
    public function getStorageChargeType()
    {
        return $this->container['storage_charge_type'];
    }

    /**
     * Sets storage_charge_type
     *
     * @param string $storage_charge_type storage_charge_type
     *
     * @return $this
     */
    public function setStorageChargeType($storage_charge_type)
    {
        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($storage_charge_type) && !in_array($storage_charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storage_charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storage_charge_type'] = $storage_charge_type;

        return $this;
    }

    /**
     * Gets storage_used_gi_b
     *
     * @return double
     */
    public function getStorageUsedGiB()
    {
        return $this->container['storage_used_gi_b'];
    }

    /**
     * Sets storage_used_gi_b
     *
     * @param double $storage_used_gi_b storage_used_gi_b
     *
     * @return $this
     */
    public function setStorageUsedGiB($storage_used_gi_b)
    {
        $this->container['storage_used_gi_b'] = $storage_used_gi_b;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vedbm\Model\TagForDescribeDBInstancesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vedbm\Model\TagForDescribeDBInstancesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_ids
     *
     * @return string
     */
    public function getZoneIds()
    {
        return $this->container['zone_ids'];
    }

    /**
     * Sets zone_ids
     *
     * @param string $zone_ids zone_ids
     *
     * @return $this
     */
    public function setZoneIds($zone_ids)
    {
        $this->container['zone_ids'] = $zone_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

