<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBInstanceDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBInstanceDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_detail' => '\Volcengine\Vedbm\Model\ChargeDetailForDescribeDBInstanceDetailOutput',
        'endpoints' => '\Volcengine\Vedbm\Model\EndpointForDescribeDBInstanceDetailOutput[]',
        'instance_detail' => '\Volcengine\Vedbm\Model\InstanceDetailForDescribeDBInstanceDetailOutput',
        'nodes' => '\Volcengine\Vedbm\Model\NodeForDescribeDBInstanceDetailOutput[]',
        'tags' => '\Volcengine\Vedbm\Model\TagForDescribeDBInstanceDetailOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_detail' => null,
        'endpoints' => null,
        'instance_detail' => null,
        'nodes' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_detail' => 'ChargeDetail',
        'endpoints' => 'Endpoints',
        'instance_detail' => 'InstanceDetail',
        'nodes' => 'Nodes',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_detail' => 'setChargeDetail',
        'endpoints' => 'setEndpoints',
        'instance_detail' => 'setInstanceDetail',
        'nodes' => 'setNodes',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_detail' => 'getChargeDetail',
        'endpoints' => 'getEndpoints',
        'instance_detail' => 'getInstanceDetail',
        'nodes' => 'getNodes',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_detail'] = isset($data['charge_detail']) ? $data['charge_detail'] : null;
        $this->container['endpoints'] = isset($data['endpoints']) ? $data['endpoints'] : null;
        $this->container['instance_detail'] = isset($data['instance_detail']) ? $data['instance_detail'] : null;
        $this->container['nodes'] = isset($data['nodes']) ? $data['nodes'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_detail
     *
     * @return \Volcengine\Vedbm\Model\ChargeDetailForDescribeDBInstanceDetailOutput
     */
    public function getChargeDetail()
    {
        return $this->container['charge_detail'];
    }

    /**
     * Sets charge_detail
     *
     * @param \Volcengine\Vedbm\Model\ChargeDetailForDescribeDBInstanceDetailOutput $charge_detail charge_detail
     *
     * @return $this
     */
    public function setChargeDetail($charge_detail)
    {
        $this->container['charge_detail'] = $charge_detail;

        return $this;
    }

    /**
     * Gets endpoints
     *
     * @return \Volcengine\Vedbm\Model\EndpointForDescribeDBInstanceDetailOutput[]
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param \Volcengine\Vedbm\Model\EndpointForDescribeDBInstanceDetailOutput[] $endpoints endpoints
     *
     * @return $this
     */
    public function setEndpoints($endpoints)
    {
        $this->container['endpoints'] = $endpoints;

        return $this;
    }

    /**
     * Gets instance_detail
     *
     * @return \Volcengine\Vedbm\Model\InstanceDetailForDescribeDBInstanceDetailOutput
     */
    public function getInstanceDetail()
    {
        return $this->container['instance_detail'];
    }

    /**
     * Sets instance_detail
     *
     * @param \Volcengine\Vedbm\Model\InstanceDetailForDescribeDBInstanceDetailOutput $instance_detail instance_detail
     *
     * @return $this
     */
    public function setInstanceDetail($instance_detail)
    {
        $this->container['instance_detail'] = $instance_detail;

        return $this;
    }

    /**
     * Gets nodes
     *
     * @return \Volcengine\Vedbm\Model\NodeForDescribeDBInstanceDetailOutput[]
     */
    public function getNodes()
    {
        return $this->container['nodes'];
    }

    /**
     * Sets nodes
     *
     * @param \Volcengine\Vedbm\Model\NodeForDescribeDBInstanceDetailOutput[] $nodes nodes
     *
     * @return $this
     */
    public function setNodes($nodes)
    {
        $this->container['nodes'] = $nodes;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vedbm\Model\TagForDescribeDBInstanceDetailOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vedbm\Model\TagForDescribeDBInstanceDetailOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

