<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceForDescribeCrossRegionBackupDBInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceForDescribeCrossRegionBackupDBInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cross_region_backup' => 'bool',
        'db_engine_version' => 'string',
        'db_revision_version' => 'string',
        'instance_id' => 'string',
        'lower_case_table_names' => 'string',
        'project_name' => 'string',
        'region_id' => 'string',
        'retention' => 'int',
        'target_region' => 'string',
        'time_zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cross_region_backup' => null,
        'db_engine_version' => null,
        'db_revision_version' => null,
        'instance_id' => null,
        'lower_case_table_names' => null,
        'project_name' => null,
        'region_id' => null,
        'retention' => 'int32',
        'target_region' => null,
        'time_zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cross_region_backup' => 'CrossRegionBackup',
        'db_engine_version' => 'DBEngineVersion',
        'db_revision_version' => 'DBRevisionVersion',
        'instance_id' => 'InstanceId',
        'lower_case_table_names' => 'LowerCaseTableNames',
        'project_name' => 'ProjectName',
        'region_id' => 'RegionId',
        'retention' => 'Retention',
        'target_region' => 'TargetRegion',
        'time_zone' => 'TimeZone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cross_region_backup' => 'setCrossRegionBackup',
        'db_engine_version' => 'setDbEngineVersion',
        'db_revision_version' => 'setDbRevisionVersion',
        'instance_id' => 'setInstanceId',
        'lower_case_table_names' => 'setLowerCaseTableNames',
        'project_name' => 'setProjectName',
        'region_id' => 'setRegionId',
        'retention' => 'setRetention',
        'target_region' => 'setTargetRegion',
        'time_zone' => 'setTimeZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cross_region_backup' => 'getCrossRegionBackup',
        'db_engine_version' => 'getDbEngineVersion',
        'db_revision_version' => 'getDbRevisionVersion',
        'instance_id' => 'getInstanceId',
        'lower_case_table_names' => 'getLowerCaseTableNames',
        'project_name' => 'getProjectName',
        'region_id' => 'getRegionId',
        'retention' => 'getRetention',
        'target_region' => 'getTargetRegion',
        'time_zone' => 'getTimeZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DB_ENGINE_VERSION_MY_SQL_5_7 = 'MySQL_5_7';
    const DB_ENGINE_VERSION_MY_SQL_8_0 = 'MySQL_8_0';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDbEngineVersionAllowableValues()
    {
        return [
            self::DB_ENGINE_VERSION_MY_SQL_5_7,
            self::DB_ENGINE_VERSION_MY_SQL_8_0,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cross_region_backup'] = isset($data['cross_region_backup']) ? $data['cross_region_backup'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['db_revision_version'] = isset($data['db_revision_version']) ? $data['db_revision_version'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['lower_case_table_names'] = isset($data['lower_case_table_names']) ? $data['lower_case_table_names'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['retention'] = isset($data['retention']) ? $data['retention'] : null;
        $this->container['target_region'] = isset($data['target_region']) ? $data['target_region'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($this->container['db_engine_version']) && !in_array($this->container['db_engine_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'db_engine_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cross_region_backup
     *
     * @return bool
     */
    public function getCrossRegionBackup()
    {
        return $this->container['cross_region_backup'];
    }

    /**
     * Sets cross_region_backup
     *
     * @param bool $cross_region_backup cross_region_backup
     *
     * @return $this
     */
    public function setCrossRegionBackup($cross_region_backup)
    {
        $this->container['cross_region_backup'] = $cross_region_backup;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($db_engine_version) && !in_array($db_engine_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'db_engine_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets db_revision_version
     *
     * @return string
     */
    public function getDbRevisionVersion()
    {
        return $this->container['db_revision_version'];
    }

    /**
     * Sets db_revision_version
     *
     * @param string $db_revision_version db_revision_version
     *
     * @return $this
     */
    public function setDbRevisionVersion($db_revision_version)
    {
        $this->container['db_revision_version'] = $db_revision_version;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets lower_case_table_names
     *
     * @return string
     */
    public function getLowerCaseTableNames()
    {
        return $this->container['lower_case_table_names'];
    }

    /**
     * Sets lower_case_table_names
     *
     * @param string $lower_case_table_names lower_case_table_names
     *
     * @return $this
     */
    public function setLowerCaseTableNames($lower_case_table_names)
    {
        $this->container['lower_case_table_names'] = $lower_case_table_names;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets retention
     *
     * @return int
     */
    public function getRetention()
    {
        return $this->container['retention'];
    }

    /**
     * Sets retention
     *
     * @param int $retention retention
     *
     * @return $this
     */
    public function setRetention($retention)
    {
        $this->container['retention'] = $retention;

        return $this;
    }

    /**
     * Gets target_region
     *
     * @return string
     */
    public function getTargetRegion()
    {
        return $this->container['target_region'];
    }

    /**
     * Sets target_region
     *
     * @param string $target_region target_region
     *
     * @return $this
     */
    public function setTargetRegion($target_region)
    {
        $this->container['target_region'] = $target_region;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

