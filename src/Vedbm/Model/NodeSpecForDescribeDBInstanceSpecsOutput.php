<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeSpecForDescribeDBInstanceSpecsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeSpecForDescribeDBInstanceSpecsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connection' => 'int',
        'max_iops' => 'int',
        'memory' => 'int',
        'node_spec' => 'string',
        'pre_paid_max_storage' => 'int',
        'pre_paid_min_storage' => 'int',
        'spec_family' => 'string',
        'v_cpu' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connection' => 'int32',
        'max_iops' => 'int32',
        'memory' => 'int32',
        'node_spec' => null,
        'pre_paid_max_storage' => 'int32',
        'pre_paid_min_storage' => 'int32',
        'spec_family' => null,
        'v_cpu' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection' => 'Connection',
        'max_iops' => 'MaxIops',
        'memory' => 'Memory',
        'node_spec' => 'NodeSpec',
        'pre_paid_max_storage' => 'PrePaidMaxStorage',
        'pre_paid_min_storage' => 'PrePaidMinStorage',
        'spec_family' => 'SpecFamily',
        'v_cpu' => 'vCPU'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection' => 'setConnection',
        'max_iops' => 'setMaxIops',
        'memory' => 'setMemory',
        'node_spec' => 'setNodeSpec',
        'pre_paid_max_storage' => 'setPrePaidMaxStorage',
        'pre_paid_min_storage' => 'setPrePaidMinStorage',
        'spec_family' => 'setSpecFamily',
        'v_cpu' => 'setVCpu'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection' => 'getConnection',
        'max_iops' => 'getMaxIops',
        'memory' => 'getMemory',
        'node_spec' => 'getNodeSpec',
        'pre_paid_max_storage' => 'getPrePaidMaxStorage',
        'pre_paid_min_storage' => 'getPrePaidMinStorage',
        'spec_family' => 'getSpecFamily',
        'v_cpu' => 'getVCpu'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SPEC_FAMILY_EXCLUSIVE = 'Exclusive';
    const SPEC_FAMILY_GENERAL = 'General';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecFamilyAllowableValues()
    {
        return [
            self::SPEC_FAMILY_EXCLUSIVE,
            self::SPEC_FAMILY_GENERAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
        $this->container['max_iops'] = isset($data['max_iops']) ? $data['max_iops'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['node_spec'] = isset($data['node_spec']) ? $data['node_spec'] : null;
        $this->container['pre_paid_max_storage'] = isset($data['pre_paid_max_storage']) ? $data['pre_paid_max_storage'] : null;
        $this->container['pre_paid_min_storage'] = isset($data['pre_paid_min_storage']) ? $data['pre_paid_min_storage'] : null;
        $this->container['spec_family'] = isset($data['spec_family']) ? $data['spec_family'] : null;
        $this->container['v_cpu'] = isset($data['v_cpu']) ? $data['v_cpu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSpecFamilyAllowableValues();
        if (!is_null($this->container['spec_family']) && !in_array($this->container['spec_family'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'spec_family', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection
     *
     * @return int
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     *
     * @param int $connection connection
     *
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets max_iops
     *
     * @return int
     */
    public function getMaxIops()
    {
        return $this->container['max_iops'];
    }

    /**
     * Sets max_iops
     *
     * @param int $max_iops max_iops
     *
     * @return $this
     */
    public function setMaxIops($max_iops)
    {
        $this->container['max_iops'] = $max_iops;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets node_spec
     *
     * @return string
     */
    public function getNodeSpec()
    {
        return $this->container['node_spec'];
    }

    /**
     * Sets node_spec
     *
     * @param string $node_spec node_spec
     *
     * @return $this
     */
    public function setNodeSpec($node_spec)
    {
        $this->container['node_spec'] = $node_spec;

        return $this;
    }

    /**
     * Gets pre_paid_max_storage
     *
     * @return int
     */
    public function getPrePaidMaxStorage()
    {
        return $this->container['pre_paid_max_storage'];
    }

    /**
     * Sets pre_paid_max_storage
     *
     * @param int $pre_paid_max_storage pre_paid_max_storage
     *
     * @return $this
     */
    public function setPrePaidMaxStorage($pre_paid_max_storage)
    {
        $this->container['pre_paid_max_storage'] = $pre_paid_max_storage;

        return $this;
    }

    /**
     * Gets pre_paid_min_storage
     *
     * @return int
     */
    public function getPrePaidMinStorage()
    {
        return $this->container['pre_paid_min_storage'];
    }

    /**
     * Sets pre_paid_min_storage
     *
     * @param int $pre_paid_min_storage pre_paid_min_storage
     *
     * @return $this
     */
    public function setPrePaidMinStorage($pre_paid_min_storage)
    {
        $this->container['pre_paid_min_storage'] = $pre_paid_min_storage;

        return $this;
    }

    /**
     * Gets spec_family
     *
     * @return string
     */
    public function getSpecFamily()
    {
        return $this->container['spec_family'];
    }

    /**
     * Sets spec_family
     *
     * @param string $spec_family spec_family
     *
     * @return $this
     */
    public function setSpecFamily($spec_family)
    {
        $allowedValues = $this->getSpecFamilyAllowableValues();
        if (!is_null($spec_family) && !in_array($spec_family, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'spec_family', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spec_family'] = $spec_family;

        return $this;
    }

    /**
     * Gets v_cpu
     *
     * @return int
     */
    public function getVCpu()
    {
        return $this->container['v_cpu'];
    }

    /**
     * Sets v_cpu
     *
     * @param int $v_cpu v_cpu
     *
     * @return $this
     */
    public function setVCpu($v_cpu)
    {
        $this->container['v_cpu'] = $v_cpu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

