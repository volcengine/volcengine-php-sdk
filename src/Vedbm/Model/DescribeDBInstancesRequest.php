<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeDBInstancesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeDBInstancesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_type' => 'string',
        'create_time_end' => 'string',
        'create_time_start' => 'string',
        'db_engine_version' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'instance_status' => 'string',
        'node_spec' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'storage_charge_type' => 'string',
        'tag_filters' => '\Volcengine\Vedbm\Model\TagFilterForDescribeDBInstancesInput[]',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_type' => null,
        'create_time_end' => null,
        'create_time_start' => null,
        'db_engine_version' => null,
        'instance_id' => null,
        'instance_name' => null,
        'instance_status' => null,
        'node_spec' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'storage_charge_type' => null,
        'tag_filters' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_type' => 'ChargeType',
        'create_time_end' => 'CreateTimeEnd',
        'create_time_start' => 'CreateTimeStart',
        'db_engine_version' => 'DBEngineVersion',
        'instance_id' => 'InstanceId',
        'instance_name' => 'InstanceName',
        'instance_status' => 'InstanceStatus',
        'node_spec' => 'NodeSpec',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'storage_charge_type' => 'StorageChargeType',
        'tag_filters' => 'TagFilters',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_type' => 'setChargeType',
        'create_time_end' => 'setCreateTimeEnd',
        'create_time_start' => 'setCreateTimeStart',
        'db_engine_version' => 'setDbEngineVersion',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'instance_status' => 'setInstanceStatus',
        'node_spec' => 'setNodeSpec',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'storage_charge_type' => 'setStorageChargeType',
        'tag_filters' => 'setTagFilters',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_type' => 'getChargeType',
        'create_time_end' => 'getCreateTimeEnd',
        'create_time_start' => 'getCreateTimeStart',
        'db_engine_version' => 'getDbEngineVersion',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'instance_status' => 'getInstanceStatus',
        'node_spec' => 'getNodeSpec',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'storage_charge_type' => 'getStorageChargeType',
        'tag_filters' => 'getTagFilters',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHARGE_TYPE_POST_PAID = 'PostPaid';
    const CHARGE_TYPE_PRE_PAID = 'PrePaid';
    const DB_ENGINE_VERSION_MY_SQL_5_7 = 'MySQL_5_7';
    const DB_ENGINE_VERSION_MY_SQL_8_0 = 'MySQL_8_0';
    const INSTANCE_STATUS_ADDRESS_MODIFYING = 'AddressModifying';
    const INSTANCE_STATUS_ALLOW_LIST_MAINTAINING = 'AllowListMaintaining';
    const INSTANCE_STATUS_CREATE_FAILED = 'CreateFailed';
    const INSTANCE_STATUS_CREATING = 'Creating';
    const INSTANCE_STATUS_DELETING = 'Deleting';
    const INSTANCE_STATUS_ERROR = 'Error';
    const INSTANCE_STATUS_EXPIRED = 'Expired';
    const INSTANCE_STATUS_OWING = 'Owing';
    const INSTANCE_STATUS_PRIMARY_CHANGING = 'PrimaryChanging';
    const INSTANCE_STATUS_RECLAIMING = 'Reclaiming';
    const INSTANCE_STATUS_RESTARTING = 'Restarting';
    const INSTANCE_STATUS_RESTORING = 'Restoring';
    const INSTANCE_STATUS_RESUMING = 'Resuming';
    const INSTANCE_STATUS_RUNNING = 'Running';
    const INSTANCE_STATUS_SCALING = 'Scaling';
    const INSTANCE_STATUS_UPGRADING = 'Upgrading';
    const INSTANCE_STATUS_WAITING_PAID = 'WaitingPaid';
    const NODE_SPEC_VEDBMYSQLG42XLARGE = 'vedb.mysql.g4.2xlarge';
    const NODE_SPEC_VEDBMYSQLG44XLARGE = 'vedb.mysql.g4.4xlarge';
    const NODE_SPEC_VEDBMYSQLG4LARGE = 'vedb.mysql.g4.large';
    const NODE_SPEC_VEDBMYSQLG4XLARGE = 'vedb.mysql.g4.xlarge';
    const NODE_SPEC_VEDBMYSQLG82XLARGE = 'vedb.mysql.g8.2xlarge';
    const NODE_SPEC_VEDBMYSQLX42XLARGE = 'vedb.mysql.x4.2xlarge';
    const NODE_SPEC_VEDBMYSQLX44XLARGE = 'vedb.mysql.x4.4xlarge';
    const NODE_SPEC_VEDBMYSQLX48XLARGE = 'vedb.mysql.x4.8xlarge';
    const NODE_SPEC_VEDBMYSQLX4LARGE = 'vedb.mysql.x4.large';
    const NODE_SPEC_VEDBMYSQLX4XLARGE = 'vedb.mysql.x4.xlarge';
    const NODE_SPEC_VEDBMYSQLX82XLARGE = 'vedb.mysql.x8.2xlarge';
    const NODE_SPEC_VEDBMYSQLX84XLARGE = 'vedb.mysql.x8.4xlarge';
    const NODE_SPEC_VEDBMYSQLX86XLARGE = 'vedb.mysql.x8.6xlarge';
    const NODE_SPEC_VEDBMYSQLX88XLARGE = 'vedb.mysql.x8.8xlarge';
    const NODE_SPEC_VEDBMYSQLX8LARGE = 'vedb.mysql.x8.large';
    const NODE_SPEC_VEDBMYSQLX8XLARGE = 'vedb.mysql.x8.xlarge';
    const STORAGE_CHARGE_TYPE_POST_PAID = 'PostPaid';
    const STORAGE_CHARGE_TYPE_PRE_PAID = 'PrePaid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeTypeAllowableValues()
    {
        return [
            self::CHARGE_TYPE_POST_PAID,
            self::CHARGE_TYPE_PRE_PAID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDbEngineVersionAllowableValues()
    {
        return [
            self::DB_ENGINE_VERSION_MY_SQL_5_7,
            self::DB_ENGINE_VERSION_MY_SQL_8_0,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstanceStatusAllowableValues()
    {
        return [
            self::INSTANCE_STATUS_ADDRESS_MODIFYING,
            self::INSTANCE_STATUS_ALLOW_LIST_MAINTAINING,
            self::INSTANCE_STATUS_CREATE_FAILED,
            self::INSTANCE_STATUS_CREATING,
            self::INSTANCE_STATUS_DELETING,
            self::INSTANCE_STATUS_ERROR,
            self::INSTANCE_STATUS_EXPIRED,
            self::INSTANCE_STATUS_OWING,
            self::INSTANCE_STATUS_PRIMARY_CHANGING,
            self::INSTANCE_STATUS_RECLAIMING,
            self::INSTANCE_STATUS_RESTARTING,
            self::INSTANCE_STATUS_RESTORING,
            self::INSTANCE_STATUS_RESUMING,
            self::INSTANCE_STATUS_RUNNING,
            self::INSTANCE_STATUS_SCALING,
            self::INSTANCE_STATUS_UPGRADING,
            self::INSTANCE_STATUS_WAITING_PAID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNodeSpecAllowableValues()
    {
        return [
            self::NODE_SPEC_VEDBMYSQLG42XLARGE,
            self::NODE_SPEC_VEDBMYSQLG44XLARGE,
            self::NODE_SPEC_VEDBMYSQLG4LARGE,
            self::NODE_SPEC_VEDBMYSQLG4XLARGE,
            self::NODE_SPEC_VEDBMYSQLG82XLARGE,
            self::NODE_SPEC_VEDBMYSQLX42XLARGE,
            self::NODE_SPEC_VEDBMYSQLX44XLARGE,
            self::NODE_SPEC_VEDBMYSQLX48XLARGE,
            self::NODE_SPEC_VEDBMYSQLX4LARGE,
            self::NODE_SPEC_VEDBMYSQLX4XLARGE,
            self::NODE_SPEC_VEDBMYSQLX82XLARGE,
            self::NODE_SPEC_VEDBMYSQLX84XLARGE,
            self::NODE_SPEC_VEDBMYSQLX86XLARGE,
            self::NODE_SPEC_VEDBMYSQLX88XLARGE,
            self::NODE_SPEC_VEDBMYSQLX8LARGE,
            self::NODE_SPEC_VEDBMYSQLX8XLARGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorageChargeTypeAllowableValues()
    {
        return [
            self::STORAGE_CHARGE_TYPE_POST_PAID,
            self::STORAGE_CHARGE_TYPE_PRE_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['create_time_end'] = isset($data['create_time_end']) ? $data['create_time_end'] : null;
        $this->container['create_time_start'] = isset($data['create_time_start']) ? $data['create_time_start'] : null;
        $this->container['db_engine_version'] = isset($data['db_engine_version']) ? $data['db_engine_version'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_status'] = isset($data['instance_status']) ? $data['instance_status'] : null;
        $this->container['node_spec'] = isset($data['node_spec']) ? $data['node_spec'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['storage_charge_type'] = isset($data['storage_charge_type']) ? $data['storage_charge_type'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($this->container['charge_type']) && !in_array($this->container['charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($this->container['db_engine_version']) && !in_array($this->container['db_engine_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'db_engine_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInstanceStatusAllowableValues();
        if (!is_null($this->container['instance_status']) && !in_array($this->container['instance_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'instance_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNodeSpecAllowableValues();
        if (!is_null($this->container['node_spec']) && !in_array($this->container['node_spec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'node_spec', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($this->container['storage_charge_type']) && !in_array($this->container['storage_charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storage_charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($charge_type) && !in_array($charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets create_time_end
     *
     * @return string
     */
    public function getCreateTimeEnd()
    {
        return $this->container['create_time_end'];
    }

    /**
     * Sets create_time_end
     *
     * @param string $create_time_end create_time_end
     *
     * @return $this
     */
    public function setCreateTimeEnd($create_time_end)
    {
        $this->container['create_time_end'] = $create_time_end;

        return $this;
    }

    /**
     * Gets create_time_start
     *
     * @return string
     */
    public function getCreateTimeStart()
    {
        return $this->container['create_time_start'];
    }

    /**
     * Sets create_time_start
     *
     * @param string $create_time_start create_time_start
     *
     * @return $this
     */
    public function setCreateTimeStart($create_time_start)
    {
        $this->container['create_time_start'] = $create_time_start;

        return $this;
    }

    /**
     * Gets db_engine_version
     *
     * @return string
     */
    public function getDbEngineVersion()
    {
        return $this->container['db_engine_version'];
    }

    /**
     * Sets db_engine_version
     *
     * @param string $db_engine_version db_engine_version
     *
     * @return $this
     */
    public function setDbEngineVersion($db_engine_version)
    {
        $allowedValues = $this->getDbEngineVersionAllowableValues();
        if (!is_null($db_engine_version) && !in_array($db_engine_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'db_engine_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['db_engine_version'] = $db_engine_version;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_status
     *
     * @return string
     */
    public function getInstanceStatus()
    {
        return $this->container['instance_status'];
    }

    /**
     * Sets instance_status
     *
     * @param string $instance_status instance_status
     *
     * @return $this
     */
    public function setInstanceStatus($instance_status)
    {
        $allowedValues = $this->getInstanceStatusAllowableValues();
        if (!is_null($instance_status) && !in_array($instance_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'instance_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['instance_status'] = $instance_status;

        return $this;
    }

    /**
     * Gets node_spec
     *
     * @return string
     */
    public function getNodeSpec()
    {
        return $this->container['node_spec'];
    }

    /**
     * Sets node_spec
     *
     * @param string $node_spec node_spec
     *
     * @return $this
     */
    public function setNodeSpec($node_spec)
    {
        $allowedValues = $this->getNodeSpecAllowableValues();
        if (!is_null($node_spec) && !in_array($node_spec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'node_spec', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['node_spec'] = $node_spec;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets storage_charge_type
     *
     * @return string
     */
    public function getStorageChargeType()
    {
        return $this->container['storage_charge_type'];
    }

    /**
     * Sets storage_charge_type
     *
     * @param string $storage_charge_type storage_charge_type
     *
     * @return $this
     */
    public function setStorageChargeType($storage_charge_type)
    {
        $allowedValues = $this->getStorageChargeTypeAllowableValues();
        if (!is_null($storage_charge_type) && !in_array($storage_charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storage_charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storage_charge_type'] = $storage_charge_type;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Vedbm\Model\TagFilterForDescribeDBInstancesInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Vedbm\Model\TagFilterForDescribeDBInstancesInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

