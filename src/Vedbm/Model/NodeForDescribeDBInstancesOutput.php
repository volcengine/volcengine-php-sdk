<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeForDescribeDBInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeForDescribeDBInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'failover_priority' => 'int',
        'memory' => 'int',
        'node_id' => 'string',
        'node_spec' => 'string',
        'node_type' => 'string',
        'zone_id' => 'string',
        'v_cpu' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'failover_priority' => 'int32',
        'memory' => 'int32',
        'node_id' => null,
        'node_spec' => null,
        'node_type' => null,
        'zone_id' => null,
        'v_cpu' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'failover_priority' => 'FailoverPriority',
        'memory' => 'Memory',
        'node_id' => 'NodeId',
        'node_spec' => 'NodeSpec',
        'node_type' => 'NodeType',
        'zone_id' => 'ZoneId',
        'v_cpu' => 'vCPU'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'failover_priority' => 'setFailoverPriority',
        'memory' => 'setMemory',
        'node_id' => 'setNodeId',
        'node_spec' => 'setNodeSpec',
        'node_type' => 'setNodeType',
        'zone_id' => 'setZoneId',
        'v_cpu' => 'setVCpu'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'failover_priority' => 'getFailoverPriority',
        'memory' => 'getMemory',
        'node_id' => 'getNodeId',
        'node_spec' => 'getNodeSpec',
        'node_type' => 'getNodeType',
        'zone_id' => 'getZoneId',
        'v_cpu' => 'getVCpu'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NODE_SPEC_VEDBMYSQLG42XLARGE = 'vedb.mysql.g4.2xlarge';
    const NODE_SPEC_VEDBMYSQLG44XLARGE = 'vedb.mysql.g4.4xlarge';
    const NODE_SPEC_VEDBMYSQLG4LARGE = 'vedb.mysql.g4.large';
    const NODE_SPEC_VEDBMYSQLG4XLARGE = 'vedb.mysql.g4.xlarge';
    const NODE_SPEC_VEDBMYSQLG82XLARGE = 'vedb.mysql.g8.2xlarge';
    const NODE_SPEC_VEDBMYSQLX42XLARGE = 'vedb.mysql.x4.2xlarge';
    const NODE_SPEC_VEDBMYSQLX44XLARGE = 'vedb.mysql.x4.4xlarge';
    const NODE_SPEC_VEDBMYSQLX48XLARGE = 'vedb.mysql.x4.8xlarge';
    const NODE_SPEC_VEDBMYSQLX4LARGE = 'vedb.mysql.x4.large';
    const NODE_SPEC_VEDBMYSQLX4XLARGE = 'vedb.mysql.x4.xlarge';
    const NODE_SPEC_VEDBMYSQLX82XLARGE = 'vedb.mysql.x8.2xlarge';
    const NODE_SPEC_VEDBMYSQLX84XLARGE = 'vedb.mysql.x8.4xlarge';
    const NODE_SPEC_VEDBMYSQLX86XLARGE = 'vedb.mysql.x8.6xlarge';
    const NODE_SPEC_VEDBMYSQLX88XLARGE = 'vedb.mysql.x8.8xlarge';
    const NODE_SPEC_VEDBMYSQLX8LARGE = 'vedb.mysql.x8.large';
    const NODE_SPEC_VEDBMYSQLX8XLARGE = 'vedb.mysql.x8.xlarge';
    const NODE_TYPE_PRIMARY = 'Primary';
    const NODE_TYPE_READ_ONLY = 'ReadOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNodeSpecAllowableValues()
    {
        return [
            self::NODE_SPEC_VEDBMYSQLG42XLARGE,
            self::NODE_SPEC_VEDBMYSQLG44XLARGE,
            self::NODE_SPEC_VEDBMYSQLG4LARGE,
            self::NODE_SPEC_VEDBMYSQLG4XLARGE,
            self::NODE_SPEC_VEDBMYSQLG82XLARGE,
            self::NODE_SPEC_VEDBMYSQLX42XLARGE,
            self::NODE_SPEC_VEDBMYSQLX44XLARGE,
            self::NODE_SPEC_VEDBMYSQLX48XLARGE,
            self::NODE_SPEC_VEDBMYSQLX4LARGE,
            self::NODE_SPEC_VEDBMYSQLX4XLARGE,
            self::NODE_SPEC_VEDBMYSQLX82XLARGE,
            self::NODE_SPEC_VEDBMYSQLX84XLARGE,
            self::NODE_SPEC_VEDBMYSQLX86XLARGE,
            self::NODE_SPEC_VEDBMYSQLX88XLARGE,
            self::NODE_SPEC_VEDBMYSQLX8LARGE,
            self::NODE_SPEC_VEDBMYSQLX8XLARGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNodeTypeAllowableValues()
    {
        return [
            self::NODE_TYPE_PRIMARY,
            self::NODE_TYPE_READ_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['failover_priority'] = isset($data['failover_priority']) ? $data['failover_priority'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['node_spec'] = isset($data['node_spec']) ? $data['node_spec'] : null;
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
        $this->container['v_cpu'] = isset($data['v_cpu']) ? $data['v_cpu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNodeSpecAllowableValues();
        if (!is_null($this->container['node_spec']) && !in_array($this->container['node_spec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'node_spec', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNodeTypeAllowableValues();
        if (!is_null($this->container['node_type']) && !in_array($this->container['node_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'node_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets failover_priority
     *
     * @return int
     */
    public function getFailoverPriority()
    {
        return $this->container['failover_priority'];
    }

    /**
     * Sets failover_priority
     *
     * @param int $failover_priority failover_priority
     *
     * @return $this
     */
    public function setFailoverPriority($failover_priority)
    {
        $this->container['failover_priority'] = $failover_priority;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets node_spec
     *
     * @return string
     */
    public function getNodeSpec()
    {
        return $this->container['node_spec'];
    }

    /**
     * Sets node_spec
     *
     * @param string $node_spec node_spec
     *
     * @return $this
     */
    public function setNodeSpec($node_spec)
    {
        $allowedValues = $this->getNodeSpecAllowableValues();
        if (!is_null($node_spec) && !in_array($node_spec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'node_spec', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['node_spec'] = $node_spec;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $allowedValues = $this->getNodeTypeAllowableValues();
        if (!is_null($node_type) && !in_array($node_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'node_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets v_cpu
     *
     * @return int
     */
    public function getVCpu()
    {
        return $this->container['v_cpu'];
    }

    /**
     * Sets v_cpu
     *
     * @param int $v_cpu v_cpu
     *
     * @return $this
     */
    public function setVCpu($v_cpu)
    {
        $this->container['v_cpu'] = $v_cpu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

