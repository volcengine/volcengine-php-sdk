<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ParameterForDescribeModifiableParametersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParameterForDescribeModifiableParametersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checking_code' => 'string',
        'data_type' => 'string',
        'modifiable' => 'bool',
        'need_restart' => 'bool',
        'parameter_default_value' => 'string',
        'parameter_description' => 'string',
        'parameter_display_value' => 'string',
        'parameter_name' => 'string',
        'parameter_value' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checking_code' => null,
        'data_type' => null,
        'modifiable' => null,
        'need_restart' => null,
        'parameter_default_value' => null,
        'parameter_description' => null,
        'parameter_display_value' => null,
        'parameter_name' => null,
        'parameter_value' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checking_code' => 'CheckingCode',
        'data_type' => 'DataType',
        'modifiable' => 'Modifiable',
        'need_restart' => 'NeedRestart',
        'parameter_default_value' => 'ParameterDefaultValue',
        'parameter_description' => 'ParameterDescription',
        'parameter_display_value' => 'ParameterDisplayValue',
        'parameter_name' => 'ParameterName',
        'parameter_value' => 'ParameterValue',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checking_code' => 'setCheckingCode',
        'data_type' => 'setDataType',
        'modifiable' => 'setModifiable',
        'need_restart' => 'setNeedRestart',
        'parameter_default_value' => 'setParameterDefaultValue',
        'parameter_description' => 'setParameterDescription',
        'parameter_display_value' => 'setParameterDisplayValue',
        'parameter_name' => 'setParameterName',
        'parameter_value' => 'setParameterValue',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checking_code' => 'getCheckingCode',
        'data_type' => 'getDataType',
        'modifiable' => 'getModifiable',
        'need_restart' => 'getNeedRestart',
        'parameter_default_value' => 'getParameterDefaultValue',
        'parameter_description' => 'getParameterDescription',
        'parameter_display_value' => 'getParameterDisplayValue',
        'parameter_name' => 'getParameterName',
        'parameter_value' => 'getParameterValue',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DATA_TYPE_FLOAT = 'FLOAT';
    const DATA_TYPE_INT = 'INT';
    const DATA_TYPE_STRING = 'STRING';
    const STATUS_APPLIED = 'Applied';
    const STATUS_SYNCING = 'Syncing';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataTypeAllowableValues()
    {
        return [
            self::DATA_TYPE_FLOAT,
            self::DATA_TYPE_INT,
            self::DATA_TYPE_STRING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_APPLIED,
            self::STATUS_SYNCING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checking_code'] = isset($data['checking_code']) ? $data['checking_code'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['modifiable'] = isset($data['modifiable']) ? $data['modifiable'] : null;
        $this->container['need_restart'] = isset($data['need_restart']) ? $data['need_restart'] : null;
        $this->container['parameter_default_value'] = isset($data['parameter_default_value']) ? $data['parameter_default_value'] : null;
        $this->container['parameter_description'] = isset($data['parameter_description']) ? $data['parameter_description'] : null;
        $this->container['parameter_display_value'] = isset($data['parameter_display_value']) ? $data['parameter_display_value'] : null;
        $this->container['parameter_name'] = isset($data['parameter_name']) ? $data['parameter_name'] : null;
        $this->container['parameter_value'] = isset($data['parameter_value']) ? $data['parameter_value'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($this->container['data_type']) && !in_array($this->container['data_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checking_code
     *
     * @return string
     */
    public function getCheckingCode()
    {
        return $this->container['checking_code'];
    }

    /**
     * Sets checking_code
     *
     * @param string $checking_code checking_code
     *
     * @return $this
     */
    public function setCheckingCode($checking_code)
    {
        $this->container['checking_code'] = $checking_code;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($data_type) && !in_array($data_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets modifiable
     *
     * @return bool
     */
    public function getModifiable()
    {
        return $this->container['modifiable'];
    }

    /**
     * Sets modifiable
     *
     * @param bool $modifiable modifiable
     *
     * @return $this
     */
    public function setModifiable($modifiable)
    {
        $this->container['modifiable'] = $modifiable;

        return $this;
    }

    /**
     * Gets need_restart
     *
     * @return bool
     */
    public function getNeedRestart()
    {
        return $this->container['need_restart'];
    }

    /**
     * Sets need_restart
     *
     * @param bool $need_restart need_restart
     *
     * @return $this
     */
    public function setNeedRestart($need_restart)
    {
        $this->container['need_restart'] = $need_restart;

        return $this;
    }

    /**
     * Gets parameter_default_value
     *
     * @return string
     */
    public function getParameterDefaultValue()
    {
        return $this->container['parameter_default_value'];
    }

    /**
     * Sets parameter_default_value
     *
     * @param string $parameter_default_value parameter_default_value
     *
     * @return $this
     */
    public function setParameterDefaultValue($parameter_default_value)
    {
        $this->container['parameter_default_value'] = $parameter_default_value;

        return $this;
    }

    /**
     * Gets parameter_description
     *
     * @return string
     */
    public function getParameterDescription()
    {
        return $this->container['parameter_description'];
    }

    /**
     * Sets parameter_description
     *
     * @param string $parameter_description parameter_description
     *
     * @return $this
     */
    public function setParameterDescription($parameter_description)
    {
        $this->container['parameter_description'] = $parameter_description;

        return $this;
    }

    /**
     * Gets parameter_display_value
     *
     * @return string
     */
    public function getParameterDisplayValue()
    {
        return $this->container['parameter_display_value'];
    }

    /**
     * Sets parameter_display_value
     *
     * @param string $parameter_display_value parameter_display_value
     *
     * @return $this
     */
    public function setParameterDisplayValue($parameter_display_value)
    {
        $this->container['parameter_display_value'] = $parameter_display_value;

        return $this;
    }

    /**
     * Gets parameter_name
     *
     * @return string
     */
    public function getParameterName()
    {
        return $this->container['parameter_name'];
    }

    /**
     * Sets parameter_name
     *
     * @param string $parameter_name parameter_name
     *
     * @return $this
     */
    public function setParameterName($parameter_name)
    {
        $this->container['parameter_name'] = $parameter_name;

        return $this;
    }

    /**
     * Gets parameter_value
     *
     * @return string
     */
    public function getParameterValue()
    {
        return $this->container['parameter_value'];
    }

    /**
     * Sets parameter_value
     *
     * @param string $parameter_value parameter_value
     *
     * @return $this
     */
    public function setParameterValue($parameter_value)
    {
        $this->container['parameter_value'] = $parameter_value;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

