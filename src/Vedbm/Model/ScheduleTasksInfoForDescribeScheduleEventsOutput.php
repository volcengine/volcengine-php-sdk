<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vedbm\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ScheduleTasksInfoForDescribeScheduleEventsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScheduleTasksInfoForDescribeScheduleEventsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'begin_time' => 'string',
        'end_time' => 'string',
        'event_id' => 'string',
        'event_kind' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'message' => 'string',
        'planned_start_time' => 'string',
        'project_name' => 'string',
        'request_id' => 'string',
        'schedule_type' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int32',
        'begin_time' => null,
        'end_time' => null,
        'event_id' => null,
        'event_kind' => null,
        'instance_id' => null,
        'instance_name' => null,
        'message' => null,
        'planned_start_time' => null,
        'project_name' => null,
        'request_id' => null,
        'schedule_type' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'begin_time' => 'BeginTime',
        'end_time' => 'EndTime',
        'event_id' => 'EventId',
        'event_kind' => 'EventKind',
        'instance_id' => 'InstanceID',
        'instance_name' => 'InstanceName',
        'message' => 'Message',
        'planned_start_time' => 'PlannedStartTime',
        'project_name' => 'ProjectName',
        'request_id' => 'RequestId',
        'schedule_type' => 'ScheduleType',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'begin_time' => 'setBeginTime',
        'end_time' => 'setEndTime',
        'event_id' => 'setEventId',
        'event_kind' => 'setEventKind',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'message' => 'setMessage',
        'planned_start_time' => 'setPlannedStartTime',
        'project_name' => 'setProjectName',
        'request_id' => 'setRequestId',
        'schedule_type' => 'setScheduleType',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'begin_time' => 'getBeginTime',
        'end_time' => 'getEndTime',
        'event_id' => 'getEventId',
        'event_kind' => 'getEventKind',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'message' => 'getMessage',
        'planned_start_time' => 'getPlannedStartTime',
        'project_name' => 'getProjectName',
        'request_id' => 'getRequestId',
        'schedule_type' => 'getScheduleType',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_KIND_INSPECTION = 'Inspection';
    const EVENT_KIND_MODIFY_CLUSTER_PARAMS = 'ModifyClusterParams';
    const EVENT_KIND_MODIFY_DB_INSTANCE_PARAMETERS = 'ModifyDBInstanceParameters';
    const EVENT_KIND_MODIFY_DB_INSTANCE_SPEC = 'ModifyDBInstanceSpec';
    const EVENT_KIND_RESTART_DB_INSTANCE = 'RestartDBInstance';
    const EVENT_KIND_UPGRADE_INSTANCE = 'UpgradeInstance';
    const SCHEDULE_TYPE_IMMEDIATE = 'Immediate';
    const SCHEDULE_TYPE_MAINTAIN_TIME = 'MaintainTime';
    const SCHEDULE_TYPE_SPECIFIED_TIME = 'SpecifiedTime';
    const STATUS_CANCEL = 'cancel';
    const STATUS_EXECUTING = 'executing';
    const STATUS_FAILURE = 'failure';
    const STATUS_FINISH = 'finish';
    const STATUS_PENDING = 'pending';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventKindAllowableValues()
    {
        return [
            self::EVENT_KIND_INSPECTION,
            self::EVENT_KIND_MODIFY_CLUSTER_PARAMS,
            self::EVENT_KIND_MODIFY_DB_INSTANCE_PARAMETERS,
            self::EVENT_KIND_MODIFY_DB_INSTANCE_SPEC,
            self::EVENT_KIND_RESTART_DB_INSTANCE,
            self::EVENT_KIND_UPGRADE_INSTANCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleTypeAllowableValues()
    {
        return [
            self::SCHEDULE_TYPE_IMMEDIATE,
            self::SCHEDULE_TYPE_MAINTAIN_TIME,
            self::SCHEDULE_TYPE_SPECIFIED_TIME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CANCEL,
            self::STATUS_EXECUTING,
            self::STATUS_FAILURE,
            self::STATUS_FINISH,
            self::STATUS_PENDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_kind'] = isset($data['event_kind']) ? $data['event_kind'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['planned_start_time'] = isset($data['planned_start_time']) ? $data['planned_start_time'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['schedule_type'] = isset($data['schedule_type']) ? $data['schedule_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventKindAllowableValues();
        if (!is_null($this->container['event_kind']) && !in_array($this->container['event_kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event_kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($this->container['schedule_type']) && !in_array($this->container['schedule_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'schedule_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets begin_time
     *
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     *
     * @param string $begin_time begin_time
     *
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_kind
     *
     * @return string
     */
    public function getEventKind()
    {
        return $this->container['event_kind'];
    }

    /**
     * Sets event_kind
     *
     * @param string $event_kind event_kind
     *
     * @return $this
     */
    public function setEventKind($event_kind)
    {
        $allowedValues = $this->getEventKindAllowableValues();
        if (!is_null($event_kind) && !in_array($event_kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_kind'] = $event_kind;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets planned_start_time
     *
     * @return string
     */
    public function getPlannedStartTime()
    {
        return $this->container['planned_start_time'];
    }

    /**
     * Sets planned_start_time
     *
     * @param string $planned_start_time planned_start_time
     *
     * @return $this
     */
    public function setPlannedStartTime($planned_start_time)
    {
        $this->container['planned_start_time'] = $planned_start_time;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return string
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param string $schedule_type schedule_type
     *
     * @return $this
     */
    public function setScheduleType($schedule_type)
    {
        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($schedule_type) && !in_array($schedule_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'schedule_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

