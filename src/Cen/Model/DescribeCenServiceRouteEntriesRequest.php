<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cen\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeCenServiceRouteEntriesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeCenServiceRouteEntriesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cen_id' => 'string',
        'cen_route_entry_ids' => 'string[]',
        'destination_cidr_block' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'service_region_id' => 'string',
        'service_vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cen_id' => null,
        'cen_route_entry_ids' => null,
        'destination_cidr_block' => null,
        'page_number' => null,
        'page_size' => null,
        'service_region_id' => null,
        'service_vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cen_id' => 'CenId',
        'cen_route_entry_ids' => 'CenRouteEntryIds',
        'destination_cidr_block' => 'DestinationCidrBlock',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'service_region_id' => 'ServiceRegionId',
        'service_vpc_id' => 'ServiceVpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cen_id' => 'setCenId',
        'cen_route_entry_ids' => 'setCenRouteEntryIds',
        'destination_cidr_block' => 'setDestinationCidrBlock',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'service_region_id' => 'setServiceRegionId',
        'service_vpc_id' => 'setServiceVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cen_id' => 'getCenId',
        'cen_route_entry_ids' => 'getCenRouteEntryIds',
        'destination_cidr_block' => 'getDestinationCidrBlock',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'service_region_id' => 'getServiceRegionId',
        'service_vpc_id' => 'getServiceVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cen_id'] = isset($data['cen_id']) ? $data['cen_id'] : null;
        $this->container['cen_route_entry_ids'] = isset($data['cen_route_entry_ids']) ? $data['cen_route_entry_ids'] : null;
        $this->container['destination_cidr_block'] = isset($data['destination_cidr_block']) ? $data['destination_cidr_block'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['service_region_id'] = isset($data['service_region_id']) ? $data['service_region_id'] : null;
        $this->container['service_vpc_id'] = isset($data['service_vpc_id']) ? $data['service_vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cen_id
     *
     * @return string
     */
    public function getCenId()
    {
        return $this->container['cen_id'];
    }

    /**
     * Sets cen_id
     *
     * @param string $cen_id cen_id
     *
     * @return $this
     */
    public function setCenId($cen_id)
    {
        $this->container['cen_id'] = $cen_id;

        return $this;
    }

    /**
     * Gets cen_route_entry_ids
     *
     * @return string[]
     */
    public function getCenRouteEntryIds()
    {
        return $this->container['cen_route_entry_ids'];
    }

    /**
     * Sets cen_route_entry_ids
     *
     * @param string[] $cen_route_entry_ids cen_route_entry_ids
     *
     * @return $this
     */
    public function setCenRouteEntryIds($cen_route_entry_ids)
    {
        $this->container['cen_route_entry_ids'] = $cen_route_entry_ids;

        return $this;
    }

    /**
     * Gets destination_cidr_block
     *
     * @return string
     */
    public function getDestinationCidrBlock()
    {
        return $this->container['destination_cidr_block'];
    }

    /**
     * Sets destination_cidr_block
     *
     * @param string $destination_cidr_block destination_cidr_block
     *
     * @return $this
     */
    public function setDestinationCidrBlock($destination_cidr_block)
    {
        $this->container['destination_cidr_block'] = $destination_cidr_block;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets service_region_id
     *
     * @return string
     */
    public function getServiceRegionId()
    {
        return $this->container['service_region_id'];
    }

    /**
     * Sets service_region_id
     *
     * @param string $service_region_id service_region_id
     *
     * @return $this
     */
    public function setServiceRegionId($service_region_id)
    {
        $this->container['service_region_id'] = $service_region_id;

        return $this;
    }

    /**
     * Gets service_vpc_id
     *
     * @return string
     */
    public function getServiceVpcId()
    {
        return $this->container['service_vpc_id'];
    }

    /**
     * Sets service_vpc_id
     *
     * @param string $service_vpc_id service_vpc_id
     *
     * @return $this
     */
    public function setServiceVpcId($service_vpc_id)
    {
        $this->container['service_vpc_id'] = $service_vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

