<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cen\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SetCenBandwidthPackageRenewalRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SetCenBandwidthPackageRenewalRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cen_bandwidth_package_id' => 'string',
        'remain_renew_times' => 'int',
        'renew_period' => 'int',
        'renew_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cen_bandwidth_package_id' => null,
        'remain_renew_times' => null,
        'renew_period' => null,
        'renew_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cen_bandwidth_package_id' => 'CenBandwidthPackageId',
        'remain_renew_times' => 'RemainRenewTimes',
        'renew_period' => 'RenewPeriod',
        'renew_type' => 'RenewType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cen_bandwidth_package_id' => 'setCenBandwidthPackageId',
        'remain_renew_times' => 'setRemainRenewTimes',
        'renew_period' => 'setRenewPeriod',
        'renew_type' => 'setRenewType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cen_bandwidth_package_id' => 'getCenBandwidthPackageId',
        'remain_renew_times' => 'getRemainRenewTimes',
        'renew_period' => 'getRenewPeriod',
        'renew_type' => 'getRenewType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cen_bandwidth_package_id'] = isset($data['cen_bandwidth_package_id']) ? $data['cen_bandwidth_package_id'] : null;
        $this->container['remain_renew_times'] = isset($data['remain_renew_times']) ? $data['remain_renew_times'] : null;
        $this->container['renew_period'] = isset($data['renew_period']) ? $data['renew_period'] : null;
        $this->container['renew_type'] = isset($data['renew_type']) ? $data['renew_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cen_bandwidth_package_id'] === null) {
            $invalidProperties[] = "'cen_bandwidth_package_id' can't be null";
        }
        if ($this->container['renew_type'] === null) {
            $invalidProperties[] = "'renew_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cen_bandwidth_package_id
     *
     * @return string
     */
    public function getCenBandwidthPackageId()
    {
        return $this->container['cen_bandwidth_package_id'];
    }

    /**
     * Sets cen_bandwidth_package_id
     *
     * @param string $cen_bandwidth_package_id cen_bandwidth_package_id
     *
     * @return $this
     */
    public function setCenBandwidthPackageId($cen_bandwidth_package_id)
    {
        $this->container['cen_bandwidth_package_id'] = $cen_bandwidth_package_id;

        return $this;
    }

    /**
     * Gets remain_renew_times
     *
     * @return int
     */
    public function getRemainRenewTimes()
    {
        return $this->container['remain_renew_times'];
    }

    /**
     * Sets remain_renew_times
     *
     * @param int $remain_renew_times remain_renew_times
     *
     * @return $this
     */
    public function setRemainRenewTimes($remain_renew_times)
    {
        $this->container['remain_renew_times'] = $remain_renew_times;

        return $this;
    }

    /**
     * Gets renew_period
     *
     * @return int
     */
    public function getRenewPeriod()
    {
        return $this->container['renew_period'];
    }

    /**
     * Sets renew_period
     *
     * @param int $renew_period renew_period
     *
     * @return $this
     */
    public function setRenewPeriod($renew_period)
    {
        $this->container['renew_period'] = $renew_period;

        return $this;
    }

    /**
     * Gets renew_type
     *
     * @return string
     */
    public function getRenewType()
    {
        return $this->container['renew_type'];
    }

    /**
     * Sets renew_type
     *
     * @param string $renew_type renew_type
     *
     * @return $this
     */
    public function setRenewType($renew_type)
    {
        $this->container['renew_type'] = $renew_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

