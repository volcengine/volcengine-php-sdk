<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListAlertStrategiesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListAlertStrategiesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_rule' => '\Volcengine\Mcdn\Model\AlertRuleForListAlertStrategiesOutput',
        'domains' => '\Volcengine\Mcdn\Model\DomainForListAlertStrategiesOutput[]',
        'id' => 'string',
        'name' => 'string',
        'probe_tasks' => '\Volcengine\Mcdn\Model\ProbeTaskForListAlertStrategiesOutput[]',
        'resource_scope' => 'string',
        'resource_types' => 'string[]',
        'status' => 'string',
        'subscribe_rule' => '\Volcengine\Mcdn\Model\SubscribeRuleForListAlertStrategiesOutput',
        'trigger_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_rule' => null,
        'domains' => null,
        'id' => null,
        'name' => null,
        'probe_tasks' => null,
        'resource_scope' => null,
        'resource_types' => null,
        'status' => null,
        'subscribe_rule' => null,
        'trigger_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_rule' => 'AlertRule',
        'domains' => 'Domains',
        'id' => 'Id',
        'name' => 'Name',
        'probe_tasks' => 'ProbeTasks',
        'resource_scope' => 'ResourceScope',
        'resource_types' => 'ResourceTypes',
        'status' => 'Status',
        'subscribe_rule' => 'SubscribeRule',
        'trigger_type' => 'TriggerType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_rule' => 'setAlertRule',
        'domains' => 'setDomains',
        'id' => 'setId',
        'name' => 'setName',
        'probe_tasks' => 'setProbeTasks',
        'resource_scope' => 'setResourceScope',
        'resource_types' => 'setResourceTypes',
        'status' => 'setStatus',
        'subscribe_rule' => 'setSubscribeRule',
        'trigger_type' => 'setTriggerType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_rule' => 'getAlertRule',
        'domains' => 'getDomains',
        'id' => 'getId',
        'name' => 'getName',
        'probe_tasks' => 'getProbeTasks',
        'resource_scope' => 'getResourceScope',
        'resource_types' => 'getResourceTypes',
        'status' => 'getStatus',
        'subscribe_rule' => 'getSubscribeRule',
        'trigger_type' => 'getTriggerType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_rule'] = isset($data['alert_rule']) ? $data['alert_rule'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['probe_tasks'] = isset($data['probe_tasks']) ? $data['probe_tasks'] : null;
        $this->container['resource_scope'] = isset($data['resource_scope']) ? $data['resource_scope'] : null;
        $this->container['resource_types'] = isset($data['resource_types']) ? $data['resource_types'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscribe_rule'] = isset($data['subscribe_rule']) ? $data['subscribe_rule'] : null;
        $this->container['trigger_type'] = isset($data['trigger_type']) ? $data['trigger_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_rule
     *
     * @return \Volcengine\Mcdn\Model\AlertRuleForListAlertStrategiesOutput
     */
    public function getAlertRule()
    {
        return $this->container['alert_rule'];
    }

    /**
     * Sets alert_rule
     *
     * @param \Volcengine\Mcdn\Model\AlertRuleForListAlertStrategiesOutput $alert_rule alert_rule
     *
     * @return $this
     */
    public function setAlertRule($alert_rule)
    {
        $this->container['alert_rule'] = $alert_rule;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \Volcengine\Mcdn\Model\DomainForListAlertStrategiesOutput[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \Volcengine\Mcdn\Model\DomainForListAlertStrategiesOutput[] $domains domains
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets probe_tasks
     *
     * @return \Volcengine\Mcdn\Model\ProbeTaskForListAlertStrategiesOutput[]
     */
    public function getProbeTasks()
    {
        return $this->container['probe_tasks'];
    }

    /**
     * Sets probe_tasks
     *
     * @param \Volcengine\Mcdn\Model\ProbeTaskForListAlertStrategiesOutput[] $probe_tasks probe_tasks
     *
     * @return $this
     */
    public function setProbeTasks($probe_tasks)
    {
        $this->container['probe_tasks'] = $probe_tasks;

        return $this;
    }

    /**
     * Gets resource_scope
     *
     * @return string
     */
    public function getResourceScope()
    {
        return $this->container['resource_scope'];
    }

    /**
     * Sets resource_scope
     *
     * @param string $resource_scope resource_scope
     *
     * @return $this
     */
    public function setResourceScope($resource_scope)
    {
        $this->container['resource_scope'] = $resource_scope;

        return $this;
    }

    /**
     * Gets resource_types
     *
     * @return string[]
     */
    public function getResourceTypes()
    {
        return $this->container['resource_types'];
    }

    /**
     * Sets resource_types
     *
     * @param string[] $resource_types resource_types
     *
     * @return $this
     */
    public function setResourceTypes($resource_types)
    {
        $this->container['resource_types'] = $resource_types;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscribe_rule
     *
     * @return \Volcengine\Mcdn\Model\SubscribeRuleForListAlertStrategiesOutput
     */
    public function getSubscribeRule()
    {
        return $this->container['subscribe_rule'];
    }

    /**
     * Sets subscribe_rule
     *
     * @param \Volcengine\Mcdn\Model\SubscribeRuleForListAlertStrategiesOutput $subscribe_rule subscribe_rule
     *
     * @return $this
     */
    public function setSubscribeRule($subscribe_rule)
    {
        $this->container['subscribe_rule'] = $subscribe_rule;

        return $this;
    }

    /**
     * Gets trigger_type
     *
     * @return string
     */
    public function getTriggerType()
    {
        return $this->container['trigger_type'];
    }

    /**
     * Sets trigger_type
     *
     * @param string $trigger_type trigger_type
     *
     * @return $this
     */
    public function setTriggerType($trigger_type)
    {
        $this->container['trigger_type'] = $trigger_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

