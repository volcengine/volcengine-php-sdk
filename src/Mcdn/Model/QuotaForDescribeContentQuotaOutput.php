<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class QuotaForDescribeContentQuotaOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuotaForDescribeContentQuotaOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'area' => 'string',
        'cloud_account_id' => 'string',
        'cloud_account_name' => 'string',
        'preload_quota' => 'int',
        'preload_remain' => 'int',
        'product_type' => 'string',
        'refresh_dir_quota' => 'int',
        'refresh_dir_remain' => 'int',
        'refresh_url_quota' => 'int',
        'refresh_url_remain' => 'int',
        'sub_product' => 'string',
        'vendor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'area' => null,
        'cloud_account_id' => null,
        'cloud_account_name' => null,
        'preload_quota' => 'int64',
        'preload_remain' => 'int64',
        'product_type' => null,
        'refresh_dir_quota' => 'int64',
        'refresh_dir_remain' => 'int64',
        'refresh_url_quota' => 'int64',
        'refresh_url_remain' => 'int64',
        'sub_product' => null,
        'vendor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'area' => 'Area',
        'cloud_account_id' => 'CloudAccountId',
        'cloud_account_name' => 'CloudAccountName',
        'preload_quota' => 'PreloadQuota',
        'preload_remain' => 'PreloadRemain',
        'product_type' => 'ProductType',
        'refresh_dir_quota' => 'RefreshDirQuota',
        'refresh_dir_remain' => 'RefreshDirRemain',
        'refresh_url_quota' => 'RefreshUrlQuota',
        'refresh_url_remain' => 'RefreshUrlRemain',
        'sub_product' => 'SubProduct',
        'vendor' => 'Vendor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'area' => 'setArea',
        'cloud_account_id' => 'setCloudAccountId',
        'cloud_account_name' => 'setCloudAccountName',
        'preload_quota' => 'setPreloadQuota',
        'preload_remain' => 'setPreloadRemain',
        'product_type' => 'setProductType',
        'refresh_dir_quota' => 'setRefreshDirQuota',
        'refresh_dir_remain' => 'setRefreshDirRemain',
        'refresh_url_quota' => 'setRefreshUrlQuota',
        'refresh_url_remain' => 'setRefreshUrlRemain',
        'sub_product' => 'setSubProduct',
        'vendor' => 'setVendor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'area' => 'getArea',
        'cloud_account_id' => 'getCloudAccountId',
        'cloud_account_name' => 'getCloudAccountName',
        'preload_quota' => 'getPreloadQuota',
        'preload_remain' => 'getPreloadRemain',
        'product_type' => 'getProductType',
        'refresh_dir_quota' => 'getRefreshDirQuota',
        'refresh_dir_remain' => 'getRefreshDirRemain',
        'refresh_url_quota' => 'getRefreshUrlQuota',
        'refresh_url_remain' => 'getRefreshUrlRemain',
        'sub_product' => 'getSubProduct',
        'vendor' => 'getVendor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['cloud_account_id'] = isset($data['cloud_account_id']) ? $data['cloud_account_id'] : null;
        $this->container['cloud_account_name'] = isset($data['cloud_account_name']) ? $data['cloud_account_name'] : null;
        $this->container['preload_quota'] = isset($data['preload_quota']) ? $data['preload_quota'] : null;
        $this->container['preload_remain'] = isset($data['preload_remain']) ? $data['preload_remain'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['refresh_dir_quota'] = isset($data['refresh_dir_quota']) ? $data['refresh_dir_quota'] : null;
        $this->container['refresh_dir_remain'] = isset($data['refresh_dir_remain']) ? $data['refresh_dir_remain'] : null;
        $this->container['refresh_url_quota'] = isset($data['refresh_url_quota']) ? $data['refresh_url_quota'] : null;
        $this->container['refresh_url_remain'] = isset($data['refresh_url_remain']) ? $data['refresh_url_remain'] : null;
        $this->container['sub_product'] = isset($data['sub_product']) ? $data['sub_product'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets area
     *
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets cloud_account_id
     *
     * @return string
     */
    public function getCloudAccountId()
    {
        return $this->container['cloud_account_id'];
    }

    /**
     * Sets cloud_account_id
     *
     * @param string $cloud_account_id cloud_account_id
     *
     * @return $this
     */
    public function setCloudAccountId($cloud_account_id)
    {
        $this->container['cloud_account_id'] = $cloud_account_id;

        return $this;
    }

    /**
     * Gets cloud_account_name
     *
     * @return string
     */
    public function getCloudAccountName()
    {
        return $this->container['cloud_account_name'];
    }

    /**
     * Sets cloud_account_name
     *
     * @param string $cloud_account_name cloud_account_name
     *
     * @return $this
     */
    public function setCloudAccountName($cloud_account_name)
    {
        $this->container['cloud_account_name'] = $cloud_account_name;

        return $this;
    }

    /**
     * Gets preload_quota
     *
     * @return int
     */
    public function getPreloadQuota()
    {
        return $this->container['preload_quota'];
    }

    /**
     * Sets preload_quota
     *
     * @param int $preload_quota preload_quota
     *
     * @return $this
     */
    public function setPreloadQuota($preload_quota)
    {
        $this->container['preload_quota'] = $preload_quota;

        return $this;
    }

    /**
     * Gets preload_remain
     *
     * @return int
     */
    public function getPreloadRemain()
    {
        return $this->container['preload_remain'];
    }

    /**
     * Sets preload_remain
     *
     * @param int $preload_remain preload_remain
     *
     * @return $this
     */
    public function setPreloadRemain($preload_remain)
    {
        $this->container['preload_remain'] = $preload_remain;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets refresh_dir_quota
     *
     * @return int
     */
    public function getRefreshDirQuota()
    {
        return $this->container['refresh_dir_quota'];
    }

    /**
     * Sets refresh_dir_quota
     *
     * @param int $refresh_dir_quota refresh_dir_quota
     *
     * @return $this
     */
    public function setRefreshDirQuota($refresh_dir_quota)
    {
        $this->container['refresh_dir_quota'] = $refresh_dir_quota;

        return $this;
    }

    /**
     * Gets refresh_dir_remain
     *
     * @return int
     */
    public function getRefreshDirRemain()
    {
        return $this->container['refresh_dir_remain'];
    }

    /**
     * Sets refresh_dir_remain
     *
     * @param int $refresh_dir_remain refresh_dir_remain
     *
     * @return $this
     */
    public function setRefreshDirRemain($refresh_dir_remain)
    {
        $this->container['refresh_dir_remain'] = $refresh_dir_remain;

        return $this;
    }

    /**
     * Gets refresh_url_quota
     *
     * @return int
     */
    public function getRefreshUrlQuota()
    {
        return $this->container['refresh_url_quota'];
    }

    /**
     * Sets refresh_url_quota
     *
     * @param int $refresh_url_quota refresh_url_quota
     *
     * @return $this
     */
    public function setRefreshUrlQuota($refresh_url_quota)
    {
        $this->container['refresh_url_quota'] = $refresh_url_quota;

        return $this;
    }

    /**
     * Gets refresh_url_remain
     *
     * @return int
     */
    public function getRefreshUrlRemain()
    {
        return $this->container['refresh_url_remain'];
    }

    /**
     * Sets refresh_url_remain
     *
     * @param int $refresh_url_remain refresh_url_remain
     *
     * @return $this
     */
    public function setRefreshUrlRemain($refresh_url_remain)
    {
        $this->container['refresh_url_remain'] = $refresh_url_remain;

        return $this;
    }

    /**
     * Gets sub_product
     *
     * @return string
     */
    public function getSubProduct()
    {
        return $this->container['sub_product'];
    }

    /**
     * Sets sub_product
     *
     * @param string $sub_product sub_product
     *
     * @return $this
     */
    public function setSubProduct($sub_product)
    {
        $this->container['sub_product'] = $sub_product;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

