<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DomainForListCdnDomainsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainForListCdnDomainsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'biz_node_id' => 'string',
        'biz_node_name' => 'string',
        'biz_node_path' => 'string',
        'cdn_type' => 'string',
        'certificates' => '\Volcengine\Mcdn\Model\CertificateForListCdnDomainsOutput[]',
        'cloud_account_id' => 'string',
        'cloud_account_name' => 'string',
        'cname' => 'string',
        'created_at' => 'string',
        'id' => 'string',
        'imported_at' => 'string',
        'name' => 'string',
        'networks' => '\Volcengine\Mcdn\Model\NetworkForListCdnDomainsOutput[]',
        'region' => 'string',
        'schedule_created' => 'bool',
        'status' => 'string',
        'sub_product' => 'string',
        'synced_at' => 'string',
        'tags' => '\Volcengine\Mcdn\Model\TagForListCdnDomainsOutput[]',
        'top_account_id' => 'string',
        'updated_at' => 'string',
        'vendor' => 'string',
        'vendor_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'biz_node_id' => null,
        'biz_node_name' => null,
        'biz_node_path' => null,
        'cdn_type' => null,
        'certificates' => null,
        'cloud_account_id' => null,
        'cloud_account_name' => null,
        'cname' => null,
        'created_at' => null,
        'id' => null,
        'imported_at' => null,
        'name' => null,
        'networks' => null,
        'region' => null,
        'schedule_created' => null,
        'status' => null,
        'sub_product' => null,
        'synced_at' => null,
        'tags' => null,
        'top_account_id' => null,
        'updated_at' => null,
        'vendor' => null,
        'vendor_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'biz_node_id' => 'BizNodeId',
        'biz_node_name' => 'BizNodeName',
        'biz_node_path' => 'BizNodePath',
        'cdn_type' => 'CdnType',
        'certificates' => 'Certificates',
        'cloud_account_id' => 'CloudAccountId',
        'cloud_account_name' => 'CloudAccountName',
        'cname' => 'Cname',
        'created_at' => 'CreatedAt',
        'id' => 'Id',
        'imported_at' => 'ImportedAt',
        'name' => 'Name',
        'networks' => 'Networks',
        'region' => 'Region',
        'schedule_created' => 'ScheduleCreated',
        'status' => 'Status',
        'sub_product' => 'SubProduct',
        'synced_at' => 'SyncedAt',
        'tags' => 'Tags',
        'top_account_id' => 'TopAccountId',
        'updated_at' => 'UpdatedAt',
        'vendor' => 'Vendor',
        'vendor_id' => 'VendorId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'biz_node_id' => 'setBizNodeId',
        'biz_node_name' => 'setBizNodeName',
        'biz_node_path' => 'setBizNodePath',
        'cdn_type' => 'setCdnType',
        'certificates' => 'setCertificates',
        'cloud_account_id' => 'setCloudAccountId',
        'cloud_account_name' => 'setCloudAccountName',
        'cname' => 'setCname',
        'created_at' => 'setCreatedAt',
        'id' => 'setId',
        'imported_at' => 'setImportedAt',
        'name' => 'setName',
        'networks' => 'setNetworks',
        'region' => 'setRegion',
        'schedule_created' => 'setScheduleCreated',
        'status' => 'setStatus',
        'sub_product' => 'setSubProduct',
        'synced_at' => 'setSyncedAt',
        'tags' => 'setTags',
        'top_account_id' => 'setTopAccountId',
        'updated_at' => 'setUpdatedAt',
        'vendor' => 'setVendor',
        'vendor_id' => 'setVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'biz_node_id' => 'getBizNodeId',
        'biz_node_name' => 'getBizNodeName',
        'biz_node_path' => 'getBizNodePath',
        'cdn_type' => 'getCdnType',
        'certificates' => 'getCertificates',
        'cloud_account_id' => 'getCloudAccountId',
        'cloud_account_name' => 'getCloudAccountName',
        'cname' => 'getCname',
        'created_at' => 'getCreatedAt',
        'id' => 'getId',
        'imported_at' => 'getImportedAt',
        'name' => 'getName',
        'networks' => 'getNetworks',
        'region' => 'getRegion',
        'schedule_created' => 'getScheduleCreated',
        'status' => 'getStatus',
        'sub_product' => 'getSubProduct',
        'synced_at' => 'getSyncedAt',
        'tags' => 'getTags',
        'top_account_id' => 'getTopAccountId',
        'updated_at' => 'getUpdatedAt',
        'vendor' => 'getVendor',
        'vendor_id' => 'getVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['biz_node_id'] = isset($data['biz_node_id']) ? $data['biz_node_id'] : null;
        $this->container['biz_node_name'] = isset($data['biz_node_name']) ? $data['biz_node_name'] : null;
        $this->container['biz_node_path'] = isset($data['biz_node_path']) ? $data['biz_node_path'] : null;
        $this->container['cdn_type'] = isset($data['cdn_type']) ? $data['cdn_type'] : null;
        $this->container['certificates'] = isset($data['certificates']) ? $data['certificates'] : null;
        $this->container['cloud_account_id'] = isset($data['cloud_account_id']) ? $data['cloud_account_id'] : null;
        $this->container['cloud_account_name'] = isset($data['cloud_account_name']) ? $data['cloud_account_name'] : null;
        $this->container['cname'] = isset($data['cname']) ? $data['cname'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['imported_at'] = isset($data['imported_at']) ? $data['imported_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['networks'] = isset($data['networks']) ? $data['networks'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['schedule_created'] = isset($data['schedule_created']) ? $data['schedule_created'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_product'] = isset($data['sub_product']) ? $data['sub_product'] : null;
        $this->container['synced_at'] = isset($data['synced_at']) ? $data['synced_at'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['top_account_id'] = isset($data['top_account_id']) ? $data['top_account_id'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets biz_node_id
     *
     * @return string
     */
    public function getBizNodeId()
    {
        return $this->container['biz_node_id'];
    }

    /**
     * Sets biz_node_id
     *
     * @param string $biz_node_id biz_node_id
     *
     * @return $this
     */
    public function setBizNodeId($biz_node_id)
    {
        $this->container['biz_node_id'] = $biz_node_id;

        return $this;
    }

    /**
     * Gets biz_node_name
     *
     * @return string
     */
    public function getBizNodeName()
    {
        return $this->container['biz_node_name'];
    }

    /**
     * Sets biz_node_name
     *
     * @param string $biz_node_name biz_node_name
     *
     * @return $this
     */
    public function setBizNodeName($biz_node_name)
    {
        $this->container['biz_node_name'] = $biz_node_name;

        return $this;
    }

    /**
     * Gets biz_node_path
     *
     * @return string
     */
    public function getBizNodePath()
    {
        return $this->container['biz_node_path'];
    }

    /**
     * Sets biz_node_path
     *
     * @param string $biz_node_path biz_node_path
     *
     * @return $this
     */
    public function setBizNodePath($biz_node_path)
    {
        $this->container['biz_node_path'] = $biz_node_path;

        return $this;
    }

    /**
     * Gets cdn_type
     *
     * @return string
     */
    public function getCdnType()
    {
        return $this->container['cdn_type'];
    }

    /**
     * Sets cdn_type
     *
     * @param string $cdn_type cdn_type
     *
     * @return $this
     */
    public function setCdnType($cdn_type)
    {
        $this->container['cdn_type'] = $cdn_type;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return \Volcengine\Mcdn\Model\CertificateForListCdnDomainsOutput[]
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param \Volcengine\Mcdn\Model\CertificateForListCdnDomainsOutput[] $certificates certificates
     *
     * @return $this
     */
    public function setCertificates($certificates)
    {
        $this->container['certificates'] = $certificates;

        return $this;
    }

    /**
     * Gets cloud_account_id
     *
     * @return string
     */
    public function getCloudAccountId()
    {
        return $this->container['cloud_account_id'];
    }

    /**
     * Sets cloud_account_id
     *
     * @param string $cloud_account_id cloud_account_id
     *
     * @return $this
     */
    public function setCloudAccountId($cloud_account_id)
    {
        $this->container['cloud_account_id'] = $cloud_account_id;

        return $this;
    }

    /**
     * Gets cloud_account_name
     *
     * @return string
     */
    public function getCloudAccountName()
    {
        return $this->container['cloud_account_name'];
    }

    /**
     * Sets cloud_account_name
     *
     * @param string $cloud_account_name cloud_account_name
     *
     * @return $this
     */
    public function setCloudAccountName($cloud_account_name)
    {
        $this->container['cloud_account_name'] = $cloud_account_name;

        return $this;
    }

    /**
     * Gets cname
     *
     * @return string
     */
    public function getCname()
    {
        return $this->container['cname'];
    }

    /**
     * Sets cname
     *
     * @param string $cname cname
     *
     * @return $this
     */
    public function setCname($cname)
    {
        $this->container['cname'] = $cname;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imported_at
     *
     * @return string
     */
    public function getImportedAt()
    {
        return $this->container['imported_at'];
    }

    /**
     * Sets imported_at
     *
     * @param string $imported_at imported_at
     *
     * @return $this
     */
    public function setImportedAt($imported_at)
    {
        $this->container['imported_at'] = $imported_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return \Volcengine\Mcdn\Model\NetworkForListCdnDomainsOutput[]
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param \Volcengine\Mcdn\Model\NetworkForListCdnDomainsOutput[] $networks networks
     *
     * @return $this
     */
    public function setNetworks($networks)
    {
        $this->container['networks'] = $networks;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets schedule_created
     *
     * @return bool
     */
    public function getScheduleCreated()
    {
        return $this->container['schedule_created'];
    }

    /**
     * Sets schedule_created
     *
     * @param bool $schedule_created schedule_created
     *
     * @return $this
     */
    public function setScheduleCreated($schedule_created)
    {
        $this->container['schedule_created'] = $schedule_created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_product
     *
     * @return string
     */
    public function getSubProduct()
    {
        return $this->container['sub_product'];
    }

    /**
     * Sets sub_product
     *
     * @param string $sub_product sub_product
     *
     * @return $this
     */
    public function setSubProduct($sub_product)
    {
        $this->container['sub_product'] = $sub_product;

        return $this;
    }

    /**
     * Gets synced_at
     *
     * @return string
     */
    public function getSyncedAt()
    {
        return $this->container['synced_at'];
    }

    /**
     * Sets synced_at
     *
     * @param string $synced_at synced_at
     *
     * @return $this
     */
    public function setSyncedAt($synced_at)
    {
        $this->container['synced_at'] = $synced_at;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Mcdn\Model\TagForListCdnDomainsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Mcdn\Model\TagForListCdnDomainsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets top_account_id
     *
     * @return string
     */
    public function getTopAccountId()
    {
        return $this->container['top_account_id'];
    }

    /**
     * Sets top_account_id
     *
     * @param string $top_account_id top_account_id
     *
     * @return $this
     */
    public function setTopAccountId($top_account_id)
    {
        $this->container['top_account_id'] = $top_account_id;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return string
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

