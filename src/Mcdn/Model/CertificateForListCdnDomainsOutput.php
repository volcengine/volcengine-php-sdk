<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CertificateForListCdnDomainsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertificateForListCdnDomainsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'common_name' => 'string',
        'expire_time' => 'string',
        'fingerprint_sha1' => 'string',
        'fingerprint_sha256' => 'string',
        'id' => 'string',
        'name' => 'string',
        'start_time' => 'string',
        'status' => 'string',
        'subject_alternative_names' => 'string[]',
        'sync_detail' => '\Volcengine\Mcdn\Model\SyncDetailForListCdnDomainsOutput',
        'volc_ids' => 'string[]',
        'volc_ids_sync_detail' => '\Volcengine\Mcdn\Model\VolcIdsSyncDetailForListCdnDomainsOutput',
        'region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'common_name' => null,
        'expire_time' => null,
        'fingerprint_sha1' => null,
        'fingerprint_sha256' => null,
        'id' => null,
        'name' => null,
        'start_time' => null,
        'status' => null,
        'subject_alternative_names' => null,
        'sync_detail' => null,
        'volc_ids' => null,
        'volc_ids_sync_detail' => null,
        'region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'common_name' => 'CommonName',
        'expire_time' => 'ExpireTime',
        'fingerprint_sha1' => 'FingerprintSha1',
        'fingerprint_sha256' => 'FingerprintSha256',
        'id' => 'Id',
        'name' => 'Name',
        'start_time' => 'StartTime',
        'status' => 'Status',
        'subject_alternative_names' => 'SubjectAlternativeNames',
        'sync_detail' => 'SyncDetail',
        'volc_ids' => 'VolcIds',
        'volc_ids_sync_detail' => 'VolcIdsSyncDetail',
        'region' => 'region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'common_name' => 'setCommonName',
        'expire_time' => 'setExpireTime',
        'fingerprint_sha1' => 'setFingerprintSha1',
        'fingerprint_sha256' => 'setFingerprintSha256',
        'id' => 'setId',
        'name' => 'setName',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'subject_alternative_names' => 'setSubjectAlternativeNames',
        'sync_detail' => 'setSyncDetail',
        'volc_ids' => 'setVolcIds',
        'volc_ids_sync_detail' => 'setVolcIdsSyncDetail',
        'region' => 'setRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'common_name' => 'getCommonName',
        'expire_time' => 'getExpireTime',
        'fingerprint_sha1' => 'getFingerprintSha1',
        'fingerprint_sha256' => 'getFingerprintSha256',
        'id' => 'getId',
        'name' => 'getName',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'subject_alternative_names' => 'getSubjectAlternativeNames',
        'sync_detail' => 'getSyncDetail',
        'volc_ids' => 'getVolcIds',
        'volc_ids_sync_detail' => 'getVolcIdsSyncDetail',
        'region' => 'getRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['common_name'] = isset($data['common_name']) ? $data['common_name'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['fingerprint_sha1'] = isset($data['fingerprint_sha1']) ? $data['fingerprint_sha1'] : null;
        $this->container['fingerprint_sha256'] = isset($data['fingerprint_sha256']) ? $data['fingerprint_sha256'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subject_alternative_names'] = isset($data['subject_alternative_names']) ? $data['subject_alternative_names'] : null;
        $this->container['sync_detail'] = isset($data['sync_detail']) ? $data['sync_detail'] : null;
        $this->container['volc_ids'] = isset($data['volc_ids']) ? $data['volc_ids'] : null;
        $this->container['volc_ids_sync_detail'] = isset($data['volc_ids_sync_detail']) ? $data['volc_ids_sync_detail'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets common_name
     *
     * @return string
     */
    public function getCommonName()
    {
        return $this->container['common_name'];
    }

    /**
     * Sets common_name
     *
     * @param string $common_name common_name
     *
     * @return $this
     */
    public function setCommonName($common_name)
    {
        $this->container['common_name'] = $common_name;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return string
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param string $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets fingerprint_sha1
     *
     * @return string
     */
    public function getFingerprintSha1()
    {
        return $this->container['fingerprint_sha1'];
    }

    /**
     * Sets fingerprint_sha1
     *
     * @param string $fingerprint_sha1 fingerprint_sha1
     *
     * @return $this
     */
    public function setFingerprintSha1($fingerprint_sha1)
    {
        $this->container['fingerprint_sha1'] = $fingerprint_sha1;

        return $this;
    }

    /**
     * Gets fingerprint_sha256
     *
     * @return string
     */
    public function getFingerprintSha256()
    {
        return $this->container['fingerprint_sha256'];
    }

    /**
     * Sets fingerprint_sha256
     *
     * @param string $fingerprint_sha256 fingerprint_sha256
     *
     * @return $this
     */
    public function setFingerprintSha256($fingerprint_sha256)
    {
        $this->container['fingerprint_sha256'] = $fingerprint_sha256;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subject_alternative_names
     *
     * @return string[]
     */
    public function getSubjectAlternativeNames()
    {
        return $this->container['subject_alternative_names'];
    }

    /**
     * Sets subject_alternative_names
     *
     * @param string[] $subject_alternative_names subject_alternative_names
     *
     * @return $this
     */
    public function setSubjectAlternativeNames($subject_alternative_names)
    {
        $this->container['subject_alternative_names'] = $subject_alternative_names;

        return $this;
    }

    /**
     * Gets sync_detail
     *
     * @return \Volcengine\Mcdn\Model\SyncDetailForListCdnDomainsOutput
     */
    public function getSyncDetail()
    {
        return $this->container['sync_detail'];
    }

    /**
     * Sets sync_detail
     *
     * @param \Volcengine\Mcdn\Model\SyncDetailForListCdnDomainsOutput $sync_detail sync_detail
     *
     * @return $this
     */
    public function setSyncDetail($sync_detail)
    {
        $this->container['sync_detail'] = $sync_detail;

        return $this;
    }

    /**
     * Gets volc_ids
     *
     * @return string[]
     */
    public function getVolcIds()
    {
        return $this->container['volc_ids'];
    }

    /**
     * Sets volc_ids
     *
     * @param string[] $volc_ids volc_ids
     *
     * @return $this
     */
    public function setVolcIds($volc_ids)
    {
        $this->container['volc_ids'] = $volc_ids;

        return $this;
    }

    /**
     * Gets volc_ids_sync_detail
     *
     * @return \Volcengine\Mcdn\Model\VolcIdsSyncDetailForListCdnDomainsOutput
     */
    public function getVolcIdsSyncDetail()
    {
        return $this->container['volc_ids_sync_detail'];
    }

    /**
     * Sets volc_ids_sync_detail
     *
     * @param \Volcengine\Mcdn\Model\VolcIdsSyncDetailForListCdnDomainsOutput $volc_ids_sync_detail volc_ids_sync_detail
     *
     * @return $this
     */
    public function setVolcIdsSyncDetail($volc_ids_sync_detail)
    {
        $this->container['volc_ids_sync_detail'] = $volc_ids_sync_detail;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

