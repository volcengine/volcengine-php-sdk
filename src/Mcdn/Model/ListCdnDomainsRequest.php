<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListCdnDomainsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListCdnDomainsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'biz_node_ids' => 'string[]',
        'cdn_type' => 'string[]',
        'cloud_account_id' => 'string',
        'exact_name' => 'string',
        'name' => 'string',
        'pagination' => '\Volcengine\Mcdn\Model\PaginationForListCdnDomainsInput',
        'project_name' => 'string',
        'region' => 'string[]',
        'schedule_created' => 'bool',
        'status' => 'string[]',
        'tag_filters' => '\Volcengine\Mcdn\Model\TagFilterForListCdnDomainsInput[]',
        'vendor' => 'string[]',
        'with_configs' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'biz_node_ids' => null,
        'cdn_type' => null,
        'cloud_account_id' => null,
        'exact_name' => null,
        'name' => null,
        'pagination' => null,
        'project_name' => null,
        'region' => null,
        'schedule_created' => null,
        'status' => null,
        'tag_filters' => null,
        'vendor' => null,
        'with_configs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'biz_node_ids' => 'BizNodeIds',
        'cdn_type' => 'CdnType',
        'cloud_account_id' => 'CloudAccountId',
        'exact_name' => 'ExactName',
        'name' => 'Name',
        'pagination' => 'Pagination',
        'project_name' => 'ProjectName',
        'region' => 'Region',
        'schedule_created' => 'ScheduleCreated',
        'status' => 'Status',
        'tag_filters' => 'TagFilters',
        'vendor' => 'Vendor',
        'with_configs' => 'WithConfigs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'biz_node_ids' => 'setBizNodeIds',
        'cdn_type' => 'setCdnType',
        'cloud_account_id' => 'setCloudAccountId',
        'exact_name' => 'setExactName',
        'name' => 'setName',
        'pagination' => 'setPagination',
        'project_name' => 'setProjectName',
        'region' => 'setRegion',
        'schedule_created' => 'setScheduleCreated',
        'status' => 'setStatus',
        'tag_filters' => 'setTagFilters',
        'vendor' => 'setVendor',
        'with_configs' => 'setWithConfigs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'biz_node_ids' => 'getBizNodeIds',
        'cdn_type' => 'getCdnType',
        'cloud_account_id' => 'getCloudAccountId',
        'exact_name' => 'getExactName',
        'name' => 'getName',
        'pagination' => 'getPagination',
        'project_name' => 'getProjectName',
        'region' => 'getRegion',
        'schedule_created' => 'getScheduleCreated',
        'status' => 'getStatus',
        'tag_filters' => 'getTagFilters',
        'vendor' => 'getVendor',
        'with_configs' => 'getWithConfigs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['biz_node_ids'] = isset($data['biz_node_ids']) ? $data['biz_node_ids'] : null;
        $this->container['cdn_type'] = isset($data['cdn_type']) ? $data['cdn_type'] : null;
        $this->container['cloud_account_id'] = isset($data['cloud_account_id']) ? $data['cloud_account_id'] : null;
        $this->container['exact_name'] = isset($data['exact_name']) ? $data['exact_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pagination'] = isset($data['pagination']) ? $data['pagination'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['schedule_created'] = isset($data['schedule_created']) ? $data['schedule_created'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['with_configs'] = isset($data['with_configs']) ? $data['with_configs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets biz_node_ids
     *
     * @return string[]
     */
    public function getBizNodeIds()
    {
        return $this->container['biz_node_ids'];
    }

    /**
     * Sets biz_node_ids
     *
     * @param string[] $biz_node_ids biz_node_ids
     *
     * @return $this
     */
    public function setBizNodeIds($biz_node_ids)
    {
        $this->container['biz_node_ids'] = $biz_node_ids;

        return $this;
    }

    /**
     * Gets cdn_type
     *
     * @return string[]
     */
    public function getCdnType()
    {
        return $this->container['cdn_type'];
    }

    /**
     * Sets cdn_type
     *
     * @param string[] $cdn_type cdn_type
     *
     * @return $this
     */
    public function setCdnType($cdn_type)
    {
        $this->container['cdn_type'] = $cdn_type;

        return $this;
    }

    /**
     * Gets cloud_account_id
     *
     * @return string
     */
    public function getCloudAccountId()
    {
        return $this->container['cloud_account_id'];
    }

    /**
     * Sets cloud_account_id
     *
     * @param string $cloud_account_id cloud_account_id
     *
     * @return $this
     */
    public function setCloudAccountId($cloud_account_id)
    {
        $this->container['cloud_account_id'] = $cloud_account_id;

        return $this;
    }

    /**
     * Gets exact_name
     *
     * @return string
     */
    public function getExactName()
    {
        return $this->container['exact_name'];
    }

    /**
     * Sets exact_name
     *
     * @param string $exact_name exact_name
     *
     * @return $this
     */
    public function setExactName($exact_name)
    {
        $this->container['exact_name'] = $exact_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pagination
     *
     * @return \Volcengine\Mcdn\Model\PaginationForListCdnDomainsInput
     */
    public function getPagination()
    {
        return $this->container['pagination'];
    }

    /**
     * Sets pagination
     *
     * @param \Volcengine\Mcdn\Model\PaginationForListCdnDomainsInput $pagination pagination
     *
     * @return $this
     */
    public function setPagination($pagination)
    {
        $this->container['pagination'] = $pagination;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string[]
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string[] $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets schedule_created
     *
     * @return bool
     */
    public function getScheduleCreated()
    {
        return $this->container['schedule_created'];
    }

    /**
     * Sets schedule_created
     *
     * @param bool $schedule_created schedule_created
     *
     * @return $this
     */
    public function setScheduleCreated($schedule_created)
    {
        $this->container['schedule_created'] = $schedule_created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string[] $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Mcdn\Model\TagFilterForListCdnDomainsInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Mcdn\Model\TagFilterForListCdnDomainsInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string[]
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string[] $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets with_configs
     *
     * @return bool
     */
    public function getWithConfigs()
    {
        return $this->container['with_configs'];
    }

    /**
     * Sets with_configs
     *
     * @param bool $with_configs with_configs
     *
     * @return $this
     */
    public function setWithConfigs($with_configs)
    {
        $this->container['with_configs'] = $with_configs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

