<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeCdnOriginDataOfflineRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeCdnOriginDataOfflineRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cdn_types' => 'string[]',
        'cloud_account_ids' => 'string[]',
        'domain_ids' => 'string[]',
        'domains' => 'string[]',
        'end_time' => 'int',
        'group_by' => 'string',
        'interval' => 'string',
        'is_trim_latest_data' => 'bool',
        'metric' => 'string',
        'project_names' => 'string[]',
        'start_time' => 'int',
        'sub_products' => 'string[]',
        'vendors' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cdn_types' => null,
        'cloud_account_ids' => null,
        'domain_ids' => null,
        'domains' => null,
        'end_time' => 'int64',
        'group_by' => null,
        'interval' => null,
        'is_trim_latest_data' => null,
        'metric' => null,
        'project_names' => null,
        'start_time' => 'int64',
        'sub_products' => null,
        'vendors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cdn_types' => 'CdnTypes',
        'cloud_account_ids' => 'CloudAccountIds',
        'domain_ids' => 'DomainIds',
        'domains' => 'Domains',
        'end_time' => 'EndTime',
        'group_by' => 'GroupBy',
        'interval' => 'Interval',
        'is_trim_latest_data' => 'IsTrimLatestData',
        'metric' => 'Metric',
        'project_names' => 'ProjectNames',
        'start_time' => 'StartTime',
        'sub_products' => 'SubProducts',
        'vendors' => 'Vendors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cdn_types' => 'setCdnTypes',
        'cloud_account_ids' => 'setCloudAccountIds',
        'domain_ids' => 'setDomainIds',
        'domains' => 'setDomains',
        'end_time' => 'setEndTime',
        'group_by' => 'setGroupBy',
        'interval' => 'setInterval',
        'is_trim_latest_data' => 'setIsTrimLatestData',
        'metric' => 'setMetric',
        'project_names' => 'setProjectNames',
        'start_time' => 'setStartTime',
        'sub_products' => 'setSubProducts',
        'vendors' => 'setVendors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cdn_types' => 'getCdnTypes',
        'cloud_account_ids' => 'getCloudAccountIds',
        'domain_ids' => 'getDomainIds',
        'domains' => 'getDomains',
        'end_time' => 'getEndTime',
        'group_by' => 'getGroupBy',
        'interval' => 'getInterval',
        'is_trim_latest_data' => 'getIsTrimLatestData',
        'metric' => 'getMetric',
        'project_names' => 'getProjectNames',
        'start_time' => 'getStartTime',
        'sub_products' => 'getSubProducts',
        'vendors' => 'getVendors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cdn_types'] = isset($data['cdn_types']) ? $data['cdn_types'] : null;
        $this->container['cloud_account_ids'] = isset($data['cloud_account_ids']) ? $data['cloud_account_ids'] : null;
        $this->container['domain_ids'] = isset($data['domain_ids']) ? $data['domain_ids'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['group_by'] = isset($data['group_by']) ? $data['group_by'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['is_trim_latest_data'] = isset($data['is_trim_latest_data']) ? $data['is_trim_latest_data'] : null;
        $this->container['metric'] = isset($data['metric']) ? $data['metric'] : null;
        $this->container['project_names'] = isset($data['project_names']) ? $data['project_names'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['sub_products'] = isset($data['sub_products']) ? $data['sub_products'] : null;
        $this->container['vendors'] = isset($data['vendors']) ? $data['vendors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['metric'] === null) {
            $invalidProperties[] = "'metric' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cdn_types
     *
     * @return string[]
     */
    public function getCdnTypes()
    {
        return $this->container['cdn_types'];
    }

    /**
     * Sets cdn_types
     *
     * @param string[] $cdn_types cdn_types
     *
     * @return $this
     */
    public function setCdnTypes($cdn_types)
    {
        $this->container['cdn_types'] = $cdn_types;

        return $this;
    }

    /**
     * Gets cloud_account_ids
     *
     * @return string[]
     */
    public function getCloudAccountIds()
    {
        return $this->container['cloud_account_ids'];
    }

    /**
     * Sets cloud_account_ids
     *
     * @param string[] $cloud_account_ids cloud_account_ids
     *
     * @return $this
     */
    public function setCloudAccountIds($cloud_account_ids)
    {
        $this->container['cloud_account_ids'] = $cloud_account_ids;

        return $this;
    }

    /**
     * Gets domain_ids
     *
     * @return string[]
     */
    public function getDomainIds()
    {
        return $this->container['domain_ids'];
    }

    /**
     * Sets domain_ids
     *
     * @param string[] $domain_ids domain_ids
     *
     * @return $this
     */
    public function setDomainIds($domain_ids)
    {
        $this->container['domain_ids'] = $domain_ids;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[] $domains domains
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets group_by
     *
     * @return string
     */
    public function getGroupBy()
    {
        return $this->container['group_by'];
    }

    /**
     * Sets group_by
     *
     * @param string $group_by group_by
     *
     * @return $this
     */
    public function setGroupBy($group_by)
    {
        $this->container['group_by'] = $group_by;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets is_trim_latest_data
     *
     * @return bool
     */
    public function getIsTrimLatestData()
    {
        return $this->container['is_trim_latest_data'];
    }

    /**
     * Sets is_trim_latest_data
     *
     * @param bool $is_trim_latest_data is_trim_latest_data
     *
     * @return $this
     */
    public function setIsTrimLatestData($is_trim_latest_data)
    {
        $this->container['is_trim_latest_data'] = $is_trim_latest_data;

        return $this;
    }

    /**
     * Gets metric
     *
     * @return string
     */
    public function getMetric()
    {
        return $this->container['metric'];
    }

    /**
     * Sets metric
     *
     * @param string $metric metric
     *
     * @return $this
     */
    public function setMetric($metric)
    {
        $this->container['metric'] = $metric;

        return $this;
    }

    /**
     * Gets project_names
     *
     * @return string[]
     */
    public function getProjectNames()
    {
        return $this->container['project_names'];
    }

    /**
     * Sets project_names
     *
     * @param string[] $project_names project_names
     *
     * @return $this
     */
    public function setProjectNames($project_names)
    {
        $this->container['project_names'] = $project_names;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets sub_products
     *
     * @return string[]
     */
    public function getSubProducts()
    {
        return $this->container['sub_products'];
    }

    /**
     * Sets sub_products
     *
     * @param string[] $sub_products sub_products
     *
     * @return $this
     */
    public function setSubProducts($sub_products)
    {
        $this->container['sub_products'] = $sub_products;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return string[]
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param string[] $vendors vendors
     *
     * @return $this
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

