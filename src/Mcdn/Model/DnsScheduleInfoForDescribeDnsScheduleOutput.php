<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DnsScheduleInfoForDescribeDnsScheduleOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DnsScheduleInfoForDescribeDnsScheduleOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_at' => 'int',
        'domain_name' => 'string',
        'domestic_domains' => '\Volcengine\Mcdn\Model\DomesticDomainForDescribeDnsScheduleOutput[]',
        'global_domains' => '\Volcengine\Mcdn\Model\GlobalDomainForDescribeDnsScheduleOutput[]',
        'id' => 'string',
        'region' => 'string',
        'schedule_cname' => 'string',
        'schedule_status' => 'string',
        'schedule_strategies' => 'string[]',
        'updated_at' => 'int',
        'vendors' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_at' => 'int64',
        'domain_name' => null,
        'domestic_domains' => null,
        'global_domains' => null,
        'id' => null,
        'region' => null,
        'schedule_cname' => null,
        'schedule_status' => null,
        'schedule_strategies' => null,
        'updated_at' => 'int64',
        'vendors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'CreatedAt',
        'domain_name' => 'DomainName',
        'domestic_domains' => 'DomesticDomains',
        'global_domains' => 'GlobalDomains',
        'id' => 'Id',
        'region' => 'Region',
        'schedule_cname' => 'ScheduleCname',
        'schedule_status' => 'ScheduleStatus',
        'schedule_strategies' => 'ScheduleStrategies',
        'updated_at' => 'UpdatedAt',
        'vendors' => 'Vendors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'domain_name' => 'setDomainName',
        'domestic_domains' => 'setDomesticDomains',
        'global_domains' => 'setGlobalDomains',
        'id' => 'setId',
        'region' => 'setRegion',
        'schedule_cname' => 'setScheduleCname',
        'schedule_status' => 'setScheduleStatus',
        'schedule_strategies' => 'setScheduleStrategies',
        'updated_at' => 'setUpdatedAt',
        'vendors' => 'setVendors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'domain_name' => 'getDomainName',
        'domestic_domains' => 'getDomesticDomains',
        'global_domains' => 'getGlobalDomains',
        'id' => 'getId',
        'region' => 'getRegion',
        'schedule_cname' => 'getScheduleCname',
        'schedule_status' => 'getScheduleStatus',
        'schedule_strategies' => 'getScheduleStrategies',
        'updated_at' => 'getUpdatedAt',
        'vendors' => 'getVendors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['domain_name'] = isset($data['domain_name']) ? $data['domain_name'] : null;
        $this->container['domestic_domains'] = isset($data['domestic_domains']) ? $data['domestic_domains'] : null;
        $this->container['global_domains'] = isset($data['global_domains']) ? $data['global_domains'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['schedule_cname'] = isset($data['schedule_cname']) ? $data['schedule_cname'] : null;
        $this->container['schedule_status'] = isset($data['schedule_status']) ? $data['schedule_status'] : null;
        $this->container['schedule_strategies'] = isset($data['schedule_strategies']) ? $data['schedule_strategies'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['vendors'] = isset($data['vendors']) ? $data['vendors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string $domain_name domain_name
     *
     * @return $this
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets domestic_domains
     *
     * @return \Volcengine\Mcdn\Model\DomesticDomainForDescribeDnsScheduleOutput[]
     */
    public function getDomesticDomains()
    {
        return $this->container['domestic_domains'];
    }

    /**
     * Sets domestic_domains
     *
     * @param \Volcengine\Mcdn\Model\DomesticDomainForDescribeDnsScheduleOutput[] $domestic_domains domestic_domains
     *
     * @return $this
     */
    public function setDomesticDomains($domestic_domains)
    {
        $this->container['domestic_domains'] = $domestic_domains;

        return $this;
    }

    /**
     * Gets global_domains
     *
     * @return \Volcengine\Mcdn\Model\GlobalDomainForDescribeDnsScheduleOutput[]
     */
    public function getGlobalDomains()
    {
        return $this->container['global_domains'];
    }

    /**
     * Sets global_domains
     *
     * @param \Volcengine\Mcdn\Model\GlobalDomainForDescribeDnsScheduleOutput[] $global_domains global_domains
     *
     * @return $this
     */
    public function setGlobalDomains($global_domains)
    {
        $this->container['global_domains'] = $global_domains;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets schedule_cname
     *
     * @return string
     */
    public function getScheduleCname()
    {
        return $this->container['schedule_cname'];
    }

    /**
     * Sets schedule_cname
     *
     * @param string $schedule_cname schedule_cname
     *
     * @return $this
     */
    public function setScheduleCname($schedule_cname)
    {
        $this->container['schedule_cname'] = $schedule_cname;

        return $this;
    }

    /**
     * Gets schedule_status
     *
     * @return string
     */
    public function getScheduleStatus()
    {
        return $this->container['schedule_status'];
    }

    /**
     * Sets schedule_status
     *
     * @param string $schedule_status schedule_status
     *
     * @return $this
     */
    public function setScheduleStatus($schedule_status)
    {
        $this->container['schedule_status'] = $schedule_status;

        return $this;
    }

    /**
     * Gets schedule_strategies
     *
     * @return string[]
     */
    public function getScheduleStrategies()
    {
        return $this->container['schedule_strategies'];
    }

    /**
     * Sets schedule_strategies
     *
     * @param string[] $schedule_strategies schedule_strategies
     *
     * @return $this
     */
    public function setScheduleStrategies($schedule_strategies)
    {
        $this->container['schedule_strategies'] = $schedule_strategies;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return string[]
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param string[] $vendors vendors
     *
     * @return $this
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

