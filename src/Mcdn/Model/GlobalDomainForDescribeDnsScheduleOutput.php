<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GlobalDomainForDescribeDnsScheduleOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GlobalDomainForDescribeDnsScheduleOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cloud_account_id' => 'string',
        'cname' => 'string',
        'ipv4_list' => 'string[]',
        'ipv6_list' => 'string[]',
        'id' => 'string',
        'is_enabled' => 'bool',
        'name' => 'string',
        'region' => 'string',
        'status' => 'string',
        'sub_product' => 'string',
        'vendor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cloud_account_id' => null,
        'cname' => null,
        'ipv4_list' => null,
        'ipv6_list' => null,
        'id' => null,
        'is_enabled' => null,
        'name' => null,
        'region' => null,
        'status' => null,
        'sub_product' => null,
        'vendor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloud_account_id' => 'CloudAccountId',
        'cname' => 'Cname',
        'ipv4_list' => 'IPv4List',
        'ipv6_list' => 'IPv6List',
        'id' => 'Id',
        'is_enabled' => 'IsEnabled',
        'name' => 'Name',
        'region' => 'Region',
        'status' => 'Status',
        'sub_product' => 'SubProduct',
        'vendor' => 'Vendor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloud_account_id' => 'setCloudAccountId',
        'cname' => 'setCname',
        'ipv4_list' => 'setIpv4List',
        'ipv6_list' => 'setIpv6List',
        'id' => 'setId',
        'is_enabled' => 'setIsEnabled',
        'name' => 'setName',
        'region' => 'setRegion',
        'status' => 'setStatus',
        'sub_product' => 'setSubProduct',
        'vendor' => 'setVendor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloud_account_id' => 'getCloudAccountId',
        'cname' => 'getCname',
        'ipv4_list' => 'getIpv4List',
        'ipv6_list' => 'getIpv6List',
        'id' => 'getId',
        'is_enabled' => 'getIsEnabled',
        'name' => 'getName',
        'region' => 'getRegion',
        'status' => 'getStatus',
        'sub_product' => 'getSubProduct',
        'vendor' => 'getVendor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloud_account_id'] = isset($data['cloud_account_id']) ? $data['cloud_account_id'] : null;
        $this->container['cname'] = isset($data['cname']) ? $data['cname'] : null;
        $this->container['ipv4_list'] = isset($data['ipv4_list']) ? $data['ipv4_list'] : null;
        $this->container['ipv6_list'] = isset($data['ipv6_list']) ? $data['ipv6_list'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_product'] = isset($data['sub_product']) ? $data['sub_product'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloud_account_id
     *
     * @return string
     */
    public function getCloudAccountId()
    {
        return $this->container['cloud_account_id'];
    }

    /**
     * Sets cloud_account_id
     *
     * @param string $cloud_account_id cloud_account_id
     *
     * @return $this
     */
    public function setCloudAccountId($cloud_account_id)
    {
        $this->container['cloud_account_id'] = $cloud_account_id;

        return $this;
    }

    /**
     * Gets cname
     *
     * @return string
     */
    public function getCname()
    {
        return $this->container['cname'];
    }

    /**
     * Sets cname
     *
     * @param string $cname cname
     *
     * @return $this
     */
    public function setCname($cname)
    {
        $this->container['cname'] = $cname;

        return $this;
    }

    /**
     * Gets ipv4_list
     *
     * @return string[]
     */
    public function getIpv4List()
    {
        return $this->container['ipv4_list'];
    }

    /**
     * Sets ipv4_list
     *
     * @param string[] $ipv4_list ipv4_list
     *
     * @return $this
     */
    public function setIpv4List($ipv4_list)
    {
        $this->container['ipv4_list'] = $ipv4_list;

        return $this;
    }

    /**
     * Gets ipv6_list
     *
     * @return string[]
     */
    public function getIpv6List()
    {
        return $this->container['ipv6_list'];
    }

    /**
     * Sets ipv6_list
     *
     * @param string[] $ipv6_list ipv6_list
     *
     * @return $this
     */
    public function setIpv6List($ipv6_list)
    {
        $this->container['ipv6_list'] = $ipv6_list;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_product
     *
     * @return string
     */
    public function getSubProduct()
    {
        return $this->container['sub_product'];
    }

    /**
     * Sets sub_product
     *
     * @param string $sub_product sub_product
     *
     * @return $this
     */
    public function setSubProduct($sub_product)
    {
        $this->container['sub_product'] = $sub_product;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

