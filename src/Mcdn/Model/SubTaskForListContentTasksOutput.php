<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SubTaskForListContentTasksOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubTaskForListContentTasksOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cloud_account_id' => 'string',
        'cloud_account_name' => 'string',
        'description' => 'string',
        'product_type' => 'string',
        'sub_product' => 'string',
        'submit_at' => 'int',
        'submit_status' => 'string',
        'url' => 'string[]',
        'vendor' => 'string',
        'vendor_task_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cloud_account_id' => null,
        'cloud_account_name' => null,
        'description' => null,
        'product_type' => null,
        'sub_product' => null,
        'submit_at' => 'int64',
        'submit_status' => null,
        'url' => null,
        'vendor' => null,
        'vendor_task_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloud_account_id' => 'CloudAccountId',
        'cloud_account_name' => 'CloudAccountName',
        'description' => 'Description',
        'product_type' => 'ProductType',
        'sub_product' => 'SubProduct',
        'submit_at' => 'SubmitAt',
        'submit_status' => 'SubmitStatus',
        'url' => 'Url',
        'vendor' => 'Vendor',
        'vendor_task_ids' => 'VendorTaskIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloud_account_id' => 'setCloudAccountId',
        'cloud_account_name' => 'setCloudAccountName',
        'description' => 'setDescription',
        'product_type' => 'setProductType',
        'sub_product' => 'setSubProduct',
        'submit_at' => 'setSubmitAt',
        'submit_status' => 'setSubmitStatus',
        'url' => 'setUrl',
        'vendor' => 'setVendor',
        'vendor_task_ids' => 'setVendorTaskIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloud_account_id' => 'getCloudAccountId',
        'cloud_account_name' => 'getCloudAccountName',
        'description' => 'getDescription',
        'product_type' => 'getProductType',
        'sub_product' => 'getSubProduct',
        'submit_at' => 'getSubmitAt',
        'submit_status' => 'getSubmitStatus',
        'url' => 'getUrl',
        'vendor' => 'getVendor',
        'vendor_task_ids' => 'getVendorTaskIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloud_account_id'] = isset($data['cloud_account_id']) ? $data['cloud_account_id'] : null;
        $this->container['cloud_account_name'] = isset($data['cloud_account_name']) ? $data['cloud_account_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['sub_product'] = isset($data['sub_product']) ? $data['sub_product'] : null;
        $this->container['submit_at'] = isset($data['submit_at']) ? $data['submit_at'] : null;
        $this->container['submit_status'] = isset($data['submit_status']) ? $data['submit_status'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendor_task_ids'] = isset($data['vendor_task_ids']) ? $data['vendor_task_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloud_account_id
     *
     * @return string
     */
    public function getCloudAccountId()
    {
        return $this->container['cloud_account_id'];
    }

    /**
     * Sets cloud_account_id
     *
     * @param string $cloud_account_id cloud_account_id
     *
     * @return $this
     */
    public function setCloudAccountId($cloud_account_id)
    {
        $this->container['cloud_account_id'] = $cloud_account_id;

        return $this;
    }

    /**
     * Gets cloud_account_name
     *
     * @return string
     */
    public function getCloudAccountName()
    {
        return $this->container['cloud_account_name'];
    }

    /**
     * Sets cloud_account_name
     *
     * @param string $cloud_account_name cloud_account_name
     *
     * @return $this
     */
    public function setCloudAccountName($cloud_account_name)
    {
        $this->container['cloud_account_name'] = $cloud_account_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets sub_product
     *
     * @return string
     */
    public function getSubProduct()
    {
        return $this->container['sub_product'];
    }

    /**
     * Sets sub_product
     *
     * @param string $sub_product sub_product
     *
     * @return $this
     */
    public function setSubProduct($sub_product)
    {
        $this->container['sub_product'] = $sub_product;

        return $this;
    }

    /**
     * Gets submit_at
     *
     * @return int
     */
    public function getSubmitAt()
    {
        return $this->container['submit_at'];
    }

    /**
     * Sets submit_at
     *
     * @param int $submit_at submit_at
     *
     * @return $this
     */
    public function setSubmitAt($submit_at)
    {
        $this->container['submit_at'] = $submit_at;

        return $this;
    }

    /**
     * Gets submit_status
     *
     * @return string
     */
    public function getSubmitStatus()
    {
        return $this->container['submit_status'];
    }

    /**
     * Sets submit_status
     *
     * @param string $submit_status submit_status
     *
     * @return $this
     */
    public function setSubmitStatus($submit_status)
    {
        $this->container['submit_status'] = $submit_status;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string[]
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string[] $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendor_task_ids
     *
     * @return string[]
     */
    public function getVendorTaskIds()
    {
        return $this->container['vendor_task_ids'];
    }

    /**
     * Sets vendor_task_ids
     *
     * @param string[] $vendor_task_ids vendor_task_ids
     *
     * @return $this
     */
    public function setVendorTaskIds($vendor_task_ids)
    {
        $this->container['vendor_task_ids'] = $vendor_task_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

