<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListDnsSchedulesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListDnsSchedulesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cloud_account_ids' => 'string[]',
        'domain_name' => 'string',
        'exact_domain_name' => 'string',
        'pagination' => '\Volcengine\Mcdn\Model\PaginationForListDnsSchedulesInput',
        'region' => 'string',
        'schedule_status' => 'string',
        'schedule_strategy' => 'string',
        'sort_by' => 'string',
        'sort_order' => 'string',
        'vendors' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cloud_account_ids' => null,
        'domain_name' => null,
        'exact_domain_name' => null,
        'pagination' => null,
        'region' => null,
        'schedule_status' => null,
        'schedule_strategy' => null,
        'sort_by' => null,
        'sort_order' => null,
        'vendors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloud_account_ids' => 'CloudAccountIds',
        'domain_name' => 'DomainName',
        'exact_domain_name' => 'ExactDomainName',
        'pagination' => 'Pagination',
        'region' => 'Region',
        'schedule_status' => 'ScheduleStatus',
        'schedule_strategy' => 'ScheduleStrategy',
        'sort_by' => 'SortBy',
        'sort_order' => 'SortOrder',
        'vendors' => 'Vendors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloud_account_ids' => 'setCloudAccountIds',
        'domain_name' => 'setDomainName',
        'exact_domain_name' => 'setExactDomainName',
        'pagination' => 'setPagination',
        'region' => 'setRegion',
        'schedule_status' => 'setScheduleStatus',
        'schedule_strategy' => 'setScheduleStrategy',
        'sort_by' => 'setSortBy',
        'sort_order' => 'setSortOrder',
        'vendors' => 'setVendors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloud_account_ids' => 'getCloudAccountIds',
        'domain_name' => 'getDomainName',
        'exact_domain_name' => 'getExactDomainName',
        'pagination' => 'getPagination',
        'region' => 'getRegion',
        'schedule_status' => 'getScheduleStatus',
        'schedule_strategy' => 'getScheduleStrategy',
        'sort_by' => 'getSortBy',
        'sort_order' => 'getSortOrder',
        'vendors' => 'getVendors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloud_account_ids'] = isset($data['cloud_account_ids']) ? $data['cloud_account_ids'] : null;
        $this->container['domain_name'] = isset($data['domain_name']) ? $data['domain_name'] : null;
        $this->container['exact_domain_name'] = isset($data['exact_domain_name']) ? $data['exact_domain_name'] : null;
        $this->container['pagination'] = isset($data['pagination']) ? $data['pagination'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['schedule_status'] = isset($data['schedule_status']) ? $data['schedule_status'] : null;
        $this->container['schedule_strategy'] = isset($data['schedule_strategy']) ? $data['schedule_strategy'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['vendors'] = isset($data['vendors']) ? $data['vendors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloud_account_ids
     *
     * @return string[]
     */
    public function getCloudAccountIds()
    {
        return $this->container['cloud_account_ids'];
    }

    /**
     * Sets cloud_account_ids
     *
     * @param string[] $cloud_account_ids cloud_account_ids
     *
     * @return $this
     */
    public function setCloudAccountIds($cloud_account_ids)
    {
        $this->container['cloud_account_ids'] = $cloud_account_ids;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string $domain_name domain_name
     *
     * @return $this
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets exact_domain_name
     *
     * @return string
     */
    public function getExactDomainName()
    {
        return $this->container['exact_domain_name'];
    }

    /**
     * Sets exact_domain_name
     *
     * @param string $exact_domain_name exact_domain_name
     *
     * @return $this
     */
    public function setExactDomainName($exact_domain_name)
    {
        $this->container['exact_domain_name'] = $exact_domain_name;

        return $this;
    }

    /**
     * Gets pagination
     *
     * @return \Volcengine\Mcdn\Model\PaginationForListDnsSchedulesInput
     */
    public function getPagination()
    {
        return $this->container['pagination'];
    }

    /**
     * Sets pagination
     *
     * @param \Volcengine\Mcdn\Model\PaginationForListDnsSchedulesInput $pagination pagination
     *
     * @return $this
     */
    public function setPagination($pagination)
    {
        $this->container['pagination'] = $pagination;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets schedule_status
     *
     * @return string
     */
    public function getScheduleStatus()
    {
        return $this->container['schedule_status'];
    }

    /**
     * Sets schedule_status
     *
     * @param string $schedule_status schedule_status
     *
     * @return $this
     */
    public function setScheduleStatus($schedule_status)
    {
        $this->container['schedule_status'] = $schedule_status;

        return $this;
    }

    /**
     * Gets schedule_strategy
     *
     * @return string
     */
    public function getScheduleStrategy()
    {
        return $this->container['schedule_strategy'];
    }

    /**
     * Sets schedule_strategy
     *
     * @param string $schedule_strategy schedule_strategy
     *
     * @return $this
     */
    public function setScheduleStrategy($schedule_strategy)
    {
        $this->container['schedule_strategy'] = $schedule_strategy;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by sort_by
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return string[]
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param string[] $vendors vendors
     *
     * @return $this
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

