<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mcdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ActiveWeightForDescribeDnsScheduleActiveWeightsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActiveWeightForDescribeDnsScheduleActiveWeightsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
        'is_failover' => 'bool',
        'isp' => 'string',
        'province' => 'string',
        'related_strategy_id' => 'string',
        'strategy' => 'string',
        'weight_failover_infos' => '\Volcengine\Mcdn\Model\WeightFailoverInfoForDescribeDnsScheduleActiveWeightsOutput[]',
        'weight_info_items' => '\Volcengine\Mcdn\Model\WeightInfoItemForDescribeDnsScheduleActiveWeightsOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
        'is_failover' => null,
        'isp' => null,
        'province' => null,
        'related_strategy_id' => null,
        'strategy' => null,
        'weight_failover_infos' => null,
        'weight_info_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'Country',
        'is_failover' => 'IsFailover',
        'isp' => 'Isp',
        'province' => 'Province',
        'related_strategy_id' => 'RelatedStrategyId',
        'strategy' => 'Strategy',
        'weight_failover_infos' => 'WeightFailoverInfos',
        'weight_info_items' => 'WeightInfoItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'is_failover' => 'setIsFailover',
        'isp' => 'setIsp',
        'province' => 'setProvince',
        'related_strategy_id' => 'setRelatedStrategyId',
        'strategy' => 'setStrategy',
        'weight_failover_infos' => 'setWeightFailoverInfos',
        'weight_info_items' => 'setWeightInfoItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'is_failover' => 'getIsFailover',
        'isp' => 'getIsp',
        'province' => 'getProvince',
        'related_strategy_id' => 'getRelatedStrategyId',
        'strategy' => 'getStrategy',
        'weight_failover_infos' => 'getWeightFailoverInfos',
        'weight_info_items' => 'getWeightInfoItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['is_failover'] = isset($data['is_failover']) ? $data['is_failover'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['related_strategy_id'] = isset($data['related_strategy_id']) ? $data['related_strategy_id'] : null;
        $this->container['strategy'] = isset($data['strategy']) ? $data['strategy'] : null;
        $this->container['weight_failover_infos'] = isset($data['weight_failover_infos']) ? $data['weight_failover_infos'] : null;
        $this->container['weight_info_items'] = isset($data['weight_info_items']) ? $data['weight_info_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets is_failover
     *
     * @return bool
     */
    public function getIsFailover()
    {
        return $this->container['is_failover'];
    }

    /**
     * Sets is_failover
     *
     * @param bool $is_failover is_failover
     *
     * @return $this
     */
    public function setIsFailover($is_failover)
    {
        $this->container['is_failover'] = $is_failover;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province province
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets related_strategy_id
     *
     * @return string
     */
    public function getRelatedStrategyId()
    {
        return $this->container['related_strategy_id'];
    }

    /**
     * Sets related_strategy_id
     *
     * @param string $related_strategy_id related_strategy_id
     *
     * @return $this
     */
    public function setRelatedStrategyId($related_strategy_id)
    {
        $this->container['related_strategy_id'] = $related_strategy_id;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string $strategy strategy
     *
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets weight_failover_infos
     *
     * @return \Volcengine\Mcdn\Model\WeightFailoverInfoForDescribeDnsScheduleActiveWeightsOutput[]
     */
    public function getWeightFailoverInfos()
    {
        return $this->container['weight_failover_infos'];
    }

    /**
     * Sets weight_failover_infos
     *
     * @param \Volcengine\Mcdn\Model\WeightFailoverInfoForDescribeDnsScheduleActiveWeightsOutput[] $weight_failover_infos weight_failover_infos
     *
     * @return $this
     */
    public function setWeightFailoverInfos($weight_failover_infos)
    {
        $this->container['weight_failover_infos'] = $weight_failover_infos;

        return $this;
    }

    /**
     * Gets weight_info_items
     *
     * @return \Volcengine\Mcdn\Model\WeightInfoItemForDescribeDnsScheduleActiveWeightsOutput[]
     */
    public function getWeightInfoItems()
    {
        return $this->container['weight_info_items'];
    }

    /**
     * Sets weight_info_items
     *
     * @param \Volcengine\Mcdn\Model\WeightInfoItemForDescribeDnsScheduleActiveWeightsOutput[] $weight_info_items weight_info_items
     *
     * @return $this
     */
    public function setWeightInfoItems($weight_info_items)
    {
        $this->container['weight_info_items'] = $weight_info_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

