<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConditionsForDeleteWhiteListsInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConditionsForDeleteWhiteListsInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cloud_providers' => 'string[]',
        'desc' => 'string',
        'leaf_group_ids' => 'string[]',
        'match_alarm_name' => 'string',
        'match_content' => 'string',
        'match_key' => 'string',
        'name' => 'string',
        'range' => '\Volcengine\Seccenter20240508\Model\RangeForDeleteWhiteListsInput',
        'range_include_global' => '\Volcengine\Seccenter20240508\Model\RangeIncludeGlobalForDeleteWhiteListsInput',
        'top_group_id' => 'string',
        'update_time_end' => 'int',
        'update_time_start' => 'int',
        'user' => 'string',
        'white_list_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cloud_providers' => null,
        'desc' => null,
        'leaf_group_ids' => null,
        'match_alarm_name' => null,
        'match_content' => null,
        'match_key' => null,
        'name' => null,
        'range' => null,
        'range_include_global' => null,
        'top_group_id' => null,
        'update_time_end' => 'int32',
        'update_time_start' => 'int32',
        'user' => null,
        'white_list_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloud_providers' => 'CloudProviders',
        'desc' => 'Desc',
        'leaf_group_ids' => 'LeafGroupIDs',
        'match_alarm_name' => 'MatchAlarmName',
        'match_content' => 'MatchContent',
        'match_key' => 'MatchKey',
        'name' => 'Name',
        'range' => 'Range',
        'range_include_global' => 'RangeIncludeGlobal',
        'top_group_id' => 'TopGroupID',
        'update_time_end' => 'UpdateTimeEnd',
        'update_time_start' => 'UpdateTimeStart',
        'user' => 'User',
        'white_list_id' => 'WhiteListID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloud_providers' => 'setCloudProviders',
        'desc' => 'setDesc',
        'leaf_group_ids' => 'setLeafGroupIds',
        'match_alarm_name' => 'setMatchAlarmName',
        'match_content' => 'setMatchContent',
        'match_key' => 'setMatchKey',
        'name' => 'setName',
        'range' => 'setRange',
        'range_include_global' => 'setRangeIncludeGlobal',
        'top_group_id' => 'setTopGroupId',
        'update_time_end' => 'setUpdateTimeEnd',
        'update_time_start' => 'setUpdateTimeStart',
        'user' => 'setUser',
        'white_list_id' => 'setWhiteListId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloud_providers' => 'getCloudProviders',
        'desc' => 'getDesc',
        'leaf_group_ids' => 'getLeafGroupIds',
        'match_alarm_name' => 'getMatchAlarmName',
        'match_content' => 'getMatchContent',
        'match_key' => 'getMatchKey',
        'name' => 'getName',
        'range' => 'getRange',
        'range_include_global' => 'getRangeIncludeGlobal',
        'top_group_id' => 'getTopGroupId',
        'update_time_end' => 'getUpdateTimeEnd',
        'update_time_start' => 'getUpdateTimeStart',
        'user' => 'getUser',
        'white_list_id' => 'getWhiteListId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloud_providers'] = isset($data['cloud_providers']) ? $data['cloud_providers'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['match_alarm_name'] = isset($data['match_alarm_name']) ? $data['match_alarm_name'] : null;
        $this->container['match_content'] = isset($data['match_content']) ? $data['match_content'] : null;
        $this->container['match_key'] = isset($data['match_key']) ? $data['match_key'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['range_include_global'] = isset($data['range_include_global']) ? $data['range_include_global'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
        $this->container['update_time_end'] = isset($data['update_time_end']) ? $data['update_time_end'] : null;
        $this->container['update_time_start'] = isset($data['update_time_start']) ? $data['update_time_start'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['white_list_id'] = isset($data['white_list_id']) ? $data['white_list_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloud_providers
     *
     * @return string[]
     */
    public function getCloudProviders()
    {
        return $this->container['cloud_providers'];
    }

    /**
     * Sets cloud_providers
     *
     * @param string[] $cloud_providers cloud_providers
     *
     * @return $this
     */
    public function setCloudProviders($cloud_providers)
    {
        $this->container['cloud_providers'] = $cloud_providers;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string $desc desc
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets match_alarm_name
     *
     * @return string
     */
    public function getMatchAlarmName()
    {
        return $this->container['match_alarm_name'];
    }

    /**
     * Sets match_alarm_name
     *
     * @param string $match_alarm_name match_alarm_name
     *
     * @return $this
     */
    public function setMatchAlarmName($match_alarm_name)
    {
        $this->container['match_alarm_name'] = $match_alarm_name;

        return $this;
    }

    /**
     * Gets match_content
     *
     * @return string
     */
    public function getMatchContent()
    {
        return $this->container['match_content'];
    }

    /**
     * Sets match_content
     *
     * @param string $match_content match_content
     *
     * @return $this
     */
    public function setMatchContent($match_content)
    {
        $this->container['match_content'] = $match_content;

        return $this;
    }

    /**
     * Gets match_key
     *
     * @return string
     */
    public function getMatchKey()
    {
        return $this->container['match_key'];
    }

    /**
     * Sets match_key
     *
     * @param string $match_key match_key
     *
     * @return $this
     */
    public function setMatchKey($match_key)
    {
        $this->container['match_key'] = $match_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \Volcengine\Seccenter20240508\Model\RangeForDeleteWhiteListsInput
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \Volcengine\Seccenter20240508\Model\RangeForDeleteWhiteListsInput $range range
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets range_include_global
     *
     * @return \Volcengine\Seccenter20240508\Model\RangeIncludeGlobalForDeleteWhiteListsInput
     */
    public function getRangeIncludeGlobal()
    {
        return $this->container['range_include_global'];
    }

    /**
     * Sets range_include_global
     *
     * @param \Volcengine\Seccenter20240508\Model\RangeIncludeGlobalForDeleteWhiteListsInput $range_include_global range_include_global
     *
     * @return $this
     */
    public function setRangeIncludeGlobal($range_include_global)
    {
        $this->container['range_include_global'] = $range_include_global;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }

    /**
     * Gets update_time_end
     *
     * @return int
     */
    public function getUpdateTimeEnd()
    {
        return $this->container['update_time_end'];
    }

    /**
     * Sets update_time_end
     *
     * @param int $update_time_end update_time_end
     *
     * @return $this
     */
    public function setUpdateTimeEnd($update_time_end)
    {
        $this->container['update_time_end'] = $update_time_end;

        return $this;
    }

    /**
     * Gets update_time_start
     *
     * @return int
     */
    public function getUpdateTimeStart()
    {
        return $this->container['update_time_start'];
    }

    /**
     * Sets update_time_start
     *
     * @param int $update_time_start update_time_start
     *
     * @return $this
     */
    public function setUpdateTimeStart($update_time_start)
    {
        $this->container['update_time_start'] = $update_time_start;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets white_list_id
     *
     * @return string
     */
    public function getWhiteListId()
    {
        return $this->container['white_list_id'];
    }

    /**
     * Sets white_list_id
     *
     * @param string $white_list_id white_list_id
     *
     * @return $this
     */
    public function setWhiteListId($white_list_id)
    {
        $this->container['white_list_id'] = $white_list_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

