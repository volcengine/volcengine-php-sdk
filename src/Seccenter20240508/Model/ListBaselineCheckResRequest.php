<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListBaselineCheckResRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListBaselineCheckResRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'asset_id' => 'string',
        'asset_type' => 'string',
        'baseline_id' => 'int',
        'checklist_name' => 'string',
        'cloud_providers' => 'string[]',
        'if_white' => 'bool',
        'leaf_group_ids' => 'string[]',
        'page_number' => 'int',
        'page_size' => 'int',
        'result' => 'string[]',
        'sort_by' => 'string',
        'sort_order' => 'string',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'asset_id' => null,
        'asset_type' => null,
        'baseline_id' => 'int32',
        'checklist_name' => null,
        'cloud_providers' => null,
        'if_white' => null,
        'leaf_group_ids' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'result' => null,
        'sort_by' => null,
        'sort_order' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'asset_id' => 'AssetID',
        'asset_type' => 'AssetType',
        'baseline_id' => 'BaselineID',
        'checklist_name' => 'ChecklistName',
        'cloud_providers' => 'CloudProviders',
        'if_white' => 'IfWhite',
        'leaf_group_ids' => 'LeafGroupIDs',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'result' => 'Result',
        'sort_by' => 'SortBy',
        'sort_order' => 'SortOrder',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'asset_id' => 'setAssetId',
        'asset_type' => 'setAssetType',
        'baseline_id' => 'setBaselineId',
        'checklist_name' => 'setChecklistName',
        'cloud_providers' => 'setCloudProviders',
        'if_white' => 'setIfWhite',
        'leaf_group_ids' => 'setLeafGroupIds',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'result' => 'setResult',
        'sort_by' => 'setSortBy',
        'sort_order' => 'setSortOrder',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'asset_id' => 'getAssetId',
        'asset_type' => 'getAssetType',
        'baseline_id' => 'getBaselineId',
        'checklist_name' => 'getChecklistName',
        'cloud_providers' => 'getCloudProviders',
        'if_white' => 'getIfWhite',
        'leaf_group_ids' => 'getLeafGroupIds',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'result' => 'getResult',
        'sort_by' => 'getSortBy',
        'sort_order' => 'getSortOrder',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSET_TYPE_HOST = 'Host';
    const ASSET_TYPE_DEV = 'Dev';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssetTypeAllowableValues()
    {
        return [
            self::ASSET_TYPE_HOST,
            self::ASSET_TYPE_DEV,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['baseline_id'] = isset($data['baseline_id']) ? $data['baseline_id'] : null;
        $this->container['checklist_name'] = isset($data['checklist_name']) ? $data['checklist_name'] : null;
        $this->container['cloud_providers'] = isset($data['cloud_providers']) ? $data['cloud_providers'] : null;
        $this->container['if_white'] = isset($data['if_white']) ? $data['if_white'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssetTypeAllowableValues();
        if (!is_null($this->container['asset_type']) && !in_array($this->container['asset_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'asset_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['page_number'] === null) {
            $invalidProperties[] = "'page_number' can't be null";
        }
        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id asset_id
     *
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return string
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string $asset_type asset_type
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $allowedValues = $this->getAssetTypeAllowableValues();
        if (!is_null($asset_type) && !in_array($asset_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'asset_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets baseline_id
     *
     * @return int
     */
    public function getBaselineId()
    {
        return $this->container['baseline_id'];
    }

    /**
     * Sets baseline_id
     *
     * @param int $baseline_id baseline_id
     *
     * @return $this
     */
    public function setBaselineId($baseline_id)
    {
        $this->container['baseline_id'] = $baseline_id;

        return $this;
    }

    /**
     * Gets checklist_name
     *
     * @return string
     */
    public function getChecklistName()
    {
        return $this->container['checklist_name'];
    }

    /**
     * Sets checklist_name
     *
     * @param string $checklist_name checklist_name
     *
     * @return $this
     */
    public function setChecklistName($checklist_name)
    {
        $this->container['checklist_name'] = $checklist_name;

        return $this;
    }

    /**
     * Gets cloud_providers
     *
     * @return string[]
     */
    public function getCloudProviders()
    {
        return $this->container['cloud_providers'];
    }

    /**
     * Sets cloud_providers
     *
     * @param string[] $cloud_providers cloud_providers
     *
     * @return $this
     */
    public function setCloudProviders($cloud_providers)
    {
        $this->container['cloud_providers'] = $cloud_providers;

        return $this;
    }

    /**
     * Gets if_white
     *
     * @return bool
     */
    public function getIfWhite()
    {
        return $this->container['if_white'];
    }

    /**
     * Sets if_white
     *
     * @param bool $if_white if_white
     *
     * @return $this
     */
    public function setIfWhite($if_white)
    {
        $this->container['if_white'] = $if_white;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string[]
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string[] $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by sort_by
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

