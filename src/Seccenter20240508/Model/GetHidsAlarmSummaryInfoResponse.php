<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetHidsAlarmSummaryInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetHidsAlarmSummaryInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_content' => '\Volcengine\Seccenter20240508\Model\AlarmContentForGetHidsAlarmSummaryInfoOutput',
        'alarm_desc' => '\Volcengine\Seccenter20240508\Model\AlarmDescForGetHidsAlarmSummaryInfoOutput',
        'asset_info' => '\Volcengine\Seccenter20240508\Model\AssetInfoForGetHidsAlarmSummaryInfoOutput',
        'container_info' => '\Volcengine\Seccenter20240508\Model\ContainerInfoForGetHidsAlarmSummaryInfoOutput',
        'endpoint_trace' => '\Volcengine\Seccenter20240508\Model\EndpointTraceForGetHidsAlarmSummaryInfoOutput',
        'handling_records' => '\Volcengine\Seccenter20240508\Model\HandlingRecordForGetHidsAlarmSummaryInfoOutput[]',
        'raw_data' => '\Volcengine\Seccenter20240508\Model\RawDataForGetHidsAlarmSummaryInfoOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_content' => null,
        'alarm_desc' => null,
        'asset_info' => null,
        'container_info' => null,
        'endpoint_trace' => null,
        'handling_records' => null,
        'raw_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_content' => 'AlarmContent',
        'alarm_desc' => 'AlarmDesc',
        'asset_info' => 'AssetInfo',
        'container_info' => 'ContainerInfo',
        'endpoint_trace' => 'EndpointTrace',
        'handling_records' => 'HandlingRecords',
        'raw_data' => 'RawData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_content' => 'setAlarmContent',
        'alarm_desc' => 'setAlarmDesc',
        'asset_info' => 'setAssetInfo',
        'container_info' => 'setContainerInfo',
        'endpoint_trace' => 'setEndpointTrace',
        'handling_records' => 'setHandlingRecords',
        'raw_data' => 'setRawData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_content' => 'getAlarmContent',
        'alarm_desc' => 'getAlarmDesc',
        'asset_info' => 'getAssetInfo',
        'container_info' => 'getContainerInfo',
        'endpoint_trace' => 'getEndpointTrace',
        'handling_records' => 'getHandlingRecords',
        'raw_data' => 'getRawData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_content'] = isset($data['alarm_content']) ? $data['alarm_content'] : null;
        $this->container['alarm_desc'] = isset($data['alarm_desc']) ? $data['alarm_desc'] : null;
        $this->container['asset_info'] = isset($data['asset_info']) ? $data['asset_info'] : null;
        $this->container['container_info'] = isset($data['container_info']) ? $data['container_info'] : null;
        $this->container['endpoint_trace'] = isset($data['endpoint_trace']) ? $data['endpoint_trace'] : null;
        $this->container['handling_records'] = isset($data['handling_records']) ? $data['handling_records'] : null;
        $this->container['raw_data'] = isset($data['raw_data']) ? $data['raw_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_content
     *
     * @return \Volcengine\Seccenter20240508\Model\AlarmContentForGetHidsAlarmSummaryInfoOutput
     */
    public function getAlarmContent()
    {
        return $this->container['alarm_content'];
    }

    /**
     * Sets alarm_content
     *
     * @param \Volcengine\Seccenter20240508\Model\AlarmContentForGetHidsAlarmSummaryInfoOutput $alarm_content alarm_content
     *
     * @return $this
     */
    public function setAlarmContent($alarm_content)
    {
        $this->container['alarm_content'] = $alarm_content;

        return $this;
    }

    /**
     * Gets alarm_desc
     *
     * @return \Volcengine\Seccenter20240508\Model\AlarmDescForGetHidsAlarmSummaryInfoOutput
     */
    public function getAlarmDesc()
    {
        return $this->container['alarm_desc'];
    }

    /**
     * Sets alarm_desc
     *
     * @param \Volcengine\Seccenter20240508\Model\AlarmDescForGetHidsAlarmSummaryInfoOutput $alarm_desc alarm_desc
     *
     * @return $this
     */
    public function setAlarmDesc($alarm_desc)
    {
        $this->container['alarm_desc'] = $alarm_desc;

        return $this;
    }

    /**
     * Gets asset_info
     *
     * @return \Volcengine\Seccenter20240508\Model\AssetInfoForGetHidsAlarmSummaryInfoOutput
     */
    public function getAssetInfo()
    {
        return $this->container['asset_info'];
    }

    /**
     * Sets asset_info
     *
     * @param \Volcengine\Seccenter20240508\Model\AssetInfoForGetHidsAlarmSummaryInfoOutput $asset_info asset_info
     *
     * @return $this
     */
    public function setAssetInfo($asset_info)
    {
        $this->container['asset_info'] = $asset_info;

        return $this;
    }

    /**
     * Gets container_info
     *
     * @return \Volcengine\Seccenter20240508\Model\ContainerInfoForGetHidsAlarmSummaryInfoOutput
     */
    public function getContainerInfo()
    {
        return $this->container['container_info'];
    }

    /**
     * Sets container_info
     *
     * @param \Volcengine\Seccenter20240508\Model\ContainerInfoForGetHidsAlarmSummaryInfoOutput $container_info container_info
     *
     * @return $this
     */
    public function setContainerInfo($container_info)
    {
        $this->container['container_info'] = $container_info;

        return $this;
    }

    /**
     * Gets endpoint_trace
     *
     * @return \Volcengine\Seccenter20240508\Model\EndpointTraceForGetHidsAlarmSummaryInfoOutput
     */
    public function getEndpointTrace()
    {
        return $this->container['endpoint_trace'];
    }

    /**
     * Sets endpoint_trace
     *
     * @param \Volcengine\Seccenter20240508\Model\EndpointTraceForGetHidsAlarmSummaryInfoOutput $endpoint_trace endpoint_trace
     *
     * @return $this
     */
    public function setEndpointTrace($endpoint_trace)
    {
        $this->container['endpoint_trace'] = $endpoint_trace;

        return $this;
    }

    /**
     * Gets handling_records
     *
     * @return \Volcengine\Seccenter20240508\Model\HandlingRecordForGetHidsAlarmSummaryInfoOutput[]
     */
    public function getHandlingRecords()
    {
        return $this->container['handling_records'];
    }

    /**
     * Sets handling_records
     *
     * @param \Volcengine\Seccenter20240508\Model\HandlingRecordForGetHidsAlarmSummaryInfoOutput[] $handling_records handling_records
     *
     * @return $this
     */
    public function setHandlingRecords($handling_records)
    {
        $this->container['handling_records'] = $handling_records;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return \Volcengine\Seccenter20240508\Model\RawDataForGetHidsAlarmSummaryInfoOutput
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param \Volcengine\Seccenter20240508\Model\RawDataForGetHidsAlarmSummaryInfoOutput $raw_data raw_data
     *
     * @return $this
     */
    public function setRawData($raw_data)
    {
        $this->container['raw_data'] = $raw_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

