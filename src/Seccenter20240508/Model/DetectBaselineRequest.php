<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DetectBaselineRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetectBaselineRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asset_ids' => 'string[]',
        'asset_type' => 'string',
        'baseline_list' => 'int[]',
        'check_list' => 'int[]',
        'conditions' => '\Volcengine\Seccenter20240508\Model\ConditionsForDetectBaselineInput',
        'group_id' => 'int',
        'host_list' => 'string[]',
        'if_all_host' => 'bool',
        'if_all_mlp' => 'bool',
        'leaf_group_ids' => 'string[]',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asset_ids' => null,
        'asset_type' => null,
        'baseline_list' => 'int32',
        'check_list' => 'int32',
        'conditions' => null,
        'group_id' => 'int32',
        'host_list' => null,
        'if_all_host' => null,
        'if_all_mlp' => null,
        'leaf_group_ids' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_ids' => 'AssetIDs',
        'asset_type' => 'AssetType',
        'baseline_list' => 'BaselineList',
        'check_list' => 'CheckList',
        'conditions' => 'Conditions',
        'group_id' => 'GroupID',
        'host_list' => 'HostList',
        'if_all_host' => 'IfAllHost',
        'if_all_mlp' => 'IfAllMlp',
        'leaf_group_ids' => 'LeafGroupIDs',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_ids' => 'setAssetIds',
        'asset_type' => 'setAssetType',
        'baseline_list' => 'setBaselineList',
        'check_list' => 'setCheckList',
        'conditions' => 'setConditions',
        'group_id' => 'setGroupId',
        'host_list' => 'setHostList',
        'if_all_host' => 'setIfAllHost',
        'if_all_mlp' => 'setIfAllMlp',
        'leaf_group_ids' => 'setLeafGroupIds',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_ids' => 'getAssetIds',
        'asset_type' => 'getAssetType',
        'baseline_list' => 'getBaselineList',
        'check_list' => 'getCheckList',
        'conditions' => 'getConditions',
        'group_id' => 'getGroupId',
        'host_list' => 'getHostList',
        'if_all_host' => 'getIfAllHost',
        'if_all_mlp' => 'getIfAllMlp',
        'leaf_group_ids' => 'getLeafGroupIds',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSET_TYPE_HOST = 'Host';
    const ASSET_TYPE_DEV = 'Dev';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssetTypeAllowableValues()
    {
        return [
            self::ASSET_TYPE_HOST,
            self::ASSET_TYPE_DEV,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset_ids'] = isset($data['asset_ids']) ? $data['asset_ids'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['baseline_list'] = isset($data['baseline_list']) ? $data['baseline_list'] : null;
        $this->container['check_list'] = isset($data['check_list']) ? $data['check_list'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['host_list'] = isset($data['host_list']) ? $data['host_list'] : null;
        $this->container['if_all_host'] = isset($data['if_all_host']) ? $data['if_all_host'] : null;
        $this->container['if_all_mlp'] = isset($data['if_all_mlp']) ? $data['if_all_mlp'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssetTypeAllowableValues();
        if (!is_null($this->container['asset_type']) && !in_array($this->container['asset_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'asset_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_ids
     *
     * @return string[]
     */
    public function getAssetIds()
    {
        return $this->container['asset_ids'];
    }

    /**
     * Sets asset_ids
     *
     * @param string[] $asset_ids asset_ids
     *
     * @return $this
     */
    public function setAssetIds($asset_ids)
    {
        $this->container['asset_ids'] = $asset_ids;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return string
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string $asset_type asset_type
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $allowedValues = $this->getAssetTypeAllowableValues();
        if (!is_null($asset_type) && !in_array($asset_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'asset_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets baseline_list
     *
     * @return int[]
     */
    public function getBaselineList()
    {
        return $this->container['baseline_list'];
    }

    /**
     * Sets baseline_list
     *
     * @param int[] $baseline_list baseline_list
     *
     * @return $this
     */
    public function setBaselineList($baseline_list)
    {
        $this->container['baseline_list'] = $baseline_list;

        return $this;
    }

    /**
     * Gets check_list
     *
     * @return int[]
     */
    public function getCheckList()
    {
        return $this->container['check_list'];
    }

    /**
     * Sets check_list
     *
     * @param int[] $check_list check_list
     *
     * @return $this
     */
    public function setCheckList($check_list)
    {
        $this->container['check_list'] = $check_list;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Volcengine\Seccenter20240508\Model\ConditionsForDetectBaselineInput
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Volcengine\Seccenter20240508\Model\ConditionsForDetectBaselineInput $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets host_list
     *
     * @return string[]
     */
    public function getHostList()
    {
        return $this->container['host_list'];
    }

    /**
     * Sets host_list
     *
     * @param string[] $host_list host_list
     *
     * @return $this
     */
    public function setHostList($host_list)
    {
        $this->container['host_list'] = $host_list;

        return $this;
    }

    /**
     * Gets if_all_host
     *
     * @return bool
     */
    public function getIfAllHost()
    {
        return $this->container['if_all_host'];
    }

    /**
     * Sets if_all_host
     *
     * @param bool $if_all_host if_all_host
     *
     * @return $this
     */
    public function setIfAllHost($if_all_host)
    {
        $this->container['if_all_host'] = $if_all_host;

        return $this;
    }

    /**
     * Gets if_all_mlp
     *
     * @return bool
     */
    public function getIfAllMlp()
    {
        return $this->container['if_all_mlp'];
    }

    /**
     * Sets if_all_mlp
     *
     * @param bool $if_all_mlp if_all_mlp
     *
     * @return $this
     */
    public function setIfAllMlp($if_all_mlp)
    {
        $this->container['if_all_mlp'] = $if_all_mlp;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

