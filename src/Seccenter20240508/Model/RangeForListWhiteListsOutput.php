<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RangeForListWhiteListsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RangeForListWhiteListsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_list' => '\Volcengine\Seccenter20240508\Model\ClusterListForListWhiteListsOutput[]',
        'host_list' => '\Volcengine\Seccenter20240508\Model\HostListForListWhiteListsOutput[]',
        'leaf_group_id_list' => 'string[]',
        'single_group_path' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_list' => null,
        'host_list' => null,
        'leaf_group_id_list' => null,
        'single_group_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_list' => 'ClusterList',
        'host_list' => 'HostList',
        'leaf_group_id_list' => 'LeafGroupIDList',
        'single_group_path' => 'SingleGroupPath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_list' => 'setClusterList',
        'host_list' => 'setHostList',
        'leaf_group_id_list' => 'setLeafGroupIdList',
        'single_group_path' => 'setSingleGroupPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_list' => 'getClusterList',
        'host_list' => 'getHostList',
        'leaf_group_id_list' => 'getLeafGroupIdList',
        'single_group_path' => 'getSingleGroupPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_list'] = isset($data['cluster_list']) ? $data['cluster_list'] : null;
        $this->container['host_list'] = isset($data['host_list']) ? $data['host_list'] : null;
        $this->container['leaf_group_id_list'] = isset($data['leaf_group_id_list']) ? $data['leaf_group_id_list'] : null;
        $this->container['single_group_path'] = isset($data['single_group_path']) ? $data['single_group_path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_list
     *
     * @return \Volcengine\Seccenter20240508\Model\ClusterListForListWhiteListsOutput[]
     */
    public function getClusterList()
    {
        return $this->container['cluster_list'];
    }

    /**
     * Sets cluster_list
     *
     * @param \Volcengine\Seccenter20240508\Model\ClusterListForListWhiteListsOutput[] $cluster_list cluster_list
     *
     * @return $this
     */
    public function setClusterList($cluster_list)
    {
        $this->container['cluster_list'] = $cluster_list;

        return $this;
    }

    /**
     * Gets host_list
     *
     * @return \Volcengine\Seccenter20240508\Model\HostListForListWhiteListsOutput[]
     */
    public function getHostList()
    {
        return $this->container['host_list'];
    }

    /**
     * Sets host_list
     *
     * @param \Volcengine\Seccenter20240508\Model\HostListForListWhiteListsOutput[] $host_list host_list
     *
     * @return $this
     */
    public function setHostList($host_list)
    {
        $this->container['host_list'] = $host_list;

        return $this;
    }

    /**
     * Gets leaf_group_id_list
     *
     * @return string[]
     */
    public function getLeafGroupIdList()
    {
        return $this->container['leaf_group_id_list'];
    }

    /**
     * Sets leaf_group_id_list
     *
     * @param string[] $leaf_group_id_list leaf_group_id_list
     *
     * @return $this
     */
    public function setLeafGroupIdList($leaf_group_id_list)
    {
        $this->container['leaf_group_id_list'] = $leaf_group_id_list;

        return $this;
    }

    /**
     * Gets single_group_path
     *
     * @return string
     */
    public function getSingleGroupPath()
    {
        return $this->container['single_group_path'];
    }

    /**
     * Sets single_group_path
     *
     * @param string $single_group_path single_group_path
     *
     * @return $this
     */
    public function setSingleGroupPath($single_group_path)
    {
        $this->container['single_group_path'] = $single_group_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

