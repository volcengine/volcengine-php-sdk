<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HostInfoForGetVirusAlarmSummaryInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HostInfoForGetVirusAlarmSummaryInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'cloud_providers' => 'string[]',
        'container_image' => 'string',
        'container_name' => 'string',
        'hostname' => 'string',
        'in_ip_list' => 'string[]',
        'leaf_group_ids' => 'string[]',
        'mlp_instance_id' => 'string',
        'os' => 'string',
        'os_platform' => 'string',
        'out_ip_list' => 'string[]',
        'region' => 'string',
        'tag_list' => 'string[]',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'cloud_providers' => null,
        'container_image' => null,
        'container_name' => null,
        'hostname' => null,
        'in_ip_list' => null,
        'leaf_group_ids' => null,
        'mlp_instance_id' => null,
        'os' => null,
        'os_platform' => null,
        'out_ip_list' => null,
        'region' => null,
        'tag_list' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'cloud_providers' => 'CloudProviders',
        'container_image' => 'ContainerImage',
        'container_name' => 'ContainerName',
        'hostname' => 'Hostname',
        'in_ip_list' => 'InIPList',
        'leaf_group_ids' => 'LeafGroupIDs',
        'mlp_instance_id' => 'MlpInstanceID',
        'os' => 'Os',
        'os_platform' => 'OsPlatform',
        'out_ip_list' => 'OutIPList',
        'region' => 'Region',
        'tag_list' => 'TagList',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'cloud_providers' => 'setCloudProviders',
        'container_image' => 'setContainerImage',
        'container_name' => 'setContainerName',
        'hostname' => 'setHostname',
        'in_ip_list' => 'setInIpList',
        'leaf_group_ids' => 'setLeafGroupIds',
        'mlp_instance_id' => 'setMlpInstanceId',
        'os' => 'setOs',
        'os_platform' => 'setOsPlatform',
        'out_ip_list' => 'setOutIpList',
        'region' => 'setRegion',
        'tag_list' => 'setTagList',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'cloud_providers' => 'getCloudProviders',
        'container_image' => 'getContainerImage',
        'container_name' => 'getContainerName',
        'hostname' => 'getHostname',
        'in_ip_list' => 'getInIpList',
        'leaf_group_ids' => 'getLeafGroupIds',
        'mlp_instance_id' => 'getMlpInstanceId',
        'os' => 'getOs',
        'os_platform' => 'getOsPlatform',
        'out_ip_list' => 'getOutIpList',
        'region' => 'getRegion',
        'tag_list' => 'getTagList',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['cloud_providers'] = isset($data['cloud_providers']) ? $data['cloud_providers'] : null;
        $this->container['container_image'] = isset($data['container_image']) ? $data['container_image'] : null;
        $this->container['container_name'] = isset($data['container_name']) ? $data['container_name'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['in_ip_list'] = isset($data['in_ip_list']) ? $data['in_ip_list'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['mlp_instance_id'] = isset($data['mlp_instance_id']) ? $data['mlp_instance_id'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['os_platform'] = isset($data['os_platform']) ? $data['os_platform'] : null;
        $this->container['out_ip_list'] = isset($data['out_ip_list']) ? $data['out_ip_list'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['tag_list'] = isset($data['tag_list']) ? $data['tag_list'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets cloud_providers
     *
     * @return string[]
     */
    public function getCloudProviders()
    {
        return $this->container['cloud_providers'];
    }

    /**
     * Sets cloud_providers
     *
     * @param string[] $cloud_providers cloud_providers
     *
     * @return $this
     */
    public function setCloudProviders($cloud_providers)
    {
        $this->container['cloud_providers'] = $cloud_providers;

        return $this;
    }

    /**
     * Gets container_image
     *
     * @return string
     */
    public function getContainerImage()
    {
        return $this->container['container_image'];
    }

    /**
     * Sets container_image
     *
     * @param string $container_image container_image
     *
     * @return $this
     */
    public function setContainerImage($container_image)
    {
        $this->container['container_image'] = $container_image;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string $container_name container_name
     *
     * @return $this
     */
    public function setContainerName($container_name)
    {
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets in_ip_list
     *
     * @return string[]
     */
    public function getInIpList()
    {
        return $this->container['in_ip_list'];
    }

    /**
     * Sets in_ip_list
     *
     * @param string[] $in_ip_list in_ip_list
     *
     * @return $this
     */
    public function setInIpList($in_ip_list)
    {
        $this->container['in_ip_list'] = $in_ip_list;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets mlp_instance_id
     *
     * @return string
     */
    public function getMlpInstanceId()
    {
        return $this->container['mlp_instance_id'];
    }

    /**
     * Sets mlp_instance_id
     *
     * @param string $mlp_instance_id mlp_instance_id
     *
     * @return $this
     */
    public function setMlpInstanceId($mlp_instance_id)
    {
        $this->container['mlp_instance_id'] = $mlp_instance_id;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets os_platform
     *
     * @return string
     */
    public function getOsPlatform()
    {
        return $this->container['os_platform'];
    }

    /**
     * Sets os_platform
     *
     * @param string $os_platform os_platform
     *
     * @return $this
     */
    public function setOsPlatform($os_platform)
    {
        $this->container['os_platform'] = $os_platform;

        return $this;
    }

    /**
     * Gets out_ip_list
     *
     * @return string[]
     */
    public function getOutIpList()
    {
        return $this->container['out_ip_list'];
    }

    /**
     * Sets out_ip_list
     *
     * @param string[] $out_ip_list out_ip_list
     *
     * @return $this
     */
    public function setOutIpList($out_ip_list)
    {
        $this->container['out_ip_list'] = $out_ip_list;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets tag_list
     *
     * @return string[]
     */
    public function getTagList()
    {
        return $this->container['tag_list'];
    }

    /**
     * Sets tag_list
     *
     * @param string[] $tag_list tag_list
     *
     * @return $this
     */
    public function setTagList($tag_list)
    {
        $this->container['tag_list'] = $tag_list;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

