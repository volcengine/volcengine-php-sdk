<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DownloadVulListByPodRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DownloadVulListByPodRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'asset_id' => 'string',
        'asset_type' => 'string',
        'cluster_id' => 'string',
        'cluster_name' => 'string',
        'conditions' => '\Volcengine\Seccenter20240508\Model\ConditionsForDownloadVulListByPodInput',
        'id_list' => 'string[]',
        'namespace' => 'string',
        'status' => 'string[]',
        'vuln_type_list' => 'string[]',
        'workload_id' => 'string',
        'workload_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'asset_id' => null,
        'asset_type' => null,
        'cluster_id' => null,
        'cluster_name' => null,
        'conditions' => null,
        'id_list' => null,
        'namespace' => null,
        'status' => null,
        'vuln_type_list' => null,
        'workload_id' => null,
        'workload_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'asset_id' => 'AssetID',
        'asset_type' => 'AssetType',
        'cluster_id' => 'ClusterID',
        'cluster_name' => 'ClusterName',
        'conditions' => 'Conditions',
        'id_list' => 'IDList',
        'namespace' => 'Namespace',
        'status' => 'Status',
        'vuln_type_list' => 'VulnTypeList',
        'workload_id' => 'WorkloadID',
        'workload_name' => 'WorkloadName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'asset_id' => 'setAssetId',
        'asset_type' => 'setAssetType',
        'cluster_id' => 'setClusterId',
        'cluster_name' => 'setClusterName',
        'conditions' => 'setConditions',
        'id_list' => 'setIdList',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'vuln_type_list' => 'setVulnTypeList',
        'workload_id' => 'setWorkloadId',
        'workload_name' => 'setWorkloadName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'asset_id' => 'getAssetId',
        'asset_type' => 'getAssetType',
        'cluster_id' => 'getClusterId',
        'cluster_name' => 'getClusterName',
        'conditions' => 'getConditions',
        'id_list' => 'getIdList',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'vuln_type_list' => 'getVulnTypeList',
        'workload_id' => 'getWorkloadId',
        'workload_name' => 'getWorkloadName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['cluster_name'] = isset($data['cluster_name']) ? $data['cluster_name'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['id_list'] = isset($data['id_list']) ? $data['id_list'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['vuln_type_list'] = isset($data['vuln_type_list']) ? $data['vuln_type_list'] : null;
        $this->container['workload_id'] = isset($data['workload_id']) ? $data['workload_id'] : null;
        $this->container['workload_name'] = isset($data['workload_name']) ? $data['workload_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cluster_id'] === null) {
            $invalidProperties[] = "'cluster_id' can't be null";
        }
        if ($this->container['cluster_name'] === null) {
            $invalidProperties[] = "'cluster_name' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['workload_id'] === null) {
            $invalidProperties[] = "'workload_id' can't be null";
        }
        if ($this->container['workload_name'] === null) {
            $invalidProperties[] = "'workload_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id asset_id
     *
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return string
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string $asset_type asset_type
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets cluster_name
     *
     * @return string
     */
    public function getClusterName()
    {
        return $this->container['cluster_name'];
    }

    /**
     * Sets cluster_name
     *
     * @param string $cluster_name cluster_name
     *
     * @return $this
     */
    public function setClusterName($cluster_name)
    {
        $this->container['cluster_name'] = $cluster_name;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Volcengine\Seccenter20240508\Model\ConditionsForDownloadVulListByPodInput
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Volcengine\Seccenter20240508\Model\ConditionsForDownloadVulListByPodInput $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets id_list
     *
     * @return string[]
     */
    public function getIdList()
    {
        return $this->container['id_list'];
    }

    /**
     * Sets id_list
     *
     * @param string[] $id_list id_list
     *
     * @return $this
     */
    public function setIdList($id_list)
    {
        $this->container['id_list'] = $id_list;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string[] $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vuln_type_list
     *
     * @return string[]
     */
    public function getVulnTypeList()
    {
        return $this->container['vuln_type_list'];
    }

    /**
     * Sets vuln_type_list
     *
     * @param string[] $vuln_type_list vuln_type_list
     *
     * @return $this
     */
    public function setVulnTypeList($vuln_type_list)
    {
        $this->container['vuln_type_list'] = $vuln_type_list;

        return $this;
    }

    /**
     * Gets workload_id
     *
     * @return string
     */
    public function getWorkloadId()
    {
        return $this->container['workload_id'];
    }

    /**
     * Sets workload_id
     *
     * @param string $workload_id workload_id
     *
     * @return $this
     */
    public function setWorkloadId($workload_id)
    {
        $this->container['workload_id'] = $workload_id;

        return $this;
    }

    /**
     * Gets workload_name
     *
     * @return string
     */
    public function getWorkloadName()
    {
        return $this->container['workload_name'];
    }

    /**
     * Sets workload_name
     *
     * @param string $workload_name workload_name
     *
     * @return $this
     */
    public function setWorkloadName($workload_name)
    {
        $this->container['workload_name'] = $workload_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

