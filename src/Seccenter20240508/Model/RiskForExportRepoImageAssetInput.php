<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RiskForExportRepoImageAssetInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RiskForExportRepoImageAssetInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'compl' => 'string[]',
        'senfile' => 'string[]',
        'virus' => 'bool',
        'vuln' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'compl' => null,
        'senfile' => null,
        'virus' => null,
        'vuln' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'compl' => 'Compl',
        'senfile' => 'Senfile',
        'virus' => 'Virus',
        'vuln' => 'Vuln'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'compl' => 'setCompl',
        'senfile' => 'setSenfile',
        'virus' => 'setVirus',
        'vuln' => 'setVuln'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'compl' => 'getCompl',
        'senfile' => 'getSenfile',
        'virus' => 'getVirus',
        'vuln' => 'getVuln'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['compl'] = isset($data['compl']) ? $data['compl'] : null;
        $this->container['senfile'] = isset($data['senfile']) ? $data['senfile'] : null;
        $this->container['virus'] = isset($data['virus']) ? $data['virus'] : null;
        $this->container['vuln'] = isset($data['vuln']) ? $data['vuln'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets compl
     *
     * @return string[]
     */
    public function getCompl()
    {
        return $this->container['compl'];
    }

    /**
     * Sets compl
     *
     * @param string[] $compl compl
     *
     * @return $this
     */
    public function setCompl($compl)
    {
        $this->container['compl'] = $compl;

        return $this;
    }

    /**
     * Gets senfile
     *
     * @return string[]
     */
    public function getSenfile()
    {
        return $this->container['senfile'];
    }

    /**
     * Sets senfile
     *
     * @param string[] $senfile senfile
     *
     * @return $this
     */
    public function setSenfile($senfile)
    {
        $this->container['senfile'] = $senfile;

        return $this;
    }

    /**
     * Gets virus
     *
     * @return bool
     */
    public function getVirus()
    {
        return $this->container['virus'];
    }

    /**
     * Sets virus
     *
     * @param bool $virus virus
     *
     * @return $this
     */
    public function setVirus($virus)
    {
        $this->container['virus'] = $virus;

        return $this;
    }

    /**
     * Gets vuln
     *
     * @return string[]
     */
    public function getVuln()
    {
        return $this->container['vuln'];
    }

    /**
     * Sets vuln
     *
     * @param string[] $vuln vuln
     *
     * @return $this
     */
    public function setVuln($vuln)
    {
        $this->container['vuln'] = $vuln;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

