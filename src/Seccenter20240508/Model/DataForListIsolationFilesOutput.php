<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListIsolationFilesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListIsolationFilesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'agent_id' => 'string',
        'alarm_id' => 'string',
        'alarm_type' => 'string',
        'auto_isolate' => 'bool',
        'error_reason' => 'string',
        'file_hash' => 'string',
        'file_path' => 'string',
        'filebox_id' => 'string',
        'group_id' => 'string',
        'host' => '\Volcengine\Seccenter20240508\Model\HostForListIsolationFilesOutput',
        'insert_time' => 'int',
        'is_upload' => 'bool',
        'saved_file_name' => 'string',
        'status' => 'int',
        'task_id' => 'string',
        'top_group_id' => 'string',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'agent_id' => null,
        'alarm_id' => null,
        'alarm_type' => null,
        'auto_isolate' => null,
        'error_reason' => null,
        'file_hash' => null,
        'file_path' => null,
        'filebox_id' => null,
        'group_id' => null,
        'host' => null,
        'insert_time' => 'int32',
        'is_upload' => null,
        'saved_file_name' => null,
        'status' => 'int32',
        'task_id' => null,
        'top_group_id' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'agent_id' => 'AgentID',
        'alarm_id' => 'AlarmID',
        'alarm_type' => 'AlarmType',
        'auto_isolate' => 'AutoIsolate',
        'error_reason' => 'ErrorReason',
        'file_hash' => 'FileHash',
        'file_path' => 'FilePath',
        'filebox_id' => 'FileboxID',
        'group_id' => 'GroupID',
        'host' => 'Host',
        'insert_time' => 'InsertTime',
        'is_upload' => 'IsUpload',
        'saved_file_name' => 'SavedFileName',
        'status' => 'Status',
        'task_id' => 'TaskID',
        'top_group_id' => 'TopGroupID',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'agent_id' => 'setAgentId',
        'alarm_id' => 'setAlarmId',
        'alarm_type' => 'setAlarmType',
        'auto_isolate' => 'setAutoIsolate',
        'error_reason' => 'setErrorReason',
        'file_hash' => 'setFileHash',
        'file_path' => 'setFilePath',
        'filebox_id' => 'setFileboxId',
        'group_id' => 'setGroupId',
        'host' => 'setHost',
        'insert_time' => 'setInsertTime',
        'is_upload' => 'setIsUpload',
        'saved_file_name' => 'setSavedFileName',
        'status' => 'setStatus',
        'task_id' => 'setTaskId',
        'top_group_id' => 'setTopGroupId',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'agent_id' => 'getAgentId',
        'alarm_id' => 'getAlarmId',
        'alarm_type' => 'getAlarmType',
        'auto_isolate' => 'getAutoIsolate',
        'error_reason' => 'getErrorReason',
        'file_hash' => 'getFileHash',
        'file_path' => 'getFilePath',
        'filebox_id' => 'getFileboxId',
        'group_id' => 'getGroupId',
        'host' => 'getHost',
        'insert_time' => 'getInsertTime',
        'is_upload' => 'getIsUpload',
        'saved_file_name' => 'getSavedFileName',
        'status' => 'getStatus',
        'task_id' => 'getTaskId',
        'top_group_id' => 'getTopGroupId',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['alarm_id'] = isset($data['alarm_id']) ? $data['alarm_id'] : null;
        $this->container['alarm_type'] = isset($data['alarm_type']) ? $data['alarm_type'] : null;
        $this->container['auto_isolate'] = isset($data['auto_isolate']) ? $data['auto_isolate'] : null;
        $this->container['error_reason'] = isset($data['error_reason']) ? $data['error_reason'] : null;
        $this->container['file_hash'] = isset($data['file_hash']) ? $data['file_hash'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['filebox_id'] = isset($data['filebox_id']) ? $data['filebox_id'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['insert_time'] = isset($data['insert_time']) ? $data['insert_time'] : null;
        $this->container['is_upload'] = isset($data['is_upload']) ? $data['is_upload'] : null;
        $this->container['saved_file_name'] = isset($data['saved_file_name']) ? $data['saved_file_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets alarm_id
     *
     * @return string
     */
    public function getAlarmId()
    {
        return $this->container['alarm_id'];
    }

    /**
     * Sets alarm_id
     *
     * @param string $alarm_id alarm_id
     *
     * @return $this
     */
    public function setAlarmId($alarm_id)
    {
        $this->container['alarm_id'] = $alarm_id;

        return $this;
    }

    /**
     * Gets alarm_type
     *
     * @return string
     */
    public function getAlarmType()
    {
        return $this->container['alarm_type'];
    }

    /**
     * Sets alarm_type
     *
     * @param string $alarm_type alarm_type
     *
     * @return $this
     */
    public function setAlarmType($alarm_type)
    {
        $this->container['alarm_type'] = $alarm_type;

        return $this;
    }

    /**
     * Gets auto_isolate
     *
     * @return bool
     */
    public function getAutoIsolate()
    {
        return $this->container['auto_isolate'];
    }

    /**
     * Sets auto_isolate
     *
     * @param bool $auto_isolate auto_isolate
     *
     * @return $this
     */
    public function setAutoIsolate($auto_isolate)
    {
        $this->container['auto_isolate'] = $auto_isolate;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string $error_reason error_reason
     *
     * @return $this
     */
    public function setErrorReason($error_reason)
    {
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets file_hash
     *
     * @return string
     */
    public function getFileHash()
    {
        return $this->container['file_hash'];
    }

    /**
     * Sets file_hash
     *
     * @param string $file_hash file_hash
     *
     * @return $this
     */
    public function setFileHash($file_hash)
    {
        $this->container['file_hash'] = $file_hash;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path file_path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets filebox_id
     *
     * @return string
     */
    public function getFileboxId()
    {
        return $this->container['filebox_id'];
    }

    /**
     * Sets filebox_id
     *
     * @param string $filebox_id filebox_id
     *
     * @return $this
     */
    public function setFileboxId($filebox_id)
    {
        $this->container['filebox_id'] = $filebox_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets host
     *
     * @return \Volcengine\Seccenter20240508\Model\HostForListIsolationFilesOutput
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param \Volcengine\Seccenter20240508\Model\HostForListIsolationFilesOutput $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets insert_time
     *
     * @return int
     */
    public function getInsertTime()
    {
        return $this->container['insert_time'];
    }

    /**
     * Sets insert_time
     *
     * @param int $insert_time insert_time
     *
     * @return $this
     */
    public function setInsertTime($insert_time)
    {
        $this->container['insert_time'] = $insert_time;

        return $this;
    }

    /**
     * Gets is_upload
     *
     * @return bool
     */
    public function getIsUpload()
    {
        return $this->container['is_upload'];
    }

    /**
     * Sets is_upload
     *
     * @param bool $is_upload is_upload
     *
     * @return $this
     */
    public function setIsUpload($is_upload)
    {
        $this->container['is_upload'] = $is_upload;

        return $this;
    }

    /**
     * Gets saved_file_name
     *
     * @return string
     */
    public function getSavedFileName()
    {
        return $this->container['saved_file_name'];
    }

    /**
     * Sets saved_file_name
     *
     * @param string $saved_file_name saved_file_name
     *
     * @return $this
     */
    public function setSavedFileName($saved_file_name)
    {
        $this->container['saved_file_name'] = $saved_file_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

