<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BaseAlarmInfoForGetOneRaspAlarmOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseAlarmInfoForGetOneRaspAlarmOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_type' => 'string',
        'attack_id_list' => 'string[]',
        'create_time' => 'int',
        'desc' => 'string',
        'docker' => 'string',
        'handle_time' => 'int',
        'handle_user' => 'string',
        'level' => 'string',
        'name' => 'string',
        'status' => 'int',
        'suggest' => 'string',
        'trace_id' => 'string',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_type' => null,
        'attack_id_list' => null,
        'create_time' => 'int32',
        'desc' => null,
        'docker' => null,
        'handle_time' => 'int32',
        'handle_user' => null,
        'level' => null,
        'name' => null,
        'status' => 'int32',
        'suggest' => null,
        'trace_id' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_type' => 'AlarmType',
        'attack_id_list' => 'AttackIDList',
        'create_time' => 'CreateTime',
        'desc' => 'Desc',
        'docker' => 'Docker',
        'handle_time' => 'HandleTime',
        'handle_user' => 'HandleUser',
        'level' => 'Level',
        'name' => 'Name',
        'status' => 'Status',
        'suggest' => 'Suggest',
        'trace_id' => 'TraceID',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_type' => 'setAlarmType',
        'attack_id_list' => 'setAttackIdList',
        'create_time' => 'setCreateTime',
        'desc' => 'setDesc',
        'docker' => 'setDocker',
        'handle_time' => 'setHandleTime',
        'handle_user' => 'setHandleUser',
        'level' => 'setLevel',
        'name' => 'setName',
        'status' => 'setStatus',
        'suggest' => 'setSuggest',
        'trace_id' => 'setTraceId',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_type' => 'getAlarmType',
        'attack_id_list' => 'getAttackIdList',
        'create_time' => 'getCreateTime',
        'desc' => 'getDesc',
        'docker' => 'getDocker',
        'handle_time' => 'getHandleTime',
        'handle_user' => 'getHandleUser',
        'level' => 'getLevel',
        'name' => 'getName',
        'status' => 'getStatus',
        'suggest' => 'getSuggest',
        'trace_id' => 'getTraceId',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_type'] = isset($data['alarm_type']) ? $data['alarm_type'] : null;
        $this->container['attack_id_list'] = isset($data['attack_id_list']) ? $data['attack_id_list'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['docker'] = isset($data['docker']) ? $data['docker'] : null;
        $this->container['handle_time'] = isset($data['handle_time']) ? $data['handle_time'] : null;
        $this->container['handle_user'] = isset($data['handle_user']) ? $data['handle_user'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suggest'] = isset($data['suggest']) ? $data['suggest'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_type
     *
     * @return string
     */
    public function getAlarmType()
    {
        return $this->container['alarm_type'];
    }

    /**
     * Sets alarm_type
     *
     * @param string $alarm_type alarm_type
     *
     * @return $this
     */
    public function setAlarmType($alarm_type)
    {
        $this->container['alarm_type'] = $alarm_type;

        return $this;
    }

    /**
     * Gets attack_id_list
     *
     * @return string[]
     */
    public function getAttackIdList()
    {
        return $this->container['attack_id_list'];
    }

    /**
     * Sets attack_id_list
     *
     * @param string[] $attack_id_list attack_id_list
     *
     * @return $this
     */
    public function setAttackIdList($attack_id_list)
    {
        $this->container['attack_id_list'] = $attack_id_list;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string $desc desc
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets docker
     *
     * @return string
     */
    public function getDocker()
    {
        return $this->container['docker'];
    }

    /**
     * Sets docker
     *
     * @param string $docker docker
     *
     * @return $this
     */
    public function setDocker($docker)
    {
        $this->container['docker'] = $docker;

        return $this;
    }

    /**
     * Gets handle_time
     *
     * @return int
     */
    public function getHandleTime()
    {
        return $this->container['handle_time'];
    }

    /**
     * Sets handle_time
     *
     * @param int $handle_time handle_time
     *
     * @return $this
     */
    public function setHandleTime($handle_time)
    {
        $this->container['handle_time'] = $handle_time;

        return $this;
    }

    /**
     * Gets handle_user
     *
     * @return string
     */
    public function getHandleUser()
    {
        return $this->container['handle_user'];
    }

    /**
     * Sets handle_user
     *
     * @param string $handle_user handle_user
     *
     * @return $this
     */
    public function setHandleUser($handle_user)
    {
        $this->container['handle_user'] = $handle_user;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suggest
     *
     * @return string
     */
    public function getSuggest()
    {
        return $this->container['suggest'];
    }

    /**
     * Sets suggest
     *
     * @param string $suggest suggest
     *
     * @return $this
     */
    public function setSuggest($suggest)
    {
        $this->container['suggest'] = $suggest;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

