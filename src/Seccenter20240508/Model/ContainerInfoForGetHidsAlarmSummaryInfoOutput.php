<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ContainerInfoForGetHidsAlarmSummaryInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContainerInfoForGetHidsAlarmSummaryInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'container_create_time' => 'string',
        'container_create_timestamp' => 'int',
        'container_host_name' => 'string',
        'container_id' => 'string',
        'container_ip' => 'string',
        'container_name' => 'string',
        'container_net_mode' => 'string',
        'container_pns' => 'string',
        'container_query_result' => 'string',
        'container_runtime' => 'string',
        'container_state' => 'string',
        'image_id' => 'string',
        'image_name' => 'string',
        'pod_id' => 'string',
        'pod_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'container_create_time' => null,
        'container_create_timestamp' => 'int32',
        'container_host_name' => null,
        'container_id' => null,
        'container_ip' => null,
        'container_name' => null,
        'container_net_mode' => null,
        'container_pns' => null,
        'container_query_result' => null,
        'container_runtime' => null,
        'container_state' => null,
        'image_id' => null,
        'image_name' => null,
        'pod_id' => null,
        'pod_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'container_create_time' => 'ContainerCreateTime',
        'container_create_timestamp' => 'ContainerCreateTimestamp',
        'container_host_name' => 'ContainerHostName',
        'container_id' => 'ContainerID',
        'container_ip' => 'ContainerIP',
        'container_name' => 'ContainerName',
        'container_net_mode' => 'ContainerNetMode',
        'container_pns' => 'ContainerPns',
        'container_query_result' => 'ContainerQueryResult',
        'container_runtime' => 'ContainerRuntime',
        'container_state' => 'ContainerState',
        'image_id' => 'ImageID',
        'image_name' => 'ImageName',
        'pod_id' => 'PodID',
        'pod_name' => 'PodName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'container_create_time' => 'setContainerCreateTime',
        'container_create_timestamp' => 'setContainerCreateTimestamp',
        'container_host_name' => 'setContainerHostName',
        'container_id' => 'setContainerId',
        'container_ip' => 'setContainerIp',
        'container_name' => 'setContainerName',
        'container_net_mode' => 'setContainerNetMode',
        'container_pns' => 'setContainerPns',
        'container_query_result' => 'setContainerQueryResult',
        'container_runtime' => 'setContainerRuntime',
        'container_state' => 'setContainerState',
        'image_id' => 'setImageId',
        'image_name' => 'setImageName',
        'pod_id' => 'setPodId',
        'pod_name' => 'setPodName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'container_create_time' => 'getContainerCreateTime',
        'container_create_timestamp' => 'getContainerCreateTimestamp',
        'container_host_name' => 'getContainerHostName',
        'container_id' => 'getContainerId',
        'container_ip' => 'getContainerIp',
        'container_name' => 'getContainerName',
        'container_net_mode' => 'getContainerNetMode',
        'container_pns' => 'getContainerPns',
        'container_query_result' => 'getContainerQueryResult',
        'container_runtime' => 'getContainerRuntime',
        'container_state' => 'getContainerState',
        'image_id' => 'getImageId',
        'image_name' => 'getImageName',
        'pod_id' => 'getPodId',
        'pod_name' => 'getPodName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['container_create_time'] = isset($data['container_create_time']) ? $data['container_create_time'] : null;
        $this->container['container_create_timestamp'] = isset($data['container_create_timestamp']) ? $data['container_create_timestamp'] : null;
        $this->container['container_host_name'] = isset($data['container_host_name']) ? $data['container_host_name'] : null;
        $this->container['container_id'] = isset($data['container_id']) ? $data['container_id'] : null;
        $this->container['container_ip'] = isset($data['container_ip']) ? $data['container_ip'] : null;
        $this->container['container_name'] = isset($data['container_name']) ? $data['container_name'] : null;
        $this->container['container_net_mode'] = isset($data['container_net_mode']) ? $data['container_net_mode'] : null;
        $this->container['container_pns'] = isset($data['container_pns']) ? $data['container_pns'] : null;
        $this->container['container_query_result'] = isset($data['container_query_result']) ? $data['container_query_result'] : null;
        $this->container['container_runtime'] = isset($data['container_runtime']) ? $data['container_runtime'] : null;
        $this->container['container_state'] = isset($data['container_state']) ? $data['container_state'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['image_name'] = isset($data['image_name']) ? $data['image_name'] : null;
        $this->container['pod_id'] = isset($data['pod_id']) ? $data['pod_id'] : null;
        $this->container['pod_name'] = isset($data['pod_name']) ? $data['pod_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container_create_time
     *
     * @return string
     */
    public function getContainerCreateTime()
    {
        return $this->container['container_create_time'];
    }

    /**
     * Sets container_create_time
     *
     * @param string $container_create_time container_create_time
     *
     * @return $this
     */
    public function setContainerCreateTime($container_create_time)
    {
        $this->container['container_create_time'] = $container_create_time;

        return $this;
    }

    /**
     * Gets container_create_timestamp
     *
     * @return int
     */
    public function getContainerCreateTimestamp()
    {
        return $this->container['container_create_timestamp'];
    }

    /**
     * Sets container_create_timestamp
     *
     * @param int $container_create_timestamp container_create_timestamp
     *
     * @return $this
     */
    public function setContainerCreateTimestamp($container_create_timestamp)
    {
        $this->container['container_create_timestamp'] = $container_create_timestamp;

        return $this;
    }

    /**
     * Gets container_host_name
     *
     * @return string
     */
    public function getContainerHostName()
    {
        return $this->container['container_host_name'];
    }

    /**
     * Sets container_host_name
     *
     * @param string $container_host_name container_host_name
     *
     * @return $this
     */
    public function setContainerHostName($container_host_name)
    {
        $this->container['container_host_name'] = $container_host_name;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return string
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param string $container_id container_id
     *
     * @return $this
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets container_ip
     *
     * @return string
     */
    public function getContainerIp()
    {
        return $this->container['container_ip'];
    }

    /**
     * Sets container_ip
     *
     * @param string $container_ip container_ip
     *
     * @return $this
     */
    public function setContainerIp($container_ip)
    {
        $this->container['container_ip'] = $container_ip;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string $container_name container_name
     *
     * @return $this
     */
    public function setContainerName($container_name)
    {
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets container_net_mode
     *
     * @return string
     */
    public function getContainerNetMode()
    {
        return $this->container['container_net_mode'];
    }

    /**
     * Sets container_net_mode
     *
     * @param string $container_net_mode container_net_mode
     *
     * @return $this
     */
    public function setContainerNetMode($container_net_mode)
    {
        $this->container['container_net_mode'] = $container_net_mode;

        return $this;
    }

    /**
     * Gets container_pns
     *
     * @return string
     */
    public function getContainerPns()
    {
        return $this->container['container_pns'];
    }

    /**
     * Sets container_pns
     *
     * @param string $container_pns container_pns
     *
     * @return $this
     */
    public function setContainerPns($container_pns)
    {
        $this->container['container_pns'] = $container_pns;

        return $this;
    }

    /**
     * Gets container_query_result
     *
     * @return string
     */
    public function getContainerQueryResult()
    {
        return $this->container['container_query_result'];
    }

    /**
     * Sets container_query_result
     *
     * @param string $container_query_result container_query_result
     *
     * @return $this
     */
    public function setContainerQueryResult($container_query_result)
    {
        $this->container['container_query_result'] = $container_query_result;

        return $this;
    }

    /**
     * Gets container_runtime
     *
     * @return string
     */
    public function getContainerRuntime()
    {
        return $this->container['container_runtime'];
    }

    /**
     * Sets container_runtime
     *
     * @param string $container_runtime container_runtime
     *
     * @return $this
     */
    public function setContainerRuntime($container_runtime)
    {
        $this->container['container_runtime'] = $container_runtime;

        return $this;
    }

    /**
     * Gets container_state
     *
     * @return string
     */
    public function getContainerState()
    {
        return $this->container['container_state'];
    }

    /**
     * Sets container_state
     *
     * @param string $container_state container_state
     *
     * @return $this
     */
    public function setContainerState($container_state)
    {
        $this->container['container_state'] = $container_state;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string $image_name image_name
     *
     * @return $this
     */
    public function setImageName($image_name)
    {
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets pod_id
     *
     * @return string
     */
    public function getPodId()
    {
        return $this->container['pod_id'];
    }

    /**
     * Sets pod_id
     *
     * @param string $pod_id pod_id
     *
     * @return $this
     */
    public function setPodId($pod_id)
    {
        $this->container['pod_id'] = $pod_id;

        return $this;
    }

    /**
     * Gets pod_name
     *
     * @return string
     */
    public function getPodName()
    {
        return $this->container['pod_name'];
    }

    /**
     * Sets pod_name
     *
     * @param string $pod_name pod_name
     *
     * @return $this
     */
    public function setPodName($pod_name)
    {
        $this->container['pod_name'] = $pod_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

