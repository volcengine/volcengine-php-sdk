<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetDevDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetDevDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'asset_id' => 'string',
        'asset_name' => 'string',
        'create_time' => 'int',
        'flavor_id' => 'string',
        'image_id' => 'string',
        'platform' => 'string',
        'ports' => '\Volcengine\Seccenter20240508\Model\PortForGetDevDetailOutput[]',
        'private_ip' => 'string',
        'public_ip' => 'string',
        'region' => 'string',
        'status' => 'string',
        'storages' => '\Volcengine\Seccenter20240508\Model\StorageForGetDevDetailOutput[]',
        'volume' => '\Volcengine\Seccenter20240508\Model\VolumeForGetDevDetailOutput',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'asset_id' => null,
        'asset_name' => null,
        'create_time' => 'int32',
        'flavor_id' => null,
        'image_id' => null,
        'platform' => null,
        'ports' => null,
        'private_ip' => null,
        'public_ip' => null,
        'region' => null,
        'status' => null,
        'storages' => null,
        'volume' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'asset_id' => 'AssetId',
        'asset_name' => 'AssetName',
        'create_time' => 'CreateTime',
        'flavor_id' => 'FlavorId',
        'image_id' => 'ImageID',
        'platform' => 'Platform',
        'ports' => 'Ports',
        'private_ip' => 'PrivateIP',
        'public_ip' => 'PublicIP',
        'region' => 'Region',
        'status' => 'Status',
        'storages' => 'Storages',
        'volume' => 'Volume',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'asset_id' => 'setAssetId',
        'asset_name' => 'setAssetName',
        'create_time' => 'setCreateTime',
        'flavor_id' => 'setFlavorId',
        'image_id' => 'setImageId',
        'platform' => 'setPlatform',
        'ports' => 'setPorts',
        'private_ip' => 'setPrivateIp',
        'public_ip' => 'setPublicIp',
        'region' => 'setRegion',
        'status' => 'setStatus',
        'storages' => 'setStorages',
        'volume' => 'setVolume',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'asset_id' => 'getAssetId',
        'asset_name' => 'getAssetName',
        'create_time' => 'getCreateTime',
        'flavor_id' => 'getFlavorId',
        'image_id' => 'getImageId',
        'platform' => 'getPlatform',
        'ports' => 'getPorts',
        'private_ip' => 'getPrivateIp',
        'public_ip' => 'getPublicIp',
        'region' => 'getRegion',
        'status' => 'getStatus',
        'storages' => 'getStorages',
        'volume' => 'getVolume',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['asset_name'] = isset($data['asset_name']) ? $data['asset_name'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['flavor_id'] = isset($data['flavor_id']) ? $data['flavor_id'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['private_ip'] = isset($data['private_ip']) ? $data['private_ip'] : null;
        $this->container['public_ip'] = isset($data['public_ip']) ? $data['public_ip'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['storages'] = isset($data['storages']) ? $data['storages'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id asset_id
     *
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets asset_name
     *
     * @return string
     */
    public function getAssetName()
    {
        return $this->container['asset_name'];
    }

    /**
     * Sets asset_name
     *
     * @param string $asset_name asset_name
     *
     * @return $this
     */
    public function setAssetName($asset_name)
    {
        $this->container['asset_name'] = $asset_name;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets flavor_id
     *
     * @return string
     */
    public function getFlavorId()
    {
        return $this->container['flavor_id'];
    }

    /**
     * Sets flavor_id
     *
     * @param string $flavor_id flavor_id
     *
     * @return $this
     */
    public function setFlavorId($flavor_id)
    {
        $this->container['flavor_id'] = $flavor_id;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Volcengine\Seccenter20240508\Model\PortForGetDevDetailOutput[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Volcengine\Seccenter20240508\Model\PortForGetDevDetailOutput[] $ports ports
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets private_ip
     *
     * @return string
     */
    public function getPrivateIp()
    {
        return $this->container['private_ip'];
    }

    /**
     * Sets private_ip
     *
     * @param string $private_ip private_ip
     *
     * @return $this
     */
    public function setPrivateIp($private_ip)
    {
        $this->container['private_ip'] = $private_ip;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string $public_ip public_ip
     *
     * @return $this
     */
    public function setPublicIp($public_ip)
    {
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storages
     *
     * @return \Volcengine\Seccenter20240508\Model\StorageForGetDevDetailOutput[]
     */
    public function getStorages()
    {
        return $this->container['storages'];
    }

    /**
     * Sets storages
     *
     * @param \Volcengine\Seccenter20240508\Model\StorageForGetDevDetailOutput[] $storages storages
     *
     * @return $this
     */
    public function setStorages($storages)
    {
        $this->container['storages'] = $storages;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return \Volcengine\Seccenter20240508\Model\VolumeForGetDevDetailOutput
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param \Volcengine\Seccenter20240508\Model\VolumeForGetDevDetailOutput $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

