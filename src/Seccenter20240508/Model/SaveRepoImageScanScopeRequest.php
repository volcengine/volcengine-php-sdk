<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SaveRepoImageScanScopeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SaveRepoImageScanScopeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_size_limit' => 'int',
        'latest_push' => 'int',
        'namespace_ids' => 'string[]',
        'scan_items' => 'string[]',
        'timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image_size_limit' => 'int32',
        'latest_push' => 'int32',
        'namespace_ids' => null,
        'scan_items' => null,
        'timeout' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_size_limit' => 'ImageSizeLimit',
        'latest_push' => 'LatestPush',
        'namespace_ids' => 'NamespaceIDs',
        'scan_items' => 'ScanItems',
        'timeout' => 'Timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_size_limit' => 'setImageSizeLimit',
        'latest_push' => 'setLatestPush',
        'namespace_ids' => 'setNamespaceIds',
        'scan_items' => 'setScanItems',
        'timeout' => 'setTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_size_limit' => 'getImageSizeLimit',
        'latest_push' => 'getLatestPush',
        'namespace_ids' => 'getNamespaceIds',
        'scan_items' => 'getScanItems',
        'timeout' => 'getTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_size_limit'] = isset($data['image_size_limit']) ? $data['image_size_limit'] : null;
        $this->container['latest_push'] = isset($data['latest_push']) ? $data['latest_push'] : null;
        $this->container['namespace_ids'] = isset($data['namespace_ids']) ? $data['namespace_ids'] : null;
        $this->container['scan_items'] = isset($data['scan_items']) ? $data['scan_items'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['image_size_limit'] === null) {
            $invalidProperties[] = "'image_size_limit' can't be null";
        }
        if ($this->container['latest_push'] === null) {
            $invalidProperties[] = "'latest_push' can't be null";
        }
        if ($this->container['timeout'] === null) {
            $invalidProperties[] = "'timeout' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_size_limit
     *
     * @return int
     */
    public function getImageSizeLimit()
    {
        return $this->container['image_size_limit'];
    }

    /**
     * Sets image_size_limit
     *
     * @param int $image_size_limit image_size_limit
     *
     * @return $this
     */
    public function setImageSizeLimit($image_size_limit)
    {
        $this->container['image_size_limit'] = $image_size_limit;

        return $this;
    }

    /**
     * Gets latest_push
     *
     * @return int
     */
    public function getLatestPush()
    {
        return $this->container['latest_push'];
    }

    /**
     * Sets latest_push
     *
     * @param int $latest_push latest_push
     *
     * @return $this
     */
    public function setLatestPush($latest_push)
    {
        $this->container['latest_push'] = $latest_push;

        return $this;
    }

    /**
     * Gets namespace_ids
     *
     * @return string[]
     */
    public function getNamespaceIds()
    {
        return $this->container['namespace_ids'];
    }

    /**
     * Sets namespace_ids
     *
     * @param string[] $namespace_ids namespace_ids
     *
     * @return $this
     */
    public function setNamespaceIds($namespace_ids)
    {
        $this->container['namespace_ids'] = $namespace_ids;

        return $this;
    }

    /**
     * Gets scan_items
     *
     * @return string[]
     */
    public function getScanItems()
    {
        return $this->container['scan_items'];
    }

    /**
     * Sets scan_items
     *
     * @param string[] $scan_items scan_items
     *
     * @return $this
     */
    public function setScanItems($scan_items)
    {
        $this->container['scan_items'] = $scan_items;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout timeout
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

