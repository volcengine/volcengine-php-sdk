<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CheckInstallAgentClientResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckInstallAgentClientResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_agent_ids' => 'string[]',
        'auto_count' => 'int',
        'current_quota' => '\Volcengine\Seccenter20240508\Model\CurrentQuotaForCheckInstallAgentClientOutput',
        'hit_limit' => 'bool',
        'manual_count' => 'int',
        'request_quota' => '\Volcengine\Seccenter20240508\Model\RequestQuotaForCheckInstallAgentClientOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_agent_ids' => null,
        'auto_count' => 'int32',
        'current_quota' => null,
        'hit_limit' => null,
        'manual_count' => 'int32',
        'request_quota' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_agent_ids' => 'AutoAgentIDs',
        'auto_count' => 'AutoCount',
        'current_quota' => 'CurrentQuota',
        'hit_limit' => 'HitLimit',
        'manual_count' => 'ManualCount',
        'request_quota' => 'RequestQuota'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_agent_ids' => 'setAutoAgentIds',
        'auto_count' => 'setAutoCount',
        'current_quota' => 'setCurrentQuota',
        'hit_limit' => 'setHitLimit',
        'manual_count' => 'setManualCount',
        'request_quota' => 'setRequestQuota'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_agent_ids' => 'getAutoAgentIds',
        'auto_count' => 'getAutoCount',
        'current_quota' => 'getCurrentQuota',
        'hit_limit' => 'getHitLimit',
        'manual_count' => 'getManualCount',
        'request_quota' => 'getRequestQuota'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_agent_ids'] = isset($data['auto_agent_ids']) ? $data['auto_agent_ids'] : null;
        $this->container['auto_count'] = isset($data['auto_count']) ? $data['auto_count'] : null;
        $this->container['current_quota'] = isset($data['current_quota']) ? $data['current_quota'] : null;
        $this->container['hit_limit'] = isset($data['hit_limit']) ? $data['hit_limit'] : null;
        $this->container['manual_count'] = isset($data['manual_count']) ? $data['manual_count'] : null;
        $this->container['request_quota'] = isset($data['request_quota']) ? $data['request_quota'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_agent_ids
     *
     * @return string[]
     */
    public function getAutoAgentIds()
    {
        return $this->container['auto_agent_ids'];
    }

    /**
     * Sets auto_agent_ids
     *
     * @param string[] $auto_agent_ids auto_agent_ids
     *
     * @return $this
     */
    public function setAutoAgentIds($auto_agent_ids)
    {
        $this->container['auto_agent_ids'] = $auto_agent_ids;

        return $this;
    }

    /**
     * Gets auto_count
     *
     * @return int
     */
    public function getAutoCount()
    {
        return $this->container['auto_count'];
    }

    /**
     * Sets auto_count
     *
     * @param int $auto_count auto_count
     *
     * @return $this
     */
    public function setAutoCount($auto_count)
    {
        $this->container['auto_count'] = $auto_count;

        return $this;
    }

    /**
     * Gets current_quota
     *
     * @return \Volcengine\Seccenter20240508\Model\CurrentQuotaForCheckInstallAgentClientOutput
     */
    public function getCurrentQuota()
    {
        return $this->container['current_quota'];
    }

    /**
     * Sets current_quota
     *
     * @param \Volcengine\Seccenter20240508\Model\CurrentQuotaForCheckInstallAgentClientOutput $current_quota current_quota
     *
     * @return $this
     */
    public function setCurrentQuota($current_quota)
    {
        $this->container['current_quota'] = $current_quota;

        return $this;
    }

    /**
     * Gets hit_limit
     *
     * @return bool
     */
    public function getHitLimit()
    {
        return $this->container['hit_limit'];
    }

    /**
     * Sets hit_limit
     *
     * @param bool $hit_limit hit_limit
     *
     * @return $this
     */
    public function setHitLimit($hit_limit)
    {
        $this->container['hit_limit'] = $hit_limit;

        return $this;
    }

    /**
     * Gets manual_count
     *
     * @return int
     */
    public function getManualCount()
    {
        return $this->container['manual_count'];
    }

    /**
     * Sets manual_count
     *
     * @param int $manual_count manual_count
     *
     * @return $this
     */
    public function setManualCount($manual_count)
    {
        $this->container['manual_count'] = $manual_count;

        return $this;
    }

    /**
     * Gets request_quota
     *
     * @return \Volcengine\Seccenter20240508\Model\RequestQuotaForCheckInstallAgentClientOutput
     */
    public function getRequestQuota()
    {
        return $this->container['request_quota'];
    }

    /**
     * Sets request_quota
     *
     * @param \Volcengine\Seccenter20240508\Model\RequestQuotaForCheckInstallAgentClientOutput $request_quota request_quota
     *
     * @return $this
     */
    public function setRequestQuota($request_quota)
    {
        $this->container['request_quota'] = $request_quota;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

