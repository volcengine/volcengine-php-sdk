<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetOneRaspAlarmResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOneRaspAlarmResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_alarm_info' => '\Volcengine\Seccenter20240508\Model\BaseAlarmInfoForGetOneRaspAlarmOutput',
        'base_info' => '\Volcengine\Seccenter20240508\Model\BaseInfoForGetOneRaspAlarmOutput',
        'container_info' => '\Volcengine\Seccenter20240508\Model\ContainerInfoForGetOneRaspAlarmOutput',
        'data_type' => 'string',
        'plus_alarm_info2439' => '\Volcengine\Seccenter20240508\Model\PlusAlarmInfo2439ForGetOneRaspAlarmOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_alarm_info' => null,
        'base_info' => null,
        'container_info' => null,
        'data_type' => null,
        'plus_alarm_info2439' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_alarm_info' => 'BaseAlarmInfo',
        'base_info' => 'BaseInfo',
        'container_info' => 'ContainerInfo',
        'data_type' => 'DataType',
        'plus_alarm_info2439' => 'PlusAlarmInfo2439'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_alarm_info' => 'setBaseAlarmInfo',
        'base_info' => 'setBaseInfo',
        'container_info' => 'setContainerInfo',
        'data_type' => 'setDataType',
        'plus_alarm_info2439' => 'setPlusAlarmInfo2439'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_alarm_info' => 'getBaseAlarmInfo',
        'base_info' => 'getBaseInfo',
        'container_info' => 'getContainerInfo',
        'data_type' => 'getDataType',
        'plus_alarm_info2439' => 'getPlusAlarmInfo2439'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_alarm_info'] = isset($data['base_alarm_info']) ? $data['base_alarm_info'] : null;
        $this->container['base_info'] = isset($data['base_info']) ? $data['base_info'] : null;
        $this->container['container_info'] = isset($data['container_info']) ? $data['container_info'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['plus_alarm_info2439'] = isset($data['plus_alarm_info2439']) ? $data['plus_alarm_info2439'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_alarm_info
     *
     * @return \Volcengine\Seccenter20240508\Model\BaseAlarmInfoForGetOneRaspAlarmOutput
     */
    public function getBaseAlarmInfo()
    {
        return $this->container['base_alarm_info'];
    }

    /**
     * Sets base_alarm_info
     *
     * @param \Volcengine\Seccenter20240508\Model\BaseAlarmInfoForGetOneRaspAlarmOutput $base_alarm_info base_alarm_info
     *
     * @return $this
     */
    public function setBaseAlarmInfo($base_alarm_info)
    {
        $this->container['base_alarm_info'] = $base_alarm_info;

        return $this;
    }

    /**
     * Gets base_info
     *
     * @return \Volcengine\Seccenter20240508\Model\BaseInfoForGetOneRaspAlarmOutput
     */
    public function getBaseInfo()
    {
        return $this->container['base_info'];
    }

    /**
     * Sets base_info
     *
     * @param \Volcengine\Seccenter20240508\Model\BaseInfoForGetOneRaspAlarmOutput $base_info base_info
     *
     * @return $this
     */
    public function setBaseInfo($base_info)
    {
        $this->container['base_info'] = $base_info;

        return $this;
    }

    /**
     * Gets container_info
     *
     * @return \Volcengine\Seccenter20240508\Model\ContainerInfoForGetOneRaspAlarmOutput
     */
    public function getContainerInfo()
    {
        return $this->container['container_info'];
    }

    /**
     * Sets container_info
     *
     * @param \Volcengine\Seccenter20240508\Model\ContainerInfoForGetOneRaspAlarmOutput $container_info container_info
     *
     * @return $this
     */
    public function setContainerInfo($container_info)
    {
        $this->container['container_info'] = $container_info;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets plus_alarm_info2439
     *
     * @return \Volcengine\Seccenter20240508\Model\PlusAlarmInfo2439ForGetOneRaspAlarmOutput
     */
    public function getPlusAlarmInfo2439()
    {
        return $this->container['plus_alarm_info2439'];
    }

    /**
     * Sets plus_alarm_info2439
     *
     * @param \Volcengine\Seccenter20240508\Model\PlusAlarmInfo2439ForGetOneRaspAlarmOutput $plus_alarm_info2439 plus_alarm_info2439
     *
     * @return $this
     */
    public function setPlusAlarmInfo2439($plus_alarm_info2439)
    {
        $this->container['plus_alarm_info2439'] = $plus_alarm_info2439;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

