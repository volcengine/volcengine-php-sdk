<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForMultiCloudAccessStatisticsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForMultiCloudAccessStatisticsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_install_agent' => 'bool',
        'can_sync' => 'bool',
        'cloud_platform' => 'string',
        'count' => 'int',
        'is_active' => 'bool',
        'last_sync_time' => 'int',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can_install_agent' => null,
        'can_sync' => null,
        'cloud_platform' => null,
        'count' => 'int32',
        'is_active' => null,
        'last_sync_time' => 'int32',
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_install_agent' => 'CanInstallAgent',
        'can_sync' => 'CanSync',
        'cloud_platform' => 'CloudPlatform',
        'count' => 'Count',
        'is_active' => 'IsActive',
        'last_sync_time' => 'LastSyncTime',
        'name' => 'Name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_install_agent' => 'setCanInstallAgent',
        'can_sync' => 'setCanSync',
        'cloud_platform' => 'setCloudPlatform',
        'count' => 'setCount',
        'is_active' => 'setIsActive',
        'last_sync_time' => 'setLastSyncTime',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_install_agent' => 'getCanInstallAgent',
        'can_sync' => 'getCanSync',
        'cloud_platform' => 'getCloudPlatform',
        'count' => 'getCount',
        'is_active' => 'getIsActive',
        'last_sync_time' => 'getLastSyncTime',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_install_agent'] = isset($data['can_install_agent']) ? $data['can_install_agent'] : null;
        $this->container['can_sync'] = isset($data['can_sync']) ? $data['can_sync'] : null;
        $this->container['cloud_platform'] = isset($data['cloud_platform']) ? $data['cloud_platform'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['last_sync_time'] = isset($data['last_sync_time']) ? $data['last_sync_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_install_agent
     *
     * @return bool
     */
    public function getCanInstallAgent()
    {
        return $this->container['can_install_agent'];
    }

    /**
     * Sets can_install_agent
     *
     * @param bool $can_install_agent can_install_agent
     *
     * @return $this
     */
    public function setCanInstallAgent($can_install_agent)
    {
        $this->container['can_install_agent'] = $can_install_agent;

        return $this;
    }

    /**
     * Gets can_sync
     *
     * @return bool
     */
    public function getCanSync()
    {
        return $this->container['can_sync'];
    }

    /**
     * Sets can_sync
     *
     * @param bool $can_sync can_sync
     *
     * @return $this
     */
    public function setCanSync($can_sync)
    {
        $this->container['can_sync'] = $can_sync;

        return $this;
    }

    /**
     * Gets cloud_platform
     *
     * @return string
     */
    public function getCloudPlatform()
    {
        return $this->container['cloud_platform'];
    }

    /**
     * Sets cloud_platform
     *
     * @param string $cloud_platform cloud_platform
     *
     * @return $this
     */
    public function setCloudPlatform($cloud_platform)
    {
        $this->container['cloud_platform'] = $cloud_platform;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets last_sync_time
     *
     * @return int
     */
    public function getLastSyncTime()
    {
        return $this->container['last_sync_time'];
    }

    /**
     * Sets last_sync_time
     *
     * @param int $last_sync_time last_sync_time
     *
     * @return $this
     */
    public function setLastSyncTime($last_sync_time)
    {
        $this->container['last_sync_time'] = $last_sync_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

