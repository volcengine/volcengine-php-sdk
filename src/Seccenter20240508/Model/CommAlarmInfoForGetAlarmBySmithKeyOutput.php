<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CommAlarmInfoForGetAlarmBySmithKeyOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommAlarmInfoForGetAlarmBySmithKeyOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'argv' => 'string',
        'exec' => 'string',
        'pgid' => 'string',
        'pgid_argv' => 'string',
        'pid' => 'string',
        'ppid' => 'string',
        'ppid_argv' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'argv' => null,
        'exec' => null,
        'pgid' => null,
        'pgid_argv' => null,
        'pid' => null,
        'ppid' => null,
        'ppid_argv' => null,
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'argv' => 'Argv',
        'exec' => 'Exec',
        'pgid' => 'Pgid',
        'pgid_argv' => 'PgidArgv',
        'pid' => 'Pid',
        'ppid' => 'Ppid',
        'ppid_argv' => 'PpidArgv',
        'username' => 'Username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'argv' => 'setArgv',
        'exec' => 'setExec',
        'pgid' => 'setPgid',
        'pgid_argv' => 'setPgidArgv',
        'pid' => 'setPid',
        'ppid' => 'setPpid',
        'ppid_argv' => 'setPpidArgv',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'argv' => 'getArgv',
        'exec' => 'getExec',
        'pgid' => 'getPgid',
        'pgid_argv' => 'getPgidArgv',
        'pid' => 'getPid',
        'ppid' => 'getPpid',
        'ppid_argv' => 'getPpidArgv',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['argv'] = isset($data['argv']) ? $data['argv'] : null;
        $this->container['exec'] = isset($data['exec']) ? $data['exec'] : null;
        $this->container['pgid'] = isset($data['pgid']) ? $data['pgid'] : null;
        $this->container['pgid_argv'] = isset($data['pgid_argv']) ? $data['pgid_argv'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['ppid'] = isset($data['ppid']) ? $data['ppid'] : null;
        $this->container['ppid_argv'] = isset($data['ppid_argv']) ? $data['ppid_argv'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets argv
     *
     * @return string
     */
    public function getArgv()
    {
        return $this->container['argv'];
    }

    /**
     * Sets argv
     *
     * @param string $argv argv
     *
     * @return $this
     */
    public function setArgv($argv)
    {
        $this->container['argv'] = $argv;

        return $this;
    }

    /**
     * Gets exec
     *
     * @return string
     */
    public function getExec()
    {
        return $this->container['exec'];
    }

    /**
     * Sets exec
     *
     * @param string $exec exec
     *
     * @return $this
     */
    public function setExec($exec)
    {
        $this->container['exec'] = $exec;

        return $this;
    }

    /**
     * Gets pgid
     *
     * @return string
     */
    public function getPgid()
    {
        return $this->container['pgid'];
    }

    /**
     * Sets pgid
     *
     * @param string $pgid pgid
     *
     * @return $this
     */
    public function setPgid($pgid)
    {
        $this->container['pgid'] = $pgid;

        return $this;
    }

    /**
     * Gets pgid_argv
     *
     * @return string
     */
    public function getPgidArgv()
    {
        return $this->container['pgid_argv'];
    }

    /**
     * Sets pgid_argv
     *
     * @param string $pgid_argv pgid_argv
     *
     * @return $this
     */
    public function setPgidArgv($pgid_argv)
    {
        $this->container['pgid_argv'] = $pgid_argv;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets ppid
     *
     * @return string
     */
    public function getPpid()
    {
        return $this->container['ppid'];
    }

    /**
     * Sets ppid
     *
     * @param string $ppid ppid
     *
     * @return $this
     */
    public function setPpid($ppid)
    {
        $this->container['ppid'] = $ppid;

        return $this;
    }

    /**
     * Gets ppid_argv
     *
     * @return string
     */
    public function getPpidArgv()
    {
        return $this->container['ppid_argv'];
    }

    /**
     * Sets ppid_argv
     *
     * @param string $ppid_argv ppid_argv
     *
     * @return $this
     */
    public function setPpidArgv($ppid_argv)
    {
        $this->container['ppid_argv'] = $ppid_argv;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

