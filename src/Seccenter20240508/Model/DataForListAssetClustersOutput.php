<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListAssetClustersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListAssetClustersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_desc' => 'string',
        'create_time' => 'int',
        'external_cluster_id' => 'string',
        'has_audit_risk' => 'bool',
        'has_cve_risk' => 'bool',
        'id' => 'string',
        'kubernetes_version' => 'string',
        'name' => 'string',
        'node_count' => 'int',
        'region' => 'string',
        'region_name' => 'string',
        'running_node_count' => 'int',
        'status' => 'string',
        'sync_time' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_desc' => null,
        'create_time' => 'int32',
        'external_cluster_id' => null,
        'has_audit_risk' => null,
        'has_cve_risk' => null,
        'id' => null,
        'kubernetes_version' => null,
        'name' => null,
        'node_count' => 'int32',
        'region' => null,
        'region_name' => null,
        'running_node_count' => 'int32',
        'status' => null,
        'sync_time' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_desc' => 'ClusterDesc',
        'create_time' => 'CreateTime',
        'external_cluster_id' => 'ExternalClusterId',
        'has_audit_risk' => 'HasAuditRisk',
        'has_cve_risk' => 'HasCveRisk',
        'id' => 'Id',
        'kubernetes_version' => 'KubernetesVersion',
        'name' => 'Name',
        'node_count' => 'NodeCount',
        'region' => 'Region',
        'region_name' => 'RegionName',
        'running_node_count' => 'RunningNodeCount',
        'status' => 'Status',
        'sync_time' => 'SyncTime',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_desc' => 'setClusterDesc',
        'create_time' => 'setCreateTime',
        'external_cluster_id' => 'setExternalClusterId',
        'has_audit_risk' => 'setHasAuditRisk',
        'has_cve_risk' => 'setHasCveRisk',
        'id' => 'setId',
        'kubernetes_version' => 'setKubernetesVersion',
        'name' => 'setName',
        'node_count' => 'setNodeCount',
        'region' => 'setRegion',
        'region_name' => 'setRegionName',
        'running_node_count' => 'setRunningNodeCount',
        'status' => 'setStatus',
        'sync_time' => 'setSyncTime',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_desc' => 'getClusterDesc',
        'create_time' => 'getCreateTime',
        'external_cluster_id' => 'getExternalClusterId',
        'has_audit_risk' => 'getHasAuditRisk',
        'has_cve_risk' => 'getHasCveRisk',
        'id' => 'getId',
        'kubernetes_version' => 'getKubernetesVersion',
        'name' => 'getName',
        'node_count' => 'getNodeCount',
        'region' => 'getRegion',
        'region_name' => 'getRegionName',
        'running_node_count' => 'getRunningNodeCount',
        'status' => 'getStatus',
        'sync_time' => 'getSyncTime',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_desc'] = isset($data['cluster_desc']) ? $data['cluster_desc'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['external_cluster_id'] = isset($data['external_cluster_id']) ? $data['external_cluster_id'] : null;
        $this->container['has_audit_risk'] = isset($data['has_audit_risk']) ? $data['has_audit_risk'] : null;
        $this->container['has_cve_risk'] = isset($data['has_cve_risk']) ? $data['has_cve_risk'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['kubernetes_version'] = isset($data['kubernetes_version']) ? $data['kubernetes_version'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_count'] = isset($data['node_count']) ? $data['node_count'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['region_name'] = isset($data['region_name']) ? $data['region_name'] : null;
        $this->container['running_node_count'] = isset($data['running_node_count']) ? $data['running_node_count'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sync_time'] = isset($data['sync_time']) ? $data['sync_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_desc
     *
     * @return string
     */
    public function getClusterDesc()
    {
        return $this->container['cluster_desc'];
    }

    /**
     * Sets cluster_desc
     *
     * @param string $cluster_desc cluster_desc
     *
     * @return $this
     */
    public function setClusterDesc($cluster_desc)
    {
        $this->container['cluster_desc'] = $cluster_desc;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets external_cluster_id
     *
     * @return string
     */
    public function getExternalClusterId()
    {
        return $this->container['external_cluster_id'];
    }

    /**
     * Sets external_cluster_id
     *
     * @param string $external_cluster_id external_cluster_id
     *
     * @return $this
     */
    public function setExternalClusterId($external_cluster_id)
    {
        $this->container['external_cluster_id'] = $external_cluster_id;

        return $this;
    }

    /**
     * Gets has_audit_risk
     *
     * @return bool
     */
    public function getHasAuditRisk()
    {
        return $this->container['has_audit_risk'];
    }

    /**
     * Sets has_audit_risk
     *
     * @param bool $has_audit_risk has_audit_risk
     *
     * @return $this
     */
    public function setHasAuditRisk($has_audit_risk)
    {
        $this->container['has_audit_risk'] = $has_audit_risk;

        return $this;
    }

    /**
     * Gets has_cve_risk
     *
     * @return bool
     */
    public function getHasCveRisk()
    {
        return $this->container['has_cve_risk'];
    }

    /**
     * Sets has_cve_risk
     *
     * @param bool $has_cve_risk has_cve_risk
     *
     * @return $this
     */
    public function setHasCveRisk($has_cve_risk)
    {
        $this->container['has_cve_risk'] = $has_cve_risk;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kubernetes_version
     *
     * @return string
     */
    public function getKubernetesVersion()
    {
        return $this->container['kubernetes_version'];
    }

    /**
     * Sets kubernetes_version
     *
     * @param string $kubernetes_version kubernetes_version
     *
     * @return $this
     */
    public function setKubernetesVersion($kubernetes_version)
    {
        $this->container['kubernetes_version'] = $kubernetes_version;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_count
     *
     * @return int
     */
    public function getNodeCount()
    {
        return $this->container['node_count'];
    }

    /**
     * Sets node_count
     *
     * @param int $node_count node_count
     *
     * @return $this
     */
    public function setNodeCount($node_count)
    {
        $this->container['node_count'] = $node_count;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name region_name
     *
     * @return $this
     */
    public function setRegionName($region_name)
    {
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets running_node_count
     *
     * @return int
     */
    public function getRunningNodeCount()
    {
        return $this->container['running_node_count'];
    }

    /**
     * Sets running_node_count
     *
     * @param int $running_node_count running_node_count
     *
     * @return $this
     */
    public function setRunningNodeCount($running_node_count)
    {
        $this->container['running_node_count'] = $running_node_count;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sync_time
     *
     * @return int
     */
    public function getSyncTime()
    {
        return $this->container['sync_time'];
    }

    /**
     * Sets sync_time
     *
     * @param int $sync_time sync_time
     *
     * @return $this
     */
    public function setSyncTime($sync_time)
    {
        $this->container['sync_time'] = $sync_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

