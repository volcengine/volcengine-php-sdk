<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AlarmDescForGetHidsAlarmSummaryInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AlarmDescForGetHidsAlarmSummaryInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_handle_result' => 'int',
        'alarm_id' => 'string',
        'alert_desc' => 'string',
        'alert_detail' => 'string',
        'alert_tags' => 'string[]',
        'alert_type' => 'string',
        'alert_type_us' => 'string',
        'analyze_report' => 'string',
        'analyze_report_name' => 'string',
        'attack_id' => 'string',
        'attack_id_list' => 'string',
        'data_type_str' => 'string',
        'desc' => 'string',
        'docker' => 'string',
        'error_reason' => 'string',
        'handle_time' => 'int',
        'handle_user' => 'string',
        'hids_level' => 'string',
        'insert_time' => 'int',
        'kube_level' => 'string',
        'rasp_config_name' => 'string',
        'rasp_level' => 'string',
        'related_config_id' => 'string',
        'risk_desc' => 'string',
        'rule_name' => 'string',
        'status' => 'int',
        'suggestion' => 'string',
        'trace_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_handle_result' => 'int32',
        'alarm_id' => null,
        'alert_desc' => null,
        'alert_detail' => null,
        'alert_tags' => null,
        'alert_type' => null,
        'alert_type_us' => null,
        'analyze_report' => null,
        'analyze_report_name' => null,
        'attack_id' => null,
        'attack_id_list' => null,
        'data_type_str' => null,
        'desc' => null,
        'docker' => null,
        'error_reason' => null,
        'handle_time' => 'int32',
        'handle_user' => null,
        'hids_level' => null,
        'insert_time' => 'int32',
        'kube_level' => null,
        'rasp_config_name' => null,
        'rasp_level' => null,
        'related_config_id' => null,
        'risk_desc' => null,
        'rule_name' => null,
        'status' => 'int32',
        'suggestion' => null,
        'trace_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_handle_result' => 'AlarmHandleResult',
        'alarm_id' => 'AlarmID',
        'alert_desc' => 'AlertDesc',
        'alert_detail' => 'AlertDetail',
        'alert_tags' => 'AlertTags',
        'alert_type' => 'AlertType',
        'alert_type_us' => 'AlertTypeUs',
        'analyze_report' => 'AnalyzeReport',
        'analyze_report_name' => 'AnalyzeReportName',
        'attack_id' => 'AttackID',
        'attack_id_list' => 'AttackIDList',
        'data_type_str' => 'DataTypeStr',
        'desc' => 'Desc',
        'docker' => 'Docker',
        'error_reason' => 'ErrorReason',
        'handle_time' => 'HandleTime',
        'handle_user' => 'HandleUser',
        'hids_level' => 'HidsLevel',
        'insert_time' => 'InsertTime',
        'kube_level' => 'KubeLevel',
        'rasp_config_name' => 'RaspConfigName',
        'rasp_level' => 'RaspLevel',
        'related_config_id' => 'RelatedConfigID',
        'risk_desc' => 'RiskDesc',
        'rule_name' => 'RuleName',
        'status' => 'Status',
        'suggestion' => 'Suggestion',
        'trace_id' => 'TraceID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_handle_result' => 'setAlarmHandleResult',
        'alarm_id' => 'setAlarmId',
        'alert_desc' => 'setAlertDesc',
        'alert_detail' => 'setAlertDetail',
        'alert_tags' => 'setAlertTags',
        'alert_type' => 'setAlertType',
        'alert_type_us' => 'setAlertTypeUs',
        'analyze_report' => 'setAnalyzeReport',
        'analyze_report_name' => 'setAnalyzeReportName',
        'attack_id' => 'setAttackId',
        'attack_id_list' => 'setAttackIdList',
        'data_type_str' => 'setDataTypeStr',
        'desc' => 'setDesc',
        'docker' => 'setDocker',
        'error_reason' => 'setErrorReason',
        'handle_time' => 'setHandleTime',
        'handle_user' => 'setHandleUser',
        'hids_level' => 'setHidsLevel',
        'insert_time' => 'setInsertTime',
        'kube_level' => 'setKubeLevel',
        'rasp_config_name' => 'setRaspConfigName',
        'rasp_level' => 'setRaspLevel',
        'related_config_id' => 'setRelatedConfigId',
        'risk_desc' => 'setRiskDesc',
        'rule_name' => 'setRuleName',
        'status' => 'setStatus',
        'suggestion' => 'setSuggestion',
        'trace_id' => 'setTraceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_handle_result' => 'getAlarmHandleResult',
        'alarm_id' => 'getAlarmId',
        'alert_desc' => 'getAlertDesc',
        'alert_detail' => 'getAlertDetail',
        'alert_tags' => 'getAlertTags',
        'alert_type' => 'getAlertType',
        'alert_type_us' => 'getAlertTypeUs',
        'analyze_report' => 'getAnalyzeReport',
        'analyze_report_name' => 'getAnalyzeReportName',
        'attack_id' => 'getAttackId',
        'attack_id_list' => 'getAttackIdList',
        'data_type_str' => 'getDataTypeStr',
        'desc' => 'getDesc',
        'docker' => 'getDocker',
        'error_reason' => 'getErrorReason',
        'handle_time' => 'getHandleTime',
        'handle_user' => 'getHandleUser',
        'hids_level' => 'getHidsLevel',
        'insert_time' => 'getInsertTime',
        'kube_level' => 'getKubeLevel',
        'rasp_config_name' => 'getRaspConfigName',
        'rasp_level' => 'getRaspLevel',
        'related_config_id' => 'getRelatedConfigId',
        'risk_desc' => 'getRiskDesc',
        'rule_name' => 'getRuleName',
        'status' => 'getStatus',
        'suggestion' => 'getSuggestion',
        'trace_id' => 'getTraceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_handle_result'] = isset($data['alarm_handle_result']) ? $data['alarm_handle_result'] : null;
        $this->container['alarm_id'] = isset($data['alarm_id']) ? $data['alarm_id'] : null;
        $this->container['alert_desc'] = isset($data['alert_desc']) ? $data['alert_desc'] : null;
        $this->container['alert_detail'] = isset($data['alert_detail']) ? $data['alert_detail'] : null;
        $this->container['alert_tags'] = isset($data['alert_tags']) ? $data['alert_tags'] : null;
        $this->container['alert_type'] = isset($data['alert_type']) ? $data['alert_type'] : null;
        $this->container['alert_type_us'] = isset($data['alert_type_us']) ? $data['alert_type_us'] : null;
        $this->container['analyze_report'] = isset($data['analyze_report']) ? $data['analyze_report'] : null;
        $this->container['analyze_report_name'] = isset($data['analyze_report_name']) ? $data['analyze_report_name'] : null;
        $this->container['attack_id'] = isset($data['attack_id']) ? $data['attack_id'] : null;
        $this->container['attack_id_list'] = isset($data['attack_id_list']) ? $data['attack_id_list'] : null;
        $this->container['data_type_str'] = isset($data['data_type_str']) ? $data['data_type_str'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['docker'] = isset($data['docker']) ? $data['docker'] : null;
        $this->container['error_reason'] = isset($data['error_reason']) ? $data['error_reason'] : null;
        $this->container['handle_time'] = isset($data['handle_time']) ? $data['handle_time'] : null;
        $this->container['handle_user'] = isset($data['handle_user']) ? $data['handle_user'] : null;
        $this->container['hids_level'] = isset($data['hids_level']) ? $data['hids_level'] : null;
        $this->container['insert_time'] = isset($data['insert_time']) ? $data['insert_time'] : null;
        $this->container['kube_level'] = isset($data['kube_level']) ? $data['kube_level'] : null;
        $this->container['rasp_config_name'] = isset($data['rasp_config_name']) ? $data['rasp_config_name'] : null;
        $this->container['rasp_level'] = isset($data['rasp_level']) ? $data['rasp_level'] : null;
        $this->container['related_config_id'] = isset($data['related_config_id']) ? $data['related_config_id'] : null;
        $this->container['risk_desc'] = isset($data['risk_desc']) ? $data['risk_desc'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suggestion'] = isset($data['suggestion']) ? $data['suggestion'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_handle_result
     *
     * @return int
     */
    public function getAlarmHandleResult()
    {
        return $this->container['alarm_handle_result'];
    }

    /**
     * Sets alarm_handle_result
     *
     * @param int $alarm_handle_result alarm_handle_result
     *
     * @return $this
     */
    public function setAlarmHandleResult($alarm_handle_result)
    {
        $this->container['alarm_handle_result'] = $alarm_handle_result;

        return $this;
    }

    /**
     * Gets alarm_id
     *
     * @return string
     */
    public function getAlarmId()
    {
        return $this->container['alarm_id'];
    }

    /**
     * Sets alarm_id
     *
     * @param string $alarm_id alarm_id
     *
     * @return $this
     */
    public function setAlarmId($alarm_id)
    {
        $this->container['alarm_id'] = $alarm_id;

        return $this;
    }

    /**
     * Gets alert_desc
     *
     * @return string
     */
    public function getAlertDesc()
    {
        return $this->container['alert_desc'];
    }

    /**
     * Sets alert_desc
     *
     * @param string $alert_desc alert_desc
     *
     * @return $this
     */
    public function setAlertDesc($alert_desc)
    {
        $this->container['alert_desc'] = $alert_desc;

        return $this;
    }

    /**
     * Gets alert_detail
     *
     * @return string
     */
    public function getAlertDetail()
    {
        return $this->container['alert_detail'];
    }

    /**
     * Sets alert_detail
     *
     * @param string $alert_detail alert_detail
     *
     * @return $this
     */
    public function setAlertDetail($alert_detail)
    {
        $this->container['alert_detail'] = $alert_detail;

        return $this;
    }

    /**
     * Gets alert_tags
     *
     * @return string[]
     */
    public function getAlertTags()
    {
        return $this->container['alert_tags'];
    }

    /**
     * Sets alert_tags
     *
     * @param string[] $alert_tags alert_tags
     *
     * @return $this
     */
    public function setAlertTags($alert_tags)
    {
        $this->container['alert_tags'] = $alert_tags;

        return $this;
    }

    /**
     * Gets alert_type
     *
     * @return string
     */
    public function getAlertType()
    {
        return $this->container['alert_type'];
    }

    /**
     * Sets alert_type
     *
     * @param string $alert_type alert_type
     *
     * @return $this
     */
    public function setAlertType($alert_type)
    {
        $this->container['alert_type'] = $alert_type;

        return $this;
    }

    /**
     * Gets alert_type_us
     *
     * @return string
     */
    public function getAlertTypeUs()
    {
        return $this->container['alert_type_us'];
    }

    /**
     * Sets alert_type_us
     *
     * @param string $alert_type_us alert_type_us
     *
     * @return $this
     */
    public function setAlertTypeUs($alert_type_us)
    {
        $this->container['alert_type_us'] = $alert_type_us;

        return $this;
    }

    /**
     * Gets analyze_report
     *
     * @return string
     */
    public function getAnalyzeReport()
    {
        return $this->container['analyze_report'];
    }

    /**
     * Sets analyze_report
     *
     * @param string $analyze_report analyze_report
     *
     * @return $this
     */
    public function setAnalyzeReport($analyze_report)
    {
        $this->container['analyze_report'] = $analyze_report;

        return $this;
    }

    /**
     * Gets analyze_report_name
     *
     * @return string
     */
    public function getAnalyzeReportName()
    {
        return $this->container['analyze_report_name'];
    }

    /**
     * Sets analyze_report_name
     *
     * @param string $analyze_report_name analyze_report_name
     *
     * @return $this
     */
    public function setAnalyzeReportName($analyze_report_name)
    {
        $this->container['analyze_report_name'] = $analyze_report_name;

        return $this;
    }

    /**
     * Gets attack_id
     *
     * @return string
     */
    public function getAttackId()
    {
        return $this->container['attack_id'];
    }

    /**
     * Sets attack_id
     *
     * @param string $attack_id attack_id
     *
     * @return $this
     */
    public function setAttackId($attack_id)
    {
        $this->container['attack_id'] = $attack_id;

        return $this;
    }

    /**
     * Gets attack_id_list
     *
     * @return string
     */
    public function getAttackIdList()
    {
        return $this->container['attack_id_list'];
    }

    /**
     * Sets attack_id_list
     *
     * @param string $attack_id_list attack_id_list
     *
     * @return $this
     */
    public function setAttackIdList($attack_id_list)
    {
        $this->container['attack_id_list'] = $attack_id_list;

        return $this;
    }

    /**
     * Gets data_type_str
     *
     * @return string
     */
    public function getDataTypeStr()
    {
        return $this->container['data_type_str'];
    }

    /**
     * Sets data_type_str
     *
     * @param string $data_type_str data_type_str
     *
     * @return $this
     */
    public function setDataTypeStr($data_type_str)
    {
        $this->container['data_type_str'] = $data_type_str;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string $desc desc
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets docker
     *
     * @return string
     */
    public function getDocker()
    {
        return $this->container['docker'];
    }

    /**
     * Sets docker
     *
     * @param string $docker docker
     *
     * @return $this
     */
    public function setDocker($docker)
    {
        $this->container['docker'] = $docker;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string $error_reason error_reason
     *
     * @return $this
     */
    public function setErrorReason($error_reason)
    {
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets handle_time
     *
     * @return int
     */
    public function getHandleTime()
    {
        return $this->container['handle_time'];
    }

    /**
     * Sets handle_time
     *
     * @param int $handle_time handle_time
     *
     * @return $this
     */
    public function setHandleTime($handle_time)
    {
        $this->container['handle_time'] = $handle_time;

        return $this;
    }

    /**
     * Gets handle_user
     *
     * @return string
     */
    public function getHandleUser()
    {
        return $this->container['handle_user'];
    }

    /**
     * Sets handle_user
     *
     * @param string $handle_user handle_user
     *
     * @return $this
     */
    public function setHandleUser($handle_user)
    {
        $this->container['handle_user'] = $handle_user;

        return $this;
    }

    /**
     * Gets hids_level
     *
     * @return string
     */
    public function getHidsLevel()
    {
        return $this->container['hids_level'];
    }

    /**
     * Sets hids_level
     *
     * @param string $hids_level hids_level
     *
     * @return $this
     */
    public function setHidsLevel($hids_level)
    {
        $this->container['hids_level'] = $hids_level;

        return $this;
    }

    /**
     * Gets insert_time
     *
     * @return int
     */
    public function getInsertTime()
    {
        return $this->container['insert_time'];
    }

    /**
     * Sets insert_time
     *
     * @param int $insert_time insert_time
     *
     * @return $this
     */
    public function setInsertTime($insert_time)
    {
        $this->container['insert_time'] = $insert_time;

        return $this;
    }

    /**
     * Gets kube_level
     *
     * @return string
     */
    public function getKubeLevel()
    {
        return $this->container['kube_level'];
    }

    /**
     * Sets kube_level
     *
     * @param string $kube_level kube_level
     *
     * @return $this
     */
    public function setKubeLevel($kube_level)
    {
        $this->container['kube_level'] = $kube_level;

        return $this;
    }

    /**
     * Gets rasp_config_name
     *
     * @return string
     */
    public function getRaspConfigName()
    {
        return $this->container['rasp_config_name'];
    }

    /**
     * Sets rasp_config_name
     *
     * @param string $rasp_config_name rasp_config_name
     *
     * @return $this
     */
    public function setRaspConfigName($rasp_config_name)
    {
        $this->container['rasp_config_name'] = $rasp_config_name;

        return $this;
    }

    /**
     * Gets rasp_level
     *
     * @return string
     */
    public function getRaspLevel()
    {
        return $this->container['rasp_level'];
    }

    /**
     * Sets rasp_level
     *
     * @param string $rasp_level rasp_level
     *
     * @return $this
     */
    public function setRaspLevel($rasp_level)
    {
        $this->container['rasp_level'] = $rasp_level;

        return $this;
    }

    /**
     * Gets related_config_id
     *
     * @return string
     */
    public function getRelatedConfigId()
    {
        return $this->container['related_config_id'];
    }

    /**
     * Sets related_config_id
     *
     * @param string $related_config_id related_config_id
     *
     * @return $this
     */
    public function setRelatedConfigId($related_config_id)
    {
        $this->container['related_config_id'] = $related_config_id;

        return $this;
    }

    /**
     * Gets risk_desc
     *
     * @return string
     */
    public function getRiskDesc()
    {
        return $this->container['risk_desc'];
    }

    /**
     * Sets risk_desc
     *
     * @param string $risk_desc risk_desc
     *
     * @return $this
     */
    public function setRiskDesc($risk_desc)
    {
        $this->container['risk_desc'] = $risk_desc;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suggestion
     *
     * @return string
     */
    public function getSuggestion()
    {
        return $this->container['suggestion'];
    }

    /**
     * Sets suggestion
     *
     * @param string $suggestion suggestion
     *
     * @return $this
     */
    public function setSuggestion($suggestion)
    {
        $this->container['suggestion'] = $suggestion;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

