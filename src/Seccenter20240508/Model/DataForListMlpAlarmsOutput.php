<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListMlpAlarmsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListMlpAlarmsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_group' => 'string',
        'agent_id' => 'string',
        'alarm_handle_result' => 'int',
        'alarm_hostname' => 'string',
        'alarm_id' => 'string',
        'alarm_time' => 'int',
        'alert_tags' => 'string[]',
        'args' => 'string[]',
        'args_list' => 'string[]',
        'argv_list' => 'string[]',
        'attribution_list' => '\Volcengine\Seccenter20240508\Model\AttributionListForListMlpAlarmsOutput[]',
        'class' => 'string',
        'cluster' => '\Volcengine\Seccenter20240508\Model\ClusterForListMlpAlarmsOutput',
        'data_type' => 'string',
        'error_reason' => 'string',
        'event_id' => 'string',
        'event_name' => 'string',
        'exe' => 'string',
        'file_downloadable' => 'bool',
        'file_hash' => 'string',
        'file_path' => 'string',
        'group_path' => 'string',
        'handle_time' => 'int',
        'host' => '\Volcengine\Seccenter20240508\Model\HostForListMlpAlarmsOutput',
        'image_name' => 'string',
        'in_docker' => 'string',
        'llm_analysis_result' => 'string',
        'llm_processed' => 'bool',
        'level' => 'string',
        'mlp_instance_id' => 'string',
        'mlp_private_ip' => 'string',
        'name' => 'string',
        'ns_pid' => 'string',
        'os_type' => 'string',
        'pid' => 'string',
        'probe_hook' => 'string',
        'region' => 'string',
        'sid' => 'string',
        'stack_trace_format' => 'string',
        'stack_trace_hash' => 'string',
        'status' => 'int',
        'trace_id' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_group' => null,
        'agent_id' => null,
        'alarm_handle_result' => 'int32',
        'alarm_hostname' => null,
        'alarm_id' => null,
        'alarm_time' => 'int32',
        'alert_tags' => null,
        'args' => null,
        'args_list' => null,
        'argv_list' => null,
        'attribution_list' => null,
        'class' => null,
        'cluster' => null,
        'data_type' => null,
        'error_reason' => null,
        'event_id' => null,
        'event_name' => null,
        'exe' => null,
        'file_downloadable' => null,
        'file_hash' => null,
        'file_path' => null,
        'group_path' => null,
        'handle_time' => 'int32',
        'host' => null,
        'image_name' => null,
        'in_docker' => null,
        'llm_analysis_result' => null,
        'llm_processed' => null,
        'level' => null,
        'mlp_instance_id' => null,
        'mlp_private_ip' => null,
        'name' => null,
        'ns_pid' => null,
        'os_type' => null,
        'pid' => null,
        'probe_hook' => null,
        'region' => null,
        'sid' => null,
        'stack_trace_format' => null,
        'stack_trace_hash' => null,
        'status' => 'int32',
        'trace_id' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_group' => 'AgentGroup',
        'agent_id' => 'AgentID',
        'alarm_handle_result' => 'AlarmHandleResult',
        'alarm_hostname' => 'AlarmHostname',
        'alarm_id' => 'AlarmID',
        'alarm_time' => 'AlarmTime',
        'alert_tags' => 'AlertTags',
        'args' => 'Args',
        'args_list' => 'ArgsList',
        'argv_list' => 'ArgvList',
        'attribution_list' => 'AttributionList',
        'class' => 'Class',
        'cluster' => 'Cluster',
        'data_type' => 'DataType',
        'error_reason' => 'ErrorReason',
        'event_id' => 'EventID',
        'event_name' => 'EventName',
        'exe' => 'Exe',
        'file_downloadable' => 'FileDownloadable',
        'file_hash' => 'FileHash',
        'file_path' => 'FilePath',
        'group_path' => 'GroupPath',
        'handle_time' => 'HandleTime',
        'host' => 'Host',
        'image_name' => 'ImageName',
        'in_docker' => 'InDocker',
        'llm_analysis_result' => 'LLMAnalysisResult',
        'llm_processed' => 'LLMProcessed',
        'level' => 'Level',
        'mlp_instance_id' => 'MlpInstanceID',
        'mlp_private_ip' => 'MlpPrivateIP',
        'name' => 'Name',
        'ns_pid' => 'NsPid',
        'os_type' => 'OsType',
        'pid' => 'Pid',
        'probe_hook' => 'ProbeHook',
        'region' => 'Region',
        'sid' => 'Sid',
        'stack_trace_format' => 'StackTraceFormat',
        'stack_trace_hash' => 'StackTraceHash',
        'status' => 'Status',
        'trace_id' => 'TraceID',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_group' => 'setAgentGroup',
        'agent_id' => 'setAgentId',
        'alarm_handle_result' => 'setAlarmHandleResult',
        'alarm_hostname' => 'setAlarmHostname',
        'alarm_id' => 'setAlarmId',
        'alarm_time' => 'setAlarmTime',
        'alert_tags' => 'setAlertTags',
        'args' => 'setArgs',
        'args_list' => 'setArgsList',
        'argv_list' => 'setArgvList',
        'attribution_list' => 'setAttributionList',
        'class' => 'setClass',
        'cluster' => 'setCluster',
        'data_type' => 'setDataType',
        'error_reason' => 'setErrorReason',
        'event_id' => 'setEventId',
        'event_name' => 'setEventName',
        'exe' => 'setExe',
        'file_downloadable' => 'setFileDownloadable',
        'file_hash' => 'setFileHash',
        'file_path' => 'setFilePath',
        'group_path' => 'setGroupPath',
        'handle_time' => 'setHandleTime',
        'host' => 'setHost',
        'image_name' => 'setImageName',
        'in_docker' => 'setInDocker',
        'llm_analysis_result' => 'setLlmAnalysisResult',
        'llm_processed' => 'setLlmProcessed',
        'level' => 'setLevel',
        'mlp_instance_id' => 'setMlpInstanceId',
        'mlp_private_ip' => 'setMlpPrivateIp',
        'name' => 'setName',
        'ns_pid' => 'setNsPid',
        'os_type' => 'setOsType',
        'pid' => 'setPid',
        'probe_hook' => 'setProbeHook',
        'region' => 'setRegion',
        'sid' => 'setSid',
        'stack_trace_format' => 'setStackTraceFormat',
        'stack_trace_hash' => 'setStackTraceHash',
        'status' => 'setStatus',
        'trace_id' => 'setTraceId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_group' => 'getAgentGroup',
        'agent_id' => 'getAgentId',
        'alarm_handle_result' => 'getAlarmHandleResult',
        'alarm_hostname' => 'getAlarmHostname',
        'alarm_id' => 'getAlarmId',
        'alarm_time' => 'getAlarmTime',
        'alert_tags' => 'getAlertTags',
        'args' => 'getArgs',
        'args_list' => 'getArgsList',
        'argv_list' => 'getArgvList',
        'attribution_list' => 'getAttributionList',
        'class' => 'getClass',
        'cluster' => 'getCluster',
        'data_type' => 'getDataType',
        'error_reason' => 'getErrorReason',
        'event_id' => 'getEventId',
        'event_name' => 'getEventName',
        'exe' => 'getExe',
        'file_downloadable' => 'getFileDownloadable',
        'file_hash' => 'getFileHash',
        'file_path' => 'getFilePath',
        'group_path' => 'getGroupPath',
        'handle_time' => 'getHandleTime',
        'host' => 'getHost',
        'image_name' => 'getImageName',
        'in_docker' => 'getInDocker',
        'llm_analysis_result' => 'getLlmAnalysisResult',
        'llm_processed' => 'getLlmProcessed',
        'level' => 'getLevel',
        'mlp_instance_id' => 'getMlpInstanceId',
        'mlp_private_ip' => 'getMlpPrivateIp',
        'name' => 'getName',
        'ns_pid' => 'getNsPid',
        'os_type' => 'getOsType',
        'pid' => 'getPid',
        'probe_hook' => 'getProbeHook',
        'region' => 'getRegion',
        'sid' => 'getSid',
        'stack_trace_format' => 'getStackTraceFormat',
        'stack_trace_hash' => 'getStackTraceHash',
        'status' => 'getStatus',
        'trace_id' => 'getTraceId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_group'] = isset($data['agent_group']) ? $data['agent_group'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['alarm_handle_result'] = isset($data['alarm_handle_result']) ? $data['alarm_handle_result'] : null;
        $this->container['alarm_hostname'] = isset($data['alarm_hostname']) ? $data['alarm_hostname'] : null;
        $this->container['alarm_id'] = isset($data['alarm_id']) ? $data['alarm_id'] : null;
        $this->container['alarm_time'] = isset($data['alarm_time']) ? $data['alarm_time'] : null;
        $this->container['alert_tags'] = isset($data['alert_tags']) ? $data['alert_tags'] : null;
        $this->container['args'] = isset($data['args']) ? $data['args'] : null;
        $this->container['args_list'] = isset($data['args_list']) ? $data['args_list'] : null;
        $this->container['argv_list'] = isset($data['argv_list']) ? $data['argv_list'] : null;
        $this->container['attribution_list'] = isset($data['attribution_list']) ? $data['attribution_list'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['cluster'] = isset($data['cluster']) ? $data['cluster'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['error_reason'] = isset($data['error_reason']) ? $data['error_reason'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['exe'] = isset($data['exe']) ? $data['exe'] : null;
        $this->container['file_downloadable'] = isset($data['file_downloadable']) ? $data['file_downloadable'] : null;
        $this->container['file_hash'] = isset($data['file_hash']) ? $data['file_hash'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['group_path'] = isset($data['group_path']) ? $data['group_path'] : null;
        $this->container['handle_time'] = isset($data['handle_time']) ? $data['handle_time'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['image_name'] = isset($data['image_name']) ? $data['image_name'] : null;
        $this->container['in_docker'] = isset($data['in_docker']) ? $data['in_docker'] : null;
        $this->container['llm_analysis_result'] = isset($data['llm_analysis_result']) ? $data['llm_analysis_result'] : null;
        $this->container['llm_processed'] = isset($data['llm_processed']) ? $data['llm_processed'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['mlp_instance_id'] = isset($data['mlp_instance_id']) ? $data['mlp_instance_id'] : null;
        $this->container['mlp_private_ip'] = isset($data['mlp_private_ip']) ? $data['mlp_private_ip'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ns_pid'] = isset($data['ns_pid']) ? $data['ns_pid'] : null;
        $this->container['os_type'] = isset($data['os_type']) ? $data['os_type'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['probe_hook'] = isset($data['probe_hook']) ? $data['probe_hook'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['sid'] = isset($data['sid']) ? $data['sid'] : null;
        $this->container['stack_trace_format'] = isset($data['stack_trace_format']) ? $data['stack_trace_format'] : null;
        $this->container['stack_trace_hash'] = isset($data['stack_trace_hash']) ? $data['stack_trace_hash'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_group
     *
     * @return string
     */
    public function getAgentGroup()
    {
        return $this->container['agent_group'];
    }

    /**
     * Sets agent_group
     *
     * @param string $agent_group agent_group
     *
     * @return $this
     */
    public function setAgentGroup($agent_group)
    {
        $this->container['agent_group'] = $agent_group;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets alarm_handle_result
     *
     * @return int
     */
    public function getAlarmHandleResult()
    {
        return $this->container['alarm_handle_result'];
    }

    /**
     * Sets alarm_handle_result
     *
     * @param int $alarm_handle_result alarm_handle_result
     *
     * @return $this
     */
    public function setAlarmHandleResult($alarm_handle_result)
    {
        $this->container['alarm_handle_result'] = $alarm_handle_result;

        return $this;
    }

    /**
     * Gets alarm_hostname
     *
     * @return string
     */
    public function getAlarmHostname()
    {
        return $this->container['alarm_hostname'];
    }

    /**
     * Sets alarm_hostname
     *
     * @param string $alarm_hostname alarm_hostname
     *
     * @return $this
     */
    public function setAlarmHostname($alarm_hostname)
    {
        $this->container['alarm_hostname'] = $alarm_hostname;

        return $this;
    }

    /**
     * Gets alarm_id
     *
     * @return string
     */
    public function getAlarmId()
    {
        return $this->container['alarm_id'];
    }

    /**
     * Sets alarm_id
     *
     * @param string $alarm_id alarm_id
     *
     * @return $this
     */
    public function setAlarmId($alarm_id)
    {
        $this->container['alarm_id'] = $alarm_id;

        return $this;
    }

    /**
     * Gets alarm_time
     *
     * @return int
     */
    public function getAlarmTime()
    {
        return $this->container['alarm_time'];
    }

    /**
     * Sets alarm_time
     *
     * @param int $alarm_time alarm_time
     *
     * @return $this
     */
    public function setAlarmTime($alarm_time)
    {
        $this->container['alarm_time'] = $alarm_time;

        return $this;
    }

    /**
     * Gets alert_tags
     *
     * @return string[]
     */
    public function getAlertTags()
    {
        return $this->container['alert_tags'];
    }

    /**
     * Sets alert_tags
     *
     * @param string[] $alert_tags alert_tags
     *
     * @return $this
     */
    public function setAlertTags($alert_tags)
    {
        $this->container['alert_tags'] = $alert_tags;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string[]
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string[] $args args
     *
     * @return $this
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets args_list
     *
     * @return string[]
     */
    public function getArgsList()
    {
        return $this->container['args_list'];
    }

    /**
     * Sets args_list
     *
     * @param string[] $args_list args_list
     *
     * @return $this
     */
    public function setArgsList($args_list)
    {
        $this->container['args_list'] = $args_list;

        return $this;
    }

    /**
     * Gets argv_list
     *
     * @return string[]
     */
    public function getArgvList()
    {
        return $this->container['argv_list'];
    }

    /**
     * Sets argv_list
     *
     * @param string[] $argv_list argv_list
     *
     * @return $this
     */
    public function setArgvList($argv_list)
    {
        $this->container['argv_list'] = $argv_list;

        return $this;
    }

    /**
     * Gets attribution_list
     *
     * @return \Volcengine\Seccenter20240508\Model\AttributionListForListMlpAlarmsOutput[]
     */
    public function getAttributionList()
    {
        return $this->container['attribution_list'];
    }

    /**
     * Sets attribution_list
     *
     * @param \Volcengine\Seccenter20240508\Model\AttributionListForListMlpAlarmsOutput[] $attribution_list attribution_list
     *
     * @return $this
     */
    public function setAttributionList($attribution_list)
    {
        $this->container['attribution_list'] = $attribution_list;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class class
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets cluster
     *
     * @return \Volcengine\Seccenter20240508\Model\ClusterForListMlpAlarmsOutput
     */
    public function getCluster()
    {
        return $this->container['cluster'];
    }

    /**
     * Sets cluster
     *
     * @param \Volcengine\Seccenter20240508\Model\ClusterForListMlpAlarmsOutput $cluster cluster
     *
     * @return $this
     */
    public function setCluster($cluster)
    {
        $this->container['cluster'] = $cluster;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string $error_reason error_reason
     *
     * @return $this
     */
    public function setErrorReason($error_reason)
    {
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name event_name
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets exe
     *
     * @return string
     */
    public function getExe()
    {
        return $this->container['exe'];
    }

    /**
     * Sets exe
     *
     * @param string $exe exe
     *
     * @return $this
     */
    public function setExe($exe)
    {
        $this->container['exe'] = $exe;

        return $this;
    }

    /**
     * Gets file_downloadable
     *
     * @return bool
     */
    public function getFileDownloadable()
    {
        return $this->container['file_downloadable'];
    }

    /**
     * Sets file_downloadable
     *
     * @param bool $file_downloadable file_downloadable
     *
     * @return $this
     */
    public function setFileDownloadable($file_downloadable)
    {
        $this->container['file_downloadable'] = $file_downloadable;

        return $this;
    }

    /**
     * Gets file_hash
     *
     * @return string
     */
    public function getFileHash()
    {
        return $this->container['file_hash'];
    }

    /**
     * Sets file_hash
     *
     * @param string $file_hash file_hash
     *
     * @return $this
     */
    public function setFileHash($file_hash)
    {
        $this->container['file_hash'] = $file_hash;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path file_path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets group_path
     *
     * @return string
     */
    public function getGroupPath()
    {
        return $this->container['group_path'];
    }

    /**
     * Sets group_path
     *
     * @param string $group_path group_path
     *
     * @return $this
     */
    public function setGroupPath($group_path)
    {
        $this->container['group_path'] = $group_path;

        return $this;
    }

    /**
     * Gets handle_time
     *
     * @return int
     */
    public function getHandleTime()
    {
        return $this->container['handle_time'];
    }

    /**
     * Sets handle_time
     *
     * @param int $handle_time handle_time
     *
     * @return $this
     */
    public function setHandleTime($handle_time)
    {
        $this->container['handle_time'] = $handle_time;

        return $this;
    }

    /**
     * Gets host
     *
     * @return \Volcengine\Seccenter20240508\Model\HostForListMlpAlarmsOutput
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param \Volcengine\Seccenter20240508\Model\HostForListMlpAlarmsOutput $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string $image_name image_name
     *
     * @return $this
     */
    public function setImageName($image_name)
    {
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets in_docker
     *
     * @return string
     */
    public function getInDocker()
    {
        return $this->container['in_docker'];
    }

    /**
     * Sets in_docker
     *
     * @param string $in_docker in_docker
     *
     * @return $this
     */
    public function setInDocker($in_docker)
    {
        $this->container['in_docker'] = $in_docker;

        return $this;
    }

    /**
     * Gets llm_analysis_result
     *
     * @return string
     */
    public function getLlmAnalysisResult()
    {
        return $this->container['llm_analysis_result'];
    }

    /**
     * Sets llm_analysis_result
     *
     * @param string $llm_analysis_result llm_analysis_result
     *
     * @return $this
     */
    public function setLlmAnalysisResult($llm_analysis_result)
    {
        $this->container['llm_analysis_result'] = $llm_analysis_result;

        return $this;
    }

    /**
     * Gets llm_processed
     *
     * @return bool
     */
    public function getLlmProcessed()
    {
        return $this->container['llm_processed'];
    }

    /**
     * Sets llm_processed
     *
     * @param bool $llm_processed llm_processed
     *
     * @return $this
     */
    public function setLlmProcessed($llm_processed)
    {
        $this->container['llm_processed'] = $llm_processed;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets mlp_instance_id
     *
     * @return string
     */
    public function getMlpInstanceId()
    {
        return $this->container['mlp_instance_id'];
    }

    /**
     * Sets mlp_instance_id
     *
     * @param string $mlp_instance_id mlp_instance_id
     *
     * @return $this
     */
    public function setMlpInstanceId($mlp_instance_id)
    {
        $this->container['mlp_instance_id'] = $mlp_instance_id;

        return $this;
    }

    /**
     * Gets mlp_private_ip
     *
     * @return string
     */
    public function getMlpPrivateIp()
    {
        return $this->container['mlp_private_ip'];
    }

    /**
     * Sets mlp_private_ip
     *
     * @param string $mlp_private_ip mlp_private_ip
     *
     * @return $this
     */
    public function setMlpPrivateIp($mlp_private_ip)
    {
        $this->container['mlp_private_ip'] = $mlp_private_ip;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ns_pid
     *
     * @return string
     */
    public function getNsPid()
    {
        return $this->container['ns_pid'];
    }

    /**
     * Sets ns_pid
     *
     * @param string $ns_pid ns_pid
     *
     * @return $this
     */
    public function setNsPid($ns_pid)
    {
        $this->container['ns_pid'] = $ns_pid;

        return $this;
    }

    /**
     * Gets os_type
     *
     * @return string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     *
     * @param string $os_type os_type
     *
     * @return $this
     */
    public function setOsType($os_type)
    {
        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets probe_hook
     *
     * @return string
     */
    public function getProbeHook()
    {
        return $this->container['probe_hook'];
    }

    /**
     * Sets probe_hook
     *
     * @param string $probe_hook probe_hook
     *
     * @return $this
     */
    public function setProbeHook($probe_hook)
    {
        $this->container['probe_hook'] = $probe_hook;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets sid
     *
     * @return string
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param string $sid sid
     *
     * @return $this
     */
    public function setSid($sid)
    {
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets stack_trace_format
     *
     * @return string
     */
    public function getStackTraceFormat()
    {
        return $this->container['stack_trace_format'];
    }

    /**
     * Sets stack_trace_format
     *
     * @param string $stack_trace_format stack_trace_format
     *
     * @return $this
     */
    public function setStackTraceFormat($stack_trace_format)
    {
        $this->container['stack_trace_format'] = $stack_trace_format;

        return $this;
    }

    /**
     * Gets stack_trace_hash
     *
     * @return string
     */
    public function getStackTraceHash()
    {
        return $this->container['stack_trace_hash'];
    }

    /**
     * Sets stack_trace_hash
     *
     * @param string $stack_trace_hash stack_trace_hash
     *
     * @return $this
     */
    public function setStackTraceHash($stack_trace_hash)
    {
        $this->container['stack_trace_hash'] = $stack_trace_hash;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

