<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetRegularVirusScanConfigResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetRegularVirusScanConfigResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'action' => 'string',
        'agent_id_list' => 'string[]',
        'all_host' => 'bool',
        'cloud_providers' => 'string[]',
        'cpu_i_dle' => 'string',
        'file_path' => 'string',
        'leaf_group_ids' => 'string[]',
        'operate_user' => 'string',
        'scan_interval' => 'int',
        'scan_switch_on' => 'bool',
        'task_end_time' => 'string',
        'task_start_time' => 'string',
        'timeout' => 'string',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'action' => null,
        'agent_id_list' => null,
        'all_host' => null,
        'cloud_providers' => null,
        'cpu_i_dle' => null,
        'file_path' => null,
        'leaf_group_ids' => null,
        'operate_user' => null,
        'scan_interval' => 'int32',
        'scan_switch_on' => null,
        'task_end_time' => null,
        'task_start_time' => null,
        'timeout' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'action' => 'Action',
        'agent_id_list' => 'AgentIDList',
        'all_host' => 'AllHost',
        'cloud_providers' => 'CloudProviders',
        'cpu_i_dle' => 'CpuIDle',
        'file_path' => 'FilePath',
        'leaf_group_ids' => 'LeafGroupIDs',
        'operate_user' => 'OperateUser',
        'scan_interval' => 'ScanInterval',
        'scan_switch_on' => 'ScanSwitchOn',
        'task_end_time' => 'TaskEndTime',
        'task_start_time' => 'TaskStartTime',
        'timeout' => 'Timeout',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'action' => 'setAction',
        'agent_id_list' => 'setAgentIdList',
        'all_host' => 'setAllHost',
        'cloud_providers' => 'setCloudProviders',
        'cpu_i_dle' => 'setCpuIDle',
        'file_path' => 'setFilePath',
        'leaf_group_ids' => 'setLeafGroupIds',
        'operate_user' => 'setOperateUser',
        'scan_interval' => 'setScanInterval',
        'scan_switch_on' => 'setScanSwitchOn',
        'task_end_time' => 'setTaskEndTime',
        'task_start_time' => 'setTaskStartTime',
        'timeout' => 'setTimeout',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'action' => 'getAction',
        'agent_id_list' => 'getAgentIdList',
        'all_host' => 'getAllHost',
        'cloud_providers' => 'getCloudProviders',
        'cpu_i_dle' => 'getCpuIDle',
        'file_path' => 'getFilePath',
        'leaf_group_ids' => 'getLeafGroupIds',
        'operate_user' => 'getOperateUser',
        'scan_interval' => 'getScanInterval',
        'scan_switch_on' => 'getScanSwitchOn',
        'task_end_time' => 'getTaskEndTime',
        'task_start_time' => 'getTaskStartTime',
        'timeout' => 'getTimeout',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['agent_id_list'] = isset($data['agent_id_list']) ? $data['agent_id_list'] : null;
        $this->container['all_host'] = isset($data['all_host']) ? $data['all_host'] : null;
        $this->container['cloud_providers'] = isset($data['cloud_providers']) ? $data['cloud_providers'] : null;
        $this->container['cpu_i_dle'] = isset($data['cpu_i_dle']) ? $data['cpu_i_dle'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['operate_user'] = isset($data['operate_user']) ? $data['operate_user'] : null;
        $this->container['scan_interval'] = isset($data['scan_interval']) ? $data['scan_interval'] : null;
        $this->container['scan_switch_on'] = isset($data['scan_switch_on']) ? $data['scan_switch_on'] : null;
        $this->container['task_end_time'] = isset($data['task_end_time']) ? $data['task_end_time'] : null;
        $this->container['task_start_time'] = isset($data['task_start_time']) ? $data['task_start_time'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets agent_id_list
     *
     * @return string[]
     */
    public function getAgentIdList()
    {
        return $this->container['agent_id_list'];
    }

    /**
     * Sets agent_id_list
     *
     * @param string[] $agent_id_list agent_id_list
     *
     * @return $this
     */
    public function setAgentIdList($agent_id_list)
    {
        $this->container['agent_id_list'] = $agent_id_list;

        return $this;
    }

    /**
     * Gets all_host
     *
     * @return bool
     */
    public function getAllHost()
    {
        return $this->container['all_host'];
    }

    /**
     * Sets all_host
     *
     * @param bool $all_host all_host
     *
     * @return $this
     */
    public function setAllHost($all_host)
    {
        $this->container['all_host'] = $all_host;

        return $this;
    }

    /**
     * Gets cloud_providers
     *
     * @return string[]
     */
    public function getCloudProviders()
    {
        return $this->container['cloud_providers'];
    }

    /**
     * Sets cloud_providers
     *
     * @param string[] $cloud_providers cloud_providers
     *
     * @return $this
     */
    public function setCloudProviders($cloud_providers)
    {
        $this->container['cloud_providers'] = $cloud_providers;

        return $this;
    }

    /**
     * Gets cpu_i_dle
     *
     * @return string
     */
    public function getCpuIDle()
    {
        return $this->container['cpu_i_dle'];
    }

    /**
     * Sets cpu_i_dle
     *
     * @param string $cpu_i_dle cpu_i_dle
     *
     * @return $this
     */
    public function setCpuIDle($cpu_i_dle)
    {
        $this->container['cpu_i_dle'] = $cpu_i_dle;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path file_path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets operate_user
     *
     * @return string
     */
    public function getOperateUser()
    {
        return $this->container['operate_user'];
    }

    /**
     * Sets operate_user
     *
     * @param string $operate_user operate_user
     *
     * @return $this
     */
    public function setOperateUser($operate_user)
    {
        $this->container['operate_user'] = $operate_user;

        return $this;
    }

    /**
     * Gets scan_interval
     *
     * @return int
     */
    public function getScanInterval()
    {
        return $this->container['scan_interval'];
    }

    /**
     * Sets scan_interval
     *
     * @param int $scan_interval scan_interval
     *
     * @return $this
     */
    public function setScanInterval($scan_interval)
    {
        $this->container['scan_interval'] = $scan_interval;

        return $this;
    }

    /**
     * Gets scan_switch_on
     *
     * @return bool
     */
    public function getScanSwitchOn()
    {
        return $this->container['scan_switch_on'];
    }

    /**
     * Sets scan_switch_on
     *
     * @param bool $scan_switch_on scan_switch_on
     *
     * @return $this
     */
    public function setScanSwitchOn($scan_switch_on)
    {
        $this->container['scan_switch_on'] = $scan_switch_on;

        return $this;
    }

    /**
     * Gets task_end_time
     *
     * @return string
     */
    public function getTaskEndTime()
    {
        return $this->container['task_end_time'];
    }

    /**
     * Sets task_end_time
     *
     * @param string $task_end_time task_end_time
     *
     * @return $this
     */
    public function setTaskEndTime($task_end_time)
    {
        $this->container['task_end_time'] = $task_end_time;

        return $this;
    }

    /**
     * Gets task_start_time
     *
     * @return string
     */
    public function getTaskStartTime()
    {
        return $this->container['task_start_time'];
    }

    /**
     * Sets task_start_time
     *
     * @param string $task_start_time task_start_time
     *
     * @return $this
     */
    public function setTaskStartTime($task_start_time)
    {
        $this->container['task_start_time'] = $task_start_time;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return string
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param string $timeout timeout
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

