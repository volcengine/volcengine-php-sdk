<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PlusAlarmInfo59ForGetAlarmBySmithKeyOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlusAlarmInfo59ForGetAlarmBySmithKeyOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comm' => 'string',
        'ld_preload' => 'string',
        'pid_tree' => 'string',
        'run_path' => 'string',
        'socket_argv' => 'string',
        'socket_pid' => 'string',
        'ssh' => 'string',
        'ssh_info' => 'string',
        'stdin' => 'string',
        'stdout' => 'string',
        'uid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comm' => null,
        'ld_preload' => null,
        'pid_tree' => null,
        'run_path' => null,
        'socket_argv' => null,
        'socket_pid' => null,
        'ssh' => null,
        'ssh_info' => null,
        'stdin' => null,
        'stdout' => null,
        'uid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comm' => 'Comm',
        'ld_preload' => 'LdPreload',
        'pid_tree' => 'PidTree',
        'run_path' => 'RunPath',
        'socket_argv' => 'SocketArgv',
        'socket_pid' => 'SocketPid',
        'ssh' => 'Ssh',
        'ssh_info' => 'SshInfo',
        'stdin' => 'Stdin',
        'stdout' => 'Stdout',
        'uid' => 'Uid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comm' => 'setComm',
        'ld_preload' => 'setLdPreload',
        'pid_tree' => 'setPidTree',
        'run_path' => 'setRunPath',
        'socket_argv' => 'setSocketArgv',
        'socket_pid' => 'setSocketPid',
        'ssh' => 'setSsh',
        'ssh_info' => 'setSshInfo',
        'stdin' => 'setStdin',
        'stdout' => 'setStdout',
        'uid' => 'setUid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comm' => 'getComm',
        'ld_preload' => 'getLdPreload',
        'pid_tree' => 'getPidTree',
        'run_path' => 'getRunPath',
        'socket_argv' => 'getSocketArgv',
        'socket_pid' => 'getSocketPid',
        'ssh' => 'getSsh',
        'ssh_info' => 'getSshInfo',
        'stdin' => 'getStdin',
        'stdout' => 'getStdout',
        'uid' => 'getUid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comm'] = isset($data['comm']) ? $data['comm'] : null;
        $this->container['ld_preload'] = isset($data['ld_preload']) ? $data['ld_preload'] : null;
        $this->container['pid_tree'] = isset($data['pid_tree']) ? $data['pid_tree'] : null;
        $this->container['run_path'] = isset($data['run_path']) ? $data['run_path'] : null;
        $this->container['socket_argv'] = isset($data['socket_argv']) ? $data['socket_argv'] : null;
        $this->container['socket_pid'] = isset($data['socket_pid']) ? $data['socket_pid'] : null;
        $this->container['ssh'] = isset($data['ssh']) ? $data['ssh'] : null;
        $this->container['ssh_info'] = isset($data['ssh_info']) ? $data['ssh_info'] : null;
        $this->container['stdin'] = isset($data['stdin']) ? $data['stdin'] : null;
        $this->container['stdout'] = isset($data['stdout']) ? $data['stdout'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comm
     *
     * @return string
     */
    public function getComm()
    {
        return $this->container['comm'];
    }

    /**
     * Sets comm
     *
     * @param string $comm comm
     *
     * @return $this
     */
    public function setComm($comm)
    {
        $this->container['comm'] = $comm;

        return $this;
    }

    /**
     * Gets ld_preload
     *
     * @return string
     */
    public function getLdPreload()
    {
        return $this->container['ld_preload'];
    }

    /**
     * Sets ld_preload
     *
     * @param string $ld_preload ld_preload
     *
     * @return $this
     */
    public function setLdPreload($ld_preload)
    {
        $this->container['ld_preload'] = $ld_preload;

        return $this;
    }

    /**
     * Gets pid_tree
     *
     * @return string
     */
    public function getPidTree()
    {
        return $this->container['pid_tree'];
    }

    /**
     * Sets pid_tree
     *
     * @param string $pid_tree pid_tree
     *
     * @return $this
     */
    public function setPidTree($pid_tree)
    {
        $this->container['pid_tree'] = $pid_tree;

        return $this;
    }

    /**
     * Gets run_path
     *
     * @return string
     */
    public function getRunPath()
    {
        return $this->container['run_path'];
    }

    /**
     * Sets run_path
     *
     * @param string $run_path run_path
     *
     * @return $this
     */
    public function setRunPath($run_path)
    {
        $this->container['run_path'] = $run_path;

        return $this;
    }

    /**
     * Gets socket_argv
     *
     * @return string
     */
    public function getSocketArgv()
    {
        return $this->container['socket_argv'];
    }

    /**
     * Sets socket_argv
     *
     * @param string $socket_argv socket_argv
     *
     * @return $this
     */
    public function setSocketArgv($socket_argv)
    {
        $this->container['socket_argv'] = $socket_argv;

        return $this;
    }

    /**
     * Gets socket_pid
     *
     * @return string
     */
    public function getSocketPid()
    {
        return $this->container['socket_pid'];
    }

    /**
     * Sets socket_pid
     *
     * @param string $socket_pid socket_pid
     *
     * @return $this
     */
    public function setSocketPid($socket_pid)
    {
        $this->container['socket_pid'] = $socket_pid;

        return $this;
    }

    /**
     * Gets ssh
     *
     * @return string
     */
    public function getSsh()
    {
        return $this->container['ssh'];
    }

    /**
     * Sets ssh
     *
     * @param string $ssh ssh
     *
     * @return $this
     */
    public function setSsh($ssh)
    {
        $this->container['ssh'] = $ssh;

        return $this;
    }

    /**
     * Gets ssh_info
     *
     * @return string
     */
    public function getSshInfo()
    {
        return $this->container['ssh_info'];
    }

    /**
     * Sets ssh_info
     *
     * @param string $ssh_info ssh_info
     *
     * @return $this
     */
    public function setSshInfo($ssh_info)
    {
        $this->container['ssh_info'] = $ssh_info;

        return $this;
    }

    /**
     * Gets stdin
     *
     * @return string
     */
    public function getStdin()
    {
        return $this->container['stdin'];
    }

    /**
     * Sets stdin
     *
     * @param string $stdin stdin
     *
     * @return $this
     */
    public function setStdin($stdin)
    {
        $this->container['stdin'] = $stdin;

        return $this;
    }

    /**
     * Gets stdout
     *
     * @return string
     */
    public function getStdout()
    {
        return $this->container['stdout'];
    }

    /**
     * Sets stdout
     *
     * @param string $stdout stdout
     *
     * @return $this
     */
    public function setStdout($stdout)
    {
        $this->container['stdout'] = $stdout;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

