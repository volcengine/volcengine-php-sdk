<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BaselineInfoForListBaselineCheckItemHostsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaselineInfoForListBaselineCheckItemHostsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'asset_id' => 'string',
        'asset_name' => 'string',
        'check_level' => 'string',
        'cluster_id' => 'string',
        'cluster_name' => 'string',
        'detect_status' => 'string',
        'eip_address' => 'string',
        'failed_detail' => 'string',
        'hostname' => 'string',
        'node_id' => 'string',
        'node_ip' => 'string',
        'node_name' => 'string',
        'primary_ip_address' => 'string',
        'region' => 'string',
        'result' => 'string',
        'tag' => 'string[]',
        'whitelist_detail' => 'string',
        'whitelist_status' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'asset_id' => null,
        'asset_name' => null,
        'check_level' => null,
        'cluster_id' => null,
        'cluster_name' => null,
        'detect_status' => null,
        'eip_address' => null,
        'failed_detail' => null,
        'hostname' => null,
        'node_id' => null,
        'node_ip' => null,
        'node_name' => null,
        'primary_ip_address' => null,
        'region' => null,
        'result' => null,
        'tag' => null,
        'whitelist_detail' => null,
        'whitelist_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'asset_id' => 'AssetID',
        'asset_name' => 'AssetName',
        'check_level' => 'CheckLevel',
        'cluster_id' => 'ClusterID',
        'cluster_name' => 'ClusterName',
        'detect_status' => 'DetectStatus',
        'eip_address' => 'EipAddress',
        'failed_detail' => 'FailedDetail',
        'hostname' => 'Hostname',
        'node_id' => 'NodeID',
        'node_ip' => 'NodeIP',
        'node_name' => 'NodeName',
        'primary_ip_address' => 'PrimaryIpAddress',
        'region' => 'Region',
        'result' => 'Result',
        'tag' => 'Tag',
        'whitelist_detail' => 'WhitelistDetail',
        'whitelist_status' => 'WhitelistStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'asset_id' => 'setAssetId',
        'asset_name' => 'setAssetName',
        'check_level' => 'setCheckLevel',
        'cluster_id' => 'setClusterId',
        'cluster_name' => 'setClusterName',
        'detect_status' => 'setDetectStatus',
        'eip_address' => 'setEipAddress',
        'failed_detail' => 'setFailedDetail',
        'hostname' => 'setHostname',
        'node_id' => 'setNodeId',
        'node_ip' => 'setNodeIp',
        'node_name' => 'setNodeName',
        'primary_ip_address' => 'setPrimaryIpAddress',
        'region' => 'setRegion',
        'result' => 'setResult',
        'tag' => 'setTag',
        'whitelist_detail' => 'setWhitelistDetail',
        'whitelist_status' => 'setWhitelistStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'asset_id' => 'getAssetId',
        'asset_name' => 'getAssetName',
        'check_level' => 'getCheckLevel',
        'cluster_id' => 'getClusterId',
        'cluster_name' => 'getClusterName',
        'detect_status' => 'getDetectStatus',
        'eip_address' => 'getEipAddress',
        'failed_detail' => 'getFailedDetail',
        'hostname' => 'getHostname',
        'node_id' => 'getNodeId',
        'node_ip' => 'getNodeIp',
        'node_name' => 'getNodeName',
        'primary_ip_address' => 'getPrimaryIpAddress',
        'region' => 'getRegion',
        'result' => 'getResult',
        'tag' => 'getTag',
        'whitelist_detail' => 'getWhitelistDetail',
        'whitelist_status' => 'getWhitelistStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['asset_name'] = isset($data['asset_name']) ? $data['asset_name'] : null;
        $this->container['check_level'] = isset($data['check_level']) ? $data['check_level'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['cluster_name'] = isset($data['cluster_name']) ? $data['cluster_name'] : null;
        $this->container['detect_status'] = isset($data['detect_status']) ? $data['detect_status'] : null;
        $this->container['eip_address'] = isset($data['eip_address']) ? $data['eip_address'] : null;
        $this->container['failed_detail'] = isset($data['failed_detail']) ? $data['failed_detail'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['node_ip'] = isset($data['node_ip']) ? $data['node_ip'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['primary_ip_address'] = isset($data['primary_ip_address']) ? $data['primary_ip_address'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['whitelist_detail'] = isset($data['whitelist_detail']) ? $data['whitelist_detail'] : null;
        $this->container['whitelist_status'] = isset($data['whitelist_status']) ? $data['whitelist_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id asset_id
     *
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets asset_name
     *
     * @return string
     */
    public function getAssetName()
    {
        return $this->container['asset_name'];
    }

    /**
     * Sets asset_name
     *
     * @param string $asset_name asset_name
     *
     * @return $this
     */
    public function setAssetName($asset_name)
    {
        $this->container['asset_name'] = $asset_name;

        return $this;
    }

    /**
     * Gets check_level
     *
     * @return string
     */
    public function getCheckLevel()
    {
        return $this->container['check_level'];
    }

    /**
     * Sets check_level
     *
     * @param string $check_level check_level
     *
     * @return $this
     */
    public function setCheckLevel($check_level)
    {
        $this->container['check_level'] = $check_level;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets cluster_name
     *
     * @return string
     */
    public function getClusterName()
    {
        return $this->container['cluster_name'];
    }

    /**
     * Sets cluster_name
     *
     * @param string $cluster_name cluster_name
     *
     * @return $this
     */
    public function setClusterName($cluster_name)
    {
        $this->container['cluster_name'] = $cluster_name;

        return $this;
    }

    /**
     * Gets detect_status
     *
     * @return string
     */
    public function getDetectStatus()
    {
        return $this->container['detect_status'];
    }

    /**
     * Sets detect_status
     *
     * @param string $detect_status detect_status
     *
     * @return $this
     */
    public function setDetectStatus($detect_status)
    {
        $this->container['detect_status'] = $detect_status;

        return $this;
    }

    /**
     * Gets eip_address
     *
     * @return string
     */
    public function getEipAddress()
    {
        return $this->container['eip_address'];
    }

    /**
     * Sets eip_address
     *
     * @param string $eip_address eip_address
     *
     * @return $this
     */
    public function setEipAddress($eip_address)
    {
        $this->container['eip_address'] = $eip_address;

        return $this;
    }

    /**
     * Gets failed_detail
     *
     * @return string
     */
    public function getFailedDetail()
    {
        return $this->container['failed_detail'];
    }

    /**
     * Sets failed_detail
     *
     * @param string $failed_detail failed_detail
     *
     * @return $this
     */
    public function setFailedDetail($failed_detail)
    {
        $this->container['failed_detail'] = $failed_detail;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets node_ip
     *
     * @return string
     */
    public function getNodeIp()
    {
        return $this->container['node_ip'];
    }

    /**
     * Sets node_ip
     *
     * @param string $node_ip node_ip
     *
     * @return $this
     */
    public function setNodeIp($node_ip)
    {
        $this->container['node_ip'] = $node_ip;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name node_name
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets primary_ip_address
     *
     * @return string
     */
    public function getPrimaryIpAddress()
    {
        return $this->container['primary_ip_address'];
    }

    /**
     * Sets primary_ip_address
     *
     * @param string $primary_ip_address primary_ip_address
     *
     * @return $this
     */
    public function setPrimaryIpAddress($primary_ip_address)
    {
        $this->container['primary_ip_address'] = $primary_ip_address;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[] $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets whitelist_detail
     *
     * @return string
     */
    public function getWhitelistDetail()
    {
        return $this->container['whitelist_detail'];
    }

    /**
     * Sets whitelist_detail
     *
     * @param string $whitelist_detail whitelist_detail
     *
     * @return $this
     */
    public function setWhitelistDetail($whitelist_detail)
    {
        $this->container['whitelist_detail'] = $whitelist_detail;

        return $this;
    }

    /**
     * Gets whitelist_status
     *
     * @return bool
     */
    public function getWhitelistStatus()
    {
        return $this->container['whitelist_status'];
    }

    /**
     * Sets whitelist_status
     *
     * @param bool $whitelist_status whitelist_status
     *
     * @return $this
     */
    public function setWhitelistStatus($whitelist_status)
    {
        $this->container['whitelist_status'] = $whitelist_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

