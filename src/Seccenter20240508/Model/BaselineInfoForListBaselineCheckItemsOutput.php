<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class BaselineInfoForListBaselineCheckItemsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaselineInfoForListBaselineCheckItemsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseline_check' => 'string',
        'baseline_id' => 'int',
        'check_id' => 'int',
        'description' => 'string',
        'description_cn' => 'string',
        'pass_rate' => 'int',
        'security' => 'string',
        'solution' => 'string',
        'solution_cn' => 'string',
        'status' => 'string',
        'title' => 'string',
        'title_cn' => 'string',
        'type' => 'string',
        'type_cn' => 'string',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baseline_check' => null,
        'baseline_id' => 'int32',
        'check_id' => 'int32',
        'description' => null,
        'description_cn' => null,
        'pass_rate' => 'int32',
        'security' => null,
        'solution' => null,
        'solution_cn' => null,
        'status' => null,
        'title' => null,
        'title_cn' => null,
        'type' => null,
        'type_cn' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baseline_check' => 'BaselineCheck',
        'baseline_id' => 'BaselineID',
        'check_id' => 'CheckID',
        'description' => 'Description',
        'description_cn' => 'DescriptionCn',
        'pass_rate' => 'PassRate',
        'security' => 'Security',
        'solution' => 'Solution',
        'solution_cn' => 'SolutionCn',
        'status' => 'Status',
        'title' => 'Title',
        'title_cn' => 'TitleCn',
        'type' => 'Type',
        'type_cn' => 'TypeCn',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baseline_check' => 'setBaselineCheck',
        'baseline_id' => 'setBaselineId',
        'check_id' => 'setCheckId',
        'description' => 'setDescription',
        'description_cn' => 'setDescriptionCn',
        'pass_rate' => 'setPassRate',
        'security' => 'setSecurity',
        'solution' => 'setSolution',
        'solution_cn' => 'setSolutionCn',
        'status' => 'setStatus',
        'title' => 'setTitle',
        'title_cn' => 'setTitleCn',
        'type' => 'setType',
        'type_cn' => 'setTypeCn',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baseline_check' => 'getBaselineCheck',
        'baseline_id' => 'getBaselineId',
        'check_id' => 'getCheckId',
        'description' => 'getDescription',
        'description_cn' => 'getDescriptionCn',
        'pass_rate' => 'getPassRate',
        'security' => 'getSecurity',
        'solution' => 'getSolution',
        'solution_cn' => 'getSolutionCn',
        'status' => 'getStatus',
        'title' => 'getTitle',
        'title_cn' => 'getTitleCn',
        'type' => 'getType',
        'type_cn' => 'getTypeCn',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baseline_check'] = isset($data['baseline_check']) ? $data['baseline_check'] : null;
        $this->container['baseline_id'] = isset($data['baseline_id']) ? $data['baseline_id'] : null;
        $this->container['check_id'] = isset($data['check_id']) ? $data['check_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_cn'] = isset($data['description_cn']) ? $data['description_cn'] : null;
        $this->container['pass_rate'] = isset($data['pass_rate']) ? $data['pass_rate'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['solution'] = isset($data['solution']) ? $data['solution'] : null;
        $this->container['solution_cn'] = isset($data['solution_cn']) ? $data['solution_cn'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['title_cn'] = isset($data['title_cn']) ? $data['title_cn'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['type_cn'] = isset($data['type_cn']) ? $data['type_cn'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baseline_check
     *
     * @return string
     */
    public function getBaselineCheck()
    {
        return $this->container['baseline_check'];
    }

    /**
     * Sets baseline_check
     *
     * @param string $baseline_check baseline_check
     *
     * @return $this
     */
    public function setBaselineCheck($baseline_check)
    {
        $this->container['baseline_check'] = $baseline_check;

        return $this;
    }

    /**
     * Gets baseline_id
     *
     * @return int
     */
    public function getBaselineId()
    {
        return $this->container['baseline_id'];
    }

    /**
     * Sets baseline_id
     *
     * @param int $baseline_id baseline_id
     *
     * @return $this
     */
    public function setBaselineId($baseline_id)
    {
        $this->container['baseline_id'] = $baseline_id;

        return $this;
    }

    /**
     * Gets check_id
     *
     * @return int
     */
    public function getCheckId()
    {
        return $this->container['check_id'];
    }

    /**
     * Sets check_id
     *
     * @param int $check_id check_id
     *
     * @return $this
     */
    public function setCheckId($check_id)
    {
        $this->container['check_id'] = $check_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_cn
     *
     * @return string
     */
    public function getDescriptionCn()
    {
        return $this->container['description_cn'];
    }

    /**
     * Sets description_cn
     *
     * @param string $description_cn description_cn
     *
     * @return $this
     */
    public function setDescriptionCn($description_cn)
    {
        $this->container['description_cn'] = $description_cn;

        return $this;
    }

    /**
     * Gets pass_rate
     *
     * @return int
     */
    public function getPassRate()
    {
        return $this->container['pass_rate'];
    }

    /**
     * Sets pass_rate
     *
     * @param int $pass_rate pass_rate
     *
     * @return $this
     */
    public function setPassRate($pass_rate)
    {
        $this->container['pass_rate'] = $pass_rate;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string $security security
     *
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets solution
     *
     * @return string
     */
    public function getSolution()
    {
        return $this->container['solution'];
    }

    /**
     * Sets solution
     *
     * @param string $solution solution
     *
     * @return $this
     */
    public function setSolution($solution)
    {
        $this->container['solution'] = $solution;

        return $this;
    }

    /**
     * Gets solution_cn
     *
     * @return string
     */
    public function getSolutionCn()
    {
        return $this->container['solution_cn'];
    }

    /**
     * Sets solution_cn
     *
     * @param string $solution_cn solution_cn
     *
     * @return $this
     */
    public function setSolutionCn($solution_cn)
    {
        $this->container['solution_cn'] = $solution_cn;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_cn
     *
     * @return string
     */
    public function getTitleCn()
    {
        return $this->container['title_cn'];
    }

    /**
     * Sets title_cn
     *
     * @param string $title_cn title_cn
     *
     * @return $this
     */
    public function setTitleCn($title_cn)
    {
        $this->container['title_cn'] = $title_cn;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_cn
     *
     * @return string
     */
    public function getTypeCn()
    {
        return $this->container['type_cn'];
    }

    /**
     * Sets type_cn
     *
     * @param string $type_cn type_cn
     *
     * @return $this
     */
    public function setTypeCn($type_cn)
    {
        $this->container['type_cn'] = $type_cn;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

