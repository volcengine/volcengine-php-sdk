<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetMultiLevelAuthDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetMultiLevelAuthDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'app_sec' => '\Volcengine\Seccenter20240508\Model\AppSecForGetMultiLevelAuthDetailOutput',
        'cluster_sec' => '\Volcengine\Seccenter20240508\Model\ClusterSecForGetMultiLevelAuthDetailOutput',
        'protect_host' => '\Volcengine\Seccenter20240508\Model\ProtectHostForGetMultiLevelAuthDetailOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'app_sec' => null,
        'cluster_sec' => null,
        'protect_host' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'app_sec' => 'AppSec',
        'cluster_sec' => 'ClusterSec',
        'protect_host' => 'ProtectHost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'app_sec' => 'setAppSec',
        'cluster_sec' => 'setClusterSec',
        'protect_host' => 'setProtectHost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'app_sec' => 'getAppSec',
        'cluster_sec' => 'getClusterSec',
        'protect_host' => 'getProtectHost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['app_sec'] = isset($data['app_sec']) ? $data['app_sec'] : null;
        $this->container['cluster_sec'] = isset($data['cluster_sec']) ? $data['cluster_sec'] : null;
        $this->container['protect_host'] = isset($data['protect_host']) ? $data['protect_host'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets app_sec
     *
     * @return \Volcengine\Seccenter20240508\Model\AppSecForGetMultiLevelAuthDetailOutput
     */
    public function getAppSec()
    {
        return $this->container['app_sec'];
    }

    /**
     * Sets app_sec
     *
     * @param \Volcengine\Seccenter20240508\Model\AppSecForGetMultiLevelAuthDetailOutput $app_sec app_sec
     *
     * @return $this
     */
    public function setAppSec($app_sec)
    {
        $this->container['app_sec'] = $app_sec;

        return $this;
    }

    /**
     * Gets cluster_sec
     *
     * @return \Volcengine\Seccenter20240508\Model\ClusterSecForGetMultiLevelAuthDetailOutput
     */
    public function getClusterSec()
    {
        return $this->container['cluster_sec'];
    }

    /**
     * Sets cluster_sec
     *
     * @param \Volcengine\Seccenter20240508\Model\ClusterSecForGetMultiLevelAuthDetailOutput $cluster_sec cluster_sec
     *
     * @return $this
     */
    public function setClusterSec($cluster_sec)
    {
        $this->container['cluster_sec'] = $cluster_sec;

        return $this;
    }

    /**
     * Gets protect_host
     *
     * @return \Volcengine\Seccenter20240508\Model\ProtectHostForGetMultiLevelAuthDetailOutput
     */
    public function getProtectHost()
    {
        return $this->container['protect_host'];
    }

    /**
     * Sets protect_host
     *
     * @param \Volcengine\Seccenter20240508\Model\ProtectHostForGetMultiLevelAuthDetailOutput $protect_host protect_host
     *
     * @return $this
     */
    public function setProtectHost($protect_host)
    {
        $this->container['protect_host'] = $protect_host;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

