<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GenerateInstallCommandRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GenerateInstallCommandRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_protect' => 'bool',
        'cloud_provider' => 'string',
        'expire_time' => 'int',
        'group_id' => 'string',
        'host_engine' => 'int',
        'installation_method' => 'string',
        'os' => 'string',
        'proxy_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_protect' => null,
        'cloud_provider' => null,
        'expire_time' => 'int32',
        'group_id' => null,
        'host_engine' => 'int32',
        'installation_method' => null,
        'os' => null,
        'proxy_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_protect' => 'AutoProtect',
        'cloud_provider' => 'CloudProvider',
        'expire_time' => 'ExpireTime',
        'group_id' => 'GroupId',
        'host_engine' => 'HostEngine',
        'installation_method' => 'InstallationMethod',
        'os' => 'OS',
        'proxy_name' => 'ProxyName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_protect' => 'setAutoProtect',
        'cloud_provider' => 'setCloudProvider',
        'expire_time' => 'setExpireTime',
        'group_id' => 'setGroupId',
        'host_engine' => 'setHostEngine',
        'installation_method' => 'setInstallationMethod',
        'os' => 'setOs',
        'proxy_name' => 'setProxyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_protect' => 'getAutoProtect',
        'cloud_provider' => 'getCloudProvider',
        'expire_time' => 'getExpireTime',
        'group_id' => 'getGroupId',
        'host_engine' => 'getHostEngine',
        'installation_method' => 'getInstallationMethod',
        'os' => 'getOs',
        'proxy_name' => 'getProxyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_protect'] = isset($data['auto_protect']) ? $data['auto_protect'] : null;
        $this->container['cloud_provider'] = isset($data['cloud_provider']) ? $data['cloud_provider'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['host_engine'] = isset($data['host_engine']) ? $data['host_engine'] : null;
        $this->container['installation_method'] = isset($data['installation_method']) ? $data['installation_method'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['proxy_name'] = isset($data['proxy_name']) ? $data['proxy_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_protect
     *
     * @return bool
     */
    public function getAutoProtect()
    {
        return $this->container['auto_protect'];
    }

    /**
     * Sets auto_protect
     *
     * @param bool $auto_protect auto_protect
     *
     * @return $this
     */
    public function setAutoProtect($auto_protect)
    {
        $this->container['auto_protect'] = $auto_protect;

        return $this;
    }

    /**
     * Gets cloud_provider
     *
     * @return string
     */
    public function getCloudProvider()
    {
        return $this->container['cloud_provider'];
    }

    /**
     * Sets cloud_provider
     *
     * @param string $cloud_provider cloud_provider
     *
     * @return $this
     */
    public function setCloudProvider($cloud_provider)
    {
        $this->container['cloud_provider'] = $cloud_provider;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return int
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param int $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets host_engine
     *
     * @return int
     */
    public function getHostEngine()
    {
        return $this->container['host_engine'];
    }

    /**
     * Sets host_engine
     *
     * @param int $host_engine host_engine
     *
     * @return $this
     */
    public function setHostEngine($host_engine)
    {
        $this->container['host_engine'] = $host_engine;

        return $this;
    }

    /**
     * Gets installation_method
     *
     * @return string
     */
    public function getInstallationMethod()
    {
        return $this->container['installation_method'];
    }

    /**
     * Sets installation_method
     *
     * @param string $installation_method installation_method
     *
     * @return $this
     */
    public function setInstallationMethod($installation_method)
    {
        $this->container['installation_method'] = $installation_method;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets proxy_name
     *
     * @return string
     */
    public function getProxyName()
    {
        return $this->container['proxy_name'];
    }

    /**
     * Sets proxy_name
     *
     * @param string $proxy_name proxy_name
     *
     * @return $this
     */
    public function setProxyName($proxy_name)
    {
        $this->container['proxy_name'] = $proxy_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

