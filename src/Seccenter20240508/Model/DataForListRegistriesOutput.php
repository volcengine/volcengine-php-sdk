<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListRegistriesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListRegistriesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attributes' => '\Volcengine\Seccenter20240508\Model\AttributesForListRegistriesOutput',
        'collect_time' => 'int',
        'flow_rate_limit' => 'int',
        'id' => 'string',
        'name' => 'string',
        'registry' => 'string',
        'registry_create_time' => 'int',
        'registry_type' => 'string',
        'vpc_auth_status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attributes' => null,
        'collect_time' => 'int32',
        'flow_rate_limit' => 'int32',
        'id' => null,
        'name' => null,
        'registry' => null,
        'registry_create_time' => 'int32',
        'registry_type' => null,
        'vpc_auth_status' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attributes' => 'Attributes',
        'collect_time' => 'CollectTime',
        'flow_rate_limit' => 'FlowRateLimit',
        'id' => 'ID',
        'name' => 'Name',
        'registry' => 'Registry',
        'registry_create_time' => 'RegistryCreateTime',
        'registry_type' => 'RegistryType',
        'vpc_auth_status' => 'VpcAuthStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attributes' => 'setAttributes',
        'collect_time' => 'setCollectTime',
        'flow_rate_limit' => 'setFlowRateLimit',
        'id' => 'setId',
        'name' => 'setName',
        'registry' => 'setRegistry',
        'registry_create_time' => 'setRegistryCreateTime',
        'registry_type' => 'setRegistryType',
        'vpc_auth_status' => 'setVpcAuthStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attributes' => 'getAttributes',
        'collect_time' => 'getCollectTime',
        'flow_rate_limit' => 'getFlowRateLimit',
        'id' => 'getId',
        'name' => 'getName',
        'registry' => 'getRegistry',
        'registry_create_time' => 'getRegistryCreateTime',
        'registry_type' => 'getRegistryType',
        'vpc_auth_status' => 'getVpcAuthStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['collect_time'] = isset($data['collect_time']) ? $data['collect_time'] : null;
        $this->container['flow_rate_limit'] = isset($data['flow_rate_limit']) ? $data['flow_rate_limit'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['registry'] = isset($data['registry']) ? $data['registry'] : null;
        $this->container['registry_create_time'] = isset($data['registry_create_time']) ? $data['registry_create_time'] : null;
        $this->container['registry_type'] = isset($data['registry_type']) ? $data['registry_type'] : null;
        $this->container['vpc_auth_status'] = isset($data['vpc_auth_status']) ? $data['vpc_auth_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attributes
     *
     * @return \Volcengine\Seccenter20240508\Model\AttributesForListRegistriesOutput
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Volcengine\Seccenter20240508\Model\AttributesForListRegistriesOutput $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets collect_time
     *
     * @return int
     */
    public function getCollectTime()
    {
        return $this->container['collect_time'];
    }

    /**
     * Sets collect_time
     *
     * @param int $collect_time collect_time
     *
     * @return $this
     */
    public function setCollectTime($collect_time)
    {
        $this->container['collect_time'] = $collect_time;

        return $this;
    }

    /**
     * Gets flow_rate_limit
     *
     * @return int
     */
    public function getFlowRateLimit()
    {
        return $this->container['flow_rate_limit'];
    }

    /**
     * Sets flow_rate_limit
     *
     * @param int $flow_rate_limit flow_rate_limit
     *
     * @return $this
     */
    public function setFlowRateLimit($flow_rate_limit)
    {
        $this->container['flow_rate_limit'] = $flow_rate_limit;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets registry
     *
     * @return string
     */
    public function getRegistry()
    {
        return $this->container['registry'];
    }

    /**
     * Sets registry
     *
     * @param string $registry registry
     *
     * @return $this
     */
    public function setRegistry($registry)
    {
        $this->container['registry'] = $registry;

        return $this;
    }

    /**
     * Gets registry_create_time
     *
     * @return int
     */
    public function getRegistryCreateTime()
    {
        return $this->container['registry_create_time'];
    }

    /**
     * Sets registry_create_time
     *
     * @param int $registry_create_time registry_create_time
     *
     * @return $this
     */
    public function setRegistryCreateTime($registry_create_time)
    {
        $this->container['registry_create_time'] = $registry_create_time;

        return $this;
    }

    /**
     * Gets registry_type
     *
     * @return string
     */
    public function getRegistryType()
    {
        return $this->container['registry_type'];
    }

    /**
     * Sets registry_type
     *
     * @param string $registry_type registry_type
     *
     * @return $this
     */
    public function setRegistryType($registry_type)
    {
        $this->container['registry_type'] = $registry_type;

        return $this;
    }

    /**
     * Gets vpc_auth_status
     *
     * @return int
     */
    public function getVpcAuthStatus()
    {
        return $this->container['vpc_auth_status'];
    }

    /**
     * Sets vpc_auth_status
     *
     * @param int $vpc_auth_status vpc_auth_status
     *
     * @return $this
     */
    public function setVpcAuthStatus($vpc_auth_status)
    {
        $this->container['vpc_auth_status'] = $vpc_auth_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

