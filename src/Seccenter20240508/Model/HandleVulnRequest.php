<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HandleVulnRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HandleVulnRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'after_status' => 'string',
        'agent_id_list' => 'string[]',
        'asset_ids' => 'string[]',
        'asset_type' => 'string',
        'before_status' => 'string',
        'cwpp_id_list' => 'string[]',
        'reason' => 'string',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'after_status' => null,
        'agent_id_list' => null,
        'asset_ids' => null,
        'asset_type' => null,
        'before_status' => null,
        'cwpp_id_list' => null,
        'reason' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'after_status' => 'AfterStatus',
        'agent_id_list' => 'AgentIDList',
        'asset_ids' => 'AssetIDs',
        'asset_type' => 'AssetType',
        'before_status' => 'BeforeStatus',
        'cwpp_id_list' => 'CwppIDList',
        'reason' => 'Reason',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'after_status' => 'setAfterStatus',
        'agent_id_list' => 'setAgentIdList',
        'asset_ids' => 'setAssetIds',
        'asset_type' => 'setAssetType',
        'before_status' => 'setBeforeStatus',
        'cwpp_id_list' => 'setCwppIdList',
        'reason' => 'setReason',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'after_status' => 'getAfterStatus',
        'agent_id_list' => 'getAgentIdList',
        'asset_ids' => 'getAssetIds',
        'asset_type' => 'getAssetType',
        'before_status' => 'getBeforeStatus',
        'cwpp_id_list' => 'getCwppIdList',
        'reason' => 'getReason',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSET_TYPE_HOST = 'Host';
    const ASSET_TYPE_DEV = 'Dev';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssetTypeAllowableValues()
    {
        return [
            self::ASSET_TYPE_HOST,
            self::ASSET_TYPE_DEV,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['after_status'] = isset($data['after_status']) ? $data['after_status'] : null;
        $this->container['agent_id_list'] = isset($data['agent_id_list']) ? $data['agent_id_list'] : null;
        $this->container['asset_ids'] = isset($data['asset_ids']) ? $data['asset_ids'] : null;
        $this->container['asset_type'] = isset($data['asset_type']) ? $data['asset_type'] : null;
        $this->container['before_status'] = isset($data['before_status']) ? $data['before_status'] : null;
        $this->container['cwpp_id_list'] = isset($data['cwpp_id_list']) ? $data['cwpp_id_list'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssetTypeAllowableValues();
        if (!is_null($this->container['asset_type']) && !in_array($this->container['asset_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'asset_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets after_status
     *
     * @return string
     */
    public function getAfterStatus()
    {
        return $this->container['after_status'];
    }

    /**
     * Sets after_status
     *
     * @param string $after_status after_status
     *
     * @return $this
     */
    public function setAfterStatus($after_status)
    {
        $this->container['after_status'] = $after_status;

        return $this;
    }

    /**
     * Gets agent_id_list
     *
     * @return string[]
     */
    public function getAgentIdList()
    {
        return $this->container['agent_id_list'];
    }

    /**
     * Sets agent_id_list
     *
     * @param string[] $agent_id_list agent_id_list
     *
     * @return $this
     */
    public function setAgentIdList($agent_id_list)
    {
        $this->container['agent_id_list'] = $agent_id_list;

        return $this;
    }

    /**
     * Gets asset_ids
     *
     * @return string[]
     */
    public function getAssetIds()
    {
        return $this->container['asset_ids'];
    }

    /**
     * Sets asset_ids
     *
     * @param string[] $asset_ids asset_ids
     *
     * @return $this
     */
    public function setAssetIds($asset_ids)
    {
        $this->container['asset_ids'] = $asset_ids;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return string
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param string $asset_type asset_type
     *
     * @return $this
     */
    public function setAssetType($asset_type)
    {
        $allowedValues = $this->getAssetTypeAllowableValues();
        if (!is_null($asset_type) && !in_array($asset_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'asset_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets before_status
     *
     * @return string
     */
    public function getBeforeStatus()
    {
        return $this->container['before_status'];
    }

    /**
     * Sets before_status
     *
     * @param string $before_status before_status
     *
     * @return $this
     */
    public function setBeforeStatus($before_status)
    {
        $this->container['before_status'] = $before_status;

        return $this;
    }

    /**
     * Gets cwpp_id_list
     *
     * @return string[]
     */
    public function getCwppIdList()
    {
        return $this->container['cwpp_id_list'];
    }

    /**
     * Sets cwpp_id_list
     *
     * @param string[] $cwpp_id_list cwpp_id_list
     *
     * @return $this
     */
    public function setCwppIdList($cwpp_id_list)
    {
        $this->container['cwpp_id_list'] = $cwpp_id_list;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

