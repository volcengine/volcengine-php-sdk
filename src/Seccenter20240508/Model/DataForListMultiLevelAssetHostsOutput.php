<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListMultiLevelAssetHostsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListMultiLevelAssetHostsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'abnormal_plugins_list' => 'string',
        'account_id' => 'string',
        'agent_id' => 'string',
        'agent_status' => 'string',
        'cloud_provider' => 'string',
        'cpu_usage' => 'double',
        'dns' => 'string',
        'ecs_instance' => '\Volcengine\Seccenter20240508\Model\EcsInstanceForListMultiLevelAssetHostsOutput',
        'first_heartbeat_time' => 'int',
        'gateway' => 'string',
        'group' => 'string',
        'group_path' => 'string',
        'institution_id' => 'string',
        'kernel_version' => 'string',
        'last_heartbeat_time' => 'int',
        'mem_usage' => 'double',
        'online' => 'bool',
        'platform' => 'string',
        'plugins_brief_info' => 'string',
        'plugins_status' => 'string',
        'reason' => 'string',
        'risk' => '\Volcengine\Seccenter20240508\Model\RiskForListMultiLevelAssetHostsOutput',
        'security_enhancement' => 'bool',
        'start_time' => 'int',
        'status' => 'string',
        'tags' => 'string[]',
        'total_mem' => 'int',
        'update_time' => 'int',
        'user_status' => 'string',
        'user_status_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'abnormal_plugins_list' => null,
        'account_id' => null,
        'agent_id' => null,
        'agent_status' => null,
        'cloud_provider' => null,
        'cpu_usage' => 'double',
        'dns' => null,
        'ecs_instance' => null,
        'first_heartbeat_time' => 'int32',
        'gateway' => null,
        'group' => null,
        'group_path' => null,
        'institution_id' => null,
        'kernel_version' => null,
        'last_heartbeat_time' => 'int32',
        'mem_usage' => 'double',
        'online' => null,
        'platform' => null,
        'plugins_brief_info' => null,
        'plugins_status' => null,
        'reason' => null,
        'risk' => null,
        'security_enhancement' => null,
        'start_time' => 'int32',
        'status' => null,
        'tags' => null,
        'total_mem' => 'int32',
        'update_time' => 'int32',
        'user_status' => null,
        'user_status_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abnormal_plugins_list' => 'AbnormalPluginsList',
        'account_id' => 'AccountID',
        'agent_id' => 'AgentID',
        'agent_status' => 'AgentStatus',
        'cloud_provider' => 'CloudProvider',
        'cpu_usage' => 'CpuUsage',
        'dns' => 'Dns',
        'ecs_instance' => 'EcsInstance',
        'first_heartbeat_time' => 'FirstHeartbeatTime',
        'gateway' => 'Gateway',
        'group' => 'Group',
        'group_path' => 'GroupPath',
        'institution_id' => 'InstitutionID',
        'kernel_version' => 'KernelVersion',
        'last_heartbeat_time' => 'LastHeartbeatTime',
        'mem_usage' => 'MemUsage',
        'online' => 'Online',
        'platform' => 'Platform',
        'plugins_brief_info' => 'PluginsBriefInfo',
        'plugins_status' => 'PluginsStatus',
        'reason' => 'Reason',
        'risk' => 'Risk',
        'security_enhancement' => 'SecurityEnhancement',
        'start_time' => 'StartTime',
        'status' => 'Status',
        'tags' => 'Tags',
        'total_mem' => 'TotalMem',
        'update_time' => 'UpdateTime',
        'user_status' => 'UserStatus',
        'user_status_reason' => 'UserStatusReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abnormal_plugins_list' => 'setAbnormalPluginsList',
        'account_id' => 'setAccountId',
        'agent_id' => 'setAgentId',
        'agent_status' => 'setAgentStatus',
        'cloud_provider' => 'setCloudProvider',
        'cpu_usage' => 'setCpuUsage',
        'dns' => 'setDns',
        'ecs_instance' => 'setEcsInstance',
        'first_heartbeat_time' => 'setFirstHeartbeatTime',
        'gateway' => 'setGateway',
        'group' => 'setGroup',
        'group_path' => 'setGroupPath',
        'institution_id' => 'setInstitutionId',
        'kernel_version' => 'setKernelVersion',
        'last_heartbeat_time' => 'setLastHeartbeatTime',
        'mem_usage' => 'setMemUsage',
        'online' => 'setOnline',
        'platform' => 'setPlatform',
        'plugins_brief_info' => 'setPluginsBriefInfo',
        'plugins_status' => 'setPluginsStatus',
        'reason' => 'setReason',
        'risk' => 'setRisk',
        'security_enhancement' => 'setSecurityEnhancement',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'total_mem' => 'setTotalMem',
        'update_time' => 'setUpdateTime',
        'user_status' => 'setUserStatus',
        'user_status_reason' => 'setUserStatusReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abnormal_plugins_list' => 'getAbnormalPluginsList',
        'account_id' => 'getAccountId',
        'agent_id' => 'getAgentId',
        'agent_status' => 'getAgentStatus',
        'cloud_provider' => 'getCloudProvider',
        'cpu_usage' => 'getCpuUsage',
        'dns' => 'getDns',
        'ecs_instance' => 'getEcsInstance',
        'first_heartbeat_time' => 'getFirstHeartbeatTime',
        'gateway' => 'getGateway',
        'group' => 'getGroup',
        'group_path' => 'getGroupPath',
        'institution_id' => 'getInstitutionId',
        'kernel_version' => 'getKernelVersion',
        'last_heartbeat_time' => 'getLastHeartbeatTime',
        'mem_usage' => 'getMemUsage',
        'online' => 'getOnline',
        'platform' => 'getPlatform',
        'plugins_brief_info' => 'getPluginsBriefInfo',
        'plugins_status' => 'getPluginsStatus',
        'reason' => 'getReason',
        'risk' => 'getRisk',
        'security_enhancement' => 'getSecurityEnhancement',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'total_mem' => 'getTotalMem',
        'update_time' => 'getUpdateTime',
        'user_status' => 'getUserStatus',
        'user_status_reason' => 'getUserStatusReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abnormal_plugins_list'] = isset($data['abnormal_plugins_list']) ? $data['abnormal_plugins_list'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent_status'] = isset($data['agent_status']) ? $data['agent_status'] : null;
        $this->container['cloud_provider'] = isset($data['cloud_provider']) ? $data['cloud_provider'] : null;
        $this->container['cpu_usage'] = isset($data['cpu_usage']) ? $data['cpu_usage'] : null;
        $this->container['dns'] = isset($data['dns']) ? $data['dns'] : null;
        $this->container['ecs_instance'] = isset($data['ecs_instance']) ? $data['ecs_instance'] : null;
        $this->container['first_heartbeat_time'] = isset($data['first_heartbeat_time']) ? $data['first_heartbeat_time'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['group_path'] = isset($data['group_path']) ? $data['group_path'] : null;
        $this->container['institution_id'] = isset($data['institution_id']) ? $data['institution_id'] : null;
        $this->container['kernel_version'] = isset($data['kernel_version']) ? $data['kernel_version'] : null;
        $this->container['last_heartbeat_time'] = isset($data['last_heartbeat_time']) ? $data['last_heartbeat_time'] : null;
        $this->container['mem_usage'] = isset($data['mem_usage']) ? $data['mem_usage'] : null;
        $this->container['online'] = isset($data['online']) ? $data['online'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['plugins_brief_info'] = isset($data['plugins_brief_info']) ? $data['plugins_brief_info'] : null;
        $this->container['plugins_status'] = isset($data['plugins_status']) ? $data['plugins_status'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['risk'] = isset($data['risk']) ? $data['risk'] : null;
        $this->container['security_enhancement'] = isset($data['security_enhancement']) ? $data['security_enhancement'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['total_mem'] = isset($data['total_mem']) ? $data['total_mem'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['user_status'] = isset($data['user_status']) ? $data['user_status'] : null;
        $this->container['user_status_reason'] = isset($data['user_status_reason']) ? $data['user_status_reason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abnormal_plugins_list
     *
     * @return string
     */
    public function getAbnormalPluginsList()
    {
        return $this->container['abnormal_plugins_list'];
    }

    /**
     * Sets abnormal_plugins_list
     *
     * @param string $abnormal_plugins_list abnormal_plugins_list
     *
     * @return $this
     */
    public function setAbnormalPluginsList($abnormal_plugins_list)
    {
        $this->container['abnormal_plugins_list'] = $abnormal_plugins_list;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent_status
     *
     * @return string
     */
    public function getAgentStatus()
    {
        return $this->container['agent_status'];
    }

    /**
     * Sets agent_status
     *
     * @param string $agent_status agent_status
     *
     * @return $this
     */
    public function setAgentStatus($agent_status)
    {
        $this->container['agent_status'] = $agent_status;

        return $this;
    }

    /**
     * Gets cloud_provider
     *
     * @return string
     */
    public function getCloudProvider()
    {
        return $this->container['cloud_provider'];
    }

    /**
     * Sets cloud_provider
     *
     * @param string $cloud_provider cloud_provider
     *
     * @return $this
     */
    public function setCloudProvider($cloud_provider)
    {
        $this->container['cloud_provider'] = $cloud_provider;

        return $this;
    }

    /**
     * Gets cpu_usage
     *
     * @return double
     */
    public function getCpuUsage()
    {
        return $this->container['cpu_usage'];
    }

    /**
     * Sets cpu_usage
     *
     * @param double $cpu_usage cpu_usage
     *
     * @return $this
     */
    public function setCpuUsage($cpu_usage)
    {
        $this->container['cpu_usage'] = $cpu_usage;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return string
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param string $dns dns
     *
     * @return $this
     */
    public function setDns($dns)
    {
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets ecs_instance
     *
     * @return \Volcengine\Seccenter20240508\Model\EcsInstanceForListMultiLevelAssetHostsOutput
     */
    public function getEcsInstance()
    {
        return $this->container['ecs_instance'];
    }

    /**
     * Sets ecs_instance
     *
     * @param \Volcengine\Seccenter20240508\Model\EcsInstanceForListMultiLevelAssetHostsOutput $ecs_instance ecs_instance
     *
     * @return $this
     */
    public function setEcsInstance($ecs_instance)
    {
        $this->container['ecs_instance'] = $ecs_instance;

        return $this;
    }

    /**
     * Gets first_heartbeat_time
     *
     * @return int
     */
    public function getFirstHeartbeatTime()
    {
        return $this->container['first_heartbeat_time'];
    }

    /**
     * Sets first_heartbeat_time
     *
     * @param int $first_heartbeat_time first_heartbeat_time
     *
     * @return $this
     */
    public function setFirstHeartbeatTime($first_heartbeat_time)
    {
        $this->container['first_heartbeat_time'] = $first_heartbeat_time;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string $gateway gateway
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets group_path
     *
     * @return string
     */
    public function getGroupPath()
    {
        return $this->container['group_path'];
    }

    /**
     * Sets group_path
     *
     * @param string $group_path group_path
     *
     * @return $this
     */
    public function setGroupPath($group_path)
    {
        $this->container['group_path'] = $group_path;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institution_id
     *
     * @return $this
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets kernel_version
     *
     * @return string
     */
    public function getKernelVersion()
    {
        return $this->container['kernel_version'];
    }

    /**
     * Sets kernel_version
     *
     * @param string $kernel_version kernel_version
     *
     * @return $this
     */
    public function setKernelVersion($kernel_version)
    {
        $this->container['kernel_version'] = $kernel_version;

        return $this;
    }

    /**
     * Gets last_heartbeat_time
     *
     * @return int
     */
    public function getLastHeartbeatTime()
    {
        return $this->container['last_heartbeat_time'];
    }

    /**
     * Sets last_heartbeat_time
     *
     * @param int $last_heartbeat_time last_heartbeat_time
     *
     * @return $this
     */
    public function setLastHeartbeatTime($last_heartbeat_time)
    {
        $this->container['last_heartbeat_time'] = $last_heartbeat_time;

        return $this;
    }

    /**
     * Gets mem_usage
     *
     * @return double
     */
    public function getMemUsage()
    {
        return $this->container['mem_usage'];
    }

    /**
     * Sets mem_usage
     *
     * @param double $mem_usage mem_usage
     *
     * @return $this
     */
    public function setMemUsage($mem_usage)
    {
        $this->container['mem_usage'] = $mem_usage;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool $online online
     *
     * @return $this
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets plugins_brief_info
     *
     * @return string
     */
    public function getPluginsBriefInfo()
    {
        return $this->container['plugins_brief_info'];
    }

    /**
     * Sets plugins_brief_info
     *
     * @param string $plugins_brief_info plugins_brief_info
     *
     * @return $this
     */
    public function setPluginsBriefInfo($plugins_brief_info)
    {
        $this->container['plugins_brief_info'] = $plugins_brief_info;

        return $this;
    }

    /**
     * Gets plugins_status
     *
     * @return string
     */
    public function getPluginsStatus()
    {
        return $this->container['plugins_status'];
    }

    /**
     * Sets plugins_status
     *
     * @param string $plugins_status plugins_status
     *
     * @return $this
     */
    public function setPluginsStatus($plugins_status)
    {
        $this->container['plugins_status'] = $plugins_status;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return \Volcengine\Seccenter20240508\Model\RiskForListMultiLevelAssetHostsOutput
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param \Volcengine\Seccenter20240508\Model\RiskForListMultiLevelAssetHostsOutput $risk risk
     *
     * @return $this
     */
    public function setRisk($risk)
    {
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets security_enhancement
     *
     * @return bool
     */
    public function getSecurityEnhancement()
    {
        return $this->container['security_enhancement'];
    }

    /**
     * Sets security_enhancement
     *
     * @param bool $security_enhancement security_enhancement
     *
     * @return $this
     */
    public function setSecurityEnhancement($security_enhancement)
    {
        $this->container['security_enhancement'] = $security_enhancement;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets total_mem
     *
     * @return int
     */
    public function getTotalMem()
    {
        return $this->container['total_mem'];
    }

    /**
     * Sets total_mem
     *
     * @param int $total_mem total_mem
     *
     * @return $this
     */
    public function setTotalMem($total_mem)
    {
        $this->container['total_mem'] = $total_mem;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets user_status
     *
     * @return string
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     *
     * @param string $user_status user_status
     *
     * @return $this
     */
    public function setUserStatus($user_status)
    {
        $this->container['user_status'] = $user_status;

        return $this;
    }

    /**
     * Gets user_status_reason
     *
     * @return string
     */
    public function getUserStatusReason()
    {
        return $this->container['user_status_reason'];
    }

    /**
     * Sets user_status_reason
     *
     * @param string $user_status_reason user_status_reason
     *
     * @return $this
     */
    public function setUserStatusReason($user_status_reason)
    {
        $this->container['user_status_reason'] = $user_status_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

