<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListRaspProcessesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListRaspProcessesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'agent_tags' => 'string[]',
        'cmdline' => 'string',
        'exe_name' => 'string',
        'hostname' => 'string',
        'id' => 'string',
        'inner_ip_list' => 'string[]',
        'inspect_port' => 'int',
        'outer_ip_list' => 'string[]',
        'pid' => 'string',
        'platform' => 'string',
        'platform_family' => 'string',
        'rasp_config_name' => 'string',
        'reason' => 'string',
        'related_config_id' => 'string',
        'runtime' => 'string',
        'start_time_unix' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'agent_tags' => null,
        'cmdline' => null,
        'exe_name' => null,
        'hostname' => null,
        'id' => null,
        'inner_ip_list' => null,
        'inspect_port' => 'int32',
        'outer_ip_list' => null,
        'pid' => null,
        'platform' => null,
        'platform_family' => null,
        'rasp_config_name' => null,
        'reason' => null,
        'related_config_id' => null,
        'runtime' => null,
        'start_time_unix' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'agent_tags' => 'AgentTags',
        'cmdline' => 'Cmdline',
        'exe_name' => 'ExeName',
        'hostname' => 'Hostname',
        'id' => 'ID',
        'inner_ip_list' => 'InnerIPList',
        'inspect_port' => 'InspectPort',
        'outer_ip_list' => 'OuterIPList',
        'pid' => 'Pid',
        'platform' => 'Platform',
        'platform_family' => 'PlatformFamily',
        'rasp_config_name' => 'RaspConfigName',
        'reason' => 'Reason',
        'related_config_id' => 'RelatedConfigID',
        'runtime' => 'Runtime',
        'start_time_unix' => 'StartTimeUnix',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'agent_tags' => 'setAgentTags',
        'cmdline' => 'setCmdline',
        'exe_name' => 'setExeName',
        'hostname' => 'setHostname',
        'id' => 'setId',
        'inner_ip_list' => 'setInnerIpList',
        'inspect_port' => 'setInspectPort',
        'outer_ip_list' => 'setOuterIpList',
        'pid' => 'setPid',
        'platform' => 'setPlatform',
        'platform_family' => 'setPlatformFamily',
        'rasp_config_name' => 'setRaspConfigName',
        'reason' => 'setReason',
        'related_config_id' => 'setRelatedConfigId',
        'runtime' => 'setRuntime',
        'start_time_unix' => 'setStartTimeUnix',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'agent_tags' => 'getAgentTags',
        'cmdline' => 'getCmdline',
        'exe_name' => 'getExeName',
        'hostname' => 'getHostname',
        'id' => 'getId',
        'inner_ip_list' => 'getInnerIpList',
        'inspect_port' => 'getInspectPort',
        'outer_ip_list' => 'getOuterIpList',
        'pid' => 'getPid',
        'platform' => 'getPlatform',
        'platform_family' => 'getPlatformFamily',
        'rasp_config_name' => 'getRaspConfigName',
        'reason' => 'getReason',
        'related_config_id' => 'getRelatedConfigId',
        'runtime' => 'getRuntime',
        'start_time_unix' => 'getStartTimeUnix',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent_tags'] = isset($data['agent_tags']) ? $data['agent_tags'] : null;
        $this->container['cmdline'] = isset($data['cmdline']) ? $data['cmdline'] : null;
        $this->container['exe_name'] = isset($data['exe_name']) ? $data['exe_name'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inner_ip_list'] = isset($data['inner_ip_list']) ? $data['inner_ip_list'] : null;
        $this->container['inspect_port'] = isset($data['inspect_port']) ? $data['inspect_port'] : null;
        $this->container['outer_ip_list'] = isset($data['outer_ip_list']) ? $data['outer_ip_list'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['platform_family'] = isset($data['platform_family']) ? $data['platform_family'] : null;
        $this->container['rasp_config_name'] = isset($data['rasp_config_name']) ? $data['rasp_config_name'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['related_config_id'] = isset($data['related_config_id']) ? $data['related_config_id'] : null;
        $this->container['runtime'] = isset($data['runtime']) ? $data['runtime'] : null;
        $this->container['start_time_unix'] = isset($data['start_time_unix']) ? $data['start_time_unix'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent_tags
     *
     * @return string[]
     */
    public function getAgentTags()
    {
        return $this->container['agent_tags'];
    }

    /**
     * Sets agent_tags
     *
     * @param string[] $agent_tags agent_tags
     *
     * @return $this
     */
    public function setAgentTags($agent_tags)
    {
        $this->container['agent_tags'] = $agent_tags;

        return $this;
    }

    /**
     * Gets cmdline
     *
     * @return string
     */
    public function getCmdline()
    {
        return $this->container['cmdline'];
    }

    /**
     * Sets cmdline
     *
     * @param string $cmdline cmdline
     *
     * @return $this
     */
    public function setCmdline($cmdline)
    {
        $this->container['cmdline'] = $cmdline;

        return $this;
    }

    /**
     * Gets exe_name
     *
     * @return string
     */
    public function getExeName()
    {
        return $this->container['exe_name'];
    }

    /**
     * Sets exe_name
     *
     * @param string $exe_name exe_name
     *
     * @return $this
     */
    public function setExeName($exe_name)
    {
        $this->container['exe_name'] = $exe_name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inner_ip_list
     *
     * @return string[]
     */
    public function getInnerIpList()
    {
        return $this->container['inner_ip_list'];
    }

    /**
     * Sets inner_ip_list
     *
     * @param string[] $inner_ip_list inner_ip_list
     *
     * @return $this
     */
    public function setInnerIpList($inner_ip_list)
    {
        $this->container['inner_ip_list'] = $inner_ip_list;

        return $this;
    }

    /**
     * Gets inspect_port
     *
     * @return int
     */
    public function getInspectPort()
    {
        return $this->container['inspect_port'];
    }

    /**
     * Sets inspect_port
     *
     * @param int $inspect_port inspect_port
     *
     * @return $this
     */
    public function setInspectPort($inspect_port)
    {
        $this->container['inspect_port'] = $inspect_port;

        return $this;
    }

    /**
     * Gets outer_ip_list
     *
     * @return string[]
     */
    public function getOuterIpList()
    {
        return $this->container['outer_ip_list'];
    }

    /**
     * Sets outer_ip_list
     *
     * @param string[] $outer_ip_list outer_ip_list
     *
     * @return $this
     */
    public function setOuterIpList($outer_ip_list)
    {
        $this->container['outer_ip_list'] = $outer_ip_list;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets platform_family
     *
     * @return string
     */
    public function getPlatformFamily()
    {
        return $this->container['platform_family'];
    }

    /**
     * Sets platform_family
     *
     * @param string $platform_family platform_family
     *
     * @return $this
     */
    public function setPlatformFamily($platform_family)
    {
        $this->container['platform_family'] = $platform_family;

        return $this;
    }

    /**
     * Gets rasp_config_name
     *
     * @return string
     */
    public function getRaspConfigName()
    {
        return $this->container['rasp_config_name'];
    }

    /**
     * Sets rasp_config_name
     *
     * @param string $rasp_config_name rasp_config_name
     *
     * @return $this
     */
    public function setRaspConfigName($rasp_config_name)
    {
        $this->container['rasp_config_name'] = $rasp_config_name;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets related_config_id
     *
     * @return string
     */
    public function getRelatedConfigId()
    {
        return $this->container['related_config_id'];
    }

    /**
     * Sets related_config_id
     *
     * @param string $related_config_id related_config_id
     *
     * @return $this
     */
    public function setRelatedConfigId($related_config_id)
    {
        $this->container['related_config_id'] = $related_config_id;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string $runtime runtime
     *
     * @return $this
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets start_time_unix
     *
     * @return int
     */
    public function getStartTimeUnix()
    {
        return $this->container['start_time_unix'];
    }

    /**
     * Sets start_time_unix
     *
     * @param int $start_time_unix start_time_unix
     *
     * @return $this
     */
    public function setStartTimeUnix($start_time_unix)
    {
        $this->container['start_time_unix'] = $start_time_unix;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

