<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ScanTypeForEditVulnScanConfigInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScanTypeForEditVulnScanConfigInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app' => 'bool',
        'dev_linux' => 'bool',
        'dev_py' => 'bool',
        'linux' => 'bool',
        'webcms' => 'bool',
        'windows' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app' => null,
        'dev_linux' => null,
        'dev_py' => null,
        'linux' => null,
        'webcms' => null,
        'windows' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app' => 'App',
        'dev_linux' => 'DevLinux',
        'dev_py' => 'DevPy',
        'linux' => 'Linux',
        'webcms' => 'Webcms',
        'windows' => 'Windows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app' => 'setApp',
        'dev_linux' => 'setDevLinux',
        'dev_py' => 'setDevPy',
        'linux' => 'setLinux',
        'webcms' => 'setWebcms',
        'windows' => 'setWindows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app' => 'getApp',
        'dev_linux' => 'getDevLinux',
        'dev_py' => 'getDevPy',
        'linux' => 'getLinux',
        'webcms' => 'getWebcms',
        'windows' => 'getWindows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app'] = isset($data['app']) ? $data['app'] : null;
        $this->container['dev_linux'] = isset($data['dev_linux']) ? $data['dev_linux'] : null;
        $this->container['dev_py'] = isset($data['dev_py']) ? $data['dev_py'] : null;
        $this->container['linux'] = isset($data['linux']) ? $data['linux'] : null;
        $this->container['webcms'] = isset($data['webcms']) ? $data['webcms'] : null;
        $this->container['windows'] = isset($data['windows']) ? $data['windows'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app
     *
     * @return bool
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param bool $app app
     *
     * @return $this
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets dev_linux
     *
     * @return bool
     */
    public function getDevLinux()
    {
        return $this->container['dev_linux'];
    }

    /**
     * Sets dev_linux
     *
     * @param bool $dev_linux dev_linux
     *
     * @return $this
     */
    public function setDevLinux($dev_linux)
    {
        $this->container['dev_linux'] = $dev_linux;

        return $this;
    }

    /**
     * Gets dev_py
     *
     * @return bool
     */
    public function getDevPy()
    {
        return $this->container['dev_py'];
    }

    /**
     * Sets dev_py
     *
     * @param bool $dev_py dev_py
     *
     * @return $this
     */
    public function setDevPy($dev_py)
    {
        $this->container['dev_py'] = $dev_py;

        return $this;
    }

    /**
     * Gets linux
     *
     * @return bool
     */
    public function getLinux()
    {
        return $this->container['linux'];
    }

    /**
     * Sets linux
     *
     * @param bool $linux linux
     *
     * @return $this
     */
    public function setLinux($linux)
    {
        $this->container['linux'] = $linux;

        return $this;
    }

    /**
     * Gets webcms
     *
     * @return bool
     */
    public function getWebcms()
    {
        return $this->container['webcms'];
    }

    /**
     * Sets webcms
     *
     * @param bool $webcms webcms
     *
     * @return $this
     */
    public function setWebcms($webcms)
    {
        $this->container['webcms'] = $webcms;

        return $this;
    }

    /**
     * Gets windows
     *
     * @return bool
     */
    public function getWindows()
    {
        return $this->container['windows'];
    }

    /**
     * Sets windows
     *
     * @param bool $windows windows
     *
     * @return $this
     */
    public function setWindows($windows)
    {
        $this->container['windows'] = $windows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

