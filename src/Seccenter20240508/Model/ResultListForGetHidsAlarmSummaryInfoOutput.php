<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ResultListForGetHidsAlarmSummaryInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResultListForGetHidsAlarmSummaryInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'argv' => 'string',
        'attr' => 'string',
        'comm' => 'string',
        'create_at' => 'string',
        'cron' => 'string',
        'data' => 'string',
        'data_type' => 'string',
        'exe' => 'string',
        'exe_hash' => 'string',
        'exe_size' => 'string',
        'file_path' => 'string',
        'ip' => 'string',
        'keywords' => 'string',
        'line_number' => 'string',
        'login_at' => 'string',
        'logout_at' => 'string',
        'matches' => 'string',
        'md5sum' => 'string',
        'modify_at' => 'string',
        'name' => 'string',
        'permission' => 'string',
        'pgid' => 'string',
        'pid' => 'int',
        'port' => 'string',
        'ppid' => 'string',
        'restart' => 'string',
        'sha256sum' => 'string',
        'stype' => 'string',
        'trace_id' => 'string',
        'types' => 'string',
        'user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'argv' => null,
        'attr' => null,
        'comm' => null,
        'create_at' => null,
        'cron' => null,
        'data' => null,
        'data_type' => null,
        'exe' => null,
        'exe_hash' => null,
        'exe_size' => null,
        'file_path' => null,
        'ip' => null,
        'keywords' => null,
        'line_number' => null,
        'login_at' => null,
        'logout_at' => null,
        'matches' => null,
        'md5sum' => null,
        'modify_at' => null,
        'name' => null,
        'permission' => null,
        'pgid' => null,
        'pid' => 'int32',
        'port' => null,
        'ppid' => null,
        'restart' => null,
        'sha256sum' => null,
        'stype' => null,
        'trace_id' => null,
        'types' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'argv' => 'Argv',
        'attr' => 'Attr',
        'comm' => 'Comm',
        'create_at' => 'CreateAt',
        'cron' => 'Cron',
        'data' => 'Data',
        'data_type' => 'DataType',
        'exe' => 'Exe',
        'exe_hash' => 'ExeHash',
        'exe_size' => 'ExeSize',
        'file_path' => 'FilePath',
        'ip' => 'IP',
        'keywords' => 'Keywords',
        'line_number' => 'LineNumber',
        'login_at' => 'LoginAt',
        'logout_at' => 'LogoutAt',
        'matches' => 'Matches',
        'md5sum' => 'Md5sum',
        'modify_at' => 'ModifyAt',
        'name' => 'Name',
        'permission' => 'Permission',
        'pgid' => 'Pgid',
        'pid' => 'Pid',
        'port' => 'Port',
        'ppid' => 'Ppid',
        'restart' => 'Restart',
        'sha256sum' => 'Sha256sum',
        'stype' => 'Stype',
        'trace_id' => 'TraceID',
        'types' => 'Types',
        'user' => 'User'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'argv' => 'setArgv',
        'attr' => 'setAttr',
        'comm' => 'setComm',
        'create_at' => 'setCreateAt',
        'cron' => 'setCron',
        'data' => 'setData',
        'data_type' => 'setDataType',
        'exe' => 'setExe',
        'exe_hash' => 'setExeHash',
        'exe_size' => 'setExeSize',
        'file_path' => 'setFilePath',
        'ip' => 'setIp',
        'keywords' => 'setKeywords',
        'line_number' => 'setLineNumber',
        'login_at' => 'setLoginAt',
        'logout_at' => 'setLogoutAt',
        'matches' => 'setMatches',
        'md5sum' => 'setMd5sum',
        'modify_at' => 'setModifyAt',
        'name' => 'setName',
        'permission' => 'setPermission',
        'pgid' => 'setPgid',
        'pid' => 'setPid',
        'port' => 'setPort',
        'ppid' => 'setPpid',
        'restart' => 'setRestart',
        'sha256sum' => 'setSha256sum',
        'stype' => 'setStype',
        'trace_id' => 'setTraceId',
        'types' => 'setTypes',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'argv' => 'getArgv',
        'attr' => 'getAttr',
        'comm' => 'getComm',
        'create_at' => 'getCreateAt',
        'cron' => 'getCron',
        'data' => 'getData',
        'data_type' => 'getDataType',
        'exe' => 'getExe',
        'exe_hash' => 'getExeHash',
        'exe_size' => 'getExeSize',
        'file_path' => 'getFilePath',
        'ip' => 'getIp',
        'keywords' => 'getKeywords',
        'line_number' => 'getLineNumber',
        'login_at' => 'getLoginAt',
        'logout_at' => 'getLogoutAt',
        'matches' => 'getMatches',
        'md5sum' => 'getMd5sum',
        'modify_at' => 'getModifyAt',
        'name' => 'getName',
        'permission' => 'getPermission',
        'pgid' => 'getPgid',
        'pid' => 'getPid',
        'port' => 'getPort',
        'ppid' => 'getPpid',
        'restart' => 'getRestart',
        'sha256sum' => 'getSha256sum',
        'stype' => 'getStype',
        'trace_id' => 'getTraceId',
        'types' => 'getTypes',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['argv'] = isset($data['argv']) ? $data['argv'] : null;
        $this->container['attr'] = isset($data['attr']) ? $data['attr'] : null;
        $this->container['comm'] = isset($data['comm']) ? $data['comm'] : null;
        $this->container['create_at'] = isset($data['create_at']) ? $data['create_at'] : null;
        $this->container['cron'] = isset($data['cron']) ? $data['cron'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['exe'] = isset($data['exe']) ? $data['exe'] : null;
        $this->container['exe_hash'] = isset($data['exe_hash']) ? $data['exe_hash'] : null;
        $this->container['exe_size'] = isset($data['exe_size']) ? $data['exe_size'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['login_at'] = isset($data['login_at']) ? $data['login_at'] : null;
        $this->container['logout_at'] = isset($data['logout_at']) ? $data['logout_at'] : null;
        $this->container['matches'] = isset($data['matches']) ? $data['matches'] : null;
        $this->container['md5sum'] = isset($data['md5sum']) ? $data['md5sum'] : null;
        $this->container['modify_at'] = isset($data['modify_at']) ? $data['modify_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['permission'] = isset($data['permission']) ? $data['permission'] : null;
        $this->container['pgid'] = isset($data['pgid']) ? $data['pgid'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['ppid'] = isset($data['ppid']) ? $data['ppid'] : null;
        $this->container['restart'] = isset($data['restart']) ? $data['restart'] : null;
        $this->container['sha256sum'] = isset($data['sha256sum']) ? $data['sha256sum'] : null;
        $this->container['stype'] = isset($data['stype']) ? $data['stype'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
        $this->container['types'] = isset($data['types']) ? $data['types'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets argv
     *
     * @return string
     */
    public function getArgv()
    {
        return $this->container['argv'];
    }

    /**
     * Sets argv
     *
     * @param string $argv argv
     *
     * @return $this
     */
    public function setArgv($argv)
    {
        $this->container['argv'] = $argv;

        return $this;
    }

    /**
     * Gets attr
     *
     * @return string
     */
    public function getAttr()
    {
        return $this->container['attr'];
    }

    /**
     * Sets attr
     *
     * @param string $attr attr
     *
     * @return $this
     */
    public function setAttr($attr)
    {
        $this->container['attr'] = $attr;

        return $this;
    }

    /**
     * Gets comm
     *
     * @return string
     */
    public function getComm()
    {
        return $this->container['comm'];
    }

    /**
     * Sets comm
     *
     * @param string $comm comm
     *
     * @return $this
     */
    public function setComm($comm)
    {
        $this->container['comm'] = $comm;

        return $this;
    }

    /**
     * Gets create_at
     *
     * @return string
     */
    public function getCreateAt()
    {
        return $this->container['create_at'];
    }

    /**
     * Sets create_at
     *
     * @param string $create_at create_at
     *
     * @return $this
     */
    public function setCreateAt($create_at)
    {
        $this->container['create_at'] = $create_at;

        return $this;
    }

    /**
     * Gets cron
     *
     * @return string
     */
    public function getCron()
    {
        return $this->container['cron'];
    }

    /**
     * Sets cron
     *
     * @param string $cron cron
     *
     * @return $this
     */
    public function setCron($cron)
    {
        $this->container['cron'] = $cron;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets exe
     *
     * @return string
     */
    public function getExe()
    {
        return $this->container['exe'];
    }

    /**
     * Sets exe
     *
     * @param string $exe exe
     *
     * @return $this
     */
    public function setExe($exe)
    {
        $this->container['exe'] = $exe;

        return $this;
    }

    /**
     * Gets exe_hash
     *
     * @return string
     */
    public function getExeHash()
    {
        return $this->container['exe_hash'];
    }

    /**
     * Sets exe_hash
     *
     * @param string $exe_hash exe_hash
     *
     * @return $this
     */
    public function setExeHash($exe_hash)
    {
        $this->container['exe_hash'] = $exe_hash;

        return $this;
    }

    /**
     * Gets exe_size
     *
     * @return string
     */
    public function getExeSize()
    {
        return $this->container['exe_size'];
    }

    /**
     * Sets exe_size
     *
     * @param string $exe_size exe_size
     *
     * @return $this
     */
    public function setExeSize($exe_size)
    {
        $this->container['exe_size'] = $exe_size;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path file_path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string $keywords keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return string
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param string $line_number line_number
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets login_at
     *
     * @return string
     */
    public function getLoginAt()
    {
        return $this->container['login_at'];
    }

    /**
     * Sets login_at
     *
     * @param string $login_at login_at
     *
     * @return $this
     */
    public function setLoginAt($login_at)
    {
        $this->container['login_at'] = $login_at;

        return $this;
    }

    /**
     * Gets logout_at
     *
     * @return string
     */
    public function getLogoutAt()
    {
        return $this->container['logout_at'];
    }

    /**
     * Sets logout_at
     *
     * @param string $logout_at logout_at
     *
     * @return $this
     */
    public function setLogoutAt($logout_at)
    {
        $this->container['logout_at'] = $logout_at;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return string
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param string $matches matches
     *
     * @return $this
     */
    public function setMatches($matches)
    {
        $this->container['matches'] = $matches;

        return $this;
    }

    /**
     * Gets md5sum
     *
     * @return string
     */
    public function getMd5sum()
    {
        return $this->container['md5sum'];
    }

    /**
     * Sets md5sum
     *
     * @param string $md5sum md5sum
     *
     * @return $this
     */
    public function setMd5sum($md5sum)
    {
        $this->container['md5sum'] = $md5sum;

        return $this;
    }

    /**
     * Gets modify_at
     *
     * @return string
     */
    public function getModifyAt()
    {
        return $this->container['modify_at'];
    }

    /**
     * Sets modify_at
     *
     * @param string $modify_at modify_at
     *
     * @return $this
     */
    public function setModifyAt($modify_at)
    {
        $this->container['modify_at'] = $modify_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return string
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     *
     * @param string $permission permission
     *
     * @return $this
     */
    public function setPermission($permission)
    {
        $this->container['permission'] = $permission;

        return $this;
    }

    /**
     * Gets pgid
     *
     * @return string
     */
    public function getPgid()
    {
        return $this->container['pgid'];
    }

    /**
     * Sets pgid
     *
     * @param string $pgid pgid
     *
     * @return $this
     */
    public function setPgid($pgid)
    {
        $this->container['pgid'] = $pgid;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return int
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param int $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets ppid
     *
     * @return string
     */
    public function getPpid()
    {
        return $this->container['ppid'];
    }

    /**
     * Sets ppid
     *
     * @param string $ppid ppid
     *
     * @return $this
     */
    public function setPpid($ppid)
    {
        $this->container['ppid'] = $ppid;

        return $this;
    }

    /**
     * Gets restart
     *
     * @return string
     */
    public function getRestart()
    {
        return $this->container['restart'];
    }

    /**
     * Sets restart
     *
     * @param string $restart restart
     *
     * @return $this
     */
    public function setRestart($restart)
    {
        $this->container['restart'] = $restart;

        return $this;
    }

    /**
     * Gets sha256sum
     *
     * @return string
     */
    public function getSha256sum()
    {
        return $this->container['sha256sum'];
    }

    /**
     * Sets sha256sum
     *
     * @param string $sha256sum sha256sum
     *
     * @return $this
     */
    public function setSha256sum($sha256sum)
    {
        $this->container['sha256sum'] = $sha256sum;

        return $this;
    }

    /**
     * Gets stype
     *
     * @return string
     */
    public function getStype()
    {
        return $this->container['stype'];
    }

    /**
     * Sets stype
     *
     * @param string $stype stype
     *
     * @return $this
     */
    public function setStype($stype)
    {
        $this->container['stype'] = $stype;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string $types types
     *
     * @return $this
     */
    public function setTypes($types)
    {
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

