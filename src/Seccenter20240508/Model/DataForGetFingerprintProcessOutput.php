<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForGetFingerprintProcessOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForGetFingerprintProcessOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'agent_tags' => 'string[]',
        'checksum' => 'string',
        'cmdline' => 'string',
        'comm' => 'string',
        'common' => 'bool',
        'container_id' => 'string',
        'container_name' => 'string',
        'eip_address' => 'string',
        'euid' => 'string',
        'eusername' => 'string',
        'exe' => 'string',
        'hostname' => 'string',
        'id' => 'string',
        'integrity' => 'bool',
        'pid' => 'string',
        'ppid' => 'string',
        'primary_ip_address' => 'string',
        'start_time' => 'int',
        'state' => 'string',
        'uid' => 'string',
        'update_time' => 'int',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'agent_tags' => null,
        'checksum' => null,
        'cmdline' => null,
        'comm' => null,
        'common' => null,
        'container_id' => null,
        'container_name' => null,
        'eip_address' => null,
        'euid' => null,
        'eusername' => null,
        'exe' => null,
        'hostname' => null,
        'id' => null,
        'integrity' => null,
        'pid' => null,
        'ppid' => null,
        'primary_ip_address' => null,
        'start_time' => 'int32',
        'state' => null,
        'uid' => null,
        'update_time' => 'int32',
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'agent_tags' => 'AgentTags',
        'checksum' => 'Checksum',
        'cmdline' => 'Cmdline',
        'comm' => 'Comm',
        'common' => 'Common',
        'container_id' => 'ContainerID',
        'container_name' => 'ContainerName',
        'eip_address' => 'EipAddress',
        'euid' => 'Euid',
        'eusername' => 'Eusername',
        'exe' => 'Exe',
        'hostname' => 'Hostname',
        'id' => 'ID',
        'integrity' => 'Integrity',
        'pid' => 'Pid',
        'ppid' => 'Ppid',
        'primary_ip_address' => 'PrimaryIpAddress',
        'start_time' => 'StartTime',
        'state' => 'State',
        'uid' => 'Uid',
        'update_time' => 'UpdateTime',
        'username' => 'Username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'agent_tags' => 'setAgentTags',
        'checksum' => 'setChecksum',
        'cmdline' => 'setCmdline',
        'comm' => 'setComm',
        'common' => 'setCommon',
        'container_id' => 'setContainerId',
        'container_name' => 'setContainerName',
        'eip_address' => 'setEipAddress',
        'euid' => 'setEuid',
        'eusername' => 'setEusername',
        'exe' => 'setExe',
        'hostname' => 'setHostname',
        'id' => 'setId',
        'integrity' => 'setIntegrity',
        'pid' => 'setPid',
        'ppid' => 'setPpid',
        'primary_ip_address' => 'setPrimaryIpAddress',
        'start_time' => 'setStartTime',
        'state' => 'setState',
        'uid' => 'setUid',
        'update_time' => 'setUpdateTime',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'agent_tags' => 'getAgentTags',
        'checksum' => 'getChecksum',
        'cmdline' => 'getCmdline',
        'comm' => 'getComm',
        'common' => 'getCommon',
        'container_id' => 'getContainerId',
        'container_name' => 'getContainerName',
        'eip_address' => 'getEipAddress',
        'euid' => 'getEuid',
        'eusername' => 'getEusername',
        'exe' => 'getExe',
        'hostname' => 'getHostname',
        'id' => 'getId',
        'integrity' => 'getIntegrity',
        'pid' => 'getPid',
        'ppid' => 'getPpid',
        'primary_ip_address' => 'getPrimaryIpAddress',
        'start_time' => 'getStartTime',
        'state' => 'getState',
        'uid' => 'getUid',
        'update_time' => 'getUpdateTime',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent_tags'] = isset($data['agent_tags']) ? $data['agent_tags'] : null;
        $this->container['checksum'] = isset($data['checksum']) ? $data['checksum'] : null;
        $this->container['cmdline'] = isset($data['cmdline']) ? $data['cmdline'] : null;
        $this->container['comm'] = isset($data['comm']) ? $data['comm'] : null;
        $this->container['common'] = isset($data['common']) ? $data['common'] : null;
        $this->container['container_id'] = isset($data['container_id']) ? $data['container_id'] : null;
        $this->container['container_name'] = isset($data['container_name']) ? $data['container_name'] : null;
        $this->container['eip_address'] = isset($data['eip_address']) ? $data['eip_address'] : null;
        $this->container['euid'] = isset($data['euid']) ? $data['euid'] : null;
        $this->container['eusername'] = isset($data['eusername']) ? $data['eusername'] : null;
        $this->container['exe'] = isset($data['exe']) ? $data['exe'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['integrity'] = isset($data['integrity']) ? $data['integrity'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['ppid'] = isset($data['ppid']) ? $data['ppid'] : null;
        $this->container['primary_ip_address'] = isset($data['primary_ip_address']) ? $data['primary_ip_address'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent_tags
     *
     * @return string[]
     */
    public function getAgentTags()
    {
        return $this->container['agent_tags'];
    }

    /**
     * Sets agent_tags
     *
     * @param string[] $agent_tags agent_tags
     *
     * @return $this
     */
    public function setAgentTags($agent_tags)
    {
        $this->container['agent_tags'] = $agent_tags;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return string
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param string $checksum checksum
     *
     * @return $this
     */
    public function setChecksum($checksum)
    {
        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Gets cmdline
     *
     * @return string
     */
    public function getCmdline()
    {
        return $this->container['cmdline'];
    }

    /**
     * Sets cmdline
     *
     * @param string $cmdline cmdline
     *
     * @return $this
     */
    public function setCmdline($cmdline)
    {
        $this->container['cmdline'] = $cmdline;

        return $this;
    }

    /**
     * Gets comm
     *
     * @return string
     */
    public function getComm()
    {
        return $this->container['comm'];
    }

    /**
     * Sets comm
     *
     * @param string $comm comm
     *
     * @return $this
     */
    public function setComm($comm)
    {
        $this->container['comm'] = $comm;

        return $this;
    }

    /**
     * Gets common
     *
     * @return bool
     */
    public function getCommon()
    {
        return $this->container['common'];
    }

    /**
     * Sets common
     *
     * @param bool $common common
     *
     * @return $this
     */
    public function setCommon($common)
    {
        $this->container['common'] = $common;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return string
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param string $container_id container_id
     *
     * @return $this
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string $container_name container_name
     *
     * @return $this
     */
    public function setContainerName($container_name)
    {
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets eip_address
     *
     * @return string
     */
    public function getEipAddress()
    {
        return $this->container['eip_address'];
    }

    /**
     * Sets eip_address
     *
     * @param string $eip_address eip_address
     *
     * @return $this
     */
    public function setEipAddress($eip_address)
    {
        $this->container['eip_address'] = $eip_address;

        return $this;
    }

    /**
     * Gets euid
     *
     * @return string
     */
    public function getEuid()
    {
        return $this->container['euid'];
    }

    /**
     * Sets euid
     *
     * @param string $euid euid
     *
     * @return $this
     */
    public function setEuid($euid)
    {
        $this->container['euid'] = $euid;

        return $this;
    }

    /**
     * Gets eusername
     *
     * @return string
     */
    public function getEusername()
    {
        return $this->container['eusername'];
    }

    /**
     * Sets eusername
     *
     * @param string $eusername eusername
     *
     * @return $this
     */
    public function setEusername($eusername)
    {
        $this->container['eusername'] = $eusername;

        return $this;
    }

    /**
     * Gets exe
     *
     * @return string
     */
    public function getExe()
    {
        return $this->container['exe'];
    }

    /**
     * Sets exe
     *
     * @param string $exe exe
     *
     * @return $this
     */
    public function setExe($exe)
    {
        $this->container['exe'] = $exe;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integrity
     *
     * @return bool
     */
    public function getIntegrity()
    {
        return $this->container['integrity'];
    }

    /**
     * Sets integrity
     *
     * @param bool $integrity integrity
     *
     * @return $this
     */
    public function setIntegrity($integrity)
    {
        $this->container['integrity'] = $integrity;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets ppid
     *
     * @return string
     */
    public function getPpid()
    {
        return $this->container['ppid'];
    }

    /**
     * Sets ppid
     *
     * @param string $ppid ppid
     *
     * @return $this
     */
    public function setPpid($ppid)
    {
        $this->container['ppid'] = $ppid;

        return $this;
    }

    /**
     * Gets primary_ip_address
     *
     * @return string
     */
    public function getPrimaryIpAddress()
    {
        return $this->container['primary_ip_address'];
    }

    /**
     * Sets primary_ip_address
     *
     * @param string $primary_ip_address primary_ip_address
     *
     * @return $this
     */
    public function setPrimaryIpAddress($primary_ip_address)
    {
        $this->container['primary_ip_address'] = $primary_ip_address;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

