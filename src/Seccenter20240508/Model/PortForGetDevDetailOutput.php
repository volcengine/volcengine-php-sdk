<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PortForGetDevDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PortForGetDevDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_public_network_access' => 'bool',
        'external_ip' => 'string',
        'external_port' => 'int',
        'internal_ip' => 'string',
        'internal_port' => 'int',
        'name' => 'string',
        'private_endpoint_url' => 'string',
        'public_endpoint_url' => 'string',
        'state' => 'string',
        'state_hint' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_public_network_access' => null,
        'external_ip' => null,
        'external_port' => 'int32',
        'internal_ip' => null,
        'internal_port' => 'int32',
        'name' => null,
        'private_endpoint_url' => null,
        'public_endpoint_url' => null,
        'state' => null,
        'state_hint' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_public_network_access' => 'EnablePublicNetworkAccess',
        'external_ip' => 'ExternalIp',
        'external_port' => 'ExternalPort',
        'internal_ip' => 'InternalIp',
        'internal_port' => 'InternalPort',
        'name' => 'Name',
        'private_endpoint_url' => 'PrivateEndpointUrl',
        'public_endpoint_url' => 'PublicEndpointUrl',
        'state' => 'State',
        'state_hint' => 'StateHint',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_public_network_access' => 'setEnablePublicNetworkAccess',
        'external_ip' => 'setExternalIp',
        'external_port' => 'setExternalPort',
        'internal_ip' => 'setInternalIp',
        'internal_port' => 'setInternalPort',
        'name' => 'setName',
        'private_endpoint_url' => 'setPrivateEndpointUrl',
        'public_endpoint_url' => 'setPublicEndpointUrl',
        'state' => 'setState',
        'state_hint' => 'setStateHint',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_public_network_access' => 'getEnablePublicNetworkAccess',
        'external_ip' => 'getExternalIp',
        'external_port' => 'getExternalPort',
        'internal_ip' => 'getInternalIp',
        'internal_port' => 'getInternalPort',
        'name' => 'getName',
        'private_endpoint_url' => 'getPrivateEndpointUrl',
        'public_endpoint_url' => 'getPublicEndpointUrl',
        'state' => 'getState',
        'state_hint' => 'getStateHint',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_public_network_access'] = isset($data['enable_public_network_access']) ? $data['enable_public_network_access'] : null;
        $this->container['external_ip'] = isset($data['external_ip']) ? $data['external_ip'] : null;
        $this->container['external_port'] = isset($data['external_port']) ? $data['external_port'] : null;
        $this->container['internal_ip'] = isset($data['internal_ip']) ? $data['internal_ip'] : null;
        $this->container['internal_port'] = isset($data['internal_port']) ? $data['internal_port'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['private_endpoint_url'] = isset($data['private_endpoint_url']) ? $data['private_endpoint_url'] : null;
        $this->container['public_endpoint_url'] = isset($data['public_endpoint_url']) ? $data['public_endpoint_url'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_hint'] = isset($data['state_hint']) ? $data['state_hint'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_public_network_access
     *
     * @return bool
     */
    public function getEnablePublicNetworkAccess()
    {
        return $this->container['enable_public_network_access'];
    }

    /**
     * Sets enable_public_network_access
     *
     * @param bool $enable_public_network_access enable_public_network_access
     *
     * @return $this
     */
    public function setEnablePublicNetworkAccess($enable_public_network_access)
    {
        $this->container['enable_public_network_access'] = $enable_public_network_access;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string $external_ip external_ip
     *
     * @return $this
     */
    public function setExternalIp($external_ip)
    {
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets external_port
     *
     * @return int
     */
    public function getExternalPort()
    {
        return $this->container['external_port'];
    }

    /**
     * Sets external_port
     *
     * @param int $external_port external_port
     *
     * @return $this
     */
    public function setExternalPort($external_port)
    {
        $this->container['external_port'] = $external_port;

        return $this;
    }

    /**
     * Gets internal_ip
     *
     * @return string
     */
    public function getInternalIp()
    {
        return $this->container['internal_ip'];
    }

    /**
     * Sets internal_ip
     *
     * @param string $internal_ip internal_ip
     *
     * @return $this
     */
    public function setInternalIp($internal_ip)
    {
        $this->container['internal_ip'] = $internal_ip;

        return $this;
    }

    /**
     * Gets internal_port
     *
     * @return int
     */
    public function getInternalPort()
    {
        return $this->container['internal_port'];
    }

    /**
     * Sets internal_port
     *
     * @param int $internal_port internal_port
     *
     * @return $this
     */
    public function setInternalPort($internal_port)
    {
        $this->container['internal_port'] = $internal_port;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets private_endpoint_url
     *
     * @return string
     */
    public function getPrivateEndpointUrl()
    {
        return $this->container['private_endpoint_url'];
    }

    /**
     * Sets private_endpoint_url
     *
     * @param string $private_endpoint_url private_endpoint_url
     *
     * @return $this
     */
    public function setPrivateEndpointUrl($private_endpoint_url)
    {
        $this->container['private_endpoint_url'] = $private_endpoint_url;

        return $this;
    }

    /**
     * Gets public_endpoint_url
     *
     * @return string
     */
    public function getPublicEndpointUrl()
    {
        return $this->container['public_endpoint_url'];
    }

    /**
     * Sets public_endpoint_url
     *
     * @param string $public_endpoint_url public_endpoint_url
     *
     * @return $this
     */
    public function setPublicEndpointUrl($public_endpoint_url)
    {
        $this->container['public_endpoint_url'] = $public_endpoint_url;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_hint
     *
     * @return string
     */
    public function getStateHint()
    {
        return $this->container['state_hint'];
    }

    /**
     * Sets state_hint
     *
     * @param string $state_hint state_hint
     *
     * @return $this
     */
    public function setStateHint($state_hint)
    {
        $this->container['state_hint'] = $state_hint;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

