<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetHidsAlarmStatisticsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetHidsAlarmStatisticsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_critical_count' => 'int',
        'alarm_high_count' => 'int',
        'alarm_low_count' => 'int',
        'alarm_medium_count' => 'int',
        'alarm_processed_count' => 'int',
        'alarm_total' => 'int',
        'alarm_white_count' => 'int',
        'isolate_file_count' => 'int',
        'isolate_today_count' => 'int',
        'precision_defense_count' => 'int',
        'precision_defense_today_count' => 'int',
        'unhandled_today_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_critical_count' => 'int32',
        'alarm_high_count' => 'int32',
        'alarm_low_count' => 'int32',
        'alarm_medium_count' => 'int32',
        'alarm_processed_count' => 'int32',
        'alarm_total' => 'int32',
        'alarm_white_count' => 'int32',
        'isolate_file_count' => 'int32',
        'isolate_today_count' => 'int32',
        'precision_defense_count' => 'int32',
        'precision_defense_today_count' => 'int32',
        'unhandled_today_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_critical_count' => 'AlarmCriticalCount',
        'alarm_high_count' => 'AlarmHighCount',
        'alarm_low_count' => 'AlarmLowCount',
        'alarm_medium_count' => 'AlarmMediumCount',
        'alarm_processed_count' => 'AlarmProcessedCount',
        'alarm_total' => 'AlarmTotal',
        'alarm_white_count' => 'AlarmWhiteCount',
        'isolate_file_count' => 'IsolateFileCount',
        'isolate_today_count' => 'IsolateTodayCount',
        'precision_defense_count' => 'PrecisionDefenseCount',
        'precision_defense_today_count' => 'PrecisionDefenseTodayCount',
        'unhandled_today_count' => 'UnhandledTodayCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_critical_count' => 'setAlarmCriticalCount',
        'alarm_high_count' => 'setAlarmHighCount',
        'alarm_low_count' => 'setAlarmLowCount',
        'alarm_medium_count' => 'setAlarmMediumCount',
        'alarm_processed_count' => 'setAlarmProcessedCount',
        'alarm_total' => 'setAlarmTotal',
        'alarm_white_count' => 'setAlarmWhiteCount',
        'isolate_file_count' => 'setIsolateFileCount',
        'isolate_today_count' => 'setIsolateTodayCount',
        'precision_defense_count' => 'setPrecisionDefenseCount',
        'precision_defense_today_count' => 'setPrecisionDefenseTodayCount',
        'unhandled_today_count' => 'setUnhandledTodayCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_critical_count' => 'getAlarmCriticalCount',
        'alarm_high_count' => 'getAlarmHighCount',
        'alarm_low_count' => 'getAlarmLowCount',
        'alarm_medium_count' => 'getAlarmMediumCount',
        'alarm_processed_count' => 'getAlarmProcessedCount',
        'alarm_total' => 'getAlarmTotal',
        'alarm_white_count' => 'getAlarmWhiteCount',
        'isolate_file_count' => 'getIsolateFileCount',
        'isolate_today_count' => 'getIsolateTodayCount',
        'precision_defense_count' => 'getPrecisionDefenseCount',
        'precision_defense_today_count' => 'getPrecisionDefenseTodayCount',
        'unhandled_today_count' => 'getUnhandledTodayCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_critical_count'] = isset($data['alarm_critical_count']) ? $data['alarm_critical_count'] : null;
        $this->container['alarm_high_count'] = isset($data['alarm_high_count']) ? $data['alarm_high_count'] : null;
        $this->container['alarm_low_count'] = isset($data['alarm_low_count']) ? $data['alarm_low_count'] : null;
        $this->container['alarm_medium_count'] = isset($data['alarm_medium_count']) ? $data['alarm_medium_count'] : null;
        $this->container['alarm_processed_count'] = isset($data['alarm_processed_count']) ? $data['alarm_processed_count'] : null;
        $this->container['alarm_total'] = isset($data['alarm_total']) ? $data['alarm_total'] : null;
        $this->container['alarm_white_count'] = isset($data['alarm_white_count']) ? $data['alarm_white_count'] : null;
        $this->container['isolate_file_count'] = isset($data['isolate_file_count']) ? $data['isolate_file_count'] : null;
        $this->container['isolate_today_count'] = isset($data['isolate_today_count']) ? $data['isolate_today_count'] : null;
        $this->container['precision_defense_count'] = isset($data['precision_defense_count']) ? $data['precision_defense_count'] : null;
        $this->container['precision_defense_today_count'] = isset($data['precision_defense_today_count']) ? $data['precision_defense_today_count'] : null;
        $this->container['unhandled_today_count'] = isset($data['unhandled_today_count']) ? $data['unhandled_today_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_critical_count
     *
     * @return int
     */
    public function getAlarmCriticalCount()
    {
        return $this->container['alarm_critical_count'];
    }

    /**
     * Sets alarm_critical_count
     *
     * @param int $alarm_critical_count alarm_critical_count
     *
     * @return $this
     */
    public function setAlarmCriticalCount($alarm_critical_count)
    {
        $this->container['alarm_critical_count'] = $alarm_critical_count;

        return $this;
    }

    /**
     * Gets alarm_high_count
     *
     * @return int
     */
    public function getAlarmHighCount()
    {
        return $this->container['alarm_high_count'];
    }

    /**
     * Sets alarm_high_count
     *
     * @param int $alarm_high_count alarm_high_count
     *
     * @return $this
     */
    public function setAlarmHighCount($alarm_high_count)
    {
        $this->container['alarm_high_count'] = $alarm_high_count;

        return $this;
    }

    /**
     * Gets alarm_low_count
     *
     * @return int
     */
    public function getAlarmLowCount()
    {
        return $this->container['alarm_low_count'];
    }

    /**
     * Sets alarm_low_count
     *
     * @param int $alarm_low_count alarm_low_count
     *
     * @return $this
     */
    public function setAlarmLowCount($alarm_low_count)
    {
        $this->container['alarm_low_count'] = $alarm_low_count;

        return $this;
    }

    /**
     * Gets alarm_medium_count
     *
     * @return int
     */
    public function getAlarmMediumCount()
    {
        return $this->container['alarm_medium_count'];
    }

    /**
     * Sets alarm_medium_count
     *
     * @param int $alarm_medium_count alarm_medium_count
     *
     * @return $this
     */
    public function setAlarmMediumCount($alarm_medium_count)
    {
        $this->container['alarm_medium_count'] = $alarm_medium_count;

        return $this;
    }

    /**
     * Gets alarm_processed_count
     *
     * @return int
     */
    public function getAlarmProcessedCount()
    {
        return $this->container['alarm_processed_count'];
    }

    /**
     * Sets alarm_processed_count
     *
     * @param int $alarm_processed_count alarm_processed_count
     *
     * @return $this
     */
    public function setAlarmProcessedCount($alarm_processed_count)
    {
        $this->container['alarm_processed_count'] = $alarm_processed_count;

        return $this;
    }

    /**
     * Gets alarm_total
     *
     * @return int
     */
    public function getAlarmTotal()
    {
        return $this->container['alarm_total'];
    }

    /**
     * Sets alarm_total
     *
     * @param int $alarm_total alarm_total
     *
     * @return $this
     */
    public function setAlarmTotal($alarm_total)
    {
        $this->container['alarm_total'] = $alarm_total;

        return $this;
    }

    /**
     * Gets alarm_white_count
     *
     * @return int
     */
    public function getAlarmWhiteCount()
    {
        return $this->container['alarm_white_count'];
    }

    /**
     * Sets alarm_white_count
     *
     * @param int $alarm_white_count alarm_white_count
     *
     * @return $this
     */
    public function setAlarmWhiteCount($alarm_white_count)
    {
        $this->container['alarm_white_count'] = $alarm_white_count;

        return $this;
    }

    /**
     * Gets isolate_file_count
     *
     * @return int
     */
    public function getIsolateFileCount()
    {
        return $this->container['isolate_file_count'];
    }

    /**
     * Sets isolate_file_count
     *
     * @param int $isolate_file_count isolate_file_count
     *
     * @return $this
     */
    public function setIsolateFileCount($isolate_file_count)
    {
        $this->container['isolate_file_count'] = $isolate_file_count;

        return $this;
    }

    /**
     * Gets isolate_today_count
     *
     * @return int
     */
    public function getIsolateTodayCount()
    {
        return $this->container['isolate_today_count'];
    }

    /**
     * Sets isolate_today_count
     *
     * @param int $isolate_today_count isolate_today_count
     *
     * @return $this
     */
    public function setIsolateTodayCount($isolate_today_count)
    {
        $this->container['isolate_today_count'] = $isolate_today_count;

        return $this;
    }

    /**
     * Gets precision_defense_count
     *
     * @return int
     */
    public function getPrecisionDefenseCount()
    {
        return $this->container['precision_defense_count'];
    }

    /**
     * Sets precision_defense_count
     *
     * @param int $precision_defense_count precision_defense_count
     *
     * @return $this
     */
    public function setPrecisionDefenseCount($precision_defense_count)
    {
        $this->container['precision_defense_count'] = $precision_defense_count;

        return $this;
    }

    /**
     * Gets precision_defense_today_count
     *
     * @return int
     */
    public function getPrecisionDefenseTodayCount()
    {
        return $this->container['precision_defense_today_count'];
    }

    /**
     * Sets precision_defense_today_count
     *
     * @param int $precision_defense_today_count precision_defense_today_count
     *
     * @return $this
     */
    public function setPrecisionDefenseTodayCount($precision_defense_today_count)
    {
        $this->container['precision_defense_today_count'] = $precision_defense_today_count;

        return $this;
    }

    /**
     * Gets unhandled_today_count
     *
     * @return int
     */
    public function getUnhandledTodayCount()
    {
        return $this->container['unhandled_today_count'];
    }

    /**
     * Sets unhandled_today_count
     *
     * @param int $unhandled_today_count unhandled_today_count
     *
     * @return $this
     */
    public function setUnhandledTodayCount($unhandled_today_count)
    {
        $this->container['unhandled_today_count'] = $unhandled_today_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

