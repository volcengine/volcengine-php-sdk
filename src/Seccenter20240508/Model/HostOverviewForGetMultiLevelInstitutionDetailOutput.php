<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HostOverviewForGetMultiLevelInstitutionDetailOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'hostOverviewForGetMultiLevelInstitutionDetailOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'host_num' => 'int',
        'offline' => 'int',
        'protecting' => 'int',
        'protection_exception' => 'int',
        'unprotected' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'host_num' => 'int32',
        'offline' => 'int32',
        'protecting' => 'int32',
        'protection_exception' => 'int32',
        'unprotected' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_num' => 'HostNum',
        'offline' => 'Offline',
        'protecting' => 'Protecting',
        'protection_exception' => 'ProtectionException',
        'unprotected' => 'Unprotected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_num' => 'setHostNum',
        'offline' => 'setOffline',
        'protecting' => 'setProtecting',
        'protection_exception' => 'setProtectionException',
        'unprotected' => 'setUnprotected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_num' => 'getHostNum',
        'offline' => 'getOffline',
        'protecting' => 'getProtecting',
        'protection_exception' => 'getProtectionException',
        'unprotected' => 'getUnprotected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host_num'] = isset($data['host_num']) ? $data['host_num'] : null;
        $this->container['offline'] = isset($data['offline']) ? $data['offline'] : null;
        $this->container['protecting'] = isset($data['protecting']) ? $data['protecting'] : null;
        $this->container['protection_exception'] = isset($data['protection_exception']) ? $data['protection_exception'] : null;
        $this->container['unprotected'] = isset($data['unprotected']) ? $data['unprotected'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_num
     *
     * @return int
     */
    public function getHostNum()
    {
        return $this->container['host_num'];
    }

    /**
     * Sets host_num
     *
     * @param int $host_num host_num
     *
     * @return $this
     */
    public function setHostNum($host_num)
    {
        $this->container['host_num'] = $host_num;

        return $this;
    }

    /**
     * Gets offline
     *
     * @return int
     */
    public function getOffline()
    {
        return $this->container['offline'];
    }

    /**
     * Sets offline
     *
     * @param int $offline offline
     *
     * @return $this
     */
    public function setOffline($offline)
    {
        $this->container['offline'] = $offline;

        return $this;
    }

    /**
     * Gets protecting
     *
     * @return int
     */
    public function getProtecting()
    {
        return $this->container['protecting'];
    }

    /**
     * Sets protecting
     *
     * @param int $protecting protecting
     *
     * @return $this
     */
    public function setProtecting($protecting)
    {
        $this->container['protecting'] = $protecting;

        return $this;
    }

    /**
     * Gets protection_exception
     *
     * @return int
     */
    public function getProtectionException()
    {
        return $this->container['protection_exception'];
    }

    /**
     * Sets protection_exception
     *
     * @param int $protection_exception protection_exception
     *
     * @return $this
     */
    public function setProtectionException($protection_exception)
    {
        $this->container['protection_exception'] = $protection_exception;

        return $this;
    }

    /**
     * Gets unprotected
     *
     * @return int
     */
    public function getUnprotected()
    {
        return $this->container['unprotected'];
    }

    /**
     * Sets unprotected
     *
     * @param int $unprotected unprotected
     *
     * @return $this
     */
    public function setUnprotected($unprotected)
    {
        $this->container['unprotected'] = $unprotected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

