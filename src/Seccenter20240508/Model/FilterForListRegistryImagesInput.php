<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FilterForListRegistryImagesInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilterForListRegistryImagesInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_id' => 'string',
        'latest_flag' => 'bool',
        'namespace' => 'string',
        'push_time_from' => 'int',
        'push_time_to' => 'int',
        'registry_name' => 'string',
        'repo' => 'string',
        'risk' => '\Volcengine\Seccenter20240508\Model\RiskForListRegistryImagesInput',
        'risk_flag' => 'bool',
        'scan_status' => 'string[]',
        'scan_time_from' => 'int',
        'scan_time_to' => 'int',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image_id' => null,
        'latest_flag' => null,
        'namespace' => null,
        'push_time_from' => 'int32',
        'push_time_to' => 'int32',
        'registry_name' => null,
        'repo' => null,
        'risk' => null,
        'risk_flag' => null,
        'scan_status' => null,
        'scan_time_from' => 'int32',
        'scan_time_to' => 'int32',
        'tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_id' => 'ImageID',
        'latest_flag' => 'LatestFlag',
        'namespace' => 'Namespace',
        'push_time_from' => 'PushTimeFrom',
        'push_time_to' => 'PushTimeTo',
        'registry_name' => 'RegistryName',
        'repo' => 'Repo',
        'risk' => 'Risk',
        'risk_flag' => 'RiskFlag',
        'scan_status' => 'ScanStatus',
        'scan_time_from' => 'ScanTimeFrom',
        'scan_time_to' => 'ScanTimeTo',
        'tag' => 'Tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_id' => 'setImageId',
        'latest_flag' => 'setLatestFlag',
        'namespace' => 'setNamespace',
        'push_time_from' => 'setPushTimeFrom',
        'push_time_to' => 'setPushTimeTo',
        'registry_name' => 'setRegistryName',
        'repo' => 'setRepo',
        'risk' => 'setRisk',
        'risk_flag' => 'setRiskFlag',
        'scan_status' => 'setScanStatus',
        'scan_time_from' => 'setScanTimeFrom',
        'scan_time_to' => 'setScanTimeTo',
        'tag' => 'setTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_id' => 'getImageId',
        'latest_flag' => 'getLatestFlag',
        'namespace' => 'getNamespace',
        'push_time_from' => 'getPushTimeFrom',
        'push_time_to' => 'getPushTimeTo',
        'registry_name' => 'getRegistryName',
        'repo' => 'getRepo',
        'risk' => 'getRisk',
        'risk_flag' => 'getRiskFlag',
        'scan_status' => 'getScanStatus',
        'scan_time_from' => 'getScanTimeFrom',
        'scan_time_to' => 'getScanTimeTo',
        'tag' => 'getTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['latest_flag'] = isset($data['latest_flag']) ? $data['latest_flag'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['push_time_from'] = isset($data['push_time_from']) ? $data['push_time_from'] : null;
        $this->container['push_time_to'] = isset($data['push_time_to']) ? $data['push_time_to'] : null;
        $this->container['registry_name'] = isset($data['registry_name']) ? $data['registry_name'] : null;
        $this->container['repo'] = isset($data['repo']) ? $data['repo'] : null;
        $this->container['risk'] = isset($data['risk']) ? $data['risk'] : null;
        $this->container['risk_flag'] = isset($data['risk_flag']) ? $data['risk_flag'] : null;
        $this->container['scan_status'] = isset($data['scan_status']) ? $data['scan_status'] : null;
        $this->container['scan_time_from'] = isset($data['scan_time_from']) ? $data['scan_time_from'] : null;
        $this->container['scan_time_to'] = isset($data['scan_time_to']) ? $data['scan_time_to'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets latest_flag
     *
     * @return bool
     */
    public function getLatestFlag()
    {
        return $this->container['latest_flag'];
    }

    /**
     * Sets latest_flag
     *
     * @param bool $latest_flag latest_flag
     *
     * @return $this
     */
    public function setLatestFlag($latest_flag)
    {
        $this->container['latest_flag'] = $latest_flag;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets push_time_from
     *
     * @return int
     */
    public function getPushTimeFrom()
    {
        return $this->container['push_time_from'];
    }

    /**
     * Sets push_time_from
     *
     * @param int $push_time_from push_time_from
     *
     * @return $this
     */
    public function setPushTimeFrom($push_time_from)
    {
        $this->container['push_time_from'] = $push_time_from;

        return $this;
    }

    /**
     * Gets push_time_to
     *
     * @return int
     */
    public function getPushTimeTo()
    {
        return $this->container['push_time_to'];
    }

    /**
     * Sets push_time_to
     *
     * @param int $push_time_to push_time_to
     *
     * @return $this
     */
    public function setPushTimeTo($push_time_to)
    {
        $this->container['push_time_to'] = $push_time_to;

        return $this;
    }

    /**
     * Gets registry_name
     *
     * @return string
     */
    public function getRegistryName()
    {
        return $this->container['registry_name'];
    }

    /**
     * Sets registry_name
     *
     * @param string $registry_name registry_name
     *
     * @return $this
     */
    public function setRegistryName($registry_name)
    {
        $this->container['registry_name'] = $registry_name;

        return $this;
    }

    /**
     * Gets repo
     *
     * @return string
     */
    public function getRepo()
    {
        return $this->container['repo'];
    }

    /**
     * Sets repo
     *
     * @param string $repo repo
     *
     * @return $this
     */
    public function setRepo($repo)
    {
        $this->container['repo'] = $repo;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return \Volcengine\Seccenter20240508\Model\RiskForListRegistryImagesInput
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param \Volcengine\Seccenter20240508\Model\RiskForListRegistryImagesInput $risk risk
     *
     * @return $this
     */
    public function setRisk($risk)
    {
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets risk_flag
     *
     * @return bool
     */
    public function getRiskFlag()
    {
        return $this->container['risk_flag'];
    }

    /**
     * Sets risk_flag
     *
     * @param bool $risk_flag risk_flag
     *
     * @return $this
     */
    public function setRiskFlag($risk_flag)
    {
        $this->container['risk_flag'] = $risk_flag;

        return $this;
    }

    /**
     * Gets scan_status
     *
     * @return string[]
     */
    public function getScanStatus()
    {
        return $this->container['scan_status'];
    }

    /**
     * Sets scan_status
     *
     * @param string[] $scan_status scan_status
     *
     * @return $this
     */
    public function setScanStatus($scan_status)
    {
        $this->container['scan_status'] = $scan_status;

        return $this;
    }

    /**
     * Gets scan_time_from
     *
     * @return int
     */
    public function getScanTimeFrom()
    {
        return $this->container['scan_time_from'];
    }

    /**
     * Sets scan_time_from
     *
     * @param int $scan_time_from scan_time_from
     *
     * @return $this
     */
    public function setScanTimeFrom($scan_time_from)
    {
        $this->container['scan_time_from'] = $scan_time_from;

        return $this;
    }

    /**
     * Gets scan_time_to
     *
     * @return int
     */
    public function getScanTimeTo()
    {
        return $this->container['scan_time_to'];
    }

    /**
     * Sets scan_time_to
     *
     * @param int $scan_time_to scan_time_to
     *
     * @return $this
     */
    public function setScanTimeTo($scan_time_to)
    {
        $this->container['scan_time_to'] = $scan_time_to;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

