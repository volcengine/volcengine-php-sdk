<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetTLSInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetTLSInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorized' => 'bool',
        'open' => 'bool',
        'project_id' => 'string',
        'quota_total' => 'int',
        'quota_used' => 'int',
        'storage_days' => 'int',
        'threshold' => 'int',
        'topic_id' => 'string',
        'vuln_topic_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorized' => null,
        'open' => null,
        'project_id' => null,
        'quota_total' => 'int32',
        'quota_used' => 'int32',
        'storage_days' => 'int32',
        'threshold' => 'int32',
        'topic_id' => null,
        'vuln_topic_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorized' => 'Authorized',
        'open' => 'Open',
        'project_id' => 'ProjectId',
        'quota_total' => 'QuotaTotal',
        'quota_used' => 'QuotaUsed',
        'storage_days' => 'StorageDays',
        'threshold' => 'Threshold',
        'topic_id' => 'TopicId',
        'vuln_topic_id' => 'VulnTopicId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorized' => 'setAuthorized',
        'open' => 'setOpen',
        'project_id' => 'setProjectId',
        'quota_total' => 'setQuotaTotal',
        'quota_used' => 'setQuotaUsed',
        'storage_days' => 'setStorageDays',
        'threshold' => 'setThreshold',
        'topic_id' => 'setTopicId',
        'vuln_topic_id' => 'setVulnTopicId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorized' => 'getAuthorized',
        'open' => 'getOpen',
        'project_id' => 'getProjectId',
        'quota_total' => 'getQuotaTotal',
        'quota_used' => 'getQuotaUsed',
        'storage_days' => 'getStorageDays',
        'threshold' => 'getThreshold',
        'topic_id' => 'getTopicId',
        'vuln_topic_id' => 'getVulnTopicId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorized'] = isset($data['authorized']) ? $data['authorized'] : null;
        $this->container['open'] = isset($data['open']) ? $data['open'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['quota_total'] = isset($data['quota_total']) ? $data['quota_total'] : null;
        $this->container['quota_used'] = isset($data['quota_used']) ? $data['quota_used'] : null;
        $this->container['storage_days'] = isset($data['storage_days']) ? $data['storage_days'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
        $this->container['topic_id'] = isset($data['topic_id']) ? $data['topic_id'] : null;
        $this->container['vuln_topic_id'] = isset($data['vuln_topic_id']) ? $data['vuln_topic_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorized
     *
     * @return bool
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param bool $authorized authorized
     *
     * @return $this
     */
    public function setAuthorized($authorized)
    {
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets open
     *
     * @return bool
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param bool $open open
     *
     * @return $this
     */
    public function setOpen($open)
    {
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets quota_total
     *
     * @return int
     */
    public function getQuotaTotal()
    {
        return $this->container['quota_total'];
    }

    /**
     * Sets quota_total
     *
     * @param int $quota_total quota_total
     *
     * @return $this
     */
    public function setQuotaTotal($quota_total)
    {
        $this->container['quota_total'] = $quota_total;

        return $this;
    }

    /**
     * Gets quota_used
     *
     * @return int
     */
    public function getQuotaUsed()
    {
        return $this->container['quota_used'];
    }

    /**
     * Sets quota_used
     *
     * @param int $quota_used quota_used
     *
     * @return $this
     */
    public function setQuotaUsed($quota_used)
    {
        $this->container['quota_used'] = $quota_used;

        return $this;
    }

    /**
     * Gets storage_days
     *
     * @return int
     */
    public function getStorageDays()
    {
        return $this->container['storage_days'];
    }

    /**
     * Sets storage_days
     *
     * @param int $storage_days storage_days
     *
     * @return $this
     */
    public function setStorageDays($storage_days)
    {
        $this->container['storage_days'] = $storage_days;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return int
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param int $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets topic_id
     *
     * @return string
     */
    public function getTopicId()
    {
        return $this->container['topic_id'];
    }

    /**
     * Sets topic_id
     *
     * @param string $topic_id topic_id
     *
     * @return $this
     */
    public function setTopicId($topic_id)
    {
        $this->container['topic_id'] = $topic_id;

        return $this;
    }

    /**
     * Gets vuln_topic_id
     *
     * @return string
     */
    public function getVulnTopicId()
    {
        return $this->container['vuln_topic_id'];
    }

    /**
     * Sets vuln_topic_id
     *
     * @param string $vuln_topic_id vuln_topic_id
     *
     * @return $this
     */
    public function setVulnTopicId($vuln_topic_id)
    {
        $this->container['vuln_topic_id'] = $vuln_topic_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

