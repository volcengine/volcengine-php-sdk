<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetVulnStatisticsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetVulnStatisticsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_update_time' => 'int',
        'danger' => 'int',
        'high' => 'int',
        'if_auto_update' => 'bool',
        'if_large_agent' => 'bool',
        'ignore' => 'int',
        'increase' => 'int',
        'low' => 'int',
        'mid' => 'int',
        'processed' => 'int',
        'unknown' => 'int',
        'unprocessed' => 'int',
        'vuln_lib_version' => 'int',
        'vuln_type' => '\Volcengine\Seccenter20240508\Model\VulnTypeForGetVulnStatisticsOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_update_time' => 'int32',
        'danger' => 'int32',
        'high' => 'int32',
        'if_auto_update' => null,
        'if_large_agent' => null,
        'ignore' => 'int32',
        'increase' => 'int32',
        'low' => 'int32',
        'mid' => 'int32',
        'processed' => 'int32',
        'unknown' => 'int32',
        'unprocessed' => 'int32',
        'vuln_lib_version' => 'int32',
        'vuln_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_update_time' => 'AutoUpdateTime',
        'danger' => 'Danger',
        'high' => 'High',
        'if_auto_update' => 'IfAutoUpdate',
        'if_large_agent' => 'IfLargeAgent',
        'ignore' => 'Ignore',
        'increase' => 'Increase',
        'low' => 'Low',
        'mid' => 'Mid',
        'processed' => 'Processed',
        'unknown' => 'Unknown',
        'unprocessed' => 'Unprocessed',
        'vuln_lib_version' => 'VulnLibVersion',
        'vuln_type' => 'VulnType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_update_time' => 'setAutoUpdateTime',
        'danger' => 'setDanger',
        'high' => 'setHigh',
        'if_auto_update' => 'setIfAutoUpdate',
        'if_large_agent' => 'setIfLargeAgent',
        'ignore' => 'setIgnore',
        'increase' => 'setIncrease',
        'low' => 'setLow',
        'mid' => 'setMid',
        'processed' => 'setProcessed',
        'unknown' => 'setUnknown',
        'unprocessed' => 'setUnprocessed',
        'vuln_lib_version' => 'setVulnLibVersion',
        'vuln_type' => 'setVulnType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_update_time' => 'getAutoUpdateTime',
        'danger' => 'getDanger',
        'high' => 'getHigh',
        'if_auto_update' => 'getIfAutoUpdate',
        'if_large_agent' => 'getIfLargeAgent',
        'ignore' => 'getIgnore',
        'increase' => 'getIncrease',
        'low' => 'getLow',
        'mid' => 'getMid',
        'processed' => 'getProcessed',
        'unknown' => 'getUnknown',
        'unprocessed' => 'getUnprocessed',
        'vuln_lib_version' => 'getVulnLibVersion',
        'vuln_type' => 'getVulnType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_update_time'] = isset($data['auto_update_time']) ? $data['auto_update_time'] : null;
        $this->container['danger'] = isset($data['danger']) ? $data['danger'] : null;
        $this->container['high'] = isset($data['high']) ? $data['high'] : null;
        $this->container['if_auto_update'] = isset($data['if_auto_update']) ? $data['if_auto_update'] : null;
        $this->container['if_large_agent'] = isset($data['if_large_agent']) ? $data['if_large_agent'] : null;
        $this->container['ignore'] = isset($data['ignore']) ? $data['ignore'] : null;
        $this->container['increase'] = isset($data['increase']) ? $data['increase'] : null;
        $this->container['low'] = isset($data['low']) ? $data['low'] : null;
        $this->container['mid'] = isset($data['mid']) ? $data['mid'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['unknown'] = isset($data['unknown']) ? $data['unknown'] : null;
        $this->container['unprocessed'] = isset($data['unprocessed']) ? $data['unprocessed'] : null;
        $this->container['vuln_lib_version'] = isset($data['vuln_lib_version']) ? $data['vuln_lib_version'] : null;
        $this->container['vuln_type'] = isset($data['vuln_type']) ? $data['vuln_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_update_time
     *
     * @return int
     */
    public function getAutoUpdateTime()
    {
        return $this->container['auto_update_time'];
    }

    /**
     * Sets auto_update_time
     *
     * @param int $auto_update_time auto_update_time
     *
     * @return $this
     */
    public function setAutoUpdateTime($auto_update_time)
    {
        $this->container['auto_update_time'] = $auto_update_time;

        return $this;
    }

    /**
     * Gets danger
     *
     * @return int
     */
    public function getDanger()
    {
        return $this->container['danger'];
    }

    /**
     * Sets danger
     *
     * @param int $danger danger
     *
     * @return $this
     */
    public function setDanger($danger)
    {
        $this->container['danger'] = $danger;

        return $this;
    }

    /**
     * Gets high
     *
     * @return int
     */
    public function getHigh()
    {
        return $this->container['high'];
    }

    /**
     * Sets high
     *
     * @param int $high high
     *
     * @return $this
     */
    public function setHigh($high)
    {
        $this->container['high'] = $high;

        return $this;
    }

    /**
     * Gets if_auto_update
     *
     * @return bool
     */
    public function getIfAutoUpdate()
    {
        return $this->container['if_auto_update'];
    }

    /**
     * Sets if_auto_update
     *
     * @param bool $if_auto_update if_auto_update
     *
     * @return $this
     */
    public function setIfAutoUpdate($if_auto_update)
    {
        $this->container['if_auto_update'] = $if_auto_update;

        return $this;
    }

    /**
     * Gets if_large_agent
     *
     * @return bool
     */
    public function getIfLargeAgent()
    {
        return $this->container['if_large_agent'];
    }

    /**
     * Sets if_large_agent
     *
     * @param bool $if_large_agent if_large_agent
     *
     * @return $this
     */
    public function setIfLargeAgent($if_large_agent)
    {
        $this->container['if_large_agent'] = $if_large_agent;

        return $this;
    }

    /**
     * Gets ignore
     *
     * @return int
     */
    public function getIgnore()
    {
        return $this->container['ignore'];
    }

    /**
     * Sets ignore
     *
     * @param int $ignore ignore
     *
     * @return $this
     */
    public function setIgnore($ignore)
    {
        $this->container['ignore'] = $ignore;

        return $this;
    }

    /**
     * Gets increase
     *
     * @return int
     */
    public function getIncrease()
    {
        return $this->container['increase'];
    }

    /**
     * Sets increase
     *
     * @param int $increase increase
     *
     * @return $this
     */
    public function setIncrease($increase)
    {
        $this->container['increase'] = $increase;

        return $this;
    }

    /**
     * Gets low
     *
     * @return int
     */
    public function getLow()
    {
        return $this->container['low'];
    }

    /**
     * Sets low
     *
     * @param int $low low
     *
     * @return $this
     */
    public function setLow($low)
    {
        $this->container['low'] = $low;

        return $this;
    }

    /**
     * Gets mid
     *
     * @return int
     */
    public function getMid()
    {
        return $this->container['mid'];
    }

    /**
     * Sets mid
     *
     * @param int $mid mid
     *
     * @return $this
     */
    public function setMid($mid)
    {
        $this->container['mid'] = $mid;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return int
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param int $processed processed
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets unknown
     *
     * @return int
     */
    public function getUnknown()
    {
        return $this->container['unknown'];
    }

    /**
     * Sets unknown
     *
     * @param int $unknown unknown
     *
     * @return $this
     */
    public function setUnknown($unknown)
    {
        $this->container['unknown'] = $unknown;

        return $this;
    }

    /**
     * Gets unprocessed
     *
     * @return int
     */
    public function getUnprocessed()
    {
        return $this->container['unprocessed'];
    }

    /**
     * Sets unprocessed
     *
     * @param int $unprocessed unprocessed
     *
     * @return $this
     */
    public function setUnprocessed($unprocessed)
    {
        $this->container['unprocessed'] = $unprocessed;

        return $this;
    }

    /**
     * Gets vuln_lib_version
     *
     * @return int
     */
    public function getVulnLibVersion()
    {
        return $this->container['vuln_lib_version'];
    }

    /**
     * Sets vuln_lib_version
     *
     * @param int $vuln_lib_version vuln_lib_version
     *
     * @return $this
     */
    public function setVulnLibVersion($vuln_lib_version)
    {
        $this->container['vuln_lib_version'] = $vuln_lib_version;

        return $this;
    }

    /**
     * Gets vuln_type
     *
     * @return \Volcengine\Seccenter20240508\Model\VulnTypeForGetVulnStatisticsOutput
     */
    public function getVulnType()
    {
        return $this->container['vuln_type'];
    }

    /**
     * Sets vuln_type
     *
     * @param \Volcengine\Seccenter20240508\Model\VulnTypeForGetVulnStatisticsOutput $vuln_type vuln_type
     *
     * @return $this
     */
    public function setVulnType($vuln_type)
    {
        $this->container['vuln_type'] = $vuln_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

