<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetRaspProtectStatisticsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetRaspProtectStatisticsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hit_white_process_count' => 'int',
        'process_count' => 'int',
        'protect_abnormal_process_count' => 'int',
        'protected_process_count' => 'int',
        'rasp_close_count' => 'int',
        'rasp_open_count' => 'int',
        'rasp_open_fail_count' => 'int',
        'to_be_protected_process_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hit_white_process_count' => 'int32',
        'process_count' => 'int32',
        'protect_abnormal_process_count' => 'int32',
        'protected_process_count' => 'int32',
        'rasp_close_count' => 'int32',
        'rasp_open_count' => 'int32',
        'rasp_open_fail_count' => 'int32',
        'to_be_protected_process_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hit_white_process_count' => 'HitWhiteProcessCount',
        'process_count' => 'ProcessCount',
        'protect_abnormal_process_count' => 'ProtectAbnormalProcessCount',
        'protected_process_count' => 'ProtectedProcessCount',
        'rasp_close_count' => 'RaspCloseCount',
        'rasp_open_count' => 'RaspOpenCount',
        'rasp_open_fail_count' => 'RaspOpenFailCount',
        'to_be_protected_process_count' => 'ToBeProtectedProcessCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hit_white_process_count' => 'setHitWhiteProcessCount',
        'process_count' => 'setProcessCount',
        'protect_abnormal_process_count' => 'setProtectAbnormalProcessCount',
        'protected_process_count' => 'setProtectedProcessCount',
        'rasp_close_count' => 'setRaspCloseCount',
        'rasp_open_count' => 'setRaspOpenCount',
        'rasp_open_fail_count' => 'setRaspOpenFailCount',
        'to_be_protected_process_count' => 'setToBeProtectedProcessCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hit_white_process_count' => 'getHitWhiteProcessCount',
        'process_count' => 'getProcessCount',
        'protect_abnormal_process_count' => 'getProtectAbnormalProcessCount',
        'protected_process_count' => 'getProtectedProcessCount',
        'rasp_close_count' => 'getRaspCloseCount',
        'rasp_open_count' => 'getRaspOpenCount',
        'rasp_open_fail_count' => 'getRaspOpenFailCount',
        'to_be_protected_process_count' => 'getToBeProtectedProcessCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hit_white_process_count'] = isset($data['hit_white_process_count']) ? $data['hit_white_process_count'] : null;
        $this->container['process_count'] = isset($data['process_count']) ? $data['process_count'] : null;
        $this->container['protect_abnormal_process_count'] = isset($data['protect_abnormal_process_count']) ? $data['protect_abnormal_process_count'] : null;
        $this->container['protected_process_count'] = isset($data['protected_process_count']) ? $data['protected_process_count'] : null;
        $this->container['rasp_close_count'] = isset($data['rasp_close_count']) ? $data['rasp_close_count'] : null;
        $this->container['rasp_open_count'] = isset($data['rasp_open_count']) ? $data['rasp_open_count'] : null;
        $this->container['rasp_open_fail_count'] = isset($data['rasp_open_fail_count']) ? $data['rasp_open_fail_count'] : null;
        $this->container['to_be_protected_process_count'] = isset($data['to_be_protected_process_count']) ? $data['to_be_protected_process_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hit_white_process_count
     *
     * @return int
     */
    public function getHitWhiteProcessCount()
    {
        return $this->container['hit_white_process_count'];
    }

    /**
     * Sets hit_white_process_count
     *
     * @param int $hit_white_process_count hit_white_process_count
     *
     * @return $this
     */
    public function setHitWhiteProcessCount($hit_white_process_count)
    {
        $this->container['hit_white_process_count'] = $hit_white_process_count;

        return $this;
    }

    /**
     * Gets process_count
     *
     * @return int
     */
    public function getProcessCount()
    {
        return $this->container['process_count'];
    }

    /**
     * Sets process_count
     *
     * @param int $process_count process_count
     *
     * @return $this
     */
    public function setProcessCount($process_count)
    {
        $this->container['process_count'] = $process_count;

        return $this;
    }

    /**
     * Gets protect_abnormal_process_count
     *
     * @return int
     */
    public function getProtectAbnormalProcessCount()
    {
        return $this->container['protect_abnormal_process_count'];
    }

    /**
     * Sets protect_abnormal_process_count
     *
     * @param int $protect_abnormal_process_count protect_abnormal_process_count
     *
     * @return $this
     */
    public function setProtectAbnormalProcessCount($protect_abnormal_process_count)
    {
        $this->container['protect_abnormal_process_count'] = $protect_abnormal_process_count;

        return $this;
    }

    /**
     * Gets protected_process_count
     *
     * @return int
     */
    public function getProtectedProcessCount()
    {
        return $this->container['protected_process_count'];
    }

    /**
     * Sets protected_process_count
     *
     * @param int $protected_process_count protected_process_count
     *
     * @return $this
     */
    public function setProtectedProcessCount($protected_process_count)
    {
        $this->container['protected_process_count'] = $protected_process_count;

        return $this;
    }

    /**
     * Gets rasp_close_count
     *
     * @return int
     */
    public function getRaspCloseCount()
    {
        return $this->container['rasp_close_count'];
    }

    /**
     * Sets rasp_close_count
     *
     * @param int $rasp_close_count rasp_close_count
     *
     * @return $this
     */
    public function setRaspCloseCount($rasp_close_count)
    {
        $this->container['rasp_close_count'] = $rasp_close_count;

        return $this;
    }

    /**
     * Gets rasp_open_count
     *
     * @return int
     */
    public function getRaspOpenCount()
    {
        return $this->container['rasp_open_count'];
    }

    /**
     * Sets rasp_open_count
     *
     * @param int $rasp_open_count rasp_open_count
     *
     * @return $this
     */
    public function setRaspOpenCount($rasp_open_count)
    {
        $this->container['rasp_open_count'] = $rasp_open_count;

        return $this;
    }

    /**
     * Gets rasp_open_fail_count
     *
     * @return int
     */
    public function getRaspOpenFailCount()
    {
        return $this->container['rasp_open_fail_count'];
    }

    /**
     * Sets rasp_open_fail_count
     *
     * @param int $rasp_open_fail_count rasp_open_fail_count
     *
     * @return $this
     */
    public function setRaspOpenFailCount($rasp_open_fail_count)
    {
        $this->container['rasp_open_fail_count'] = $rasp_open_fail_count;

        return $this;
    }

    /**
     * Gets to_be_protected_process_count
     *
     * @return int
     */
    public function getToBeProtectedProcessCount()
    {
        return $this->container['to_be_protected_process_count'];
    }

    /**
     * Sets to_be_protected_process_count
     *
     * @param int $to_be_protected_process_count to_be_protected_process_count
     *
     * @return $this
     */
    public function setToBeProtectedProcessCount($to_be_protected_process_count)
    {
        $this->container['to_be_protected_process_count'] = $to_be_protected_process_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

