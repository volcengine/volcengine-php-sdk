<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForGetIntrusionRealTimeUpdatesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForGetIntrusionRealTimeUpdatesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'alarm_id' => 'string',
        'alarm_time' => 'int',
        'alarm_type' => 'string',
        'alert_detail' => 'string',
        'cluster_id' => 'string',
        'data_type' => 'string',
        'harm_level' => 'string',
        'name' => 'string',
        'status' => 'int',
        'trace_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'alarm_id' => null,
        'alarm_time' => 'int32',
        'alarm_type' => null,
        'alert_detail' => null,
        'cluster_id' => null,
        'data_type' => null,
        'harm_level' => null,
        'name' => null,
        'status' => 'int32',
        'trace_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'alarm_id' => 'AlarmID',
        'alarm_time' => 'AlarmTime',
        'alarm_type' => 'AlarmType',
        'alert_detail' => 'AlertDetail',
        'cluster_id' => 'ClusterID',
        'data_type' => 'DataType',
        'harm_level' => 'HarmLevel',
        'name' => 'Name',
        'status' => 'Status',
        'trace_id' => 'TraceID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'alarm_id' => 'setAlarmId',
        'alarm_time' => 'setAlarmTime',
        'alarm_type' => 'setAlarmType',
        'alert_detail' => 'setAlertDetail',
        'cluster_id' => 'setClusterId',
        'data_type' => 'setDataType',
        'harm_level' => 'setHarmLevel',
        'name' => 'setName',
        'status' => 'setStatus',
        'trace_id' => 'setTraceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'alarm_id' => 'getAlarmId',
        'alarm_time' => 'getAlarmTime',
        'alarm_type' => 'getAlarmType',
        'alert_detail' => 'getAlertDetail',
        'cluster_id' => 'getClusterId',
        'data_type' => 'getDataType',
        'harm_level' => 'getHarmLevel',
        'name' => 'getName',
        'status' => 'getStatus',
        'trace_id' => 'getTraceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['alarm_id'] = isset($data['alarm_id']) ? $data['alarm_id'] : null;
        $this->container['alarm_time'] = isset($data['alarm_time']) ? $data['alarm_time'] : null;
        $this->container['alarm_type'] = isset($data['alarm_type']) ? $data['alarm_type'] : null;
        $this->container['alert_detail'] = isset($data['alert_detail']) ? $data['alert_detail'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['harm_level'] = isset($data['harm_level']) ? $data['harm_level'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets alarm_id
     *
     * @return string
     */
    public function getAlarmId()
    {
        return $this->container['alarm_id'];
    }

    /**
     * Sets alarm_id
     *
     * @param string $alarm_id alarm_id
     *
     * @return $this
     */
    public function setAlarmId($alarm_id)
    {
        $this->container['alarm_id'] = $alarm_id;

        return $this;
    }

    /**
     * Gets alarm_time
     *
     * @return int
     */
    public function getAlarmTime()
    {
        return $this->container['alarm_time'];
    }

    /**
     * Sets alarm_time
     *
     * @param int $alarm_time alarm_time
     *
     * @return $this
     */
    public function setAlarmTime($alarm_time)
    {
        $this->container['alarm_time'] = $alarm_time;

        return $this;
    }

    /**
     * Gets alarm_type
     *
     * @return string
     */
    public function getAlarmType()
    {
        return $this->container['alarm_type'];
    }

    /**
     * Sets alarm_type
     *
     * @param string $alarm_type alarm_type
     *
     * @return $this
     */
    public function setAlarmType($alarm_type)
    {
        $this->container['alarm_type'] = $alarm_type;

        return $this;
    }

    /**
     * Gets alert_detail
     *
     * @return string
     */
    public function getAlertDetail()
    {
        return $this->container['alert_detail'];
    }

    /**
     * Sets alert_detail
     *
     * @param string $alert_detail alert_detail
     *
     * @return $this
     */
    public function setAlertDetail($alert_detail)
    {
        $this->container['alert_detail'] = $alert_detail;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets harm_level
     *
     * @return string
     */
    public function getHarmLevel()
    {
        return $this->container['harm_level'];
    }

    /**
     * Sets harm_level
     *
     * @param string $harm_level harm_level
     *
     * @return $this
     */
    public function setHarmLevel($harm_level)
    {
        $this->container['harm_level'] = $harm_level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

