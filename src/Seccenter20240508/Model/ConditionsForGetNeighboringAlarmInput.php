<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConditionsForGetNeighboringAlarmInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConditionsForGetNeighboringAlarmInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_group' => 'string',
        'agent_group_list' => 'string[]',
        'agent_id' => 'string',
        'agent_id_list' => 'string[]',
        'agent_tags' => 'string[]',
        'alarm_handle_result_list' => 'int[]',
        'alarm_id' => 'string',
        'alert_tags' => 'string[]',
        'cloud_providers' => 'string[]',
        'cluster_id' => 'string',
        'cluster_name' => 'string',
        'cluster_region' => 'string',
        'cluster_tags' => 'string[]',
        'container_id' => 'string',
        'container_name' => 'string',
        'event_id' => 'string',
        'event_name' => 'string',
        'event_reason' => 'string',
        'exe' => 'string',
        'file_hash' => 'string',
        'file_path' => 'string',
        'hostname' => 'string',
        'ip' => 'string',
        'image_name' => 'string',
        'leaf_group_ids' => 'string[]',
        'level' => 'string[]',
        'mlp_instance_id' => 'string',
        'name' => 'string',
        'probe_hook' => 'string',
        'rasp_argv' => 'string',
        'status' => 'int[]',
        'tags' => 'string[]',
        'task_id' => 'string',
        'time_end' => 'int',
        'time_start' => 'int',
        'top_group_id' => 'string',
        'type' => 'string[]',
        'virus_type' => 'string',
        'white_list_id' => 'string',
        'white_list_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_group' => null,
        'agent_group_list' => null,
        'agent_id' => null,
        'agent_id_list' => null,
        'agent_tags' => null,
        'alarm_handle_result_list' => 'int32',
        'alarm_id' => null,
        'alert_tags' => null,
        'cloud_providers' => null,
        'cluster_id' => null,
        'cluster_name' => null,
        'cluster_region' => null,
        'cluster_tags' => null,
        'container_id' => null,
        'container_name' => null,
        'event_id' => null,
        'event_name' => null,
        'event_reason' => null,
        'exe' => null,
        'file_hash' => null,
        'file_path' => null,
        'hostname' => null,
        'ip' => null,
        'image_name' => null,
        'leaf_group_ids' => null,
        'level' => null,
        'mlp_instance_id' => null,
        'name' => null,
        'probe_hook' => null,
        'rasp_argv' => null,
        'status' => 'int32',
        'tags' => null,
        'task_id' => null,
        'time_end' => 'int32',
        'time_start' => 'int32',
        'top_group_id' => null,
        'type' => null,
        'virus_type' => null,
        'white_list_id' => null,
        'white_list_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_group' => 'AgentGroup',
        'agent_group_list' => 'AgentGroupList',
        'agent_id' => 'AgentID',
        'agent_id_list' => 'AgentIDList',
        'agent_tags' => 'AgentTags',
        'alarm_handle_result_list' => 'AlarmHandleResultList',
        'alarm_id' => 'AlarmID',
        'alert_tags' => 'AlertTags',
        'cloud_providers' => 'CloudProviders',
        'cluster_id' => 'ClusterID',
        'cluster_name' => 'ClusterName',
        'cluster_region' => 'ClusterRegion',
        'cluster_tags' => 'ClusterTags',
        'container_id' => 'ContainerID',
        'container_name' => 'ContainerName',
        'event_id' => 'EventID',
        'event_name' => 'EventName',
        'event_reason' => 'EventReason',
        'exe' => 'Exe',
        'file_hash' => 'FileHash',
        'file_path' => 'FilePath',
        'hostname' => 'Hostname',
        'ip' => 'IP',
        'image_name' => 'ImageName',
        'leaf_group_ids' => 'LeafGroupIDs',
        'level' => 'Level',
        'mlp_instance_id' => 'MlpInstanceID',
        'name' => 'Name',
        'probe_hook' => 'ProbeHook',
        'rasp_argv' => 'RaspArgv',
        'status' => 'Status',
        'tags' => 'Tags',
        'task_id' => 'TaskID',
        'time_end' => 'TimeEnd',
        'time_start' => 'TimeStart',
        'top_group_id' => 'TopGroupID',
        'type' => 'Type',
        'virus_type' => 'VirusType',
        'white_list_id' => 'WhiteListID',
        'white_list_name' => 'WhiteListName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_group' => 'setAgentGroup',
        'agent_group_list' => 'setAgentGroupList',
        'agent_id' => 'setAgentId',
        'agent_id_list' => 'setAgentIdList',
        'agent_tags' => 'setAgentTags',
        'alarm_handle_result_list' => 'setAlarmHandleResultList',
        'alarm_id' => 'setAlarmId',
        'alert_tags' => 'setAlertTags',
        'cloud_providers' => 'setCloudProviders',
        'cluster_id' => 'setClusterId',
        'cluster_name' => 'setClusterName',
        'cluster_region' => 'setClusterRegion',
        'cluster_tags' => 'setClusterTags',
        'container_id' => 'setContainerId',
        'container_name' => 'setContainerName',
        'event_id' => 'setEventId',
        'event_name' => 'setEventName',
        'event_reason' => 'setEventReason',
        'exe' => 'setExe',
        'file_hash' => 'setFileHash',
        'file_path' => 'setFilePath',
        'hostname' => 'setHostname',
        'ip' => 'setIp',
        'image_name' => 'setImageName',
        'leaf_group_ids' => 'setLeafGroupIds',
        'level' => 'setLevel',
        'mlp_instance_id' => 'setMlpInstanceId',
        'name' => 'setName',
        'probe_hook' => 'setProbeHook',
        'rasp_argv' => 'setRaspArgv',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'task_id' => 'setTaskId',
        'time_end' => 'setTimeEnd',
        'time_start' => 'setTimeStart',
        'top_group_id' => 'setTopGroupId',
        'type' => 'setType',
        'virus_type' => 'setVirusType',
        'white_list_id' => 'setWhiteListId',
        'white_list_name' => 'setWhiteListName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_group' => 'getAgentGroup',
        'agent_group_list' => 'getAgentGroupList',
        'agent_id' => 'getAgentId',
        'agent_id_list' => 'getAgentIdList',
        'agent_tags' => 'getAgentTags',
        'alarm_handle_result_list' => 'getAlarmHandleResultList',
        'alarm_id' => 'getAlarmId',
        'alert_tags' => 'getAlertTags',
        'cloud_providers' => 'getCloudProviders',
        'cluster_id' => 'getClusterId',
        'cluster_name' => 'getClusterName',
        'cluster_region' => 'getClusterRegion',
        'cluster_tags' => 'getClusterTags',
        'container_id' => 'getContainerId',
        'container_name' => 'getContainerName',
        'event_id' => 'getEventId',
        'event_name' => 'getEventName',
        'event_reason' => 'getEventReason',
        'exe' => 'getExe',
        'file_hash' => 'getFileHash',
        'file_path' => 'getFilePath',
        'hostname' => 'getHostname',
        'ip' => 'getIp',
        'image_name' => 'getImageName',
        'leaf_group_ids' => 'getLeafGroupIds',
        'level' => 'getLevel',
        'mlp_instance_id' => 'getMlpInstanceId',
        'name' => 'getName',
        'probe_hook' => 'getProbeHook',
        'rasp_argv' => 'getRaspArgv',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'task_id' => 'getTaskId',
        'time_end' => 'getTimeEnd',
        'time_start' => 'getTimeStart',
        'top_group_id' => 'getTopGroupId',
        'type' => 'getType',
        'virus_type' => 'getVirusType',
        'white_list_id' => 'getWhiteListId',
        'white_list_name' => 'getWhiteListName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_group'] = isset($data['agent_group']) ? $data['agent_group'] : null;
        $this->container['agent_group_list'] = isset($data['agent_group_list']) ? $data['agent_group_list'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent_id_list'] = isset($data['agent_id_list']) ? $data['agent_id_list'] : null;
        $this->container['agent_tags'] = isset($data['agent_tags']) ? $data['agent_tags'] : null;
        $this->container['alarm_handle_result_list'] = isset($data['alarm_handle_result_list']) ? $data['alarm_handle_result_list'] : null;
        $this->container['alarm_id'] = isset($data['alarm_id']) ? $data['alarm_id'] : null;
        $this->container['alert_tags'] = isset($data['alert_tags']) ? $data['alert_tags'] : null;
        $this->container['cloud_providers'] = isset($data['cloud_providers']) ? $data['cloud_providers'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['cluster_name'] = isset($data['cluster_name']) ? $data['cluster_name'] : null;
        $this->container['cluster_region'] = isset($data['cluster_region']) ? $data['cluster_region'] : null;
        $this->container['cluster_tags'] = isset($data['cluster_tags']) ? $data['cluster_tags'] : null;
        $this->container['container_id'] = isset($data['container_id']) ? $data['container_id'] : null;
        $this->container['container_name'] = isset($data['container_name']) ? $data['container_name'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_reason'] = isset($data['event_reason']) ? $data['event_reason'] : null;
        $this->container['exe'] = isset($data['exe']) ? $data['exe'] : null;
        $this->container['file_hash'] = isset($data['file_hash']) ? $data['file_hash'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['image_name'] = isset($data['image_name']) ? $data['image_name'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['mlp_instance_id'] = isset($data['mlp_instance_id']) ? $data['mlp_instance_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['probe_hook'] = isset($data['probe_hook']) ? $data['probe_hook'] : null;
        $this->container['rasp_argv'] = isset($data['rasp_argv']) ? $data['rasp_argv'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['time_end'] = isset($data['time_end']) ? $data['time_end'] : null;
        $this->container['time_start'] = isset($data['time_start']) ? $data['time_start'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['virus_type'] = isset($data['virus_type']) ? $data['virus_type'] : null;
        $this->container['white_list_id'] = isset($data['white_list_id']) ? $data['white_list_id'] : null;
        $this->container['white_list_name'] = isset($data['white_list_name']) ? $data['white_list_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_group
     *
     * @return string
     */
    public function getAgentGroup()
    {
        return $this->container['agent_group'];
    }

    /**
     * Sets agent_group
     *
     * @param string $agent_group agent_group
     *
     * @return $this
     */
    public function setAgentGroup($agent_group)
    {
        $this->container['agent_group'] = $agent_group;

        return $this;
    }

    /**
     * Gets agent_group_list
     *
     * @return string[]
     */
    public function getAgentGroupList()
    {
        return $this->container['agent_group_list'];
    }

    /**
     * Sets agent_group_list
     *
     * @param string[] $agent_group_list agent_group_list
     *
     * @return $this
     */
    public function setAgentGroupList($agent_group_list)
    {
        $this->container['agent_group_list'] = $agent_group_list;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent_id_list
     *
     * @return string[]
     */
    public function getAgentIdList()
    {
        return $this->container['agent_id_list'];
    }

    /**
     * Sets agent_id_list
     *
     * @param string[] $agent_id_list agent_id_list
     *
     * @return $this
     */
    public function setAgentIdList($agent_id_list)
    {
        $this->container['agent_id_list'] = $agent_id_list;

        return $this;
    }

    /**
     * Gets agent_tags
     *
     * @return string[]
     */
    public function getAgentTags()
    {
        return $this->container['agent_tags'];
    }

    /**
     * Sets agent_tags
     *
     * @param string[] $agent_tags agent_tags
     *
     * @return $this
     */
    public function setAgentTags($agent_tags)
    {
        $this->container['agent_tags'] = $agent_tags;

        return $this;
    }

    /**
     * Gets alarm_handle_result_list
     *
     * @return int[]
     */
    public function getAlarmHandleResultList()
    {
        return $this->container['alarm_handle_result_list'];
    }

    /**
     * Sets alarm_handle_result_list
     *
     * @param int[] $alarm_handle_result_list alarm_handle_result_list
     *
     * @return $this
     */
    public function setAlarmHandleResultList($alarm_handle_result_list)
    {
        $this->container['alarm_handle_result_list'] = $alarm_handle_result_list;

        return $this;
    }

    /**
     * Gets alarm_id
     *
     * @return string
     */
    public function getAlarmId()
    {
        return $this->container['alarm_id'];
    }

    /**
     * Sets alarm_id
     *
     * @param string $alarm_id alarm_id
     *
     * @return $this
     */
    public function setAlarmId($alarm_id)
    {
        $this->container['alarm_id'] = $alarm_id;

        return $this;
    }

    /**
     * Gets alert_tags
     *
     * @return string[]
     */
    public function getAlertTags()
    {
        return $this->container['alert_tags'];
    }

    /**
     * Sets alert_tags
     *
     * @param string[] $alert_tags alert_tags
     *
     * @return $this
     */
    public function setAlertTags($alert_tags)
    {
        $this->container['alert_tags'] = $alert_tags;

        return $this;
    }

    /**
     * Gets cloud_providers
     *
     * @return string[]
     */
    public function getCloudProviders()
    {
        return $this->container['cloud_providers'];
    }

    /**
     * Sets cloud_providers
     *
     * @param string[] $cloud_providers cloud_providers
     *
     * @return $this
     */
    public function setCloudProviders($cloud_providers)
    {
        $this->container['cloud_providers'] = $cloud_providers;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets cluster_name
     *
     * @return string
     */
    public function getClusterName()
    {
        return $this->container['cluster_name'];
    }

    /**
     * Sets cluster_name
     *
     * @param string $cluster_name cluster_name
     *
     * @return $this
     */
    public function setClusterName($cluster_name)
    {
        $this->container['cluster_name'] = $cluster_name;

        return $this;
    }

    /**
     * Gets cluster_region
     *
     * @return string
     */
    public function getClusterRegion()
    {
        return $this->container['cluster_region'];
    }

    /**
     * Sets cluster_region
     *
     * @param string $cluster_region cluster_region
     *
     * @return $this
     */
    public function setClusterRegion($cluster_region)
    {
        $this->container['cluster_region'] = $cluster_region;

        return $this;
    }

    /**
     * Gets cluster_tags
     *
     * @return string[]
     */
    public function getClusterTags()
    {
        return $this->container['cluster_tags'];
    }

    /**
     * Sets cluster_tags
     *
     * @param string[] $cluster_tags cluster_tags
     *
     * @return $this
     */
    public function setClusterTags($cluster_tags)
    {
        $this->container['cluster_tags'] = $cluster_tags;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return string
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param string $container_id container_id
     *
     * @return $this
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string $container_name container_name
     *
     * @return $this
     */
    public function setContainerName($container_name)
    {
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name event_name
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_reason
     *
     * @return string
     */
    public function getEventReason()
    {
        return $this->container['event_reason'];
    }

    /**
     * Sets event_reason
     *
     * @param string $event_reason event_reason
     *
     * @return $this
     */
    public function setEventReason($event_reason)
    {
        $this->container['event_reason'] = $event_reason;

        return $this;
    }

    /**
     * Gets exe
     *
     * @return string
     */
    public function getExe()
    {
        return $this->container['exe'];
    }

    /**
     * Sets exe
     *
     * @param string $exe exe
     *
     * @return $this
     */
    public function setExe($exe)
    {
        $this->container['exe'] = $exe;

        return $this;
    }

    /**
     * Gets file_hash
     *
     * @return string
     */
    public function getFileHash()
    {
        return $this->container['file_hash'];
    }

    /**
     * Sets file_hash
     *
     * @param string $file_hash file_hash
     *
     * @return $this
     */
    public function setFileHash($file_hash)
    {
        $this->container['file_hash'] = $file_hash;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path file_path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string $image_name image_name
     *
     * @return $this
     */
    public function setImageName($image_name)
    {
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string[]
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string[] $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets mlp_instance_id
     *
     * @return string
     */
    public function getMlpInstanceId()
    {
        return $this->container['mlp_instance_id'];
    }

    /**
     * Sets mlp_instance_id
     *
     * @param string $mlp_instance_id mlp_instance_id
     *
     * @return $this
     */
    public function setMlpInstanceId($mlp_instance_id)
    {
        $this->container['mlp_instance_id'] = $mlp_instance_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets probe_hook
     *
     * @return string
     */
    public function getProbeHook()
    {
        return $this->container['probe_hook'];
    }

    /**
     * Sets probe_hook
     *
     * @param string $probe_hook probe_hook
     *
     * @return $this
     */
    public function setProbeHook($probe_hook)
    {
        $this->container['probe_hook'] = $probe_hook;

        return $this;
    }

    /**
     * Gets rasp_argv
     *
     * @return string
     */
    public function getRaspArgv()
    {
        return $this->container['rasp_argv'];
    }

    /**
     * Sets rasp_argv
     *
     * @param string $rasp_argv rasp_argv
     *
     * @return $this
     */
    public function setRaspArgv($rasp_argv)
    {
        $this->container['rasp_argv'] = $rasp_argv;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int[] $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets time_end
     *
     * @return int
     */
    public function getTimeEnd()
    {
        return $this->container['time_end'];
    }

    /**
     * Sets time_end
     *
     * @param int $time_end time_end
     *
     * @return $this
     */
    public function setTimeEnd($time_end)
    {
        $this->container['time_end'] = $time_end;

        return $this;
    }

    /**
     * Gets time_start
     *
     * @return int
     */
    public function getTimeStart()
    {
        return $this->container['time_start'];
    }

    /**
     * Sets time_start
     *
     * @param int $time_start time_start
     *
     * @return $this
     */
    public function setTimeStart($time_start)
    {
        $this->container['time_start'] = $time_start;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[] $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets virus_type
     *
     * @return string
     */
    public function getVirusType()
    {
        return $this->container['virus_type'];
    }

    /**
     * Sets virus_type
     *
     * @param string $virus_type virus_type
     *
     * @return $this
     */
    public function setVirusType($virus_type)
    {
        $this->container['virus_type'] = $virus_type;

        return $this;
    }

    /**
     * Gets white_list_id
     *
     * @return string
     */
    public function getWhiteListId()
    {
        return $this->container['white_list_id'];
    }

    /**
     * Sets white_list_id
     *
     * @param string $white_list_id white_list_id
     *
     * @return $this
     */
    public function setWhiteListId($white_list_id)
    {
        $this->container['white_list_id'] = $white_list_id;

        return $this;
    }

    /**
     * Gets white_list_name
     *
     * @return string
     */
    public function getWhiteListName()
    {
        return $this->container['white_list_name'];
    }

    /**
     * Sets white_list_name
     *
     * @param string $white_list_name white_list_name
     *
     * @return $this
     */
    public function setWhiteListName($white_list_name)
    {
        $this->container['white_list_name'] = $white_list_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

