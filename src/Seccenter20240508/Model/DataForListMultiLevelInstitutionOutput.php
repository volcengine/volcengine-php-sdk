<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListMultiLevelInstitutionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListMultiLevelInstitutionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'app_sec_open' => 'bool',
        'cluster_sec_open' => 'bool',
        'create_time' => 'int',
        'expire_time' => 'int',
        'host_total_count' => 'int',
        'host_used_count' => 'int',
        'id' => 'string',
        'institution_id' => 'string',
        'institution_name' => 'string',
        'institution_status' => 'string',
        'last_active_time' => 'int',
        'remark' => 'string',
        'report_switch_open' => 'bool',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'app_sec_open' => null,
        'cluster_sec_open' => null,
        'create_time' => 'int32',
        'expire_time' => 'int32',
        'host_total_count' => 'int32',
        'host_used_count' => 'int32',
        'id' => null,
        'institution_id' => null,
        'institution_name' => null,
        'institution_status' => null,
        'last_active_time' => 'int32',
        'remark' => null,
        'report_switch_open' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'app_sec_open' => 'AppSecOpen',
        'cluster_sec_open' => 'ClusterSecOpen',
        'create_time' => 'CreateTime',
        'expire_time' => 'ExpireTime',
        'host_total_count' => 'HostTotalCount',
        'host_used_count' => 'HostUsedCount',
        'id' => 'ID',
        'institution_id' => 'InstitutionID',
        'institution_name' => 'InstitutionName',
        'institution_status' => 'InstitutionStatus',
        'last_active_time' => 'LastActiveTime',
        'remark' => 'Remark',
        'report_switch_open' => 'ReportSwitchOpen',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'app_sec_open' => 'setAppSecOpen',
        'cluster_sec_open' => 'setClusterSecOpen',
        'create_time' => 'setCreateTime',
        'expire_time' => 'setExpireTime',
        'host_total_count' => 'setHostTotalCount',
        'host_used_count' => 'setHostUsedCount',
        'id' => 'setId',
        'institution_id' => 'setInstitutionId',
        'institution_name' => 'setInstitutionName',
        'institution_status' => 'setInstitutionStatus',
        'last_active_time' => 'setLastActiveTime',
        'remark' => 'setRemark',
        'report_switch_open' => 'setReportSwitchOpen',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'app_sec_open' => 'getAppSecOpen',
        'cluster_sec_open' => 'getClusterSecOpen',
        'create_time' => 'getCreateTime',
        'expire_time' => 'getExpireTime',
        'host_total_count' => 'getHostTotalCount',
        'host_used_count' => 'getHostUsedCount',
        'id' => 'getId',
        'institution_id' => 'getInstitutionId',
        'institution_name' => 'getInstitutionName',
        'institution_status' => 'getInstitutionStatus',
        'last_active_time' => 'getLastActiveTime',
        'remark' => 'getRemark',
        'report_switch_open' => 'getReportSwitchOpen',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['app_sec_open'] = isset($data['app_sec_open']) ? $data['app_sec_open'] : null;
        $this->container['cluster_sec_open'] = isset($data['cluster_sec_open']) ? $data['cluster_sec_open'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['host_total_count'] = isset($data['host_total_count']) ? $data['host_total_count'] : null;
        $this->container['host_used_count'] = isset($data['host_used_count']) ? $data['host_used_count'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['institution_id'] = isset($data['institution_id']) ? $data['institution_id'] : null;
        $this->container['institution_name'] = isset($data['institution_name']) ? $data['institution_name'] : null;
        $this->container['institution_status'] = isset($data['institution_status']) ? $data['institution_status'] : null;
        $this->container['last_active_time'] = isset($data['last_active_time']) ? $data['last_active_time'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['report_switch_open'] = isset($data['report_switch_open']) ? $data['report_switch_open'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets app_sec_open
     *
     * @return bool
     */
    public function getAppSecOpen()
    {
        return $this->container['app_sec_open'];
    }

    /**
     * Sets app_sec_open
     *
     * @param bool $app_sec_open app_sec_open
     *
     * @return $this
     */
    public function setAppSecOpen($app_sec_open)
    {
        $this->container['app_sec_open'] = $app_sec_open;

        return $this;
    }

    /**
     * Gets cluster_sec_open
     *
     * @return bool
     */
    public function getClusterSecOpen()
    {
        return $this->container['cluster_sec_open'];
    }

    /**
     * Sets cluster_sec_open
     *
     * @param bool $cluster_sec_open cluster_sec_open
     *
     * @return $this
     */
    public function setClusterSecOpen($cluster_sec_open)
    {
        $this->container['cluster_sec_open'] = $cluster_sec_open;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return int
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param int $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets host_total_count
     *
     * @return int
     */
    public function getHostTotalCount()
    {
        return $this->container['host_total_count'];
    }

    /**
     * Sets host_total_count
     *
     * @param int $host_total_count host_total_count
     *
     * @return $this
     */
    public function setHostTotalCount($host_total_count)
    {
        $this->container['host_total_count'] = $host_total_count;

        return $this;
    }

    /**
     * Gets host_used_count
     *
     * @return int
     */
    public function getHostUsedCount()
    {
        return $this->container['host_used_count'];
    }

    /**
     * Sets host_used_count
     *
     * @param int $host_used_count host_used_count
     *
     * @return $this
     */
    public function setHostUsedCount($host_used_count)
    {
        $this->container['host_used_count'] = $host_used_count;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institution_id
     *
     * @return $this
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string $institution_name institution_name
     *
     * @return $this
     */
    public function setInstitutionName($institution_name)
    {
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets institution_status
     *
     * @return string
     */
    public function getInstitutionStatus()
    {
        return $this->container['institution_status'];
    }

    /**
     * Sets institution_status
     *
     * @param string $institution_status institution_status
     *
     * @return $this
     */
    public function setInstitutionStatus($institution_status)
    {
        $this->container['institution_status'] = $institution_status;

        return $this;
    }

    /**
     * Gets last_active_time
     *
     * @return int
     */
    public function getLastActiveTime()
    {
        return $this->container['last_active_time'];
    }

    /**
     * Sets last_active_time
     *
     * @param int $last_active_time last_active_time
     *
     * @return $this
     */
    public function setLastActiveTime($last_active_time)
    {
        $this->container['last_active_time'] = $last_active_time;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets report_switch_open
     *
     * @return bool
     */
    public function getReportSwitchOpen()
    {
        return $this->container['report_switch_open'];
    }

    /**
     * Sets report_switch_open
     *
     * @param bool $report_switch_open report_switch_open
     *
     * @return $this
     */
    public function setReportSwitchOpen($report_switch_open)
    {
        $this->container['report_switch_open'] = $report_switch_open;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

