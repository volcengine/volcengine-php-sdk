<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateMlpAlarmStatusRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateMlpAlarmStatusRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_id_list' => 'string[]',
        'conditions' => '\Volcengine\Seccenter20240508\Model\ConditionsForUpdateMlpAlarmStatusInput',
        'custom_tag_list' => 'string[]',
        'handle_method' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_id_list' => null,
        'conditions' => null,
        'custom_tag_list' => null,
        'handle_method' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_id_list' => 'AlarmIDList',
        'conditions' => 'Conditions',
        'custom_tag_list' => 'CustomTagList',
        'handle_method' => 'HandleMethod',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_id_list' => 'setAlarmIdList',
        'conditions' => 'setConditions',
        'custom_tag_list' => 'setCustomTagList',
        'handle_method' => 'setHandleMethod',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_id_list' => 'getAlarmIdList',
        'conditions' => 'getConditions',
        'custom_tag_list' => 'getCustomTagList',
        'handle_method' => 'getHandleMethod',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_id_list'] = isset($data['alarm_id_list']) ? $data['alarm_id_list'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['custom_tag_list'] = isset($data['custom_tag_list']) ? $data['custom_tag_list'] : null;
        $this->container['handle_method'] = isset($data['handle_method']) ? $data['handle_method'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_id_list
     *
     * @return string[]
     */
    public function getAlarmIdList()
    {
        return $this->container['alarm_id_list'];
    }

    /**
     * Sets alarm_id_list
     *
     * @param string[] $alarm_id_list alarm_id_list
     *
     * @return $this
     */
    public function setAlarmIdList($alarm_id_list)
    {
        $this->container['alarm_id_list'] = $alarm_id_list;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Volcengine\Seccenter20240508\Model\ConditionsForUpdateMlpAlarmStatusInput
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Volcengine\Seccenter20240508\Model\ConditionsForUpdateMlpAlarmStatusInput $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets custom_tag_list
     *
     * @return string[]
     */
    public function getCustomTagList()
    {
        return $this->container['custom_tag_list'];
    }

    /**
     * Sets custom_tag_list
     *
     * @param string[] $custom_tag_list custom_tag_list
     *
     * @return $this
     */
    public function setCustomTagList($custom_tag_list)
    {
        $this->container['custom_tag_list'] = $custom_tag_list;

        return $this;
    }

    /**
     * Gets handle_method
     *
     * @return int
     */
    public function getHandleMethod()
    {
        return $this->container['handle_method'];
    }

    /**
     * Sets handle_method
     *
     * @param int $handle_method handle_method
     *
     * @return $this
     */
    public function setHandleMethod($handle_method)
    {
        $this->container['handle_method'] = $handle_method;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

