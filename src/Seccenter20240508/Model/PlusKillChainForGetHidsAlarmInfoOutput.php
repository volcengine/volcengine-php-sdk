<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PlusKillChainForGetHidsAlarmInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlusKillChainForGetHidsAlarmInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'docker' => 'string',
        'external_conns' => 'string',
        'pid_set' => 'string',
        'ssh' => 'string',
        'timestamp' => 'string',
        'top_chain' => 'string',
        'top_rule_chain' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'docker' => null,
        'external_conns' => null,
        'pid_set' => null,
        'ssh' => null,
        'timestamp' => null,
        'top_chain' => null,
        'top_rule_chain' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'docker' => 'Docker',
        'external_conns' => 'ExternalConns',
        'pid_set' => 'PidSet',
        'ssh' => 'Ssh',
        'timestamp' => 'Timestamp',
        'top_chain' => 'TopChain',
        'top_rule_chain' => 'TopRuleChain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'docker' => 'setDocker',
        'external_conns' => 'setExternalConns',
        'pid_set' => 'setPidSet',
        'ssh' => 'setSsh',
        'timestamp' => 'setTimestamp',
        'top_chain' => 'setTopChain',
        'top_rule_chain' => 'setTopRuleChain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'docker' => 'getDocker',
        'external_conns' => 'getExternalConns',
        'pid_set' => 'getPidSet',
        'ssh' => 'getSsh',
        'timestamp' => 'getTimestamp',
        'top_chain' => 'getTopChain',
        'top_rule_chain' => 'getTopRuleChain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['docker'] = isset($data['docker']) ? $data['docker'] : null;
        $this->container['external_conns'] = isset($data['external_conns']) ? $data['external_conns'] : null;
        $this->container['pid_set'] = isset($data['pid_set']) ? $data['pid_set'] : null;
        $this->container['ssh'] = isset($data['ssh']) ? $data['ssh'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['top_chain'] = isset($data['top_chain']) ? $data['top_chain'] : null;
        $this->container['top_rule_chain'] = isset($data['top_rule_chain']) ? $data['top_rule_chain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets docker
     *
     * @return string
     */
    public function getDocker()
    {
        return $this->container['docker'];
    }

    /**
     * Sets docker
     *
     * @param string $docker docker
     *
     * @return $this
     */
    public function setDocker($docker)
    {
        $this->container['docker'] = $docker;

        return $this;
    }

    /**
     * Gets external_conns
     *
     * @return string
     */
    public function getExternalConns()
    {
        return $this->container['external_conns'];
    }

    /**
     * Sets external_conns
     *
     * @param string $external_conns external_conns
     *
     * @return $this
     */
    public function setExternalConns($external_conns)
    {
        $this->container['external_conns'] = $external_conns;

        return $this;
    }

    /**
     * Gets pid_set
     *
     * @return string
     */
    public function getPidSet()
    {
        return $this->container['pid_set'];
    }

    /**
     * Sets pid_set
     *
     * @param string $pid_set pid_set
     *
     * @return $this
     */
    public function setPidSet($pid_set)
    {
        $this->container['pid_set'] = $pid_set;

        return $this;
    }

    /**
     * Gets ssh
     *
     * @return string
     */
    public function getSsh()
    {
        return $this->container['ssh'];
    }

    /**
     * Sets ssh
     *
     * @param string $ssh ssh
     *
     * @return $this
     */
    public function setSsh($ssh)
    {
        $this->container['ssh'] = $ssh;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets top_chain
     *
     * @return string
     */
    public function getTopChain()
    {
        return $this->container['top_chain'];
    }

    /**
     * Sets top_chain
     *
     * @param string $top_chain top_chain
     *
     * @return $this
     */
    public function setTopChain($top_chain)
    {
        $this->container['top_chain'] = $top_chain;

        return $this;
    }

    /**
     * Gets top_rule_chain
     *
     * @return string[]
     */
    public function getTopRuleChain()
    {
        return $this->container['top_rule_chain'];
    }

    /**
     * Sets top_rule_chain
     *
     * @param string[] $top_rule_chain top_rule_chain
     *
     * @return $this
     */
    public function setTopRuleChain($top_rule_chain)
    {
        $this->container['top_rule_chain'] = $top_rule_chain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

