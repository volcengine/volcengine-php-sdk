<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetDevAssetOverviewResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetDevAssetOverviewResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm' => 'int',
        'baseline' => 'int',
        'has_risk' => 'int',
        'running' => 'int',
        'stopped' => 'int',
        'total' => 'int',
        'vul' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm' => 'int32',
        'baseline' => 'int32',
        'has_risk' => 'int32',
        'running' => 'int32',
        'stopped' => 'int32',
        'total' => 'int32',
        'vul' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm' => 'Alarm',
        'baseline' => 'Baseline',
        'has_risk' => 'HasRisk',
        'running' => 'Running',
        'stopped' => 'Stopped',
        'total' => 'Total',
        'vul' => 'Vul'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm' => 'setAlarm',
        'baseline' => 'setBaseline',
        'has_risk' => 'setHasRisk',
        'running' => 'setRunning',
        'stopped' => 'setStopped',
        'total' => 'setTotal',
        'vul' => 'setVul'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm' => 'getAlarm',
        'baseline' => 'getBaseline',
        'has_risk' => 'getHasRisk',
        'running' => 'getRunning',
        'stopped' => 'getStopped',
        'total' => 'getTotal',
        'vul' => 'getVul'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm'] = isset($data['alarm']) ? $data['alarm'] : null;
        $this->container['baseline'] = isset($data['baseline']) ? $data['baseline'] : null;
        $this->container['has_risk'] = isset($data['has_risk']) ? $data['has_risk'] : null;
        $this->container['running'] = isset($data['running']) ? $data['running'] : null;
        $this->container['stopped'] = isset($data['stopped']) ? $data['stopped'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['vul'] = isset($data['vul']) ? $data['vul'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm
     *
     * @return int
     */
    public function getAlarm()
    {
        return $this->container['alarm'];
    }

    /**
     * Sets alarm
     *
     * @param int $alarm alarm
     *
     * @return $this
     */
    public function setAlarm($alarm)
    {
        $this->container['alarm'] = $alarm;

        return $this;
    }

    /**
     * Gets baseline
     *
     * @return int
     */
    public function getBaseline()
    {
        return $this->container['baseline'];
    }

    /**
     * Sets baseline
     *
     * @param int $baseline baseline
     *
     * @return $this
     */
    public function setBaseline($baseline)
    {
        $this->container['baseline'] = $baseline;

        return $this;
    }

    /**
     * Gets has_risk
     *
     * @return int
     */
    public function getHasRisk()
    {
        return $this->container['has_risk'];
    }

    /**
     * Sets has_risk
     *
     * @param int $has_risk has_risk
     *
     * @return $this
     */
    public function setHasRisk($has_risk)
    {
        $this->container['has_risk'] = $has_risk;

        return $this;
    }

    /**
     * Gets running
     *
     * @return int
     */
    public function getRunning()
    {
        return $this->container['running'];
    }

    /**
     * Sets running
     *
     * @param int $running running
     *
     * @return $this
     */
    public function setRunning($running)
    {
        $this->container['running'] = $running;

        return $this;
    }

    /**
     * Gets stopped
     *
     * @return int
     */
    public function getStopped()
    {
        return $this->container['stopped'];
    }

    /**
     * Sets stopped
     *
     * @param int $stopped stopped
     *
     * @return $this
     */
    public function setStopped($stopped)
    {
        $this->container['stopped'] = $stopped;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets vul
     *
     * @return int
     */
    public function getVul()
    {
        return $this->container['vul'];
    }

    /**
     * Sets vul
     *
     * @param int $vul vul
     *
     * @return $this
     */
    public function setVul($vul)
    {
        $this->container['vul'] = $vul;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

