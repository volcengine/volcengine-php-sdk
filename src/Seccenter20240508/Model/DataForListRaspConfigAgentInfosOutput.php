<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListRaspConfigAgentInfosOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListRaspConfigAgentInfosOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'agent_id' => 'string',
        'cloud_provider' => 'string',
        'ecs_instance' => '\Volcengine\Seccenter20240508\Model\EcsInstanceForListRaspConfigAgentInfosOutput',
        'enable_status' => 'string',
        'group_id' => 'string',
        'group_path' => 'string',
        'hit_white_process_count' => 'int',
        'insert_time' => 'int',
        'manual_close' => 'bool',
        'platform' => 'string',
        'process_count' => 'int',
        'protect_abnormal_process_count' => 'int',
        'protected_process_count' => 'int',
        'rasp_configs' => 'string[]',
        'reason' => 'string',
        'relate_config_name_list' => 'string[]',
        'tags' => 'string[]',
        'to_be_protected_process_count' => 'int',
        'top_group_id' => 'string',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'agent_id' => null,
        'cloud_provider' => null,
        'ecs_instance' => null,
        'enable_status' => null,
        'group_id' => null,
        'group_path' => null,
        'hit_white_process_count' => 'int32',
        'insert_time' => 'int32',
        'manual_close' => null,
        'platform' => null,
        'process_count' => 'int32',
        'protect_abnormal_process_count' => 'int32',
        'protected_process_count' => 'int32',
        'rasp_configs' => null,
        'reason' => null,
        'relate_config_name_list' => null,
        'tags' => null,
        'to_be_protected_process_count' => 'int32',
        'top_group_id' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'agent_id' => 'AgentID',
        'cloud_provider' => 'CloudProvider',
        'ecs_instance' => 'EcsInstance',
        'enable_status' => 'EnableStatus',
        'group_id' => 'GroupID',
        'group_path' => 'GroupPath',
        'hit_white_process_count' => 'HitWhiteProcessCount',
        'insert_time' => 'InsertTime',
        'manual_close' => 'ManualClose',
        'platform' => 'Platform',
        'process_count' => 'ProcessCount',
        'protect_abnormal_process_count' => 'ProtectAbnormalProcessCount',
        'protected_process_count' => 'ProtectedProcessCount',
        'rasp_configs' => 'RaspConfigs',
        'reason' => 'Reason',
        'relate_config_name_list' => 'RelateConfigNameList',
        'tags' => 'Tags',
        'to_be_protected_process_count' => 'ToBeProtectedProcessCount',
        'top_group_id' => 'TopGroupID',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'agent_id' => 'setAgentId',
        'cloud_provider' => 'setCloudProvider',
        'ecs_instance' => 'setEcsInstance',
        'enable_status' => 'setEnableStatus',
        'group_id' => 'setGroupId',
        'group_path' => 'setGroupPath',
        'hit_white_process_count' => 'setHitWhiteProcessCount',
        'insert_time' => 'setInsertTime',
        'manual_close' => 'setManualClose',
        'platform' => 'setPlatform',
        'process_count' => 'setProcessCount',
        'protect_abnormal_process_count' => 'setProtectAbnormalProcessCount',
        'protected_process_count' => 'setProtectedProcessCount',
        'rasp_configs' => 'setRaspConfigs',
        'reason' => 'setReason',
        'relate_config_name_list' => 'setRelateConfigNameList',
        'tags' => 'setTags',
        'to_be_protected_process_count' => 'setToBeProtectedProcessCount',
        'top_group_id' => 'setTopGroupId',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'agent_id' => 'getAgentId',
        'cloud_provider' => 'getCloudProvider',
        'ecs_instance' => 'getEcsInstance',
        'enable_status' => 'getEnableStatus',
        'group_id' => 'getGroupId',
        'group_path' => 'getGroupPath',
        'hit_white_process_count' => 'getHitWhiteProcessCount',
        'insert_time' => 'getInsertTime',
        'manual_close' => 'getManualClose',
        'platform' => 'getPlatform',
        'process_count' => 'getProcessCount',
        'protect_abnormal_process_count' => 'getProtectAbnormalProcessCount',
        'protected_process_count' => 'getProtectedProcessCount',
        'rasp_configs' => 'getRaspConfigs',
        'reason' => 'getReason',
        'relate_config_name_list' => 'getRelateConfigNameList',
        'tags' => 'getTags',
        'to_be_protected_process_count' => 'getToBeProtectedProcessCount',
        'top_group_id' => 'getTopGroupId',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['cloud_provider'] = isset($data['cloud_provider']) ? $data['cloud_provider'] : null;
        $this->container['ecs_instance'] = isset($data['ecs_instance']) ? $data['ecs_instance'] : null;
        $this->container['enable_status'] = isset($data['enable_status']) ? $data['enable_status'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['group_path'] = isset($data['group_path']) ? $data['group_path'] : null;
        $this->container['hit_white_process_count'] = isset($data['hit_white_process_count']) ? $data['hit_white_process_count'] : null;
        $this->container['insert_time'] = isset($data['insert_time']) ? $data['insert_time'] : null;
        $this->container['manual_close'] = isset($data['manual_close']) ? $data['manual_close'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['process_count'] = isset($data['process_count']) ? $data['process_count'] : null;
        $this->container['protect_abnormal_process_count'] = isset($data['protect_abnormal_process_count']) ? $data['protect_abnormal_process_count'] : null;
        $this->container['protected_process_count'] = isset($data['protected_process_count']) ? $data['protected_process_count'] : null;
        $this->container['rasp_configs'] = isset($data['rasp_configs']) ? $data['rasp_configs'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['relate_config_name_list'] = isset($data['relate_config_name_list']) ? $data['relate_config_name_list'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['to_be_protected_process_count'] = isset($data['to_be_protected_process_count']) ? $data['to_be_protected_process_count'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets cloud_provider
     *
     * @return string
     */
    public function getCloudProvider()
    {
        return $this->container['cloud_provider'];
    }

    /**
     * Sets cloud_provider
     *
     * @param string $cloud_provider cloud_provider
     *
     * @return $this
     */
    public function setCloudProvider($cloud_provider)
    {
        $this->container['cloud_provider'] = $cloud_provider;

        return $this;
    }

    /**
     * Gets ecs_instance
     *
     * @return \Volcengine\Seccenter20240508\Model\EcsInstanceForListRaspConfigAgentInfosOutput
     */
    public function getEcsInstance()
    {
        return $this->container['ecs_instance'];
    }

    /**
     * Sets ecs_instance
     *
     * @param \Volcengine\Seccenter20240508\Model\EcsInstanceForListRaspConfigAgentInfosOutput $ecs_instance ecs_instance
     *
     * @return $this
     */
    public function setEcsInstance($ecs_instance)
    {
        $this->container['ecs_instance'] = $ecs_instance;

        return $this;
    }

    /**
     * Gets enable_status
     *
     * @return string
     */
    public function getEnableStatus()
    {
        return $this->container['enable_status'];
    }

    /**
     * Sets enable_status
     *
     * @param string $enable_status enable_status
     *
     * @return $this
     */
    public function setEnableStatus($enable_status)
    {
        $this->container['enable_status'] = $enable_status;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_path
     *
     * @return string
     */
    public function getGroupPath()
    {
        return $this->container['group_path'];
    }

    /**
     * Sets group_path
     *
     * @param string $group_path group_path
     *
     * @return $this
     */
    public function setGroupPath($group_path)
    {
        $this->container['group_path'] = $group_path;

        return $this;
    }

    /**
     * Gets hit_white_process_count
     *
     * @return int
     */
    public function getHitWhiteProcessCount()
    {
        return $this->container['hit_white_process_count'];
    }

    /**
     * Sets hit_white_process_count
     *
     * @param int $hit_white_process_count hit_white_process_count
     *
     * @return $this
     */
    public function setHitWhiteProcessCount($hit_white_process_count)
    {
        $this->container['hit_white_process_count'] = $hit_white_process_count;

        return $this;
    }

    /**
     * Gets insert_time
     *
     * @return int
     */
    public function getInsertTime()
    {
        return $this->container['insert_time'];
    }

    /**
     * Sets insert_time
     *
     * @param int $insert_time insert_time
     *
     * @return $this
     */
    public function setInsertTime($insert_time)
    {
        $this->container['insert_time'] = $insert_time;

        return $this;
    }

    /**
     * Gets manual_close
     *
     * @return bool
     */
    public function getManualClose()
    {
        return $this->container['manual_close'];
    }

    /**
     * Sets manual_close
     *
     * @param bool $manual_close manual_close
     *
     * @return $this
     */
    public function setManualClose($manual_close)
    {
        $this->container['manual_close'] = $manual_close;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets process_count
     *
     * @return int
     */
    public function getProcessCount()
    {
        return $this->container['process_count'];
    }

    /**
     * Sets process_count
     *
     * @param int $process_count process_count
     *
     * @return $this
     */
    public function setProcessCount($process_count)
    {
        $this->container['process_count'] = $process_count;

        return $this;
    }

    /**
     * Gets protect_abnormal_process_count
     *
     * @return int
     */
    public function getProtectAbnormalProcessCount()
    {
        return $this->container['protect_abnormal_process_count'];
    }

    /**
     * Sets protect_abnormal_process_count
     *
     * @param int $protect_abnormal_process_count protect_abnormal_process_count
     *
     * @return $this
     */
    public function setProtectAbnormalProcessCount($protect_abnormal_process_count)
    {
        $this->container['protect_abnormal_process_count'] = $protect_abnormal_process_count;

        return $this;
    }

    /**
     * Gets protected_process_count
     *
     * @return int
     */
    public function getProtectedProcessCount()
    {
        return $this->container['protected_process_count'];
    }

    /**
     * Sets protected_process_count
     *
     * @param int $protected_process_count protected_process_count
     *
     * @return $this
     */
    public function setProtectedProcessCount($protected_process_count)
    {
        $this->container['protected_process_count'] = $protected_process_count;

        return $this;
    }

    /**
     * Gets rasp_configs
     *
     * @return string[]
     */
    public function getRaspConfigs()
    {
        return $this->container['rasp_configs'];
    }

    /**
     * Sets rasp_configs
     *
     * @param string[] $rasp_configs rasp_configs
     *
     * @return $this
     */
    public function setRaspConfigs($rasp_configs)
    {
        $this->container['rasp_configs'] = $rasp_configs;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets relate_config_name_list
     *
     * @return string[]
     */
    public function getRelateConfigNameList()
    {
        return $this->container['relate_config_name_list'];
    }

    /**
     * Sets relate_config_name_list
     *
     * @param string[] $relate_config_name_list relate_config_name_list
     *
     * @return $this
     */
    public function setRelateConfigNameList($relate_config_name_list)
    {
        $this->container['relate_config_name_list'] = $relate_config_name_list;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets to_be_protected_process_count
     *
     * @return int
     */
    public function getToBeProtectedProcessCount()
    {
        return $this->container['to_be_protected_process_count'];
    }

    /**
     * Sets to_be_protected_process_count
     *
     * @param int $to_be_protected_process_count to_be_protected_process_count
     *
     * @return $this
     */
    public function setToBeProtectedProcessCount($to_be_protected_process_count)
    {
        $this->container['to_be_protected_process_count'] = $to_be_protected_process_count;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

