<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForGetFingerprintUserOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForGetFingerprintUserOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id' => 'string',
        'agent_tags' => 'string[]',
        'eip_address' => 'string',
        'gid' => 'string',
        'group_name' => 'string',
        'home_dir' => 'string',
        'hostname' => 'string',
        'id' => 'string',
        'info' => 'string',
        'last_login_ip' => 'string',
        'last_login_time' => 'int',
        'password' => 'string',
        'primary_ip_address' => 'string',
        'shell' => 'string',
        'start_time' => 'int',
        'sudoers' => 'string',
        'uid' => 'string',
        'update_time' => 'int',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id' => null,
        'agent_tags' => null,
        'eip_address' => null,
        'gid' => null,
        'group_name' => null,
        'home_dir' => null,
        'hostname' => null,
        'id' => null,
        'info' => null,
        'last_login_ip' => null,
        'last_login_time' => 'int32',
        'password' => null,
        'primary_ip_address' => null,
        'shell' => null,
        'start_time' => 'int32',
        'sudoers' => null,
        'uid' => null,
        'update_time' => 'int32',
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id' => 'AgentID',
        'agent_tags' => 'AgentTags',
        'eip_address' => 'EipAddress',
        'gid' => 'Gid',
        'group_name' => 'GroupName',
        'home_dir' => 'HomeDir',
        'hostname' => 'Hostname',
        'id' => 'ID',
        'info' => 'Info',
        'last_login_ip' => 'LastLoginIP',
        'last_login_time' => 'LastLoginTime',
        'password' => 'Password',
        'primary_ip_address' => 'PrimaryIpAddress',
        'shell' => 'Shell',
        'start_time' => 'StartTime',
        'sudoers' => 'Sudoers',
        'uid' => 'Uid',
        'update_time' => 'UpdateTime',
        'username' => 'Username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id' => 'setAgentId',
        'agent_tags' => 'setAgentTags',
        'eip_address' => 'setEipAddress',
        'gid' => 'setGid',
        'group_name' => 'setGroupName',
        'home_dir' => 'setHomeDir',
        'hostname' => 'setHostname',
        'id' => 'setId',
        'info' => 'setInfo',
        'last_login_ip' => 'setLastLoginIp',
        'last_login_time' => 'setLastLoginTime',
        'password' => 'setPassword',
        'primary_ip_address' => 'setPrimaryIpAddress',
        'shell' => 'setShell',
        'start_time' => 'setStartTime',
        'sudoers' => 'setSudoers',
        'uid' => 'setUid',
        'update_time' => 'setUpdateTime',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id' => 'getAgentId',
        'agent_tags' => 'getAgentTags',
        'eip_address' => 'getEipAddress',
        'gid' => 'getGid',
        'group_name' => 'getGroupName',
        'home_dir' => 'getHomeDir',
        'hostname' => 'getHostname',
        'id' => 'getId',
        'info' => 'getInfo',
        'last_login_ip' => 'getLastLoginIp',
        'last_login_time' => 'getLastLoginTime',
        'password' => 'getPassword',
        'primary_ip_address' => 'getPrimaryIpAddress',
        'shell' => 'getShell',
        'start_time' => 'getStartTime',
        'sudoers' => 'getSudoers',
        'uid' => 'getUid',
        'update_time' => 'getUpdateTime',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent_tags'] = isset($data['agent_tags']) ? $data['agent_tags'] : null;
        $this->container['eip_address'] = isset($data['eip_address']) ? $data['eip_address'] : null;
        $this->container['gid'] = isset($data['gid']) ? $data['gid'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['home_dir'] = isset($data['home_dir']) ? $data['home_dir'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['last_login_ip'] = isset($data['last_login_ip']) ? $data['last_login_ip'] : null;
        $this->container['last_login_time'] = isset($data['last_login_time']) ? $data['last_login_time'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['primary_ip_address'] = isset($data['primary_ip_address']) ? $data['primary_ip_address'] : null;
        $this->container['shell'] = isset($data['shell']) ? $data['shell'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['sudoers'] = isset($data['sudoers']) ? $data['sudoers'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id
     *
     * @return string
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param string $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent_tags
     *
     * @return string[]
     */
    public function getAgentTags()
    {
        return $this->container['agent_tags'];
    }

    /**
     * Sets agent_tags
     *
     * @param string[] $agent_tags agent_tags
     *
     * @return $this
     */
    public function setAgentTags($agent_tags)
    {
        $this->container['agent_tags'] = $agent_tags;

        return $this;
    }

    /**
     * Gets eip_address
     *
     * @return string
     */
    public function getEipAddress()
    {
        return $this->container['eip_address'];
    }

    /**
     * Sets eip_address
     *
     * @param string $eip_address eip_address
     *
     * @return $this
     */
    public function setEipAddress($eip_address)
    {
        $this->container['eip_address'] = $eip_address;

        return $this;
    }

    /**
     * Gets gid
     *
     * @return string
     */
    public function getGid()
    {
        return $this->container['gid'];
    }

    /**
     * Sets gid
     *
     * @param string $gid gid
     *
     * @return $this
     */
    public function setGid($gid)
    {
        $this->container['gid'] = $gid;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets home_dir
     *
     * @return string
     */
    public function getHomeDir()
    {
        return $this->container['home_dir'];
    }

    /**
     * Sets home_dir
     *
     * @param string $home_dir home_dir
     *
     * @return $this
     */
    public function setHomeDir($home_dir)
    {
        $this->container['home_dir'] = $home_dir;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets info
     *
     * @return string
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param string $info info
     *
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets last_login_ip
     *
     * @return string
     */
    public function getLastLoginIp()
    {
        return $this->container['last_login_ip'];
    }

    /**
     * Sets last_login_ip
     *
     * @param string $last_login_ip last_login_ip
     *
     * @return $this
     */
    public function setLastLoginIp($last_login_ip)
    {
        $this->container['last_login_ip'] = $last_login_ip;

        return $this;
    }

    /**
     * Gets last_login_time
     *
     * @return int
     */
    public function getLastLoginTime()
    {
        return $this->container['last_login_time'];
    }

    /**
     * Sets last_login_time
     *
     * @param int $last_login_time last_login_time
     *
     * @return $this
     */
    public function setLastLoginTime($last_login_time)
    {
        $this->container['last_login_time'] = $last_login_time;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets primary_ip_address
     *
     * @return string
     */
    public function getPrimaryIpAddress()
    {
        return $this->container['primary_ip_address'];
    }

    /**
     * Sets primary_ip_address
     *
     * @param string $primary_ip_address primary_ip_address
     *
     * @return $this
     */
    public function setPrimaryIpAddress($primary_ip_address)
    {
        $this->container['primary_ip_address'] = $primary_ip_address;

        return $this;
    }

    /**
     * Gets shell
     *
     * @return string
     */
    public function getShell()
    {
        return $this->container['shell'];
    }

    /**
     * Sets shell
     *
     * @param string $shell shell
     *
     * @return $this
     */
    public function setShell($shell)
    {
        $this->container['shell'] = $shell;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets sudoers
     *
     * @return string
     */
    public function getSudoers()
    {
        return $this->container['sudoers'];
    }

    /**
     * Sets sudoers
     *
     * @param string $sudoers sudoers
     *
     * @return $this
     */
    public function setSudoers($sudoers)
    {
        $this->container['sudoers'] = $sudoers;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

