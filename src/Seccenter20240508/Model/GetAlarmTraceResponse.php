<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetAlarmTraceResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAlarmTraceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c2_list' => 'string[]',
        'full_data' => 'bool',
        'insert_time' => 'int',
        'status' => 'string',
        'trace_id' => 'string',
        'trace_res' => '\Volcengine\Seccenter20240508\Model\TraceResForGetAlarmTraceOutput',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c2_list' => null,
        'full_data' => null,
        'insert_time' => 'int32',
        'status' => null,
        'trace_id' => null,
        'trace_res' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c2_list' => 'C2List',
        'full_data' => 'FullData',
        'insert_time' => 'InsertTime',
        'status' => 'Status',
        'trace_id' => 'TraceID',
        'trace_res' => 'TraceRes',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c2_list' => 'setC2List',
        'full_data' => 'setFullData',
        'insert_time' => 'setInsertTime',
        'status' => 'setStatus',
        'trace_id' => 'setTraceId',
        'trace_res' => 'setTraceRes',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c2_list' => 'getC2List',
        'full_data' => 'getFullData',
        'insert_time' => 'getInsertTime',
        'status' => 'getStatus',
        'trace_id' => 'getTraceId',
        'trace_res' => 'getTraceRes',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c2_list'] = isset($data['c2_list']) ? $data['c2_list'] : null;
        $this->container['full_data'] = isset($data['full_data']) ? $data['full_data'] : null;
        $this->container['insert_time'] = isset($data['insert_time']) ? $data['insert_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trace_id'] = isset($data['trace_id']) ? $data['trace_id'] : null;
        $this->container['trace_res'] = isset($data['trace_res']) ? $data['trace_res'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c2_list
     *
     * @return string[]
     */
    public function getC2List()
    {
        return $this->container['c2_list'];
    }

    /**
     * Sets c2_list
     *
     * @param string[] $c2_list c2_list
     *
     * @return $this
     */
    public function setC2List($c2_list)
    {
        $this->container['c2_list'] = $c2_list;

        return $this;
    }

    /**
     * Gets full_data
     *
     * @return bool
     */
    public function getFullData()
    {
        return $this->container['full_data'];
    }

    /**
     * Sets full_data
     *
     * @param bool $full_data full_data
     *
     * @return $this
     */
    public function setFullData($full_data)
    {
        $this->container['full_data'] = $full_data;

        return $this;
    }

    /**
     * Gets insert_time
     *
     * @return int
     */
    public function getInsertTime()
    {
        return $this->container['insert_time'];
    }

    /**
     * Sets insert_time
     *
     * @param int $insert_time insert_time
     *
     * @return $this
     */
    public function setInsertTime($insert_time)
    {
        $this->container['insert_time'] = $insert_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string $trace_id trace_id
     *
     * @return $this
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets trace_res
     *
     * @return \Volcengine\Seccenter20240508\Model\TraceResForGetAlarmTraceOutput
     */
    public function getTraceRes()
    {
        return $this->container['trace_res'];
    }

    /**
     * Sets trace_res
     *
     * @param \Volcengine\Seccenter20240508\Model\TraceResForGetAlarmTraceOutput $trace_res trace_res
     *
     * @return $this
     */
    public function setTraceRes($trace_res)
    {
        $this->container['trace_res'] = $trace_res;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

