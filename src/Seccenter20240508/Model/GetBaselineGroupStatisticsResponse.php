<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetBaselineGroupStatisticsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetBaselineGroupStatisticsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checklist_num' => 'int',
        'high_risk_num' => 'int',
        'host_num' => 'int',
        'last_check_time' => 'int',
        'low_risk_num' => 'int',
        'mid_risk_num' => 'int',
        'pass_host_num' => 'int',
        'pass_num' => 'int',
        'pass_rate' => 'int',
        'risk_host_num' => 'int',
        'risk_num' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checklist_num' => 'int32',
        'high_risk_num' => 'int32',
        'host_num' => 'int32',
        'last_check_time' => 'int32',
        'low_risk_num' => 'int32',
        'mid_risk_num' => 'int32',
        'pass_host_num' => 'int32',
        'pass_num' => 'int32',
        'pass_rate' => 'int32',
        'risk_host_num' => 'int32',
        'risk_num' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checklist_num' => 'ChecklistNum',
        'high_risk_num' => 'HighRiskNum',
        'host_num' => 'HostNum',
        'last_check_time' => 'LastCheckTime',
        'low_risk_num' => 'LowRiskNum',
        'mid_risk_num' => 'MidRiskNum',
        'pass_host_num' => 'PassHostNum',
        'pass_num' => 'PassNum',
        'pass_rate' => 'PassRate',
        'risk_host_num' => 'RiskHostNum',
        'risk_num' => 'RiskNum',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checklist_num' => 'setChecklistNum',
        'high_risk_num' => 'setHighRiskNum',
        'host_num' => 'setHostNum',
        'last_check_time' => 'setLastCheckTime',
        'low_risk_num' => 'setLowRiskNum',
        'mid_risk_num' => 'setMidRiskNum',
        'pass_host_num' => 'setPassHostNum',
        'pass_num' => 'setPassNum',
        'pass_rate' => 'setPassRate',
        'risk_host_num' => 'setRiskHostNum',
        'risk_num' => 'setRiskNum',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checklist_num' => 'getChecklistNum',
        'high_risk_num' => 'getHighRiskNum',
        'host_num' => 'getHostNum',
        'last_check_time' => 'getLastCheckTime',
        'low_risk_num' => 'getLowRiskNum',
        'mid_risk_num' => 'getMidRiskNum',
        'pass_host_num' => 'getPassHostNum',
        'pass_num' => 'getPassNum',
        'pass_rate' => 'getPassRate',
        'risk_host_num' => 'getRiskHostNum',
        'risk_num' => 'getRiskNum',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checklist_num'] = isset($data['checklist_num']) ? $data['checklist_num'] : null;
        $this->container['high_risk_num'] = isset($data['high_risk_num']) ? $data['high_risk_num'] : null;
        $this->container['host_num'] = isset($data['host_num']) ? $data['host_num'] : null;
        $this->container['last_check_time'] = isset($data['last_check_time']) ? $data['last_check_time'] : null;
        $this->container['low_risk_num'] = isset($data['low_risk_num']) ? $data['low_risk_num'] : null;
        $this->container['mid_risk_num'] = isset($data['mid_risk_num']) ? $data['mid_risk_num'] : null;
        $this->container['pass_host_num'] = isset($data['pass_host_num']) ? $data['pass_host_num'] : null;
        $this->container['pass_num'] = isset($data['pass_num']) ? $data['pass_num'] : null;
        $this->container['pass_rate'] = isset($data['pass_rate']) ? $data['pass_rate'] : null;
        $this->container['risk_host_num'] = isset($data['risk_host_num']) ? $data['risk_host_num'] : null;
        $this->container['risk_num'] = isset($data['risk_num']) ? $data['risk_num'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checklist_num
     *
     * @return int
     */
    public function getChecklistNum()
    {
        return $this->container['checklist_num'];
    }

    /**
     * Sets checklist_num
     *
     * @param int $checklist_num checklist_num
     *
     * @return $this
     */
    public function setChecklistNum($checklist_num)
    {
        $this->container['checklist_num'] = $checklist_num;

        return $this;
    }

    /**
     * Gets high_risk_num
     *
     * @return int
     */
    public function getHighRiskNum()
    {
        return $this->container['high_risk_num'];
    }

    /**
     * Sets high_risk_num
     *
     * @param int $high_risk_num high_risk_num
     *
     * @return $this
     */
    public function setHighRiskNum($high_risk_num)
    {
        $this->container['high_risk_num'] = $high_risk_num;

        return $this;
    }

    /**
     * Gets host_num
     *
     * @return int
     */
    public function getHostNum()
    {
        return $this->container['host_num'];
    }

    /**
     * Sets host_num
     *
     * @param int $host_num host_num
     *
     * @return $this
     */
    public function setHostNum($host_num)
    {
        $this->container['host_num'] = $host_num;

        return $this;
    }

    /**
     * Gets last_check_time
     *
     * @return int
     */
    public function getLastCheckTime()
    {
        return $this->container['last_check_time'];
    }

    /**
     * Sets last_check_time
     *
     * @param int $last_check_time last_check_time
     *
     * @return $this
     */
    public function setLastCheckTime($last_check_time)
    {
        $this->container['last_check_time'] = $last_check_time;

        return $this;
    }

    /**
     * Gets low_risk_num
     *
     * @return int
     */
    public function getLowRiskNum()
    {
        return $this->container['low_risk_num'];
    }

    /**
     * Sets low_risk_num
     *
     * @param int $low_risk_num low_risk_num
     *
     * @return $this
     */
    public function setLowRiskNum($low_risk_num)
    {
        $this->container['low_risk_num'] = $low_risk_num;

        return $this;
    }

    /**
     * Gets mid_risk_num
     *
     * @return int
     */
    public function getMidRiskNum()
    {
        return $this->container['mid_risk_num'];
    }

    /**
     * Sets mid_risk_num
     *
     * @param int $mid_risk_num mid_risk_num
     *
     * @return $this
     */
    public function setMidRiskNum($mid_risk_num)
    {
        $this->container['mid_risk_num'] = $mid_risk_num;

        return $this;
    }

    /**
     * Gets pass_host_num
     *
     * @return int
     */
    public function getPassHostNum()
    {
        return $this->container['pass_host_num'];
    }

    /**
     * Sets pass_host_num
     *
     * @param int $pass_host_num pass_host_num
     *
     * @return $this
     */
    public function setPassHostNum($pass_host_num)
    {
        $this->container['pass_host_num'] = $pass_host_num;

        return $this;
    }

    /**
     * Gets pass_num
     *
     * @return int
     */
    public function getPassNum()
    {
        return $this->container['pass_num'];
    }

    /**
     * Sets pass_num
     *
     * @param int $pass_num pass_num
     *
     * @return $this
     */
    public function setPassNum($pass_num)
    {
        $this->container['pass_num'] = $pass_num;

        return $this;
    }

    /**
     * Gets pass_rate
     *
     * @return int
     */
    public function getPassRate()
    {
        return $this->container['pass_rate'];
    }

    /**
     * Sets pass_rate
     *
     * @param int $pass_rate pass_rate
     *
     * @return $this
     */
    public function setPassRate($pass_rate)
    {
        $this->container['pass_rate'] = $pass_rate;

        return $this;
    }

    /**
     * Gets risk_host_num
     *
     * @return int
     */
    public function getRiskHostNum()
    {
        return $this->container['risk_host_num'];
    }

    /**
     * Sets risk_host_num
     *
     * @param int $risk_host_num risk_host_num
     *
     * @return $this
     */
    public function setRiskHostNum($risk_host_num)
    {
        $this->container['risk_host_num'] = $risk_host_num;

        return $this;
    }

    /**
     * Gets risk_num
     *
     * @return int
     */
    public function getRiskNum()
    {
        return $this->container['risk_num'];
    }

    /**
     * Sets risk_num
     *
     * @param int $risk_num risk_num
     *
     * @return $this
     */
    public function setRiskNum($risk_num)
    {
        $this->container['risk_num'] = $risk_num;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

