<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AddLoginConfigRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddLoginConfigRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_id_list' => 'string[]',
        'description' => 'string',
        'ip_list' => 'string[]',
        'if_all_host' => 'bool',
        'leaf_group_ids' => 'string[]',
        'legal_user' => 'string[]',
        'login_config_rules' => 'string[]',
        'time_intervals' => 'string[]',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_id_list' => null,
        'description' => null,
        'ip_list' => null,
        'if_all_host' => null,
        'leaf_group_ids' => null,
        'legal_user' => null,
        'login_config_rules' => null,
        'time_intervals' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_id_list' => 'AgentIDList',
        'description' => 'Description',
        'ip_list' => 'IPList',
        'if_all_host' => 'IfAllHost',
        'leaf_group_ids' => 'LeafGroupIDs',
        'legal_user' => 'LegalUser',
        'login_config_rules' => 'LoginConfigRules',
        'time_intervals' => 'TimeIntervals',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_id_list' => 'setAgentIdList',
        'description' => 'setDescription',
        'ip_list' => 'setIpList',
        'if_all_host' => 'setIfAllHost',
        'leaf_group_ids' => 'setLeafGroupIds',
        'legal_user' => 'setLegalUser',
        'login_config_rules' => 'setLoginConfigRules',
        'time_intervals' => 'setTimeIntervals',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_id_list' => 'getAgentIdList',
        'description' => 'getDescription',
        'ip_list' => 'getIpList',
        'if_all_host' => 'getIfAllHost',
        'leaf_group_ids' => 'getLeafGroupIds',
        'legal_user' => 'getLegalUser',
        'login_config_rules' => 'getLoginConfigRules',
        'time_intervals' => 'getTimeIntervals',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_id_list'] = isset($data['agent_id_list']) ? $data['agent_id_list'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ip_list'] = isset($data['ip_list']) ? $data['ip_list'] : null;
        $this->container['if_all_host'] = isset($data['if_all_host']) ? $data['if_all_host'] : null;
        $this->container['leaf_group_ids'] = isset($data['leaf_group_ids']) ? $data['leaf_group_ids'] : null;
        $this->container['legal_user'] = isset($data['legal_user']) ? $data['legal_user'] : null;
        $this->container['login_config_rules'] = isset($data['login_config_rules']) ? $data['login_config_rules'] : null;
        $this->container['time_intervals'] = isset($data['time_intervals']) ? $data['time_intervals'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_id_list
     *
     * @return string[]
     */
    public function getAgentIdList()
    {
        return $this->container['agent_id_list'];
    }

    /**
     * Sets agent_id_list
     *
     * @param string[] $agent_id_list agent_id_list
     *
     * @return $this
     */
    public function setAgentIdList($agent_id_list)
    {
        $this->container['agent_id_list'] = $agent_id_list;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ip_list
     *
     * @return string[]
     */
    public function getIpList()
    {
        return $this->container['ip_list'];
    }

    /**
     * Sets ip_list
     *
     * @param string[] $ip_list ip_list
     *
     * @return $this
     */
    public function setIpList($ip_list)
    {
        $this->container['ip_list'] = $ip_list;

        return $this;
    }

    /**
     * Gets if_all_host
     *
     * @return bool
     */
    public function getIfAllHost()
    {
        return $this->container['if_all_host'];
    }

    /**
     * Sets if_all_host
     *
     * @param bool $if_all_host if_all_host
     *
     * @return $this
     */
    public function setIfAllHost($if_all_host)
    {
        $this->container['if_all_host'] = $if_all_host;

        return $this;
    }

    /**
     * Gets leaf_group_ids
     *
     * @return string[]
     */
    public function getLeafGroupIds()
    {
        return $this->container['leaf_group_ids'];
    }

    /**
     * Sets leaf_group_ids
     *
     * @param string[] $leaf_group_ids leaf_group_ids
     *
     * @return $this
     */
    public function setLeafGroupIds($leaf_group_ids)
    {
        $this->container['leaf_group_ids'] = $leaf_group_ids;

        return $this;
    }

    /**
     * Gets legal_user
     *
     * @return string[]
     */
    public function getLegalUser()
    {
        return $this->container['legal_user'];
    }

    /**
     * Sets legal_user
     *
     * @param string[] $legal_user legal_user
     *
     * @return $this
     */
    public function setLegalUser($legal_user)
    {
        $this->container['legal_user'] = $legal_user;

        return $this;
    }

    /**
     * Gets login_config_rules
     *
     * @return string[]
     */
    public function getLoginConfigRules()
    {
        return $this->container['login_config_rules'];
    }

    /**
     * Sets login_config_rules
     *
     * @param string[] $login_config_rules login_config_rules
     *
     * @return $this
     */
    public function setLoginConfigRules($login_config_rules)
    {
        $this->container['login_config_rules'] = $login_config_rules;

        return $this;
    }

    /**
     * Gets time_intervals
     *
     * @return string[]
     */
    public function getTimeIntervals()
    {
        return $this->container['time_intervals'];
    }

    /**
     * Sets time_intervals
     *
     * @param string[] $time_intervals time_intervals
     *
     * @return $this
     */
    public function setTimeIntervals($time_intervals)
    {
        $this->container['time_intervals'] = $time_intervals;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

