<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AddRaspConfigRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddRaspConfigRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'all_process_inject' => 'bool',
        'blocks' => '\Volcengine\Seccenter20240508\Model\BlockForAddRaspConfigInput[]',
        'filters' => '\Volcengine\Seccenter20240508\Model\FilterForAddRaspConfigInput[]',
        'if_protect' => 'bool',
        'inject_config_list' => '\Volcengine\Seccenter20240508\Model\InjectConfigListForAddRaspConfigInput[]',
        'local_project_inject' => 'bool',
        'name' => 'string',
        'protect_method' => 'string',
        'range' => '\Volcengine\Seccenter20240508\Model\RangeForAddRaspConfigInput',
        'runtime' => 'string',
        'switch' => '\Volcengine\Seccenter20240508\Model\SwitchForAddRaspConfigInput',
        'top_group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'all_process_inject' => null,
        'blocks' => null,
        'filters' => null,
        'if_protect' => null,
        'inject_config_list' => null,
        'local_project_inject' => null,
        'name' => null,
        'protect_method' => null,
        'range' => null,
        'runtime' => null,
        'switch' => null,
        'top_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_process_inject' => 'AllProcessInject',
        'blocks' => 'Blocks',
        'filters' => 'Filters',
        'if_protect' => 'IfProtect',
        'inject_config_list' => 'InjectConfigList',
        'local_project_inject' => 'LocalProjectInject',
        'name' => 'Name',
        'protect_method' => 'ProtectMethod',
        'range' => 'Range',
        'runtime' => 'Runtime',
        'switch' => 'Switch',
        'top_group_id' => 'TopGroupID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_process_inject' => 'setAllProcessInject',
        'blocks' => 'setBlocks',
        'filters' => 'setFilters',
        'if_protect' => 'setIfProtect',
        'inject_config_list' => 'setInjectConfigList',
        'local_project_inject' => 'setLocalProjectInject',
        'name' => 'setName',
        'protect_method' => 'setProtectMethod',
        'range' => 'setRange',
        'runtime' => 'setRuntime',
        'switch' => 'setSwitch',
        'top_group_id' => 'setTopGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_process_inject' => 'getAllProcessInject',
        'blocks' => 'getBlocks',
        'filters' => 'getFilters',
        'if_protect' => 'getIfProtect',
        'inject_config_list' => 'getInjectConfigList',
        'local_project_inject' => 'getLocalProjectInject',
        'name' => 'getName',
        'protect_method' => 'getProtectMethod',
        'range' => 'getRange',
        'runtime' => 'getRuntime',
        'switch' => 'getSwitch',
        'top_group_id' => 'getTopGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['all_process_inject'] = isset($data['all_process_inject']) ? $data['all_process_inject'] : null;
        $this->container['blocks'] = isset($data['blocks']) ? $data['blocks'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['if_protect'] = isset($data['if_protect']) ? $data['if_protect'] : null;
        $this->container['inject_config_list'] = isset($data['inject_config_list']) ? $data['inject_config_list'] : null;
        $this->container['local_project_inject'] = isset($data['local_project_inject']) ? $data['local_project_inject'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['protect_method'] = isset($data['protect_method']) ? $data['protect_method'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['runtime'] = isset($data['runtime']) ? $data['runtime'] : null;
        $this->container['switch'] = isset($data['switch']) ? $data['switch'] : null;
        $this->container['top_group_id'] = isset($data['top_group_id']) ? $data['top_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['protect_method'] === null) {
            $invalidProperties[] = "'protect_method' can't be null";
        }
        if ($this->container['runtime'] === null) {
            $invalidProperties[] = "'runtime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_process_inject
     *
     * @return bool
     */
    public function getAllProcessInject()
    {
        return $this->container['all_process_inject'];
    }

    /**
     * Sets all_process_inject
     *
     * @param bool $all_process_inject all_process_inject
     *
     * @return $this
     */
    public function setAllProcessInject($all_process_inject)
    {
        $this->container['all_process_inject'] = $all_process_inject;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return \Volcengine\Seccenter20240508\Model\BlockForAddRaspConfigInput[]
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param \Volcengine\Seccenter20240508\Model\BlockForAddRaspConfigInput[] $blocks blocks
     *
     * @return $this
     */
    public function setBlocks($blocks)
    {
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Volcengine\Seccenter20240508\Model\FilterForAddRaspConfigInput[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Volcengine\Seccenter20240508\Model\FilterForAddRaspConfigInput[] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets if_protect
     *
     * @return bool
     */
    public function getIfProtect()
    {
        return $this->container['if_protect'];
    }

    /**
     * Sets if_protect
     *
     * @param bool $if_protect if_protect
     *
     * @return $this
     */
    public function setIfProtect($if_protect)
    {
        $this->container['if_protect'] = $if_protect;

        return $this;
    }

    /**
     * Gets inject_config_list
     *
     * @return \Volcengine\Seccenter20240508\Model\InjectConfigListForAddRaspConfigInput[]
     */
    public function getInjectConfigList()
    {
        return $this->container['inject_config_list'];
    }

    /**
     * Sets inject_config_list
     *
     * @param \Volcengine\Seccenter20240508\Model\InjectConfigListForAddRaspConfigInput[] $inject_config_list inject_config_list
     *
     * @return $this
     */
    public function setInjectConfigList($inject_config_list)
    {
        $this->container['inject_config_list'] = $inject_config_list;

        return $this;
    }

    /**
     * Gets local_project_inject
     *
     * @return bool
     */
    public function getLocalProjectInject()
    {
        return $this->container['local_project_inject'];
    }

    /**
     * Sets local_project_inject
     *
     * @param bool $local_project_inject local_project_inject
     *
     * @return $this
     */
    public function setLocalProjectInject($local_project_inject)
    {
        $this->container['local_project_inject'] = $local_project_inject;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets protect_method
     *
     * @return string
     */
    public function getProtectMethod()
    {
        return $this->container['protect_method'];
    }

    /**
     * Sets protect_method
     *
     * @param string $protect_method protect_method
     *
     * @return $this
     */
    public function setProtectMethod($protect_method)
    {
        $this->container['protect_method'] = $protect_method;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \Volcengine\Seccenter20240508\Model\RangeForAddRaspConfigInput
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \Volcengine\Seccenter20240508\Model\RangeForAddRaspConfigInput $range range
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string $runtime runtime
     *
     * @return $this
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets switch
     *
     * @return \Volcengine\Seccenter20240508\Model\SwitchForAddRaspConfigInput
     */
    public function getSwitch()
    {
        return $this->container['switch'];
    }

    /**
     * Sets switch
     *
     * @param \Volcengine\Seccenter20240508\Model\SwitchForAddRaspConfigInput $switch switch
     *
     * @return $this
     */
    public function setSwitch($switch)
    {
        $this->container['switch'] = $switch;

        return $this;
    }

    /**
     * Gets top_group_id
     *
     * @return string
     */
    public function getTopGroupId()
    {
        return $this->container['top_group_id'];
    }

    /**
     * Sets top_group_id
     *
     * @param string $top_group_id top_group_id
     *
     * @return $this
     */
    public function setTopGroupId($top_group_id)
    {
        $this->container['top_group_id'] = $top_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

