<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AuditLogAlarmForGetHidsAlarmSummaryInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuditLogAlarmForGetHidsAlarmSummaryInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorization_reason' => 'string',
        'binding_roleref' => 'string',
        'binding_subject' => 'string',
        'body' => 'string',
        'exec_command' => 'string',
        'exec_container' => 'string',
        'images' => 'string[]',
        'impersonated_user_groups' => 'string',
        'impersonated_user_name' => 'string',
        'node_host' => 'string',
        'node_name' => 'string',
        'privileged_capabilities' => 'string[]',
        'read_only_mounts' => 'string[]',
        'read_write_mounts' => 'string[]',
        'real_user_groups' => 'string[]',
        'real_user_name' => 'string',
        'reason_user_agent' => 'string',
        'request_uri' => 'string',
        'resource_kind' => 'string',
        'resource_name' => 'string',
        'resource_namespace' => 'string',
        'response_code' => 'string',
        'response_reason' => 'string',
        'response_status' => 'string',
        'shared_namespaces' => 'string[]',
        'source_ip' => 'string',
        'source_ip_asset' => 'string',
        'user_agent' => 'string',
        'user_groups' => 'string',
        'user_name' => 'string',
        'verb' => 'string',
        'workload_asset' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorization_reason' => null,
        'binding_roleref' => null,
        'binding_subject' => null,
        'body' => null,
        'exec_command' => null,
        'exec_container' => null,
        'images' => null,
        'impersonated_user_groups' => null,
        'impersonated_user_name' => null,
        'node_host' => null,
        'node_name' => null,
        'privileged_capabilities' => null,
        'read_only_mounts' => null,
        'read_write_mounts' => null,
        'real_user_groups' => null,
        'real_user_name' => null,
        'reason_user_agent' => null,
        'request_uri' => null,
        'resource_kind' => null,
        'resource_name' => null,
        'resource_namespace' => null,
        'response_code' => null,
        'response_reason' => null,
        'response_status' => null,
        'shared_namespaces' => null,
        'source_ip' => null,
        'source_ip_asset' => null,
        'user_agent' => null,
        'user_groups' => null,
        'user_name' => null,
        'verb' => null,
        'workload_asset' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_reason' => 'authorization_reason',
        'binding_roleref' => 'binding_roleref',
        'binding_subject' => 'binding_subject',
        'body' => 'body',
        'exec_command' => 'exec_command',
        'exec_container' => 'exec_container',
        'images' => 'images',
        'impersonated_user_groups' => 'impersonated_user_groups',
        'impersonated_user_name' => 'impersonated_user_name',
        'node_host' => 'node_host',
        'node_name' => 'node_name',
        'privileged_capabilities' => 'privileged_capabilities',
        'read_only_mounts' => 'read_only_mounts',
        'read_write_mounts' => 'read_write_mounts',
        'real_user_groups' => 'real_user_groups',
        'real_user_name' => 'real_user_name',
        'reason_user_agent' => 'reason_user_agent',
        'request_uri' => 'request_uri',
        'resource_kind' => 'resource_kind',
        'resource_name' => 'resource_name',
        'resource_namespace' => 'resource_namespace',
        'response_code' => 'response_code',
        'response_reason' => 'response_reason',
        'response_status' => 'response_status',
        'shared_namespaces' => 'shared_namespaces',
        'source_ip' => 'source_ip',
        'source_ip_asset' => 'source_ip_asset',
        'user_agent' => 'user_agent',
        'user_groups' => 'user_groups',
        'user_name' => 'user_name',
        'verb' => 'verb',
        'workload_asset' => 'workload_asset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_reason' => 'setAuthorizationReason',
        'binding_roleref' => 'setBindingRoleref',
        'binding_subject' => 'setBindingSubject',
        'body' => 'setBody',
        'exec_command' => 'setExecCommand',
        'exec_container' => 'setExecContainer',
        'images' => 'setImages',
        'impersonated_user_groups' => 'setImpersonatedUserGroups',
        'impersonated_user_name' => 'setImpersonatedUserName',
        'node_host' => 'setNodeHost',
        'node_name' => 'setNodeName',
        'privileged_capabilities' => 'setPrivilegedCapabilities',
        'read_only_mounts' => 'setReadOnlyMounts',
        'read_write_mounts' => 'setReadWriteMounts',
        'real_user_groups' => 'setRealUserGroups',
        'real_user_name' => 'setRealUserName',
        'reason_user_agent' => 'setReasonUserAgent',
        'request_uri' => 'setRequestUri',
        'resource_kind' => 'setResourceKind',
        'resource_name' => 'setResourceName',
        'resource_namespace' => 'setResourceNamespace',
        'response_code' => 'setResponseCode',
        'response_reason' => 'setResponseReason',
        'response_status' => 'setResponseStatus',
        'shared_namespaces' => 'setSharedNamespaces',
        'source_ip' => 'setSourceIp',
        'source_ip_asset' => 'setSourceIpAsset',
        'user_agent' => 'setUserAgent',
        'user_groups' => 'setUserGroups',
        'user_name' => 'setUserName',
        'verb' => 'setVerb',
        'workload_asset' => 'setWorkloadAsset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_reason' => 'getAuthorizationReason',
        'binding_roleref' => 'getBindingRoleref',
        'binding_subject' => 'getBindingSubject',
        'body' => 'getBody',
        'exec_command' => 'getExecCommand',
        'exec_container' => 'getExecContainer',
        'images' => 'getImages',
        'impersonated_user_groups' => 'getImpersonatedUserGroups',
        'impersonated_user_name' => 'getImpersonatedUserName',
        'node_host' => 'getNodeHost',
        'node_name' => 'getNodeName',
        'privileged_capabilities' => 'getPrivilegedCapabilities',
        'read_only_mounts' => 'getReadOnlyMounts',
        'read_write_mounts' => 'getReadWriteMounts',
        'real_user_groups' => 'getRealUserGroups',
        'real_user_name' => 'getRealUserName',
        'reason_user_agent' => 'getReasonUserAgent',
        'request_uri' => 'getRequestUri',
        'resource_kind' => 'getResourceKind',
        'resource_name' => 'getResourceName',
        'resource_namespace' => 'getResourceNamespace',
        'response_code' => 'getResponseCode',
        'response_reason' => 'getResponseReason',
        'response_status' => 'getResponseStatus',
        'shared_namespaces' => 'getSharedNamespaces',
        'source_ip' => 'getSourceIp',
        'source_ip_asset' => 'getSourceIpAsset',
        'user_agent' => 'getUserAgent',
        'user_groups' => 'getUserGroups',
        'user_name' => 'getUserName',
        'verb' => 'getVerb',
        'workload_asset' => 'getWorkloadAsset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorization_reason'] = isset($data['authorization_reason']) ? $data['authorization_reason'] : null;
        $this->container['binding_roleref'] = isset($data['binding_roleref']) ? $data['binding_roleref'] : null;
        $this->container['binding_subject'] = isset($data['binding_subject']) ? $data['binding_subject'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['exec_command'] = isset($data['exec_command']) ? $data['exec_command'] : null;
        $this->container['exec_container'] = isset($data['exec_container']) ? $data['exec_container'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['impersonated_user_groups'] = isset($data['impersonated_user_groups']) ? $data['impersonated_user_groups'] : null;
        $this->container['impersonated_user_name'] = isset($data['impersonated_user_name']) ? $data['impersonated_user_name'] : null;
        $this->container['node_host'] = isset($data['node_host']) ? $data['node_host'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['privileged_capabilities'] = isset($data['privileged_capabilities']) ? $data['privileged_capabilities'] : null;
        $this->container['read_only_mounts'] = isset($data['read_only_mounts']) ? $data['read_only_mounts'] : null;
        $this->container['read_write_mounts'] = isset($data['read_write_mounts']) ? $data['read_write_mounts'] : null;
        $this->container['real_user_groups'] = isset($data['real_user_groups']) ? $data['real_user_groups'] : null;
        $this->container['real_user_name'] = isset($data['real_user_name']) ? $data['real_user_name'] : null;
        $this->container['reason_user_agent'] = isset($data['reason_user_agent']) ? $data['reason_user_agent'] : null;
        $this->container['request_uri'] = isset($data['request_uri']) ? $data['request_uri'] : null;
        $this->container['resource_kind'] = isset($data['resource_kind']) ? $data['resource_kind'] : null;
        $this->container['resource_name'] = isset($data['resource_name']) ? $data['resource_name'] : null;
        $this->container['resource_namespace'] = isset($data['resource_namespace']) ? $data['resource_namespace'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
        $this->container['response_reason'] = isset($data['response_reason']) ? $data['response_reason'] : null;
        $this->container['response_status'] = isset($data['response_status']) ? $data['response_status'] : null;
        $this->container['shared_namespaces'] = isset($data['shared_namespaces']) ? $data['shared_namespaces'] : null;
        $this->container['source_ip'] = isset($data['source_ip']) ? $data['source_ip'] : null;
        $this->container['source_ip_asset'] = isset($data['source_ip_asset']) ? $data['source_ip_asset'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['user_groups'] = isset($data['user_groups']) ? $data['user_groups'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['verb'] = isset($data['verb']) ? $data['verb'] : null;
        $this->container['workload_asset'] = isset($data['workload_asset']) ? $data['workload_asset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_reason
     *
     * @return string
     */
    public function getAuthorizationReason()
    {
        return $this->container['authorization_reason'];
    }

    /**
     * Sets authorization_reason
     *
     * @param string $authorization_reason authorization_reason
     *
     * @return $this
     */
    public function setAuthorizationReason($authorization_reason)
    {
        $this->container['authorization_reason'] = $authorization_reason;

        return $this;
    }

    /**
     * Gets binding_roleref
     *
     * @return string
     */
    public function getBindingRoleref()
    {
        return $this->container['binding_roleref'];
    }

    /**
     * Sets binding_roleref
     *
     * @param string $binding_roleref binding_roleref
     *
     * @return $this
     */
    public function setBindingRoleref($binding_roleref)
    {
        $this->container['binding_roleref'] = $binding_roleref;

        return $this;
    }

    /**
     * Gets binding_subject
     *
     * @return string
     */
    public function getBindingSubject()
    {
        return $this->container['binding_subject'];
    }

    /**
     * Sets binding_subject
     *
     * @param string $binding_subject binding_subject
     *
     * @return $this
     */
    public function setBindingSubject($binding_subject)
    {
        $this->container['binding_subject'] = $binding_subject;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets exec_command
     *
     * @return string
     */
    public function getExecCommand()
    {
        return $this->container['exec_command'];
    }

    /**
     * Sets exec_command
     *
     * @param string $exec_command exec_command
     *
     * @return $this
     */
    public function setExecCommand($exec_command)
    {
        $this->container['exec_command'] = $exec_command;

        return $this;
    }

    /**
     * Gets exec_container
     *
     * @return string
     */
    public function getExecContainer()
    {
        return $this->container['exec_container'];
    }

    /**
     * Sets exec_container
     *
     * @param string $exec_container exec_container
     *
     * @return $this
     */
    public function setExecContainer($exec_container)
    {
        $this->container['exec_container'] = $exec_container;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets impersonated_user_groups
     *
     * @return string
     */
    public function getImpersonatedUserGroups()
    {
        return $this->container['impersonated_user_groups'];
    }

    /**
     * Sets impersonated_user_groups
     *
     * @param string $impersonated_user_groups impersonated_user_groups
     *
     * @return $this
     */
    public function setImpersonatedUserGroups($impersonated_user_groups)
    {
        $this->container['impersonated_user_groups'] = $impersonated_user_groups;

        return $this;
    }

    /**
     * Gets impersonated_user_name
     *
     * @return string
     */
    public function getImpersonatedUserName()
    {
        return $this->container['impersonated_user_name'];
    }

    /**
     * Sets impersonated_user_name
     *
     * @param string $impersonated_user_name impersonated_user_name
     *
     * @return $this
     */
    public function setImpersonatedUserName($impersonated_user_name)
    {
        $this->container['impersonated_user_name'] = $impersonated_user_name;

        return $this;
    }

    /**
     * Gets node_host
     *
     * @return string
     */
    public function getNodeHost()
    {
        return $this->container['node_host'];
    }

    /**
     * Sets node_host
     *
     * @param string $node_host node_host
     *
     * @return $this
     */
    public function setNodeHost($node_host)
    {
        $this->container['node_host'] = $node_host;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name node_name
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets privileged_capabilities
     *
     * @return string[]
     */
    public function getPrivilegedCapabilities()
    {
        return $this->container['privileged_capabilities'];
    }

    /**
     * Sets privileged_capabilities
     *
     * @param string[] $privileged_capabilities privileged_capabilities
     *
     * @return $this
     */
    public function setPrivilegedCapabilities($privileged_capabilities)
    {
        $this->container['privileged_capabilities'] = $privileged_capabilities;

        return $this;
    }

    /**
     * Gets read_only_mounts
     *
     * @return string[]
     */
    public function getReadOnlyMounts()
    {
        return $this->container['read_only_mounts'];
    }

    /**
     * Sets read_only_mounts
     *
     * @param string[] $read_only_mounts read_only_mounts
     *
     * @return $this
     */
    public function setReadOnlyMounts($read_only_mounts)
    {
        $this->container['read_only_mounts'] = $read_only_mounts;

        return $this;
    }

    /**
     * Gets read_write_mounts
     *
     * @return string[]
     */
    public function getReadWriteMounts()
    {
        return $this->container['read_write_mounts'];
    }

    /**
     * Sets read_write_mounts
     *
     * @param string[] $read_write_mounts read_write_mounts
     *
     * @return $this
     */
    public function setReadWriteMounts($read_write_mounts)
    {
        $this->container['read_write_mounts'] = $read_write_mounts;

        return $this;
    }

    /**
     * Gets real_user_groups
     *
     * @return string[]
     */
    public function getRealUserGroups()
    {
        return $this->container['real_user_groups'];
    }

    /**
     * Sets real_user_groups
     *
     * @param string[] $real_user_groups real_user_groups
     *
     * @return $this
     */
    public function setRealUserGroups($real_user_groups)
    {
        $this->container['real_user_groups'] = $real_user_groups;

        return $this;
    }

    /**
     * Gets real_user_name
     *
     * @return string
     */
    public function getRealUserName()
    {
        return $this->container['real_user_name'];
    }

    /**
     * Sets real_user_name
     *
     * @param string $real_user_name real_user_name
     *
     * @return $this
     */
    public function setRealUserName($real_user_name)
    {
        $this->container['real_user_name'] = $real_user_name;

        return $this;
    }

    /**
     * Gets reason_user_agent
     *
     * @return string
     */
    public function getReasonUserAgent()
    {
        return $this->container['reason_user_agent'];
    }

    /**
     * Sets reason_user_agent
     *
     * @param string $reason_user_agent reason_user_agent
     *
     * @return $this
     */
    public function setReasonUserAgent($reason_user_agent)
    {
        $this->container['reason_user_agent'] = $reason_user_agent;

        return $this;
    }

    /**
     * Gets request_uri
     *
     * @return string
     */
    public function getRequestUri()
    {
        return $this->container['request_uri'];
    }

    /**
     * Sets request_uri
     *
     * @param string $request_uri request_uri
     *
     * @return $this
     */
    public function setRequestUri($request_uri)
    {
        $this->container['request_uri'] = $request_uri;

        return $this;
    }

    /**
     * Gets resource_kind
     *
     * @return string
     */
    public function getResourceKind()
    {
        return $this->container['resource_kind'];
    }

    /**
     * Sets resource_kind
     *
     * @param string $resource_kind resource_kind
     *
     * @return $this
     */
    public function setResourceKind($resource_kind)
    {
        $this->container['resource_kind'] = $resource_kind;

        return $this;
    }

    /**
     * Gets resource_name
     *
     * @return string
     */
    public function getResourceName()
    {
        return $this->container['resource_name'];
    }

    /**
     * Sets resource_name
     *
     * @param string $resource_name resource_name
     *
     * @return $this
     */
    public function setResourceName($resource_name)
    {
        $this->container['resource_name'] = $resource_name;

        return $this;
    }

    /**
     * Gets resource_namespace
     *
     * @return string
     */
    public function getResourceNamespace()
    {
        return $this->container['resource_namespace'];
    }

    /**
     * Sets resource_namespace
     *
     * @param string $resource_namespace resource_namespace
     *
     * @return $this
     */
    public function setResourceNamespace($resource_namespace)
    {
        $this->container['resource_namespace'] = $resource_namespace;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string $response_code response_code
     *
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets response_reason
     *
     * @return string
     */
    public function getResponseReason()
    {
        return $this->container['response_reason'];
    }

    /**
     * Sets response_reason
     *
     * @param string $response_reason response_reason
     *
     * @return $this
     */
    public function setResponseReason($response_reason)
    {
        $this->container['response_reason'] = $response_reason;

        return $this;
    }

    /**
     * Gets response_status
     *
     * @return string
     */
    public function getResponseStatus()
    {
        return $this->container['response_status'];
    }

    /**
     * Sets response_status
     *
     * @param string $response_status response_status
     *
     * @return $this
     */
    public function setResponseStatus($response_status)
    {
        $this->container['response_status'] = $response_status;

        return $this;
    }

    /**
     * Gets shared_namespaces
     *
     * @return string[]
     */
    public function getSharedNamespaces()
    {
        return $this->container['shared_namespaces'];
    }

    /**
     * Sets shared_namespaces
     *
     * @param string[] $shared_namespaces shared_namespaces
     *
     * @return $this
     */
    public function setSharedNamespaces($shared_namespaces)
    {
        $this->container['shared_namespaces'] = $shared_namespaces;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string $source_ip source_ip
     *
     * @return $this
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_ip_asset
     *
     * @return string
     */
    public function getSourceIpAsset()
    {
        return $this->container['source_ip_asset'];
    }

    /**
     * Sets source_ip_asset
     *
     * @param string $source_ip_asset source_ip_asset
     *
     * @return $this
     */
    public function setSourceIpAsset($source_ip_asset)
    {
        $this->container['source_ip_asset'] = $source_ip_asset;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent user_agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets user_groups
     *
     * @return string
     */
    public function getUserGroups()
    {
        return $this->container['user_groups'];
    }

    /**
     * Sets user_groups
     *
     * @param string $user_groups user_groups
     *
     * @return $this
     */
    public function setUserGroups($user_groups)
    {
        $this->container['user_groups'] = $user_groups;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets verb
     *
     * @return string
     */
    public function getVerb()
    {
        return $this->container['verb'];
    }

    /**
     * Sets verb
     *
     * @param string $verb verb
     *
     * @return $this
     */
    public function setVerb($verb)
    {
        $this->container['verb'] = $verb;

        return $this;
    }

    /**
     * Gets workload_asset
     *
     * @return string
     */
    public function getWorkloadAsset()
    {
        return $this->container['workload_asset'];
    }

    /**
     * Sets workload_asset
     *
     * @param string $workload_asset workload_asset
     *
     * @return $this
     */
    public function setWorkloadAsset($workload_asset)
    {
        $this->container['workload_asset'] = $workload_asset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

