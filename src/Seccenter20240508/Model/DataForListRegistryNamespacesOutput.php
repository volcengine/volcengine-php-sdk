<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListRegistryNamespacesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListRegistryNamespacesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'namespace' => 'string',
        'namespace_create_time' => 'int',
        'region' => 'string',
        'registry_name' => 'string',
        'registry_type' => 'string',
        'total_image_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'namespace' => null,
        'namespace_create_time' => 'int32',
        'region' => null,
        'registry_name' => null,
        'registry_type' => null,
        'total_image_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'namespace' => 'Namespace',
        'namespace_create_time' => 'NamespaceCreateTime',
        'region' => 'Region',
        'registry_name' => 'RegistryName',
        'registry_type' => 'RegistryType',
        'total_image_count' => 'TotalImageCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'namespace_create_time' => 'setNamespaceCreateTime',
        'region' => 'setRegion',
        'registry_name' => 'setRegistryName',
        'registry_type' => 'setRegistryType',
        'total_image_count' => 'setTotalImageCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'namespace_create_time' => 'getNamespaceCreateTime',
        'region' => 'getRegion',
        'registry_name' => 'getRegistryName',
        'registry_type' => 'getRegistryType',
        'total_image_count' => 'getTotalImageCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['namespace_create_time'] = isset($data['namespace_create_time']) ? $data['namespace_create_time'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['registry_name'] = isset($data['registry_name']) ? $data['registry_name'] : null;
        $this->container['registry_type'] = isset($data['registry_type']) ? $data['registry_type'] : null;
        $this->container['total_image_count'] = isset($data['total_image_count']) ? $data['total_image_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets namespace_create_time
     *
     * @return int
     */
    public function getNamespaceCreateTime()
    {
        return $this->container['namespace_create_time'];
    }

    /**
     * Sets namespace_create_time
     *
     * @param int $namespace_create_time namespace_create_time
     *
     * @return $this
     */
    public function setNamespaceCreateTime($namespace_create_time)
    {
        $this->container['namespace_create_time'] = $namespace_create_time;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets registry_name
     *
     * @return string
     */
    public function getRegistryName()
    {
        return $this->container['registry_name'];
    }

    /**
     * Sets registry_name
     *
     * @param string $registry_name registry_name
     *
     * @return $this
     */
    public function setRegistryName($registry_name)
    {
        $this->container['registry_name'] = $registry_name;

        return $this;
    }

    /**
     * Gets registry_type
     *
     * @return string
     */
    public function getRegistryType()
    {
        return $this->container['registry_type'];
    }

    /**
     * Sets registry_type
     *
     * @param string $registry_type registry_type
     *
     * @return $this
     */
    public function setRegistryType($registry_type)
    {
        $this->container['registry_type'] = $registry_type;

        return $this;
    }

    /**
     * Gets total_image_count
     *
     * @return int
     */
    public function getTotalImageCount()
    {
        return $this->container['total_image_count'];
    }

    /**
     * Sets total_image_count
     *
     * @param int $total_image_count total_image_count
     *
     * @return $this
     */
    public function setTotalImageCount($total_image_count)
    {
        $this->container['total_image_count'] = $total_image_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

