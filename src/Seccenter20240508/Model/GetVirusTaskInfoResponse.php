<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetVirusTaskInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetVirusTaskInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'string',
        'config' => '\Volcengine\Seccenter20240508\Model\ConfigForGetVirusTaskInfoOutput',
        'create_time' => 'int',
        'distributed_count' => 'int',
        'id_count' => 'double',
        'id_list' => 'string[]',
        'sub_task_created' => 'int',
        'sub_task_failed' => 'int',
        'sub_task_running' => 'int',
        'sub_task_succeed' => 'int',
        'tag' => 'string',
        'task_id' => 'string',
        'task_name' => 'string',
        'task_status' => 'string',
        'task_type' => 'string',
        'task_user' => 'string',
        'update_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => null,
        'config' => null,
        'create_time' => 'int32',
        'distributed_count' => 'int32',
        'id_count' => 'double',
        'id_list' => null,
        'sub_task_created' => 'int32',
        'sub_task_failed' => 'int32',
        'sub_task_running' => 'int32',
        'sub_task_succeed' => 'int32',
        'tag' => null,
        'task_id' => null,
        'task_name' => null,
        'task_status' => null,
        'task_type' => null,
        'task_user' => null,
        'update_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'Action',
        'config' => 'Config',
        'create_time' => 'CreateTime',
        'distributed_count' => 'DistributedCount',
        'id_count' => 'IDCount',
        'id_list' => 'IDList',
        'sub_task_created' => 'SubTaskCreated',
        'sub_task_failed' => 'SubTaskFailed',
        'sub_task_running' => 'SubTaskRunning',
        'sub_task_succeed' => 'SubTaskSucceed',
        'tag' => 'Tag',
        'task_id' => 'TaskID',
        'task_name' => 'TaskName',
        'task_status' => 'TaskStatus',
        'task_type' => 'TaskType',
        'task_user' => 'TaskUser',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'config' => 'setConfig',
        'create_time' => 'setCreateTime',
        'distributed_count' => 'setDistributedCount',
        'id_count' => 'setIdCount',
        'id_list' => 'setIdList',
        'sub_task_created' => 'setSubTaskCreated',
        'sub_task_failed' => 'setSubTaskFailed',
        'sub_task_running' => 'setSubTaskRunning',
        'sub_task_succeed' => 'setSubTaskSucceed',
        'tag' => 'setTag',
        'task_id' => 'setTaskId',
        'task_name' => 'setTaskName',
        'task_status' => 'setTaskStatus',
        'task_type' => 'setTaskType',
        'task_user' => 'setTaskUser',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'config' => 'getConfig',
        'create_time' => 'getCreateTime',
        'distributed_count' => 'getDistributedCount',
        'id_count' => 'getIdCount',
        'id_list' => 'getIdList',
        'sub_task_created' => 'getSubTaskCreated',
        'sub_task_failed' => 'getSubTaskFailed',
        'sub_task_running' => 'getSubTaskRunning',
        'sub_task_succeed' => 'getSubTaskSucceed',
        'tag' => 'getTag',
        'task_id' => 'getTaskId',
        'task_name' => 'getTaskName',
        'task_status' => 'getTaskStatus',
        'task_type' => 'getTaskType',
        'task_user' => 'getTaskUser',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['distributed_count'] = isset($data['distributed_count']) ? $data['distributed_count'] : null;
        $this->container['id_count'] = isset($data['id_count']) ? $data['id_count'] : null;
        $this->container['id_list'] = isset($data['id_list']) ? $data['id_list'] : null;
        $this->container['sub_task_created'] = isset($data['sub_task_created']) ? $data['sub_task_created'] : null;
        $this->container['sub_task_failed'] = isset($data['sub_task_failed']) ? $data['sub_task_failed'] : null;
        $this->container['sub_task_running'] = isset($data['sub_task_running']) ? $data['sub_task_running'] : null;
        $this->container['sub_task_succeed'] = isset($data['sub_task_succeed']) ? $data['sub_task_succeed'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['task_status'] = isset($data['task_status']) ? $data['task_status'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
        $this->container['task_user'] = isset($data['task_user']) ? $data['task_user'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Volcengine\Seccenter20240508\Model\ConfigForGetVirusTaskInfoOutput
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Volcengine\Seccenter20240508\Model\ConfigForGetVirusTaskInfoOutput $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets distributed_count
     *
     * @return int
     */
    public function getDistributedCount()
    {
        return $this->container['distributed_count'];
    }

    /**
     * Sets distributed_count
     *
     * @param int $distributed_count distributed_count
     *
     * @return $this
     */
    public function setDistributedCount($distributed_count)
    {
        $this->container['distributed_count'] = $distributed_count;

        return $this;
    }

    /**
     * Gets id_count
     *
     * @return double
     */
    public function getIdCount()
    {
        return $this->container['id_count'];
    }

    /**
     * Sets id_count
     *
     * @param double $id_count id_count
     *
     * @return $this
     */
    public function setIdCount($id_count)
    {
        $this->container['id_count'] = $id_count;

        return $this;
    }

    /**
     * Gets id_list
     *
     * @return string[]
     */
    public function getIdList()
    {
        return $this->container['id_list'];
    }

    /**
     * Sets id_list
     *
     * @param string[] $id_list id_list
     *
     * @return $this
     */
    public function setIdList($id_list)
    {
        $this->container['id_list'] = $id_list;

        return $this;
    }

    /**
     * Gets sub_task_created
     *
     * @return int
     */
    public function getSubTaskCreated()
    {
        return $this->container['sub_task_created'];
    }

    /**
     * Sets sub_task_created
     *
     * @param int $sub_task_created sub_task_created
     *
     * @return $this
     */
    public function setSubTaskCreated($sub_task_created)
    {
        $this->container['sub_task_created'] = $sub_task_created;

        return $this;
    }

    /**
     * Gets sub_task_failed
     *
     * @return int
     */
    public function getSubTaskFailed()
    {
        return $this->container['sub_task_failed'];
    }

    /**
     * Sets sub_task_failed
     *
     * @param int $sub_task_failed sub_task_failed
     *
     * @return $this
     */
    public function setSubTaskFailed($sub_task_failed)
    {
        $this->container['sub_task_failed'] = $sub_task_failed;

        return $this;
    }

    /**
     * Gets sub_task_running
     *
     * @return int
     */
    public function getSubTaskRunning()
    {
        return $this->container['sub_task_running'];
    }

    /**
     * Sets sub_task_running
     *
     * @param int $sub_task_running sub_task_running
     *
     * @return $this
     */
    public function setSubTaskRunning($sub_task_running)
    {
        $this->container['sub_task_running'] = $sub_task_running;

        return $this;
    }

    /**
     * Gets sub_task_succeed
     *
     * @return int
     */
    public function getSubTaskSucceed()
    {
        return $this->container['sub_task_succeed'];
    }

    /**
     * Sets sub_task_succeed
     *
     * @param int $sub_task_succeed sub_task_succeed
     *
     * @return $this
     */
    public function setSubTaskSucceed($sub_task_succeed)
    {
        $this->container['sub_task_succeed'] = $sub_task_succeed;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name task_name
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets task_status
     *
     * @return string
     */
    public function getTaskStatus()
    {
        return $this->container['task_status'];
    }

    /**
     * Sets task_status
     *
     * @param string $task_status task_status
     *
     * @return $this
     */
    public function setTaskStatus($task_status)
    {
        $this->container['task_status'] = $task_status;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param string $task_type task_type
     *
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets task_user
     *
     * @return string
     */
    public function getTaskUser()
    {
        return $this->container['task_user'];
    }

    /**
     * Sets task_user
     *
     * @param string $task_user task_user
     *
     * @return $this
     */
    public function setTaskUser($task_user)
    {
        $this->container['task_user'] = $task_user;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

