<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CveListForGetVulnInfoOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CveListForGetVulnInfoOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cve_detail_url' => 'string',
        'cve_id' => 'string',
        'cvss' => 'string',
        'descript' => 'string',
        'has_exploit' => 'bool',
        'tag' => 'string[]',
        'vuln_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cve_detail_url' => null,
        'cve_id' => null,
        'cvss' => null,
        'descript' => null,
        'has_exploit' => null,
        'tag' => null,
        'vuln_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cve_detail_url' => 'CveDetailUrl',
        'cve_id' => 'CveID',
        'cvss' => 'Cvss',
        'descript' => 'Descript',
        'has_exploit' => 'HasExploit',
        'tag' => 'Tag',
        'vuln_name' => 'VulnName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cve_detail_url' => 'setCveDetailUrl',
        'cve_id' => 'setCveId',
        'cvss' => 'setCvss',
        'descript' => 'setDescript',
        'has_exploit' => 'setHasExploit',
        'tag' => 'setTag',
        'vuln_name' => 'setVulnName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cve_detail_url' => 'getCveDetailUrl',
        'cve_id' => 'getCveId',
        'cvss' => 'getCvss',
        'descript' => 'getDescript',
        'has_exploit' => 'getHasExploit',
        'tag' => 'getTag',
        'vuln_name' => 'getVulnName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cve_detail_url'] = isset($data['cve_detail_url']) ? $data['cve_detail_url'] : null;
        $this->container['cve_id'] = isset($data['cve_id']) ? $data['cve_id'] : null;
        $this->container['cvss'] = isset($data['cvss']) ? $data['cvss'] : null;
        $this->container['descript'] = isset($data['descript']) ? $data['descript'] : null;
        $this->container['has_exploit'] = isset($data['has_exploit']) ? $data['has_exploit'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['vuln_name'] = isset($data['vuln_name']) ? $data['vuln_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cve_detail_url
     *
     * @return string
     */
    public function getCveDetailUrl()
    {
        return $this->container['cve_detail_url'];
    }

    /**
     * Sets cve_detail_url
     *
     * @param string $cve_detail_url cve_detail_url
     *
     * @return $this
     */
    public function setCveDetailUrl($cve_detail_url)
    {
        $this->container['cve_detail_url'] = $cve_detail_url;

        return $this;
    }

    /**
     * Gets cve_id
     *
     * @return string
     */
    public function getCveId()
    {
        return $this->container['cve_id'];
    }

    /**
     * Sets cve_id
     *
     * @param string $cve_id cve_id
     *
     * @return $this
     */
    public function setCveId($cve_id)
    {
        $this->container['cve_id'] = $cve_id;

        return $this;
    }

    /**
     * Gets cvss
     *
     * @return string
     */
    public function getCvss()
    {
        return $this->container['cvss'];
    }

    /**
     * Sets cvss
     *
     * @param string $cvss cvss
     *
     * @return $this
     */
    public function setCvss($cvss)
    {
        $this->container['cvss'] = $cvss;

        return $this;
    }

    /**
     * Gets descript
     *
     * @return string
     */
    public function getDescript()
    {
        return $this->container['descript'];
    }

    /**
     * Sets descript
     *
     * @param string $descript descript
     *
     * @return $this
     */
    public function setDescript($descript)
    {
        $this->container['descript'] = $descript;

        return $this;
    }

    /**
     * Gets has_exploit
     *
     * @return bool
     */
    public function getHasExploit()
    {
        return $this->container['has_exploit'];
    }

    /**
     * Sets has_exploit
     *
     * @param bool $has_exploit has_exploit
     *
     * @return $this
     */
    public function setHasExploit($has_exploit)
    {
        $this->container['has_exploit'] = $has_exploit;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[] $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets vuln_name
     *
     * @return string
     */
    public function getVulnName()
    {
        return $this->container['vuln_name'];
    }

    /**
     * Sets vuln_name
     *
     * @param string $vuln_name vuln_name
     *
     * @return $this
     */
    public function setVulnName($vuln_name)
    {
        $this->container['vuln_name'] = $vuln_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

