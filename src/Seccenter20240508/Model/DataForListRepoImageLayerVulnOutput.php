<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListRepoImageLayerVulnOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListRepoImageLayerVulnOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'pkg_name' => 'string',
        'pkg_path' => 'string',
        'pkg_type' => 'string',
        'pkg_ver' => 'string',
        'severity' => 'string',
        'vuln_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'pkg_name' => null,
        'pkg_path' => null,
        'pkg_type' => null,
        'pkg_ver' => null,
        'severity' => null,
        'vuln_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'pkg_name' => 'PkgName',
        'pkg_path' => 'PkgPath',
        'pkg_type' => 'PkgType',
        'pkg_ver' => 'PkgVer',
        'severity' => 'Severity',
        'vuln_id' => 'VulnID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pkg_name' => 'setPkgName',
        'pkg_path' => 'setPkgPath',
        'pkg_type' => 'setPkgType',
        'pkg_ver' => 'setPkgVer',
        'severity' => 'setSeverity',
        'vuln_id' => 'setVulnId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pkg_name' => 'getPkgName',
        'pkg_path' => 'getPkgPath',
        'pkg_type' => 'getPkgType',
        'pkg_ver' => 'getPkgVer',
        'severity' => 'getSeverity',
        'vuln_id' => 'getVulnId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pkg_name'] = isset($data['pkg_name']) ? $data['pkg_name'] : null;
        $this->container['pkg_path'] = isset($data['pkg_path']) ? $data['pkg_path'] : null;
        $this->container['pkg_type'] = isset($data['pkg_type']) ? $data['pkg_type'] : null;
        $this->container['pkg_ver'] = isset($data['pkg_ver']) ? $data['pkg_ver'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['vuln_id'] = isset($data['vuln_id']) ? $data['vuln_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pkg_name
     *
     * @return string
     */
    public function getPkgName()
    {
        return $this->container['pkg_name'];
    }

    /**
     * Sets pkg_name
     *
     * @param string $pkg_name pkg_name
     *
     * @return $this
     */
    public function setPkgName($pkg_name)
    {
        $this->container['pkg_name'] = $pkg_name;

        return $this;
    }

    /**
     * Gets pkg_path
     *
     * @return string
     */
    public function getPkgPath()
    {
        return $this->container['pkg_path'];
    }

    /**
     * Sets pkg_path
     *
     * @param string $pkg_path pkg_path
     *
     * @return $this
     */
    public function setPkgPath($pkg_path)
    {
        $this->container['pkg_path'] = $pkg_path;

        return $this;
    }

    /**
     * Gets pkg_type
     *
     * @return string
     */
    public function getPkgType()
    {
        return $this->container['pkg_type'];
    }

    /**
     * Sets pkg_type
     *
     * @param string $pkg_type pkg_type
     *
     * @return $this
     */
    public function setPkgType($pkg_type)
    {
        $this->container['pkg_type'] = $pkg_type;

        return $this;
    }

    /**
     * Gets pkg_ver
     *
     * @return string
     */
    public function getPkgVer()
    {
        return $this->container['pkg_ver'];
    }

    /**
     * Sets pkg_ver
     *
     * @param string $pkg_ver pkg_ver
     *
     * @return $this
     */
    public function setPkgVer($pkg_ver)
    {
        $this->container['pkg_ver'] = $pkg_ver;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity severity
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets vuln_id
     *
     * @return string
     */
    public function getVulnId()
    {
        return $this->container['vuln_id'];
    }

    /**
     * Sets vuln_id
     *
     * @param string $vuln_id vuln_id
     *
     * @return $this
     */
    public function setVulnId($vuln_id)
    {
        $this->container['vuln_id'] = $vuln_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

