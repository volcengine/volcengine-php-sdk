<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Seccenter20240508\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListEndpointHandleMethodsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListEndpointHandleMethodsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_list' => 'string[]',
        'not_support_reason' => 'string',
        'proc_list' => '\Volcengine\Seccenter20240508\Model\ProcListForListEndpointHandleMethodsOutput[]',
        'support' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_list' => null,
        'not_support_reason' => null,
        'proc_list' => null,
        'support' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_list' => 'FileList',
        'not_support_reason' => 'NotSupportReason',
        'proc_list' => 'ProcList',
        'support' => 'Support'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_list' => 'setFileList',
        'not_support_reason' => 'setNotSupportReason',
        'proc_list' => 'setProcList',
        'support' => 'setSupport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_list' => 'getFileList',
        'not_support_reason' => 'getNotSupportReason',
        'proc_list' => 'getProcList',
        'support' => 'getSupport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_list'] = isset($data['file_list']) ? $data['file_list'] : null;
        $this->container['not_support_reason'] = isset($data['not_support_reason']) ? $data['not_support_reason'] : null;
        $this->container['proc_list'] = isset($data['proc_list']) ? $data['proc_list'] : null;
        $this->container['support'] = isset($data['support']) ? $data['support'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_list
     *
     * @return string[]
     */
    public function getFileList()
    {
        return $this->container['file_list'];
    }

    /**
     * Sets file_list
     *
     * @param string[] $file_list file_list
     *
     * @return $this
     */
    public function setFileList($file_list)
    {
        $this->container['file_list'] = $file_list;

        return $this;
    }

    /**
     * Gets not_support_reason
     *
     * @return string
     */
    public function getNotSupportReason()
    {
        return $this->container['not_support_reason'];
    }

    /**
     * Sets not_support_reason
     *
     * @param string $not_support_reason not_support_reason
     *
     * @return $this
     */
    public function setNotSupportReason($not_support_reason)
    {
        $this->container['not_support_reason'] = $not_support_reason;

        return $this;
    }

    /**
     * Gets proc_list
     *
     * @return \Volcengine\Seccenter20240508\Model\ProcListForListEndpointHandleMethodsOutput[]
     */
    public function getProcList()
    {
        return $this->container['proc_list'];
    }

    /**
     * Sets proc_list
     *
     * @param \Volcengine\Seccenter20240508\Model\ProcListForListEndpointHandleMethodsOutput[] $proc_list proc_list
     *
     * @return $this
     */
    public function setProcList($proc_list)
    {
        $this->container['proc_list'] = $proc_list;

        return $this;
    }

    /**
     * Gets support
     *
     * @return bool
     */
    public function getSupport()
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param bool $support support
     *
     * @return $this
     */
    public function setSupport($support)
    {
        $this->container['support'] = $support;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

