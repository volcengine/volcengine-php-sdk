<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FilterForListSupportedAddonsInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilterForListSupportedAddonsInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'categories' => 'string[]',
        'deploy_modes' => 'string[]',
        'deploy_node_types' => 'string[]',
        'name' => 'string',
        'necessaries' => 'string[]',
        'pod_network_modes' => 'string[]',
        'versions_compatibilities_kubernetes_versions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'categories' => null,
        'deploy_modes' => null,
        'deploy_node_types' => null,
        'name' => null,
        'necessaries' => null,
        'pod_network_modes' => null,
        'versions_compatibilities_kubernetes_versions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categories' => 'Categories',
        'deploy_modes' => 'DeployModes',
        'deploy_node_types' => 'DeployNodeTypes',
        'name' => 'Name',
        'necessaries' => 'Necessaries',
        'pod_network_modes' => 'PodNetworkModes',
        'versions_compatibilities_kubernetes_versions' => 'Versions.Compatibilities.KubernetesVersions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categories' => 'setCategories',
        'deploy_modes' => 'setDeployModes',
        'deploy_node_types' => 'setDeployNodeTypes',
        'name' => 'setName',
        'necessaries' => 'setNecessaries',
        'pod_network_modes' => 'setPodNetworkModes',
        'versions_compatibilities_kubernetes_versions' => 'setVersionsCompatibilitiesKubernetesVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categories' => 'getCategories',
        'deploy_modes' => 'getDeployModes',
        'deploy_node_types' => 'getDeployNodeTypes',
        'name' => 'getName',
        'necessaries' => 'getNecessaries',
        'pod_network_modes' => 'getPodNetworkModes',
        'versions_compatibilities_kubernetes_versions' => 'getVersionsCompatibilitiesKubernetesVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CATEGORIES_MONITOR = 'Monitor';
    const CATEGORIES_DNS = 'Dns';
    const CATEGORIES_STORAGE = 'Storage';
    const CATEGORIES_SCHEDULER = 'Scheduler';
    const CATEGORIES_NETWORK = 'Network';
    const CATEGORIES_SECURITY = 'Security';
    const CATEGORIES_GPU = 'Gpu';
    const CATEGORIES_IMAGE = 'Image';
    const DEPLOY_MODES_MANAGED = 'Managed';
    const DEPLOY_MODES_UNMANAGED = 'Unmanaged';
    const DEPLOY_NODE_TYPES_NODE = 'Node';
    const DEPLOY_NODE_TYPES_VIRTUAL_NODE = 'VirtualNode';
    const DEPLOY_NODE_TYPES_EDGE_NODE = 'EdgeNode';
    const NECESSARIES_REQUIRED = 'Required';
    const NECESSARIES_RECOMMENDED = 'Recommended';
    const NECESSARIES_ON_DEMAND = 'OnDemand';
    const POD_NETWORK_MODES_FLANNEL = 'Flannel';
    const POD_NETWORK_MODES_VPC_CNI_SHARED = 'VpcCniShared';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoriesAllowableValues()
    {
        return [
            self::CATEGORIES_MONITOR,
            self::CATEGORIES_DNS,
            self::CATEGORIES_STORAGE,
            self::CATEGORIES_SCHEDULER,
            self::CATEGORIES_NETWORK,
            self::CATEGORIES_SECURITY,
            self::CATEGORIES_GPU,
            self::CATEGORIES_IMAGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeployModesAllowableValues()
    {
        return [
            self::DEPLOY_MODES_MANAGED,
            self::DEPLOY_MODES_UNMANAGED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeployNodeTypesAllowableValues()
    {
        return [
            self::DEPLOY_NODE_TYPES_NODE,
            self::DEPLOY_NODE_TYPES_VIRTUAL_NODE,
            self::DEPLOY_NODE_TYPES_EDGE_NODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNecessariesAllowableValues()
    {
        return [
            self::NECESSARIES_REQUIRED,
            self::NECESSARIES_RECOMMENDED,
            self::NECESSARIES_ON_DEMAND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPodNetworkModesAllowableValues()
    {
        return [
            self::POD_NETWORK_MODES_FLANNEL,
            self::POD_NETWORK_MODES_VPC_CNI_SHARED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['deploy_modes'] = isset($data['deploy_modes']) ? $data['deploy_modes'] : null;
        $this->container['deploy_node_types'] = isset($data['deploy_node_types']) ? $data['deploy_node_types'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['necessaries'] = isset($data['necessaries']) ? $data['necessaries'] : null;
        $this->container['pod_network_modes'] = isset($data['pod_network_modes']) ? $data['pod_network_modes'] : null;
        $this->container['versions_compatibilities_kubernetes_versions'] = isset($data['versions_compatibilities_kubernetes_versions']) ? $data['versions_compatibilities_kubernetes_versions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $allowedValues = $this->getCategoriesAllowableValues();
        if (!is_null($categories) && array_diff($categories, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'categories', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets deploy_modes
     *
     * @return string[]
     */
    public function getDeployModes()
    {
        return $this->container['deploy_modes'];
    }

    /**
     * Sets deploy_modes
     *
     * @param string[] $deploy_modes deploy_modes
     *
     * @return $this
     */
    public function setDeployModes($deploy_modes)
    {
        $allowedValues = $this->getDeployModesAllowableValues();
        if (!is_null($deploy_modes) && array_diff($deploy_modes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deploy_modes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploy_modes'] = $deploy_modes;

        return $this;
    }

    /**
     * Gets deploy_node_types
     *
     * @return string[]
     */
    public function getDeployNodeTypes()
    {
        return $this->container['deploy_node_types'];
    }

    /**
     * Sets deploy_node_types
     *
     * @param string[] $deploy_node_types deploy_node_types
     *
     * @return $this
     */
    public function setDeployNodeTypes($deploy_node_types)
    {
        $allowedValues = $this->getDeployNodeTypesAllowableValues();
        if (!is_null($deploy_node_types) && array_diff($deploy_node_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deploy_node_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploy_node_types'] = $deploy_node_types;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets necessaries
     *
     * @return string[]
     */
    public function getNecessaries()
    {
        return $this->container['necessaries'];
    }

    /**
     * Sets necessaries
     *
     * @param string[] $necessaries necessaries
     *
     * @return $this
     */
    public function setNecessaries($necessaries)
    {
        $allowedValues = $this->getNecessariesAllowableValues();
        if (!is_null($necessaries) && array_diff($necessaries, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'necessaries', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['necessaries'] = $necessaries;

        return $this;
    }

    /**
     * Gets pod_network_modes
     *
     * @return string[]
     */
    public function getPodNetworkModes()
    {
        return $this->container['pod_network_modes'];
    }

    /**
     * Sets pod_network_modes
     *
     * @param string[] $pod_network_modes pod_network_modes
     *
     * @return $this
     */
    public function setPodNetworkModes($pod_network_modes)
    {
        $allowedValues = $this->getPodNetworkModesAllowableValues();
        if (!is_null($pod_network_modes) && array_diff($pod_network_modes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pod_network_modes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pod_network_modes'] = $pod_network_modes;

        return $this;
    }

    /**
     * Gets versions_compatibilities_kubernetes_versions
     *
     * @return string[]
     */
    public function getVersionsCompatibilitiesKubernetesVersions()
    {
        return $this->container['versions_compatibilities_kubernetes_versions'];
    }

    /**
     * Sets versions_compatibilities_kubernetes_versions
     *
     * @param string[] $versions_compatibilities_kubernetes_versions versions_compatibilities_kubernetes_versions
     *
     * @return $this
     */
    public function setVersionsCompatibilitiesKubernetesVersions($versions_compatibilities_kubernetes_versions)
    {
        $this->container['versions_compatibilities_kubernetes_versions'] = $versions_compatibilities_kubernetes_versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

