<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeConfigForCreateNodePoolInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeConfigForCreateNodePoolInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_container_storage_enabled' => 'bool',
        'auto_renew' => 'bool',
        'auto_renew_period' => 'int',
        'data_volumes' => '\Volcengine\Vke\Model\DataVolumeForCreateNodePoolInput[]',
        'deployment_set_group_number' => 'int',
        'deployment_set_id' => 'string',
        'hpc_cluster_ids' => 'string[]',
        'image_id' => 'string',
        'initialize_script' => 'string',
        'instance_charge_type' => 'string',
        'instance_type_ids' => 'string[]',
        'instances_distribution' => '\Volcengine\Vke\Model\InstancesDistributionForCreateNodePoolInput',
        'name_prefix' => 'string',
        'period' => 'int',
        'pre_script' => 'string',
        'project_name' => 'string',
        'public_access_config' => '\Volcengine\Vke\Model\PublicAccessConfigForCreateNodePoolInput',
        'public_access_enabled' => 'bool',
        'security' => '\Volcengine\Vke\Model\SecurityForCreateNodePoolInput',
        'spot_strategy' => 'string',
        'subnet_ids' => 'string[]',
        'system_volume' => '\Volcengine\Vke\Model\SystemVolumeForCreateNodePoolInput',
        'tags' => '\Volcengine\Vke\Model\TagForCreateNodePoolInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_container_storage_enabled' => null,
        'auto_renew' => null,
        'auto_renew_period' => 'int32',
        'data_volumes' => null,
        'deployment_set_group_number' => 'int32',
        'deployment_set_id' => null,
        'hpc_cluster_ids' => null,
        'image_id' => null,
        'initialize_script' => null,
        'instance_charge_type' => null,
        'instance_type_ids' => null,
        'instances_distribution' => null,
        'name_prefix' => null,
        'period' => 'int32',
        'pre_script' => null,
        'project_name' => null,
        'public_access_config' => null,
        'public_access_enabled' => null,
        'security' => null,
        'spot_strategy' => null,
        'subnet_ids' => null,
        'system_volume' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_container_storage_enabled' => 'AdditionalContainerStorageEnabled',
        'auto_renew' => 'AutoRenew',
        'auto_renew_period' => 'AutoRenewPeriod',
        'data_volumes' => 'DataVolumes',
        'deployment_set_group_number' => 'DeploymentSetGroupNumber',
        'deployment_set_id' => 'DeploymentSetId',
        'hpc_cluster_ids' => 'HpcClusterIds',
        'image_id' => 'ImageId',
        'initialize_script' => 'InitializeScript',
        'instance_charge_type' => 'InstanceChargeType',
        'instance_type_ids' => 'InstanceTypeIds',
        'instances_distribution' => 'InstancesDistribution',
        'name_prefix' => 'NamePrefix',
        'period' => 'Period',
        'pre_script' => 'PreScript',
        'project_name' => 'ProjectName',
        'public_access_config' => 'PublicAccessConfig',
        'public_access_enabled' => 'PublicAccessEnabled',
        'security' => 'Security',
        'spot_strategy' => 'SpotStrategy',
        'subnet_ids' => 'SubnetIds',
        'system_volume' => 'SystemVolume',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_container_storage_enabled' => 'setAdditionalContainerStorageEnabled',
        'auto_renew' => 'setAutoRenew',
        'auto_renew_period' => 'setAutoRenewPeriod',
        'data_volumes' => 'setDataVolumes',
        'deployment_set_group_number' => 'setDeploymentSetGroupNumber',
        'deployment_set_id' => 'setDeploymentSetId',
        'hpc_cluster_ids' => 'setHpcClusterIds',
        'image_id' => 'setImageId',
        'initialize_script' => 'setInitializeScript',
        'instance_charge_type' => 'setInstanceChargeType',
        'instance_type_ids' => 'setInstanceTypeIds',
        'instances_distribution' => 'setInstancesDistribution',
        'name_prefix' => 'setNamePrefix',
        'period' => 'setPeriod',
        'pre_script' => 'setPreScript',
        'project_name' => 'setProjectName',
        'public_access_config' => 'setPublicAccessConfig',
        'public_access_enabled' => 'setPublicAccessEnabled',
        'security' => 'setSecurity',
        'spot_strategy' => 'setSpotStrategy',
        'subnet_ids' => 'setSubnetIds',
        'system_volume' => 'setSystemVolume',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_container_storage_enabled' => 'getAdditionalContainerStorageEnabled',
        'auto_renew' => 'getAutoRenew',
        'auto_renew_period' => 'getAutoRenewPeriod',
        'data_volumes' => 'getDataVolumes',
        'deployment_set_group_number' => 'getDeploymentSetGroupNumber',
        'deployment_set_id' => 'getDeploymentSetId',
        'hpc_cluster_ids' => 'getHpcClusterIds',
        'image_id' => 'getImageId',
        'initialize_script' => 'getInitializeScript',
        'instance_charge_type' => 'getInstanceChargeType',
        'instance_type_ids' => 'getInstanceTypeIds',
        'instances_distribution' => 'getInstancesDistribution',
        'name_prefix' => 'getNamePrefix',
        'period' => 'getPeriod',
        'pre_script' => 'getPreScript',
        'project_name' => 'getProjectName',
        'public_access_config' => 'getPublicAccessConfig',
        'public_access_enabled' => 'getPublicAccessEnabled',
        'security' => 'getSecurity',
        'spot_strategy' => 'getSpotStrategy',
        'subnet_ids' => 'getSubnetIds',
        'system_volume' => 'getSystemVolume',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INSTANCE_CHARGE_TYPE_POST_PAID = 'PostPaid';
    const INSTANCE_CHARGE_TYPE_PRE_PAID = 'PrePaid';
    const SPOT_STRATEGY_NO_SPOT = 'NoSpot';
    const SPOT_STRATEGY_SPOT_AS_PRICE_GO = 'SpotAsPriceGo';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstanceChargeTypeAllowableValues()
    {
        return [
            self::INSTANCE_CHARGE_TYPE_POST_PAID,
            self::INSTANCE_CHARGE_TYPE_PRE_PAID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpotStrategyAllowableValues()
    {
        return [
            self::SPOT_STRATEGY_NO_SPOT,
            self::SPOT_STRATEGY_SPOT_AS_PRICE_GO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_container_storage_enabled'] = isset($data['additional_container_storage_enabled']) ? $data['additional_container_storage_enabled'] : null;
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['auto_renew_period'] = isset($data['auto_renew_period']) ? $data['auto_renew_period'] : null;
        $this->container['data_volumes'] = isset($data['data_volumes']) ? $data['data_volumes'] : null;
        $this->container['deployment_set_group_number'] = isset($data['deployment_set_group_number']) ? $data['deployment_set_group_number'] : null;
        $this->container['deployment_set_id'] = isset($data['deployment_set_id']) ? $data['deployment_set_id'] : null;
        $this->container['hpc_cluster_ids'] = isset($data['hpc_cluster_ids']) ? $data['hpc_cluster_ids'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['initialize_script'] = isset($data['initialize_script']) ? $data['initialize_script'] : null;
        $this->container['instance_charge_type'] = isset($data['instance_charge_type']) ? $data['instance_charge_type'] : null;
        $this->container['instance_type_ids'] = isset($data['instance_type_ids']) ? $data['instance_type_ids'] : null;
        $this->container['instances_distribution'] = isset($data['instances_distribution']) ? $data['instances_distribution'] : null;
        $this->container['name_prefix'] = isset($data['name_prefix']) ? $data['name_prefix'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['pre_script'] = isset($data['pre_script']) ? $data['pre_script'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['public_access_config'] = isset($data['public_access_config']) ? $data['public_access_config'] : null;
        $this->container['public_access_enabled'] = isset($data['public_access_enabled']) ? $data['public_access_enabled'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['spot_strategy'] = isset($data['spot_strategy']) ? $data['spot_strategy'] : null;
        $this->container['subnet_ids'] = isset($data['subnet_ids']) ? $data['subnet_ids'] : null;
        $this->container['system_volume'] = isset($data['system_volume']) ? $data['system_volume'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInstanceChargeTypeAllowableValues();
        if (!is_null($this->container['instance_charge_type']) && !in_array($this->container['instance_charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'instance_charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpotStrategyAllowableValues();
        if (!is_null($this->container['spot_strategy']) && !in_array($this->container['spot_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'spot_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_container_storage_enabled
     *
     * @return bool
     */
    public function getAdditionalContainerStorageEnabled()
    {
        return $this->container['additional_container_storage_enabled'];
    }

    /**
     * Sets additional_container_storage_enabled
     *
     * @param bool $additional_container_storage_enabled additional_container_storage_enabled
     *
     * @return $this
     */
    public function setAdditionalContainerStorageEnabled($additional_container_storage_enabled)
    {
        $this->container['additional_container_storage_enabled'] = $additional_container_storage_enabled;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets auto_renew_period
     *
     * @return int
     */
    public function getAutoRenewPeriod()
    {
        return $this->container['auto_renew_period'];
    }

    /**
     * Sets auto_renew_period
     *
     * @param int $auto_renew_period auto_renew_period
     *
     * @return $this
     */
    public function setAutoRenewPeriod($auto_renew_period)
    {
        $this->container['auto_renew_period'] = $auto_renew_period;

        return $this;
    }

    /**
     * Gets data_volumes
     *
     * @return \Volcengine\Vke\Model\DataVolumeForCreateNodePoolInput[]
     */
    public function getDataVolumes()
    {
        return $this->container['data_volumes'];
    }

    /**
     * Sets data_volumes
     *
     * @param \Volcengine\Vke\Model\DataVolumeForCreateNodePoolInput[] $data_volumes data_volumes
     *
     * @return $this
     */
    public function setDataVolumes($data_volumes)
    {
        $this->container['data_volumes'] = $data_volumes;

        return $this;
    }

    /**
     * Gets deployment_set_group_number
     *
     * @return int
     */
    public function getDeploymentSetGroupNumber()
    {
        return $this->container['deployment_set_group_number'];
    }

    /**
     * Sets deployment_set_group_number
     *
     * @param int $deployment_set_group_number deployment_set_group_number
     *
     * @return $this
     */
    public function setDeploymentSetGroupNumber($deployment_set_group_number)
    {
        $this->container['deployment_set_group_number'] = $deployment_set_group_number;

        return $this;
    }

    /**
     * Gets deployment_set_id
     *
     * @return string
     */
    public function getDeploymentSetId()
    {
        return $this->container['deployment_set_id'];
    }

    /**
     * Sets deployment_set_id
     *
     * @param string $deployment_set_id deployment_set_id
     *
     * @return $this
     */
    public function setDeploymentSetId($deployment_set_id)
    {
        $this->container['deployment_set_id'] = $deployment_set_id;

        return $this;
    }

    /**
     * Gets hpc_cluster_ids
     *
     * @return string[]
     */
    public function getHpcClusterIds()
    {
        return $this->container['hpc_cluster_ids'];
    }

    /**
     * Sets hpc_cluster_ids
     *
     * @param string[] $hpc_cluster_ids hpc_cluster_ids
     *
     * @return $this
     */
    public function setHpcClusterIds($hpc_cluster_ids)
    {
        $this->container['hpc_cluster_ids'] = $hpc_cluster_ids;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets initialize_script
     *
     * @return string
     */
    public function getInitializeScript()
    {
        return $this->container['initialize_script'];
    }

    /**
     * Sets initialize_script
     *
     * @param string $initialize_script initialize_script
     *
     * @return $this
     */
    public function setInitializeScript($initialize_script)
    {
        $this->container['initialize_script'] = $initialize_script;

        return $this;
    }

    /**
     * Gets instance_charge_type
     *
     * @return string
     */
    public function getInstanceChargeType()
    {
        return $this->container['instance_charge_type'];
    }

    /**
     * Sets instance_charge_type
     *
     * @param string $instance_charge_type instance_charge_type
     *
     * @return $this
     */
    public function setInstanceChargeType($instance_charge_type)
    {
        $allowedValues = $this->getInstanceChargeTypeAllowableValues();
        if (!is_null($instance_charge_type) && !in_array($instance_charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'instance_charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['instance_charge_type'] = $instance_charge_type;

        return $this;
    }

    /**
     * Gets instance_type_ids
     *
     * @return string[]
     */
    public function getInstanceTypeIds()
    {
        return $this->container['instance_type_ids'];
    }

    /**
     * Sets instance_type_ids
     *
     * @param string[] $instance_type_ids instance_type_ids
     *
     * @return $this
     */
    public function setInstanceTypeIds($instance_type_ids)
    {
        $this->container['instance_type_ids'] = $instance_type_ids;

        return $this;
    }

    /**
     * Gets instances_distribution
     *
     * @return \Volcengine\Vke\Model\InstancesDistributionForCreateNodePoolInput
     */
    public function getInstancesDistribution()
    {
        return $this->container['instances_distribution'];
    }

    /**
     * Sets instances_distribution
     *
     * @param \Volcengine\Vke\Model\InstancesDistributionForCreateNodePoolInput $instances_distribution instances_distribution
     *
     * @return $this
     */
    public function setInstancesDistribution($instances_distribution)
    {
        $this->container['instances_distribution'] = $instances_distribution;

        return $this;
    }

    /**
     * Gets name_prefix
     *
     * @return string
     */
    public function getNamePrefix()
    {
        return $this->container['name_prefix'];
    }

    /**
     * Sets name_prefix
     *
     * @param string $name_prefix name_prefix
     *
     * @return $this
     */
    public function setNamePrefix($name_prefix)
    {
        $this->container['name_prefix'] = $name_prefix;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets pre_script
     *
     * @return string
     */
    public function getPreScript()
    {
        return $this->container['pre_script'];
    }

    /**
     * Sets pre_script
     *
     * @param string $pre_script pre_script
     *
     * @return $this
     */
    public function setPreScript($pre_script)
    {
        $this->container['pre_script'] = $pre_script;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets public_access_config
     *
     * @return \Volcengine\Vke\Model\PublicAccessConfigForCreateNodePoolInput
     */
    public function getPublicAccessConfig()
    {
        return $this->container['public_access_config'];
    }

    /**
     * Sets public_access_config
     *
     * @param \Volcengine\Vke\Model\PublicAccessConfigForCreateNodePoolInput $public_access_config public_access_config
     *
     * @return $this
     */
    public function setPublicAccessConfig($public_access_config)
    {
        $this->container['public_access_config'] = $public_access_config;

        return $this;
    }

    /**
     * Gets public_access_enabled
     *
     * @return bool
     */
    public function getPublicAccessEnabled()
    {
        return $this->container['public_access_enabled'];
    }

    /**
     * Sets public_access_enabled
     *
     * @param bool $public_access_enabled public_access_enabled
     *
     * @return $this
     */
    public function setPublicAccessEnabled($public_access_enabled)
    {
        $this->container['public_access_enabled'] = $public_access_enabled;

        return $this;
    }

    /**
     * Gets security
     *
     * @return \Volcengine\Vke\Model\SecurityForCreateNodePoolInput
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param \Volcengine\Vke\Model\SecurityForCreateNodePoolInput $security security
     *
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets spot_strategy
     *
     * @return string
     */
    public function getSpotStrategy()
    {
        return $this->container['spot_strategy'];
    }

    /**
     * Sets spot_strategy
     *
     * @param string $spot_strategy spot_strategy
     *
     * @return $this
     */
    public function setSpotStrategy($spot_strategy)
    {
        $allowedValues = $this->getSpotStrategyAllowableValues();
        if (!is_null($spot_strategy) && !in_array($spot_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'spot_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spot_strategy'] = $spot_strategy;

        return $this;
    }

    /**
     * Gets subnet_ids
     *
     * @return string[]
     */
    public function getSubnetIds()
    {
        return $this->container['subnet_ids'];
    }

    /**
     * Sets subnet_ids
     *
     * @param string[] $subnet_ids subnet_ids
     *
     * @return $this
     */
    public function setSubnetIds($subnet_ids)
    {
        $this->container['subnet_ids'] = $subnet_ids;

        return $this;
    }

    /**
     * Gets system_volume
     *
     * @return \Volcengine\Vke\Model\SystemVolumeForCreateNodePoolInput
     */
    public function getSystemVolume()
    {
        return $this->container['system_volume'];
    }

    /**
     * Sets system_volume
     *
     * @param \Volcengine\Vke\Model\SystemVolumeForCreateNodePoolInput $system_volume system_volume
     *
     * @return $this
     */
    public function setSystemVolume($system_volume)
    {
        $this->container['system_volume'] = $system_volume;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vke\Model\TagForCreateNodePoolInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vke\Model\TagForCreateNodePoolInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

