<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DeleteClusterRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeleteClusterRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cascading_delete_resources' => 'string[]',
        'force' => 'bool',
        'id' => 'string',
        'retain_resources' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cascading_delete_resources' => null,
        'force' => null,
        'id' => null,
        'retain_resources' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cascading_delete_resources' => 'CascadingDeleteResources',
        'force' => 'Force',
        'id' => 'Id',
        'retain_resources' => 'RetainResources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cascading_delete_resources' => 'setCascadingDeleteResources',
        'force' => 'setForce',
        'id' => 'setId',
        'retain_resources' => 'setRetainResources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cascading_delete_resources' => 'getCascadingDeleteResources',
        'force' => 'getForce',
        'id' => 'getId',
        'retain_resources' => 'getRetainResources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CASCADING_DELETE_RESOURCES_NAT = 'Nat';
    const CASCADING_DELETE_RESOURCES_CLB = 'Clb';
    const CASCADING_DELETE_RESOURCES_NODE_POOL_RESOURCE = 'NodePoolResource';
    const CASCADING_DELETE_RESOURCES_DEFAULT_NODE_POOL_RESOURCE = 'DefaultNodePoolResource';
    const CASCADING_DELETE_RESOURCES_TRY_BEST = 'TryBest';
    const RETAIN_RESOURCES_NAT = 'Nat';
    const RETAIN_RESOURCES_CLB = 'Clb';
    const RETAIN_RESOURCES_ALB = 'Alb';
    const RETAIN_RESOURCES_NODE_POOL_RESOURCE = 'NodePoolResource';
    const RETAIN_RESOURCES_DEFAULT_NODE_POOL_RESOURCE = 'DefaultNodePoolResource';
    const RETAIN_RESOURCES_SECURITY_GROUP = 'SecurityGroup';
    const RETAIN_RESOURCES_ALL = 'All';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCascadingDeleteResourcesAllowableValues()
    {
        return [
            self::CASCADING_DELETE_RESOURCES_NAT,
            self::CASCADING_DELETE_RESOURCES_CLB,
            self::CASCADING_DELETE_RESOURCES_NODE_POOL_RESOURCE,
            self::CASCADING_DELETE_RESOURCES_DEFAULT_NODE_POOL_RESOURCE,
            self::CASCADING_DELETE_RESOURCES_TRY_BEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRetainResourcesAllowableValues()
    {
        return [
            self::RETAIN_RESOURCES_NAT,
            self::RETAIN_RESOURCES_CLB,
            self::RETAIN_RESOURCES_ALB,
            self::RETAIN_RESOURCES_NODE_POOL_RESOURCE,
            self::RETAIN_RESOURCES_DEFAULT_NODE_POOL_RESOURCE,
            self::RETAIN_RESOURCES_SECURITY_GROUP,
            self::RETAIN_RESOURCES_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cascading_delete_resources'] = isset($data['cascading_delete_resources']) ? $data['cascading_delete_resources'] : null;
        $this->container['force'] = isset($data['force']) ? $data['force'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['retain_resources'] = isset($data['retain_resources']) ? $data['retain_resources'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cascading_delete_resources
     *
     * @return string[]
     */
    public function getCascadingDeleteResources()
    {
        return $this->container['cascading_delete_resources'];
    }

    /**
     * Sets cascading_delete_resources
     *
     * @param string[] $cascading_delete_resources cascading_delete_resources
     *
     * @return $this
     */
    public function setCascadingDeleteResources($cascading_delete_resources)
    {
        $allowedValues = $this->getCascadingDeleteResourcesAllowableValues();
        if (!is_null($cascading_delete_resources) && array_diff($cascading_delete_resources, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cascading_delete_resources', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cascading_delete_resources'] = $cascading_delete_resources;

        return $this;
    }

    /**
     * Gets force
     *
     * @return bool
     */
    public function getForce()
    {
        return $this->container['force'];
    }

    /**
     * Sets force
     *
     * @param bool $force force
     *
     * @return $this
     */
    public function setForce($force)
    {
        $this->container['force'] = $force;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets retain_resources
     *
     * @return string[]
     */
    public function getRetainResources()
    {
        return $this->container['retain_resources'];
    }

    /**
     * Sets retain_resources
     *
     * @param string[] $retain_resources retain_resources
     *
     * @return $this
     */
    public function setRetainResources($retain_resources)
    {
        $allowedValues = $this->getRetainResourcesAllowableValues();
        if (!is_null($retain_resources) && array_diff($retain_resources, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'retain_resources', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['retain_resources'] = $retain_resources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

