<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FilterForListPermissionsInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilterForListPermissionsInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_ids' => 'string[]',
        'grantee_ids' => 'int[]',
        'grantee_type' => 'string',
        'ids' => 'string[]',
        'namespaces' => 'string[]',
        'role_names' => 'string[]',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_ids' => null,
        'grantee_ids' => 'int32',
        'grantee_type' => null,
        'ids' => null,
        'namespaces' => null,
        'role_names' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_ids' => 'ClusterIds',
        'grantee_ids' => 'GranteeIds',
        'grantee_type' => 'GranteeType',
        'ids' => 'Ids',
        'namespaces' => 'Namespaces',
        'role_names' => 'RoleNames',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_ids' => 'setClusterIds',
        'grantee_ids' => 'setGranteeIds',
        'grantee_type' => 'setGranteeType',
        'ids' => 'setIds',
        'namespaces' => 'setNamespaces',
        'role_names' => 'setRoleNames',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_ids' => 'getClusterIds',
        'grantee_ids' => 'getGranteeIds',
        'grantee_type' => 'getGranteeType',
        'ids' => 'getIds',
        'namespaces' => 'getNamespaces',
        'role_names' => 'getRoleNames',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GRANTEE_TYPE_USER = 'User';
    const GRANTEE_TYPE_ROLE = 'Role';
    const GRANTEE_TYPE_ACCOUNT = 'Account';
    const STATUS_PENDING = 'Pending';
    const STATUS_PARTIAL_SUCCESS = 'PartialSuccess';
    const STATUS_SUCCESS = 'Success';
    const STATUS_FAILED = 'Failed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGranteeTypeAllowableValues()
    {
        return [
            self::GRANTEE_TYPE_USER,
            self::GRANTEE_TYPE_ROLE,
            self::GRANTEE_TYPE_ACCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_PARTIAL_SUCCESS,
            self::STATUS_SUCCESS,
            self::STATUS_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_ids'] = isset($data['cluster_ids']) ? $data['cluster_ids'] : null;
        $this->container['grantee_ids'] = isset($data['grantee_ids']) ? $data['grantee_ids'] : null;
        $this->container['grantee_type'] = isset($data['grantee_type']) ? $data['grantee_type'] : null;
        $this->container['ids'] = isset($data['ids']) ? $data['ids'] : null;
        $this->container['namespaces'] = isset($data['namespaces']) ? $data['namespaces'] : null;
        $this->container['role_names'] = isset($data['role_names']) ? $data['role_names'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGranteeTypeAllowableValues();
        if (!is_null($this->container['grantee_type']) && !in_array($this->container['grantee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'grantee_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_ids
     *
     * @return string[]
     */
    public function getClusterIds()
    {
        return $this->container['cluster_ids'];
    }

    /**
     * Sets cluster_ids
     *
     * @param string[] $cluster_ids cluster_ids
     *
     * @return $this
     */
    public function setClusterIds($cluster_ids)
    {
        $this->container['cluster_ids'] = $cluster_ids;

        return $this;
    }

    /**
     * Gets grantee_ids
     *
     * @return int[]
     */
    public function getGranteeIds()
    {
        return $this->container['grantee_ids'];
    }

    /**
     * Sets grantee_ids
     *
     * @param int[] $grantee_ids grantee_ids
     *
     * @return $this
     */
    public function setGranteeIds($grantee_ids)
    {
        $this->container['grantee_ids'] = $grantee_ids;

        return $this;
    }

    /**
     * Gets grantee_type
     *
     * @return string
     */
    public function getGranteeType()
    {
        return $this->container['grantee_type'];
    }

    /**
     * Sets grantee_type
     *
     * @param string $grantee_type grantee_type
     *
     * @return $this
     */
    public function setGranteeType($grantee_type)
    {
        $allowedValues = $this->getGranteeTypeAllowableValues();
        if (!is_null($grantee_type) && !in_array($grantee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'grantee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grantee_type'] = $grantee_type;

        return $this;
    }

    /**
     * Gets ids
     *
     * @return string[]
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param string[] $ids ids
     *
     * @return $this
     */
    public function setIds($ids)
    {
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets namespaces
     *
     * @return string[]
     */
    public function getNamespaces()
    {
        return $this->container['namespaces'];
    }

    /**
     * Sets namespaces
     *
     * @param string[] $namespaces namespaces
     *
     * @return $this
     */
    public function setNamespaces($namespaces)
    {
        $this->container['namespaces'] = $namespaces;

        return $this;
    }

    /**
     * Gets role_names
     *
     * @return string[]
     */
    public function getRoleNames()
    {
        return $this->container['role_names'];
    }

    /**
     * Sets role_names
     *
     * @param string[] $role_names role_names
     *
     * @return $this
     */
    public function setRoleNames($role_names)
    {
        $this->container['role_names'] = $role_names;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

