<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConfigForListRemedyConfigsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigForListRemedyConfigsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => '\Volcengine\Vke\Model\ActionForListRemedyConfigsOutput',
        'auto_restore_schedule' => 'bool',
        'drain' => '\Volcengine\Vke\Model\DrainForListRemedyConfigsOutput',
        'intervene_cordon' => '\Volcengine\Vke\Model\InterveneCordonForListRemedyConfigsOutput',
        'intervene_drain' => '\Volcengine\Vke\Model\InterveneDrainForListRemedyConfigsOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => null,
        'auto_restore_schedule' => null,
        'drain' => null,
        'intervene_cordon' => null,
        'intervene_drain' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'Action',
        'auto_restore_schedule' => 'AutoRestoreSchedule',
        'drain' => 'Drain',
        'intervene_cordon' => 'InterveneCordon',
        'intervene_drain' => 'InterveneDrain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'auto_restore_schedule' => 'setAutoRestoreSchedule',
        'drain' => 'setDrain',
        'intervene_cordon' => 'setInterveneCordon',
        'intervene_drain' => 'setInterveneDrain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'auto_restore_schedule' => 'getAutoRestoreSchedule',
        'drain' => 'getDrain',
        'intervene_cordon' => 'getInterveneCordon',
        'intervene_drain' => 'getInterveneDrain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['auto_restore_schedule'] = isset($data['auto_restore_schedule']) ? $data['auto_restore_schedule'] : null;
        $this->container['drain'] = isset($data['drain']) ? $data['drain'] : null;
        $this->container['intervene_cordon'] = isset($data['intervene_cordon']) ? $data['intervene_cordon'] : null;
        $this->container['intervene_drain'] = isset($data['intervene_drain']) ? $data['intervene_drain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return \Volcengine\Vke\Model\ActionForListRemedyConfigsOutput
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Volcengine\Vke\Model\ActionForListRemedyConfigsOutput $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets auto_restore_schedule
     *
     * @return bool
     */
    public function getAutoRestoreSchedule()
    {
        return $this->container['auto_restore_schedule'];
    }

    /**
     * Sets auto_restore_schedule
     *
     * @param bool $auto_restore_schedule auto_restore_schedule
     *
     * @return $this
     */
    public function setAutoRestoreSchedule($auto_restore_schedule)
    {
        $this->container['auto_restore_schedule'] = $auto_restore_schedule;

        return $this;
    }

    /**
     * Gets drain
     *
     * @return \Volcengine\Vke\Model\DrainForListRemedyConfigsOutput
     */
    public function getDrain()
    {
        return $this->container['drain'];
    }

    /**
     * Sets drain
     *
     * @param \Volcengine\Vke\Model\DrainForListRemedyConfigsOutput $drain drain
     *
     * @return $this
     */
    public function setDrain($drain)
    {
        $this->container['drain'] = $drain;

        return $this;
    }

    /**
     * Gets intervene_cordon
     *
     * @return \Volcengine\Vke\Model\InterveneCordonForListRemedyConfigsOutput
     */
    public function getInterveneCordon()
    {
        return $this->container['intervene_cordon'];
    }

    /**
     * Sets intervene_cordon
     *
     * @param \Volcengine\Vke\Model\InterveneCordonForListRemedyConfigsOutput $intervene_cordon intervene_cordon
     *
     * @return $this
     */
    public function setInterveneCordon($intervene_cordon)
    {
        $this->container['intervene_cordon'] = $intervene_cordon;

        return $this;
    }

    /**
     * Gets intervene_drain
     *
     * @return \Volcengine\Vke\Model\InterveneDrainForListRemedyConfigsOutput
     */
    public function getInterveneDrain()
    {
        return $this->container['intervene_drain'];
    }

    /**
     * Sets intervene_drain
     *
     * @param \Volcengine\Vke\Model\InterveneDrainForListRemedyConfigsOutput $intervene_drain intervene_drain
     *
     * @return $this
     */
    public function setInterveneDrain($intervene_drain)
    {
        $this->container['intervene_drain'] = $intervene_drain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

