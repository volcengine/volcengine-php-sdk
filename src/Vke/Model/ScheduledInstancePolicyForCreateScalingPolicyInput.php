<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ScheduledInstancePolicyForCreateScalingPolicyInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScheduledInstancePolicyForCreateScalingPolicyInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_release_time' => 'string',
        'delivery_type' => 'string',
        'elastic_scheduled_instance_type' => 'string',
        'end_delivery_time' => 'string',
        'start_delivery_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_release_time' => null,
        'delivery_type' => null,
        'elastic_scheduled_instance_type' => null,
        'end_delivery_time' => null,
        'start_delivery_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_release_time' => 'AutoReleaseTime',
        'delivery_type' => 'DeliveryType',
        'elastic_scheduled_instance_type' => 'ElasticScheduledInstanceType',
        'end_delivery_time' => 'EndDeliveryTime',
        'start_delivery_time' => 'StartDeliveryTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_release_time' => 'setAutoReleaseTime',
        'delivery_type' => 'setDeliveryType',
        'elastic_scheduled_instance_type' => 'setElasticScheduledInstanceType',
        'end_delivery_time' => 'setEndDeliveryTime',
        'start_delivery_time' => 'setStartDeliveryTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_release_time' => 'getAutoReleaseTime',
        'delivery_type' => 'getDeliveryType',
        'elastic_scheduled_instance_type' => 'getElasticScheduledInstanceType',
        'end_delivery_time' => 'getEndDeliveryTime',
        'start_delivery_time' => 'getStartDeliveryTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_TYPE_RESERVE = 'Reserve';
    const DELIVERY_TYPE_IMMEDIATE = 'Immediate';
    const ELASTIC_SCHEDULED_INSTANCE_TYPE_ESI = 'Esi';
    const ELASTIC_SCHEDULED_INSTANCE_TYPE_SEGMENTED = 'Segmented';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_RESERVE,
            self::DELIVERY_TYPE_IMMEDIATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getElasticScheduledInstanceTypeAllowableValues()
    {
        return [
            self::ELASTIC_SCHEDULED_INSTANCE_TYPE_ESI,
            self::ELASTIC_SCHEDULED_INSTANCE_TYPE_SEGMENTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_release_time'] = isset($data['auto_release_time']) ? $data['auto_release_time'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['elastic_scheduled_instance_type'] = isset($data['elastic_scheduled_instance_type']) ? $data['elastic_scheduled_instance_type'] : null;
        $this->container['end_delivery_time'] = isset($data['end_delivery_time']) ? $data['end_delivery_time'] : null;
        $this->container['start_delivery_time'] = isset($data['start_delivery_time']) ? $data['start_delivery_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getElasticScheduledInstanceTypeAllowableValues();
        if (!is_null($this->container['elastic_scheduled_instance_type']) && !in_array($this->container['elastic_scheduled_instance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'elastic_scheduled_instance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_release_time
     *
     * @return string
     */
    public function getAutoReleaseTime()
    {
        return $this->container['auto_release_time'];
    }

    /**
     * Sets auto_release_time
     *
     * @param string $auto_release_time auto_release_time
     *
     * @return $this
     */
    public function setAutoReleaseTime($auto_release_time)
    {
        $this->container['auto_release_time'] = $auto_release_time;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type delivery_type
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($delivery_type) && !in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets elastic_scheduled_instance_type
     *
     * @return string
     */
    public function getElasticScheduledInstanceType()
    {
        return $this->container['elastic_scheduled_instance_type'];
    }

    /**
     * Sets elastic_scheduled_instance_type
     *
     * @param string $elastic_scheduled_instance_type elastic_scheduled_instance_type
     *
     * @return $this
     */
    public function setElasticScheduledInstanceType($elastic_scheduled_instance_type)
    {
        $allowedValues = $this->getElasticScheduledInstanceTypeAllowableValues();
        if (!is_null($elastic_scheduled_instance_type) && !in_array($elastic_scheduled_instance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'elastic_scheduled_instance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['elastic_scheduled_instance_type'] = $elastic_scheduled_instance_type;

        return $this;
    }

    /**
     * Gets end_delivery_time
     *
     * @return string
     */
    public function getEndDeliveryTime()
    {
        return $this->container['end_delivery_time'];
    }

    /**
     * Sets end_delivery_time
     *
     * @param string $end_delivery_time end_delivery_time
     *
     * @return $this
     */
    public function setEndDeliveryTime($end_delivery_time)
    {
        $this->container['end_delivery_time'] = $end_delivery_time;

        return $this;
    }

    /**
     * Gets start_delivery_time
     *
     * @return string
     */
    public function getStartDeliveryTime()
    {
        return $this->container['start_delivery_time'];
    }

    /**
     * Sets start_delivery_time
     *
     * @param string $start_delivery_time start_delivery_time
     *
     * @return $this
     */
    public function setStartDeliveryTime($start_delivery_time)
    {
        $this->container['start_delivery_time'] = $start_delivery_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

