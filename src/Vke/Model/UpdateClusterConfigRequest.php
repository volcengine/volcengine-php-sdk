<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateClusterConfigRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateClusterConfigRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'cluster_config' => '\Volcengine\Vke\Model\ClusterConfigForUpdateClusterConfigInput',
        'delete_protection_enabled' => 'bool',
        'description' => 'string',
        'id' => 'string',
        'irsa_enabled' => 'bool',
        'logging_config' => '\Volcengine\Vke\Model\LoggingConfigForUpdateClusterConfigInput',
        'monitoring_config' => '\Volcengine\Vke\Model\MonitoringConfigForUpdateClusterConfigInput',
        'name' => 'string',
        'pods_config' => '\Volcengine\Vke\Model\PodsConfigForUpdateClusterConfigInput',
        'register_monitoring_config' => '\Volcengine\Vke\Model\RegisterMonitoringConfigForUpdateClusterConfigInput',
        'source_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'cluster_config' => null,
        'delete_protection_enabled' => null,
        'description' => null,
        'id' => null,
        'irsa_enabled' => null,
        'logging_config' => null,
        'monitoring_config' => null,
        'name' => null,
        'pods_config' => null,
        'register_monitoring_config' => null,
        'source_region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'cluster_config' => 'ClusterConfig',
        'delete_protection_enabled' => 'DeleteProtectionEnabled',
        'description' => 'Description',
        'id' => 'Id',
        'irsa_enabled' => 'IrsaEnabled',
        'logging_config' => 'LoggingConfig',
        'monitoring_config' => 'MonitoringConfig',
        'name' => 'Name',
        'pods_config' => 'PodsConfig',
        'register_monitoring_config' => 'RegisterMonitoringConfig',
        'source_region' => 'SourceRegion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'cluster_config' => 'setClusterConfig',
        'delete_protection_enabled' => 'setDeleteProtectionEnabled',
        'description' => 'setDescription',
        'id' => 'setId',
        'irsa_enabled' => 'setIrsaEnabled',
        'logging_config' => 'setLoggingConfig',
        'monitoring_config' => 'setMonitoringConfig',
        'name' => 'setName',
        'pods_config' => 'setPodsConfig',
        'register_monitoring_config' => 'setRegisterMonitoringConfig',
        'source_region' => 'setSourceRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'cluster_config' => 'getClusterConfig',
        'delete_protection_enabled' => 'getDeleteProtectionEnabled',
        'description' => 'getDescription',
        'id' => 'getId',
        'irsa_enabled' => 'getIrsaEnabled',
        'logging_config' => 'getLoggingConfig',
        'monitoring_config' => 'getMonitoringConfig',
        'name' => 'getName',
        'pods_config' => 'getPodsConfig',
        'register_monitoring_config' => 'getRegisterMonitoringConfig',
        'source_region' => 'getSourceRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['cluster_config'] = isset($data['cluster_config']) ? $data['cluster_config'] : null;
        $this->container['delete_protection_enabled'] = isset($data['delete_protection_enabled']) ? $data['delete_protection_enabled'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['irsa_enabled'] = isset($data['irsa_enabled']) ? $data['irsa_enabled'] : null;
        $this->container['logging_config'] = isset($data['logging_config']) ? $data['logging_config'] : null;
        $this->container['monitoring_config'] = isset($data['monitoring_config']) ? $data['monitoring_config'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pods_config'] = isset($data['pods_config']) ? $data['pods_config'] : null;
        $this->container['register_monitoring_config'] = isset($data['register_monitoring_config']) ? $data['register_monitoring_config'] : null;
        $this->container['source_region'] = isset($data['source_region']) ? $data['source_region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets cluster_config
     *
     * @return \Volcengine\Vke\Model\ClusterConfigForUpdateClusterConfigInput
     */
    public function getClusterConfig()
    {
        return $this->container['cluster_config'];
    }

    /**
     * Sets cluster_config
     *
     * @param \Volcengine\Vke\Model\ClusterConfigForUpdateClusterConfigInput $cluster_config cluster_config
     *
     * @return $this
     */
    public function setClusterConfig($cluster_config)
    {
        $this->container['cluster_config'] = $cluster_config;

        return $this;
    }

    /**
     * Gets delete_protection_enabled
     *
     * @return bool
     */
    public function getDeleteProtectionEnabled()
    {
        return $this->container['delete_protection_enabled'];
    }

    /**
     * Sets delete_protection_enabled
     *
     * @param bool $delete_protection_enabled delete_protection_enabled
     *
     * @return $this
     */
    public function setDeleteProtectionEnabled($delete_protection_enabled)
    {
        $this->container['delete_protection_enabled'] = $delete_protection_enabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets irsa_enabled
     *
     * @return bool
     */
    public function getIrsaEnabled()
    {
        return $this->container['irsa_enabled'];
    }

    /**
     * Sets irsa_enabled
     *
     * @param bool $irsa_enabled irsa_enabled
     *
     * @return $this
     */
    public function setIrsaEnabled($irsa_enabled)
    {
        $this->container['irsa_enabled'] = $irsa_enabled;

        return $this;
    }

    /**
     * Gets logging_config
     *
     * @return \Volcengine\Vke\Model\LoggingConfigForUpdateClusterConfigInput
     */
    public function getLoggingConfig()
    {
        return $this->container['logging_config'];
    }

    /**
     * Sets logging_config
     *
     * @param \Volcengine\Vke\Model\LoggingConfigForUpdateClusterConfigInput $logging_config logging_config
     *
     * @return $this
     */
    public function setLoggingConfig($logging_config)
    {
        $this->container['logging_config'] = $logging_config;

        return $this;
    }

    /**
     * Gets monitoring_config
     *
     * @return \Volcengine\Vke\Model\MonitoringConfigForUpdateClusterConfigInput
     */
    public function getMonitoringConfig()
    {
        return $this->container['monitoring_config'];
    }

    /**
     * Sets monitoring_config
     *
     * @param \Volcengine\Vke\Model\MonitoringConfigForUpdateClusterConfigInput $monitoring_config monitoring_config
     *
     * @return $this
     */
    public function setMonitoringConfig($monitoring_config)
    {
        $this->container['monitoring_config'] = $monitoring_config;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pods_config
     *
     * @return \Volcengine\Vke\Model\PodsConfigForUpdateClusterConfigInput
     */
    public function getPodsConfig()
    {
        return $this->container['pods_config'];
    }

    /**
     * Sets pods_config
     *
     * @param \Volcengine\Vke\Model\PodsConfigForUpdateClusterConfigInput $pods_config pods_config
     *
     * @return $this
     */
    public function setPodsConfig($pods_config)
    {
        $this->container['pods_config'] = $pods_config;

        return $this;
    }

    /**
     * Gets register_monitoring_config
     *
     * @return \Volcengine\Vke\Model\RegisterMonitoringConfigForUpdateClusterConfigInput
     */
    public function getRegisterMonitoringConfig()
    {
        return $this->container['register_monitoring_config'];
    }

    /**
     * Sets register_monitoring_config
     *
     * @param \Volcengine\Vke\Model\RegisterMonitoringConfigForUpdateClusterConfigInput $register_monitoring_config register_monitoring_config
     *
     * @return $this
     */
    public function setRegisterMonitoringConfig($register_monitoring_config)
    {
        $this->container['register_monitoring_config'] = $register_monitoring_config;

        return $this;
    }

    /**
     * Gets source_region
     *
     * @return string
     */
    public function getSourceRegion()
    {
        return $this->container['source_region'];
    }

    /**
     * Sets source_region
     *
     * @param string $source_region source_region
     *
     * @return $this
     */
    public function setSourceRegion($source_region)
    {
        $this->container['source_region'] = $source_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

