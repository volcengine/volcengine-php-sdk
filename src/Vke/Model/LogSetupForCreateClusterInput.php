<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class LogSetupForCreateClusterInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LogSetupForCreateClusterInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'log_ttl' => 'int',
        'log_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'log_ttl' => 'int32',
        'log_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'Enabled',
        'log_ttl' => 'LogTtl',
        'log_type' => 'LogType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'log_ttl' => 'setLogTtl',
        'log_type' => 'setLogType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'log_ttl' => 'getLogTtl',
        'log_type' => 'getLogType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOG_TYPE_AUDIT = 'Audit';
    const LOG_TYPE_KUBE_API_SERVER = 'KubeApiServer';
    const LOG_TYPE_KUBE_SCHEDULER = 'KubeScheduler';
    const LOG_TYPE_KUBE_CONTROLLER_MANAGER = 'KubeControllerManager';
    const LOG_TYPE_CLOUD_CONTROLLER_MANAGER = 'CloudControllerManager';
    const LOG_TYPE_ETCD = 'Etcd';
    const LOG_TYPE_CLUSTER_AUTOSCALER = 'ClusterAutoscaler';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogTypeAllowableValues()
    {
        return [
            self::LOG_TYPE_AUDIT,
            self::LOG_TYPE_KUBE_API_SERVER,
            self::LOG_TYPE_KUBE_SCHEDULER,
            self::LOG_TYPE_KUBE_CONTROLLER_MANAGER,
            self::LOG_TYPE_CLOUD_CONTROLLER_MANAGER,
            self::LOG_TYPE_ETCD,
            self::LOG_TYPE_CLUSTER_AUTOSCALER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['log_ttl'] = isset($data['log_ttl']) ? $data['log_ttl'] : null;
        $this->container['log_type'] = isset($data['log_type']) ? $data['log_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLogTypeAllowableValues();
        if (!is_null($this->container['log_type']) && !in_array($this->container['log_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'log_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets log_ttl
     *
     * @return int
     */
    public function getLogTtl()
    {
        return $this->container['log_ttl'];
    }

    /**
     * Sets log_ttl
     *
     * @param int $log_ttl log_ttl
     *
     * @return $this
     */
    public function setLogTtl($log_ttl)
    {
        $this->container['log_ttl'] = $log_ttl;

        return $this;
    }

    /**
     * Gets log_type
     *
     * @return string
     */
    public function getLogType()
    {
        return $this->container['log_type'];
    }

    /**
     * Sets log_type
     *
     * @param string $log_type log_type
     *
     * @return $this
     */
    public function setLogType($log_type)
    {
        $allowedValues = $this->getLogTypeAllowableValues();
        if (!is_null($log_type) && !in_array($log_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'log_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_type'] = $log_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

