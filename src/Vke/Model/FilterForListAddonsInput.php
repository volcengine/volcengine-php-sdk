<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FilterForListAddonsInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilterForListAddonsInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_ids' => 'string[]',
        'create_client_token' => 'string',
        'deploy_modes' => 'string[]',
        'deploy_node_types' => 'string[]',
        'names' => 'string[]',
        'statuses' => '\Volcengine\Vke\Model\StatusForListAddonsInput[]',
        'update_client_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_ids' => null,
        'create_client_token' => null,
        'deploy_modes' => null,
        'deploy_node_types' => null,
        'names' => null,
        'statuses' => null,
        'update_client_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_ids' => 'ClusterIds',
        'create_client_token' => 'CreateClientToken',
        'deploy_modes' => 'DeployModes',
        'deploy_node_types' => 'DeployNodeTypes',
        'names' => 'Names',
        'statuses' => 'Statuses',
        'update_client_token' => 'UpdateClientToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_ids' => 'setClusterIds',
        'create_client_token' => 'setCreateClientToken',
        'deploy_modes' => 'setDeployModes',
        'deploy_node_types' => 'setDeployNodeTypes',
        'names' => 'setNames',
        'statuses' => 'setStatuses',
        'update_client_token' => 'setUpdateClientToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_ids' => 'getClusterIds',
        'create_client_token' => 'getCreateClientToken',
        'deploy_modes' => 'getDeployModes',
        'deploy_node_types' => 'getDeployNodeTypes',
        'names' => 'getNames',
        'statuses' => 'getStatuses',
        'update_client_token' => 'getUpdateClientToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEPLOY_MODES_MANAGED = 'Managed';
    const DEPLOY_MODES_UNMANAGED = 'Unmanaged';
    const DEPLOY_NODE_TYPES_NODE = 'Node';
    const DEPLOY_NODE_TYPES_VIRTUAL_NODE = 'VirtualNode';
    const DEPLOY_NODE_TYPES_EDGE_NODE = 'EdgeNode';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeployModesAllowableValues()
    {
        return [
            self::DEPLOY_MODES_MANAGED,
            self::DEPLOY_MODES_UNMANAGED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeployNodeTypesAllowableValues()
    {
        return [
            self::DEPLOY_NODE_TYPES_NODE,
            self::DEPLOY_NODE_TYPES_VIRTUAL_NODE,
            self::DEPLOY_NODE_TYPES_EDGE_NODE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_ids'] = isset($data['cluster_ids']) ? $data['cluster_ids'] : null;
        $this->container['create_client_token'] = isset($data['create_client_token']) ? $data['create_client_token'] : null;
        $this->container['deploy_modes'] = isset($data['deploy_modes']) ? $data['deploy_modes'] : null;
        $this->container['deploy_node_types'] = isset($data['deploy_node_types']) ? $data['deploy_node_types'] : null;
        $this->container['names'] = isset($data['names']) ? $data['names'] : null;
        $this->container['statuses'] = isset($data['statuses']) ? $data['statuses'] : null;
        $this->container['update_client_token'] = isset($data['update_client_token']) ? $data['update_client_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_ids
     *
     * @return string[]
     */
    public function getClusterIds()
    {
        return $this->container['cluster_ids'];
    }

    /**
     * Sets cluster_ids
     *
     * @param string[] $cluster_ids cluster_ids
     *
     * @return $this
     */
    public function setClusterIds($cluster_ids)
    {
        $this->container['cluster_ids'] = $cluster_ids;

        return $this;
    }

    /**
     * Gets create_client_token
     *
     * @return string
     */
    public function getCreateClientToken()
    {
        return $this->container['create_client_token'];
    }

    /**
     * Sets create_client_token
     *
     * @param string $create_client_token create_client_token
     *
     * @return $this
     */
    public function setCreateClientToken($create_client_token)
    {
        $this->container['create_client_token'] = $create_client_token;

        return $this;
    }

    /**
     * Gets deploy_modes
     *
     * @return string[]
     */
    public function getDeployModes()
    {
        return $this->container['deploy_modes'];
    }

    /**
     * Sets deploy_modes
     *
     * @param string[] $deploy_modes deploy_modes
     *
     * @return $this
     */
    public function setDeployModes($deploy_modes)
    {
        $allowedValues = $this->getDeployModesAllowableValues();
        if (!is_null($deploy_modes) && array_diff($deploy_modes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deploy_modes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploy_modes'] = $deploy_modes;

        return $this;
    }

    /**
     * Gets deploy_node_types
     *
     * @return string[]
     */
    public function getDeployNodeTypes()
    {
        return $this->container['deploy_node_types'];
    }

    /**
     * Sets deploy_node_types
     *
     * @param string[] $deploy_node_types deploy_node_types
     *
     * @return $this
     */
    public function setDeployNodeTypes($deploy_node_types)
    {
        $allowedValues = $this->getDeployNodeTypesAllowableValues();
        if (!is_null($deploy_node_types) && array_diff($deploy_node_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deploy_node_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploy_node_types'] = $deploy_node_types;

        return $this;
    }

    /**
     * Gets names
     *
     * @return string[]
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param string[] $names names
     *
     * @return $this
     */
    public function setNames($names)
    {
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \Volcengine\Vke\Model\StatusForListAddonsInput[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \Volcengine\Vke\Model\StatusForListAddonsInput[] $statuses statuses
     *
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets update_client_token
     *
     * @return string
     */
    public function getUpdateClientToken()
    {
        return $this->container['update_client_token'];
    }

    /**
     * Sets update_client_token
     *
     * @param string $update_client_token update_client_token
     *
     * @return $this
     */
    public function setUpdateClientToken($update_client_token)
    {
        $this->container['update_client_token'] = $update_client_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

