<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GrantPermissionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GrantPermissionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_id' => 'string',
        'grantee_id' => 'int',
        'grantee_type' => 'string',
        'is_custom_role' => 'bool',
        'namespace' => 'string',
        'role_domain' => 'string',
        'role_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_id' => null,
        'grantee_id' => 'int64',
        'grantee_type' => null,
        'is_custom_role' => null,
        'namespace' => null,
        'role_domain' => null,
        'role_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_id' => 'ClusterId',
        'grantee_id' => 'GranteeId',
        'grantee_type' => 'GranteeType',
        'is_custom_role' => 'IsCustomRole',
        'namespace' => 'Namespace',
        'role_domain' => 'RoleDomain',
        'role_name' => 'RoleName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_id' => 'setClusterId',
        'grantee_id' => 'setGranteeId',
        'grantee_type' => 'setGranteeType',
        'is_custom_role' => 'setIsCustomRole',
        'namespace' => 'setNamespace',
        'role_domain' => 'setRoleDomain',
        'role_name' => 'setRoleName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_id' => 'getClusterId',
        'grantee_id' => 'getGranteeId',
        'grantee_type' => 'getGranteeType',
        'is_custom_role' => 'getIsCustomRole',
        'namespace' => 'getNamespace',
        'role_domain' => 'getRoleDomain',
        'role_name' => 'getRoleName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GRANTEE_TYPE_USER = 'User';
    const GRANTEE_TYPE_ROLE = 'Role';
    const GRANTEE_TYPE_ACCOUNT = 'Account';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGranteeTypeAllowableValues()
    {
        return [
            self::GRANTEE_TYPE_USER,
            self::GRANTEE_TYPE_ROLE,
            self::GRANTEE_TYPE_ACCOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['grantee_id'] = isset($data['grantee_id']) ? $data['grantee_id'] : null;
        $this->container['grantee_type'] = isset($data['grantee_type']) ? $data['grantee_type'] : null;
        $this->container['is_custom_role'] = isset($data['is_custom_role']) ? $data['is_custom_role'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['role_domain'] = isset($data['role_domain']) ? $data['role_domain'] : null;
        $this->container['role_name'] = isset($data['role_name']) ? $data['role_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGranteeTypeAllowableValues();
        if (!is_null($this->container['grantee_type']) && !in_array($this->container['grantee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'grantee_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets grantee_id
     *
     * @return int
     */
    public function getGranteeId()
    {
        return $this->container['grantee_id'];
    }

    /**
     * Sets grantee_id
     *
     * @param int $grantee_id grantee_id
     *
     * @return $this
     */
    public function setGranteeId($grantee_id)
    {
        $this->container['grantee_id'] = $grantee_id;

        return $this;
    }

    /**
     * Gets grantee_type
     *
     * @return string
     */
    public function getGranteeType()
    {
        return $this->container['grantee_type'];
    }

    /**
     * Sets grantee_type
     *
     * @param string $grantee_type grantee_type
     *
     * @return $this
     */
    public function setGranteeType($grantee_type)
    {
        $allowedValues = $this->getGranteeTypeAllowableValues();
        if (!is_null($grantee_type) && !in_array($grantee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'grantee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grantee_type'] = $grantee_type;

        return $this;
    }

    /**
     * Gets is_custom_role
     *
     * @return bool
     */
    public function getIsCustomRole()
    {
        return $this->container['is_custom_role'];
    }

    /**
     * Sets is_custom_role
     *
     * @param bool $is_custom_role is_custom_role
     *
     * @return $this
     */
    public function setIsCustomRole($is_custom_role)
    {
        $this->container['is_custom_role'] = $is_custom_role;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets role_domain
     *
     * @return string
     */
    public function getRoleDomain()
    {
        return $this->container['role_domain'];
    }

    /**
     * Sets role_domain
     *
     * @param string $role_domain role_domain
     *
     * @return $this
     */
    public function setRoleDomain($role_domain)
    {
        $this->container['role_domain'] = $role_domain;

        return $this;
    }

    /**
     * Gets role_name
     *
     * @return string
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     *
     * @param string $role_name role_name
     *
     * @return $this
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

