<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListPermissionsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListPermissionsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorized_at' => 'string',
        'authorizer_id' => 'int',
        'authorizer_name' => 'string',
        'authorizer_type' => 'string',
        'cluster_id' => 'string',
        'granted_at' => 'string',
        'grantee_id' => 'int',
        'grantee_type' => 'string',
        'id' => 'string',
        'is_custom_role' => 'bool',
        'kube_role_binding_name' => 'string',
        'message' => 'string',
        'namespace' => 'string',
        'project_selector' => 'string',
        'revoked_at' => 'string',
        'role_name' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorized_at' => null,
        'authorizer_id' => 'int64',
        'authorizer_name' => null,
        'authorizer_type' => null,
        'cluster_id' => null,
        'granted_at' => null,
        'grantee_id' => 'int64',
        'grantee_type' => null,
        'id' => null,
        'is_custom_role' => null,
        'kube_role_binding_name' => null,
        'message' => null,
        'namespace' => null,
        'project_selector' => null,
        'revoked_at' => null,
        'role_name' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorized_at' => 'AuthorizedAt',
        'authorizer_id' => 'AuthorizerId',
        'authorizer_name' => 'AuthorizerName',
        'authorizer_type' => 'AuthorizerType',
        'cluster_id' => 'ClusterId',
        'granted_at' => 'GrantedAt',
        'grantee_id' => 'GranteeId',
        'grantee_type' => 'GranteeType',
        'id' => 'Id',
        'is_custom_role' => 'IsCustomRole',
        'kube_role_binding_name' => 'KubeRoleBindingName',
        'message' => 'Message',
        'namespace' => 'Namespace',
        'project_selector' => 'ProjectSelector',
        'revoked_at' => 'RevokedAt',
        'role_name' => 'RoleName',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorized_at' => 'setAuthorizedAt',
        'authorizer_id' => 'setAuthorizerId',
        'authorizer_name' => 'setAuthorizerName',
        'authorizer_type' => 'setAuthorizerType',
        'cluster_id' => 'setClusterId',
        'granted_at' => 'setGrantedAt',
        'grantee_id' => 'setGranteeId',
        'grantee_type' => 'setGranteeType',
        'id' => 'setId',
        'is_custom_role' => 'setIsCustomRole',
        'kube_role_binding_name' => 'setKubeRoleBindingName',
        'message' => 'setMessage',
        'namespace' => 'setNamespace',
        'project_selector' => 'setProjectSelector',
        'revoked_at' => 'setRevokedAt',
        'role_name' => 'setRoleName',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorized_at' => 'getAuthorizedAt',
        'authorizer_id' => 'getAuthorizerId',
        'authorizer_name' => 'getAuthorizerName',
        'authorizer_type' => 'getAuthorizerType',
        'cluster_id' => 'getClusterId',
        'granted_at' => 'getGrantedAt',
        'grantee_id' => 'getGranteeId',
        'grantee_type' => 'getGranteeType',
        'id' => 'getId',
        'is_custom_role' => 'getIsCustomRole',
        'kube_role_binding_name' => 'getKubeRoleBindingName',
        'message' => 'getMessage',
        'namespace' => 'getNamespace',
        'project_selector' => 'getProjectSelector',
        'revoked_at' => 'getRevokedAt',
        'role_name' => 'getRoleName',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHORIZER_TYPE_USER = 'User';
    const AUTHORIZER_TYPE_ROLE = 'Role';
    const AUTHORIZER_TYPE_ACCOUNT = 'Account';
    const GRANTEE_TYPE_USER = 'User';
    const GRANTEE_TYPE_ROLE = 'Role';
    const GRANTEE_TYPE_ACCOUNT = 'Account';
    const STATUS_PENDING = 'Pending';
    const STATUS_PARTIAL_SUCCESS = 'PartialSuccess';
    const STATUS_SUCCESS = 'Success';
    const STATUS_FAILED = 'Failed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizerTypeAllowableValues()
    {
        return [
            self::AUTHORIZER_TYPE_USER,
            self::AUTHORIZER_TYPE_ROLE,
            self::AUTHORIZER_TYPE_ACCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGranteeTypeAllowableValues()
    {
        return [
            self::GRANTEE_TYPE_USER,
            self::GRANTEE_TYPE_ROLE,
            self::GRANTEE_TYPE_ACCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_PARTIAL_SUCCESS,
            self::STATUS_SUCCESS,
            self::STATUS_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorized_at'] = isset($data['authorized_at']) ? $data['authorized_at'] : null;
        $this->container['authorizer_id'] = isset($data['authorizer_id']) ? $data['authorizer_id'] : null;
        $this->container['authorizer_name'] = isset($data['authorizer_name']) ? $data['authorizer_name'] : null;
        $this->container['authorizer_type'] = isset($data['authorizer_type']) ? $data['authorizer_type'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['granted_at'] = isset($data['granted_at']) ? $data['granted_at'] : null;
        $this->container['grantee_id'] = isset($data['grantee_id']) ? $data['grantee_id'] : null;
        $this->container['grantee_type'] = isset($data['grantee_type']) ? $data['grantee_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_custom_role'] = isset($data['is_custom_role']) ? $data['is_custom_role'] : null;
        $this->container['kube_role_binding_name'] = isset($data['kube_role_binding_name']) ? $data['kube_role_binding_name'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['project_selector'] = isset($data['project_selector']) ? $data['project_selector'] : null;
        $this->container['revoked_at'] = isset($data['revoked_at']) ? $data['revoked_at'] : null;
        $this->container['role_name'] = isset($data['role_name']) ? $data['role_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthorizerTypeAllowableValues();
        if (!is_null($this->container['authorizer_type']) && !in_array($this->container['authorizer_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authorizer_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGranteeTypeAllowableValues();
        if (!is_null($this->container['grantee_type']) && !in_array($this->container['grantee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'grantee_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorized_at
     *
     * @return string
     */
    public function getAuthorizedAt()
    {
        return $this->container['authorized_at'];
    }

    /**
     * Sets authorized_at
     *
     * @param string $authorized_at authorized_at
     *
     * @return $this
     */
    public function setAuthorizedAt($authorized_at)
    {
        $this->container['authorized_at'] = $authorized_at;

        return $this;
    }

    /**
     * Gets authorizer_id
     *
     * @return int
     */
    public function getAuthorizerId()
    {
        return $this->container['authorizer_id'];
    }

    /**
     * Sets authorizer_id
     *
     * @param int $authorizer_id authorizer_id
     *
     * @return $this
     */
    public function setAuthorizerId($authorizer_id)
    {
        $this->container['authorizer_id'] = $authorizer_id;

        return $this;
    }

    /**
     * Gets authorizer_name
     *
     * @return string
     */
    public function getAuthorizerName()
    {
        return $this->container['authorizer_name'];
    }

    /**
     * Sets authorizer_name
     *
     * @param string $authorizer_name authorizer_name
     *
     * @return $this
     */
    public function setAuthorizerName($authorizer_name)
    {
        $this->container['authorizer_name'] = $authorizer_name;

        return $this;
    }

    /**
     * Gets authorizer_type
     *
     * @return string
     */
    public function getAuthorizerType()
    {
        return $this->container['authorizer_type'];
    }

    /**
     * Sets authorizer_type
     *
     * @param string $authorizer_type authorizer_type
     *
     * @return $this
     */
    public function setAuthorizerType($authorizer_type)
    {
        $allowedValues = $this->getAuthorizerTypeAllowableValues();
        if (!is_null($authorizer_type) && !in_array($authorizer_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authorizer_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorizer_type'] = $authorizer_type;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets granted_at
     *
     * @return string
     */
    public function getGrantedAt()
    {
        return $this->container['granted_at'];
    }

    /**
     * Sets granted_at
     *
     * @param string $granted_at granted_at
     *
     * @return $this
     */
    public function setGrantedAt($granted_at)
    {
        $this->container['granted_at'] = $granted_at;

        return $this;
    }

    /**
     * Gets grantee_id
     *
     * @return int
     */
    public function getGranteeId()
    {
        return $this->container['grantee_id'];
    }

    /**
     * Sets grantee_id
     *
     * @param int $grantee_id grantee_id
     *
     * @return $this
     */
    public function setGranteeId($grantee_id)
    {
        $this->container['grantee_id'] = $grantee_id;

        return $this;
    }

    /**
     * Gets grantee_type
     *
     * @return string
     */
    public function getGranteeType()
    {
        return $this->container['grantee_type'];
    }

    /**
     * Sets grantee_type
     *
     * @param string $grantee_type grantee_type
     *
     * @return $this
     */
    public function setGranteeType($grantee_type)
    {
        $allowedValues = $this->getGranteeTypeAllowableValues();
        if (!is_null($grantee_type) && !in_array($grantee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'grantee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grantee_type'] = $grantee_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_custom_role
     *
     * @return bool
     */
    public function getIsCustomRole()
    {
        return $this->container['is_custom_role'];
    }

    /**
     * Sets is_custom_role
     *
     * @param bool $is_custom_role is_custom_role
     *
     * @return $this
     */
    public function setIsCustomRole($is_custom_role)
    {
        $this->container['is_custom_role'] = $is_custom_role;

        return $this;
    }

    /**
     * Gets kube_role_binding_name
     *
     * @return string
     */
    public function getKubeRoleBindingName()
    {
        return $this->container['kube_role_binding_name'];
    }

    /**
     * Sets kube_role_binding_name
     *
     * @param string $kube_role_binding_name kube_role_binding_name
     *
     * @return $this
     */
    public function setKubeRoleBindingName($kube_role_binding_name)
    {
        $this->container['kube_role_binding_name'] = $kube_role_binding_name;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets project_selector
     *
     * @return string
     */
    public function getProjectSelector()
    {
        return $this->container['project_selector'];
    }

    /**
     * Sets project_selector
     *
     * @param string $project_selector project_selector
     *
     * @return $this
     */
    public function setProjectSelector($project_selector)
    {
        $this->container['project_selector'] = $project_selector;

        return $this;
    }

    /**
     * Gets revoked_at
     *
     * @return string
     */
    public function getRevokedAt()
    {
        return $this->container['revoked_at'];
    }

    /**
     * Sets revoked_at
     *
     * @param string $revoked_at revoked_at
     *
     * @return $this
     */
    public function setRevokedAt($revoked_at)
    {
        $this->container['revoked_at'] = $revoked_at;

        return $this;
    }

    /**
     * Gets role_name
     *
     * @return string
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     *
     * @param string $role_name role_name
     *
     * @return $this
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

