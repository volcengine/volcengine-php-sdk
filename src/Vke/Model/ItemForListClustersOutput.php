<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListClustersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListClustersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_config' => '\Volcengine\Vke\Model\ClusterConfigForListClustersOutput',
        'connector_config' => '\Volcengine\Vke\Model\ConnectorConfigForListClustersOutput',
        'create_client_token' => 'string',
        'create_time' => 'string',
        'delete_protection_enabled' => 'bool',
        'description' => 'string',
        'id' => 'string',
        'kubernetes_version' => 'string',
        'logging_config' => '\Volcengine\Vke\Model\LoggingConfigForListClustersOutput',
        'message' => 'string',
        'monitoring_config' => '\Volcengine\Vke\Model\MonitoringConfigForListClustersOutput',
        'name' => 'string',
        'node_statistics' => '\Volcengine\Vke\Model\NodeStatisticsForListClustersOutput',
        'pods_config' => '\Volcengine\Vke\Model\PodsConfigForListClustersOutput',
        'project_name' => 'string',
        'register_monitoring_config' => '\Volcengine\Vke\Model\RegisterMonitoringConfigForListClustersOutput',
        'services_config' => '\Volcengine\Vke\Model\ServicesConfigForListClustersOutput',
        'status' => '\Volcengine\Vke\Model\StatusForListClustersOutput',
        'tags' => '\Volcengine\Vke\Model\TagForListClustersOutput[]',
        'type' => 'string',
        'update_client_token' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_config' => null,
        'connector_config' => null,
        'create_client_token' => null,
        'create_time' => null,
        'delete_protection_enabled' => null,
        'description' => null,
        'id' => null,
        'kubernetes_version' => null,
        'logging_config' => null,
        'message' => null,
        'monitoring_config' => null,
        'name' => null,
        'node_statistics' => null,
        'pods_config' => null,
        'project_name' => null,
        'register_monitoring_config' => null,
        'services_config' => null,
        'status' => null,
        'tags' => null,
        'type' => null,
        'update_client_token' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_config' => 'ClusterConfig',
        'connector_config' => 'ConnectorConfig',
        'create_client_token' => 'CreateClientToken',
        'create_time' => 'CreateTime',
        'delete_protection_enabled' => 'DeleteProtectionEnabled',
        'description' => 'Description',
        'id' => 'Id',
        'kubernetes_version' => 'KubernetesVersion',
        'logging_config' => 'LoggingConfig',
        'message' => 'Message',
        'monitoring_config' => 'MonitoringConfig',
        'name' => 'Name',
        'node_statistics' => 'NodeStatistics',
        'pods_config' => 'PodsConfig',
        'project_name' => 'ProjectName',
        'register_monitoring_config' => 'RegisterMonitoringConfig',
        'services_config' => 'ServicesConfig',
        'status' => 'Status',
        'tags' => 'Tags',
        'type' => 'Type',
        'update_client_token' => 'UpdateClientToken',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_config' => 'setClusterConfig',
        'connector_config' => 'setConnectorConfig',
        'create_client_token' => 'setCreateClientToken',
        'create_time' => 'setCreateTime',
        'delete_protection_enabled' => 'setDeleteProtectionEnabled',
        'description' => 'setDescription',
        'id' => 'setId',
        'kubernetes_version' => 'setKubernetesVersion',
        'logging_config' => 'setLoggingConfig',
        'message' => 'setMessage',
        'monitoring_config' => 'setMonitoringConfig',
        'name' => 'setName',
        'node_statistics' => 'setNodeStatistics',
        'pods_config' => 'setPodsConfig',
        'project_name' => 'setProjectName',
        'register_monitoring_config' => 'setRegisterMonitoringConfig',
        'services_config' => 'setServicesConfig',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'type' => 'setType',
        'update_client_token' => 'setUpdateClientToken',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_config' => 'getClusterConfig',
        'connector_config' => 'getConnectorConfig',
        'create_client_token' => 'getCreateClientToken',
        'create_time' => 'getCreateTime',
        'delete_protection_enabled' => 'getDeleteProtectionEnabled',
        'description' => 'getDescription',
        'id' => 'getId',
        'kubernetes_version' => 'getKubernetesVersion',
        'logging_config' => 'getLoggingConfig',
        'message' => 'getMessage',
        'monitoring_config' => 'getMonitoringConfig',
        'name' => 'getName',
        'node_statistics' => 'getNodeStatistics',
        'pods_config' => 'getPodsConfig',
        'project_name' => 'getProjectName',
        'register_monitoring_config' => 'getRegisterMonitoringConfig',
        'services_config' => 'getServicesConfig',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'type' => 'getType',
        'update_client_token' => 'getUpdateClientToken',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_MANAGED = 'Managed';
    const TYPE_STANDARD = 'Standard';
    const TYPE_REGISTERED = 'Registered';
    const TYPE_ON_PREMISE = 'OnPremise';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MANAGED,
            self::TYPE_STANDARD,
            self::TYPE_REGISTERED,
            self::TYPE_ON_PREMISE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_config'] = isset($data['cluster_config']) ? $data['cluster_config'] : null;
        $this->container['connector_config'] = isset($data['connector_config']) ? $data['connector_config'] : null;
        $this->container['create_client_token'] = isset($data['create_client_token']) ? $data['create_client_token'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['delete_protection_enabled'] = isset($data['delete_protection_enabled']) ? $data['delete_protection_enabled'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['kubernetes_version'] = isset($data['kubernetes_version']) ? $data['kubernetes_version'] : null;
        $this->container['logging_config'] = isset($data['logging_config']) ? $data['logging_config'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['monitoring_config'] = isset($data['monitoring_config']) ? $data['monitoring_config'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_statistics'] = isset($data['node_statistics']) ? $data['node_statistics'] : null;
        $this->container['pods_config'] = isset($data['pods_config']) ? $data['pods_config'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['register_monitoring_config'] = isset($data['register_monitoring_config']) ? $data['register_monitoring_config'] : null;
        $this->container['services_config'] = isset($data['services_config']) ? $data['services_config'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_client_token'] = isset($data['update_client_token']) ? $data['update_client_token'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_config
     *
     * @return \Volcengine\Vke\Model\ClusterConfigForListClustersOutput
     */
    public function getClusterConfig()
    {
        return $this->container['cluster_config'];
    }

    /**
     * Sets cluster_config
     *
     * @param \Volcengine\Vke\Model\ClusterConfigForListClustersOutput $cluster_config cluster_config
     *
     * @return $this
     */
    public function setClusterConfig($cluster_config)
    {
        $this->container['cluster_config'] = $cluster_config;

        return $this;
    }

    /**
     * Gets connector_config
     *
     * @return \Volcengine\Vke\Model\ConnectorConfigForListClustersOutput
     */
    public function getConnectorConfig()
    {
        return $this->container['connector_config'];
    }

    /**
     * Sets connector_config
     *
     * @param \Volcengine\Vke\Model\ConnectorConfigForListClustersOutput $connector_config connector_config
     *
     * @return $this
     */
    public function setConnectorConfig($connector_config)
    {
        $this->container['connector_config'] = $connector_config;

        return $this;
    }

    /**
     * Gets create_client_token
     *
     * @return string
     */
    public function getCreateClientToken()
    {
        return $this->container['create_client_token'];
    }

    /**
     * Sets create_client_token
     *
     * @param string $create_client_token create_client_token
     *
     * @return $this
     */
    public function setCreateClientToken($create_client_token)
    {
        $this->container['create_client_token'] = $create_client_token;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets delete_protection_enabled
     *
     * @return bool
     */
    public function getDeleteProtectionEnabled()
    {
        return $this->container['delete_protection_enabled'];
    }

    /**
     * Sets delete_protection_enabled
     *
     * @param bool $delete_protection_enabled delete_protection_enabled
     *
     * @return $this
     */
    public function setDeleteProtectionEnabled($delete_protection_enabled)
    {
        $this->container['delete_protection_enabled'] = $delete_protection_enabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kubernetes_version
     *
     * @return string
     */
    public function getKubernetesVersion()
    {
        return $this->container['kubernetes_version'];
    }

    /**
     * Sets kubernetes_version
     *
     * @param string $kubernetes_version kubernetes_version
     *
     * @return $this
     */
    public function setKubernetesVersion($kubernetes_version)
    {
        $this->container['kubernetes_version'] = $kubernetes_version;

        return $this;
    }

    /**
     * Gets logging_config
     *
     * @return \Volcengine\Vke\Model\LoggingConfigForListClustersOutput
     */
    public function getLoggingConfig()
    {
        return $this->container['logging_config'];
    }

    /**
     * Sets logging_config
     *
     * @param \Volcengine\Vke\Model\LoggingConfigForListClustersOutput $logging_config logging_config
     *
     * @return $this
     */
    public function setLoggingConfig($logging_config)
    {
        $this->container['logging_config'] = $logging_config;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets monitoring_config
     *
     * @return \Volcengine\Vke\Model\MonitoringConfigForListClustersOutput
     */
    public function getMonitoringConfig()
    {
        return $this->container['monitoring_config'];
    }

    /**
     * Sets monitoring_config
     *
     * @param \Volcengine\Vke\Model\MonitoringConfigForListClustersOutput $monitoring_config monitoring_config
     *
     * @return $this
     */
    public function setMonitoringConfig($monitoring_config)
    {
        $this->container['monitoring_config'] = $monitoring_config;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_statistics
     *
     * @return \Volcengine\Vke\Model\NodeStatisticsForListClustersOutput
     */
    public function getNodeStatistics()
    {
        return $this->container['node_statistics'];
    }

    /**
     * Sets node_statistics
     *
     * @param \Volcengine\Vke\Model\NodeStatisticsForListClustersOutput $node_statistics node_statistics
     *
     * @return $this
     */
    public function setNodeStatistics($node_statistics)
    {
        $this->container['node_statistics'] = $node_statistics;

        return $this;
    }

    /**
     * Gets pods_config
     *
     * @return \Volcengine\Vke\Model\PodsConfigForListClustersOutput
     */
    public function getPodsConfig()
    {
        return $this->container['pods_config'];
    }

    /**
     * Sets pods_config
     *
     * @param \Volcengine\Vke\Model\PodsConfigForListClustersOutput $pods_config pods_config
     *
     * @return $this
     */
    public function setPodsConfig($pods_config)
    {
        $this->container['pods_config'] = $pods_config;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets register_monitoring_config
     *
     * @return \Volcengine\Vke\Model\RegisterMonitoringConfigForListClustersOutput
     */
    public function getRegisterMonitoringConfig()
    {
        return $this->container['register_monitoring_config'];
    }

    /**
     * Sets register_monitoring_config
     *
     * @param \Volcengine\Vke\Model\RegisterMonitoringConfigForListClustersOutput $register_monitoring_config register_monitoring_config
     *
     * @return $this
     */
    public function setRegisterMonitoringConfig($register_monitoring_config)
    {
        $this->container['register_monitoring_config'] = $register_monitoring_config;

        return $this;
    }

    /**
     * Gets services_config
     *
     * @return \Volcengine\Vke\Model\ServicesConfigForListClustersOutput
     */
    public function getServicesConfig()
    {
        return $this->container['services_config'];
    }

    /**
     * Sets services_config
     *
     * @param \Volcengine\Vke\Model\ServicesConfigForListClustersOutput $services_config services_config
     *
     * @return $this
     */
    public function setServicesConfig($services_config)
    {
        $this->container['services_config'] = $services_config;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Vke\Model\StatusForListClustersOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Vke\Model\StatusForListClustersOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vke\Model\TagForListClustersOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vke\Model\TagForListClustersOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_client_token
     *
     * @return string
     */
    public function getUpdateClientToken()
    {
        return $this->container['update_client_token'];
    }

    /**
     * Sets update_client_token
     *
     * @param string $update_client_token update_client_token
     *
     * @return $this
     */
    public function setUpdateClientToken($update_client_token)
    {
        $this->container['update_client_token'] = $update_client_token;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

