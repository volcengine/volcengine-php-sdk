<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class KubernetesConfigForCreateNodePoolInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KubernetesConfigForCreateNodePoolInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_sync_disabled' => 'bool',
        'cordon' => 'bool',
        'kubelet_config' => '\Volcengine\Vke\Model\KubeletConfigForCreateNodePoolInput',
        'labels' => '\Volcengine\Vke\Model\LabelForCreateNodePoolInput[]',
        'name_prefix' => 'string',
        'taints' => '\Volcengine\Vke\Model\TaintForCreateNodePoolInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_sync_disabled' => null,
        'cordon' => null,
        'kubelet_config' => null,
        'labels' => null,
        'name_prefix' => null,
        'taints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_sync_disabled' => 'AutoSyncDisabled',
        'cordon' => 'Cordon',
        'kubelet_config' => 'KubeletConfig',
        'labels' => 'Labels',
        'name_prefix' => 'NamePrefix',
        'taints' => 'Taints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_sync_disabled' => 'setAutoSyncDisabled',
        'cordon' => 'setCordon',
        'kubelet_config' => 'setKubeletConfig',
        'labels' => 'setLabels',
        'name_prefix' => 'setNamePrefix',
        'taints' => 'setTaints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_sync_disabled' => 'getAutoSyncDisabled',
        'cordon' => 'getCordon',
        'kubelet_config' => 'getKubeletConfig',
        'labels' => 'getLabels',
        'name_prefix' => 'getNamePrefix',
        'taints' => 'getTaints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_sync_disabled'] = isset($data['auto_sync_disabled']) ? $data['auto_sync_disabled'] : null;
        $this->container['cordon'] = isset($data['cordon']) ? $data['cordon'] : null;
        $this->container['kubelet_config'] = isset($data['kubelet_config']) ? $data['kubelet_config'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['name_prefix'] = isset($data['name_prefix']) ? $data['name_prefix'] : null;
        $this->container['taints'] = isset($data['taints']) ? $data['taints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_sync_disabled
     *
     * @return bool
     */
    public function getAutoSyncDisabled()
    {
        return $this->container['auto_sync_disabled'];
    }

    /**
     * Sets auto_sync_disabled
     *
     * @param bool $auto_sync_disabled auto_sync_disabled
     *
     * @return $this
     */
    public function setAutoSyncDisabled($auto_sync_disabled)
    {
        $this->container['auto_sync_disabled'] = $auto_sync_disabled;

        return $this;
    }

    /**
     * Gets cordon
     *
     * @return bool
     */
    public function getCordon()
    {
        return $this->container['cordon'];
    }

    /**
     * Sets cordon
     *
     * @param bool $cordon cordon
     *
     * @return $this
     */
    public function setCordon($cordon)
    {
        $this->container['cordon'] = $cordon;

        return $this;
    }

    /**
     * Gets kubelet_config
     *
     * @return \Volcengine\Vke\Model\KubeletConfigForCreateNodePoolInput
     */
    public function getKubeletConfig()
    {
        return $this->container['kubelet_config'];
    }

    /**
     * Sets kubelet_config
     *
     * @param \Volcengine\Vke\Model\KubeletConfigForCreateNodePoolInput $kubelet_config kubelet_config
     *
     * @return $this
     */
    public function setKubeletConfig($kubelet_config)
    {
        $this->container['kubelet_config'] = $kubelet_config;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Volcengine\Vke\Model\LabelForCreateNodePoolInput[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Volcengine\Vke\Model\LabelForCreateNodePoolInput[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets name_prefix
     *
     * @return string
     */
    public function getNamePrefix()
    {
        return $this->container['name_prefix'];
    }

    /**
     * Sets name_prefix
     *
     * @param string $name_prefix name_prefix
     *
     * @return $this
     */
    public function setNamePrefix($name_prefix)
    {
        $this->container['name_prefix'] = $name_prefix;

        return $this;
    }

    /**
     * Gets taints
     *
     * @return \Volcengine\Vke\Model\TaintForCreateNodePoolInput[]
     */
    public function getTaints()
    {
        return $this->container['taints'];
    }

    /**
     * Sets taints
     *
     * @param \Volcengine\Vke\Model\TaintForCreateNodePoolInput[] $taints taints
     *
     * @return $this
     */
    public function setTaints($taints)
    {
        $this->container['taints'] = $taints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

