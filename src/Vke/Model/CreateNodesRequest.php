<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateNodesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateNodesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_container_storage_enabled' => 'bool',
        'client_token' => 'string',
        'cluster_id' => 'string',
        'container_storage_path' => 'string',
        'image_id' => 'string',
        'initialize_script' => 'string',
        'instance_ids' => 'string[]',
        'keep_instance_name' => 'bool',
        'kubernetes_config' => '\Volcengine\Vke\Model\KubernetesConfigForCreateNodesInput',
        'node_pool_id' => 'string',
        'pre_script' => 'string',
        'skip_replace_system' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_container_storage_enabled' => null,
        'client_token' => null,
        'cluster_id' => null,
        'container_storage_path' => null,
        'image_id' => null,
        'initialize_script' => null,
        'instance_ids' => null,
        'keep_instance_name' => null,
        'kubernetes_config' => null,
        'node_pool_id' => null,
        'pre_script' => null,
        'skip_replace_system' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_container_storage_enabled' => 'AdditionalContainerStorageEnabled',
        'client_token' => 'ClientToken',
        'cluster_id' => 'ClusterId',
        'container_storage_path' => 'ContainerStoragePath',
        'image_id' => 'ImageId',
        'initialize_script' => 'InitializeScript',
        'instance_ids' => 'InstanceIds',
        'keep_instance_name' => 'KeepInstanceName',
        'kubernetes_config' => 'KubernetesConfig',
        'node_pool_id' => 'NodePoolId',
        'pre_script' => 'PreScript',
        'skip_replace_system' => 'SkipReplaceSystem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_container_storage_enabled' => 'setAdditionalContainerStorageEnabled',
        'client_token' => 'setClientToken',
        'cluster_id' => 'setClusterId',
        'container_storage_path' => 'setContainerStoragePath',
        'image_id' => 'setImageId',
        'initialize_script' => 'setInitializeScript',
        'instance_ids' => 'setInstanceIds',
        'keep_instance_name' => 'setKeepInstanceName',
        'kubernetes_config' => 'setKubernetesConfig',
        'node_pool_id' => 'setNodePoolId',
        'pre_script' => 'setPreScript',
        'skip_replace_system' => 'setSkipReplaceSystem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_container_storage_enabled' => 'getAdditionalContainerStorageEnabled',
        'client_token' => 'getClientToken',
        'cluster_id' => 'getClusterId',
        'container_storage_path' => 'getContainerStoragePath',
        'image_id' => 'getImageId',
        'initialize_script' => 'getInitializeScript',
        'instance_ids' => 'getInstanceIds',
        'keep_instance_name' => 'getKeepInstanceName',
        'kubernetes_config' => 'getKubernetesConfig',
        'node_pool_id' => 'getNodePoolId',
        'pre_script' => 'getPreScript',
        'skip_replace_system' => 'getSkipReplaceSystem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_container_storage_enabled'] = isset($data['additional_container_storage_enabled']) ? $data['additional_container_storage_enabled'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['container_storage_path'] = isset($data['container_storage_path']) ? $data['container_storage_path'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['initialize_script'] = isset($data['initialize_script']) ? $data['initialize_script'] : null;
        $this->container['instance_ids'] = isset($data['instance_ids']) ? $data['instance_ids'] : null;
        $this->container['keep_instance_name'] = isset($data['keep_instance_name']) ? $data['keep_instance_name'] : null;
        $this->container['kubernetes_config'] = isset($data['kubernetes_config']) ? $data['kubernetes_config'] : null;
        $this->container['node_pool_id'] = isset($data['node_pool_id']) ? $data['node_pool_id'] : null;
        $this->container['pre_script'] = isset($data['pre_script']) ? $data['pre_script'] : null;
        $this->container['skip_replace_system'] = isset($data['skip_replace_system']) ? $data['skip_replace_system'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cluster_id'] === null) {
            $invalidProperties[] = "'cluster_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_container_storage_enabled
     *
     * @return bool
     */
    public function getAdditionalContainerStorageEnabled()
    {
        return $this->container['additional_container_storage_enabled'];
    }

    /**
     * Sets additional_container_storage_enabled
     *
     * @param bool $additional_container_storage_enabled additional_container_storage_enabled
     *
     * @return $this
     */
    public function setAdditionalContainerStorageEnabled($additional_container_storage_enabled)
    {
        $this->container['additional_container_storage_enabled'] = $additional_container_storage_enabled;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets container_storage_path
     *
     * @return string
     */
    public function getContainerStoragePath()
    {
        return $this->container['container_storage_path'];
    }

    /**
     * Sets container_storage_path
     *
     * @param string $container_storage_path container_storage_path
     *
     * @return $this
     */
    public function setContainerStoragePath($container_storage_path)
    {
        $this->container['container_storage_path'] = $container_storage_path;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets initialize_script
     *
     * @return string
     */
    public function getInitializeScript()
    {
        return $this->container['initialize_script'];
    }

    /**
     * Sets initialize_script
     *
     * @param string $initialize_script initialize_script
     *
     * @return $this
     */
    public function setInitializeScript($initialize_script)
    {
        $this->container['initialize_script'] = $initialize_script;

        return $this;
    }

    /**
     * Gets instance_ids
     *
     * @return string[]
     */
    public function getInstanceIds()
    {
        return $this->container['instance_ids'];
    }

    /**
     * Sets instance_ids
     *
     * @param string[] $instance_ids instance_ids
     *
     * @return $this
     */
    public function setInstanceIds($instance_ids)
    {
        $this->container['instance_ids'] = $instance_ids;

        return $this;
    }

    /**
     * Gets keep_instance_name
     *
     * @return bool
     */
    public function getKeepInstanceName()
    {
        return $this->container['keep_instance_name'];
    }

    /**
     * Sets keep_instance_name
     *
     * @param bool $keep_instance_name keep_instance_name
     *
     * @return $this
     */
    public function setKeepInstanceName($keep_instance_name)
    {
        $this->container['keep_instance_name'] = $keep_instance_name;

        return $this;
    }

    /**
     * Gets kubernetes_config
     *
     * @return \Volcengine\Vke\Model\KubernetesConfigForCreateNodesInput
     */
    public function getKubernetesConfig()
    {
        return $this->container['kubernetes_config'];
    }

    /**
     * Sets kubernetes_config
     *
     * @param \Volcengine\Vke\Model\KubernetesConfigForCreateNodesInput $kubernetes_config kubernetes_config
     *
     * @return $this
     */
    public function setKubernetesConfig($kubernetes_config)
    {
        $this->container['kubernetes_config'] = $kubernetes_config;

        return $this;
    }

    /**
     * Gets node_pool_id
     *
     * @return string
     */
    public function getNodePoolId()
    {
        return $this->container['node_pool_id'];
    }

    /**
     * Sets node_pool_id
     *
     * @param string $node_pool_id node_pool_id
     *
     * @return $this
     */
    public function setNodePoolId($node_pool_id)
    {
        $this->container['node_pool_id'] = $node_pool_id;

        return $this;
    }

    /**
     * Gets pre_script
     *
     * @return string
     */
    public function getPreScript()
    {
        return $this->container['pre_script'];
    }

    /**
     * Sets pre_script
     *
     * @param string $pre_script pre_script
     *
     * @return $this
     */
    public function setPreScript($pre_script)
    {
        $this->container['pre_script'] = $pre_script;

        return $this;
    }

    /**
     * Gets skip_replace_system
     *
     * @return bool
     */
    public function getSkipReplaceSystem()
    {
        return $this->container['skip_replace_system'];
    }

    /**
     * Sets skip_replace_system
     *
     * @param bool $skip_replace_system skip_replace_system
     *
     * @return $this
     */
    public function setSkipReplaceSystem($skip_replace_system)
    {
        $this->container['skip_replace_system'] = $skip_replace_system;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

