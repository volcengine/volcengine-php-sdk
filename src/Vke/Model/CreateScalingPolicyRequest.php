<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateScalingPolicyRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateScalingPolicyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adjustment_value' => 'int',
        'client_token' => 'string',
        'cluster_id' => 'string',
        'enabled' => 'bool',
        'node_pool_id' => 'string',
        'scheduled_instance_policy' => '\Volcengine\Vke\Model\ScheduledInstancePolicyForCreateScalingPolicyInput',
        'scheduled_policy' => '\Volcengine\Vke\Model\ScheduledPolicyForCreateScalingPolicyInput',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adjustment_value' => 'int32',
        'client_token' => null,
        'cluster_id' => null,
        'enabled' => null,
        'node_pool_id' => null,
        'scheduled_instance_policy' => null,
        'scheduled_policy' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustment_value' => 'AdjustmentValue',
        'client_token' => 'ClientToken',
        'cluster_id' => 'ClusterId',
        'enabled' => 'Enabled',
        'node_pool_id' => 'NodePoolId',
        'scheduled_instance_policy' => 'ScheduledInstancePolicy',
        'scheduled_policy' => 'ScheduledPolicy',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustment_value' => 'setAdjustmentValue',
        'client_token' => 'setClientToken',
        'cluster_id' => 'setClusterId',
        'enabled' => 'setEnabled',
        'node_pool_id' => 'setNodePoolId',
        'scheduled_instance_policy' => 'setScheduledInstancePolicy',
        'scheduled_policy' => 'setScheduledPolicy',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustment_value' => 'getAdjustmentValue',
        'client_token' => 'getClientToken',
        'cluster_id' => 'getClusterId',
        'enabled' => 'getEnabled',
        'node_pool_id' => 'getNodePoolId',
        'scheduled_instance_policy' => 'getScheduledInstancePolicy',
        'scheduled_policy' => 'getScheduledPolicy',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_SCHEDULED = 'Scheduled';
    const TYPE_RECURRENCE = 'Recurrence';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SCHEDULED,
            self::TYPE_RECURRENCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustment_value'] = isset($data['adjustment_value']) ? $data['adjustment_value'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['node_pool_id'] = isset($data['node_pool_id']) ? $data['node_pool_id'] : null;
        $this->container['scheduled_instance_policy'] = isset($data['scheduled_instance_policy']) ? $data['scheduled_instance_policy'] : null;
        $this->container['scheduled_policy'] = isset($data['scheduled_policy']) ? $data['scheduled_policy'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['adjustment_value'] === null) {
            $invalidProperties[] = "'adjustment_value' can't be null";
        }
        if ($this->container['cluster_id'] === null) {
            $invalidProperties[] = "'cluster_id' can't be null";
        }
        if ($this->container['node_pool_id'] === null) {
            $invalidProperties[] = "'node_pool_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjustment_value
     *
     * @return int
     */
    public function getAdjustmentValue()
    {
        return $this->container['adjustment_value'];
    }

    /**
     * Sets adjustment_value
     *
     * @param int $adjustment_value adjustment_value
     *
     * @return $this
     */
    public function setAdjustmentValue($adjustment_value)
    {
        $this->container['adjustment_value'] = $adjustment_value;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets node_pool_id
     *
     * @return string
     */
    public function getNodePoolId()
    {
        return $this->container['node_pool_id'];
    }

    /**
     * Sets node_pool_id
     *
     * @param string $node_pool_id node_pool_id
     *
     * @return $this
     */
    public function setNodePoolId($node_pool_id)
    {
        $this->container['node_pool_id'] = $node_pool_id;

        return $this;
    }

    /**
     * Gets scheduled_instance_policy
     *
     * @return \Volcengine\Vke\Model\ScheduledInstancePolicyForCreateScalingPolicyInput
     */
    public function getScheduledInstancePolicy()
    {
        return $this->container['scheduled_instance_policy'];
    }

    /**
     * Sets scheduled_instance_policy
     *
     * @param \Volcengine\Vke\Model\ScheduledInstancePolicyForCreateScalingPolicyInput $scheduled_instance_policy scheduled_instance_policy
     *
     * @return $this
     */
    public function setScheduledInstancePolicy($scheduled_instance_policy)
    {
        $this->container['scheduled_instance_policy'] = $scheduled_instance_policy;

        return $this;
    }

    /**
     * Gets scheduled_policy
     *
     * @return \Volcengine\Vke\Model\ScheduledPolicyForCreateScalingPolicyInput
     */
    public function getScheduledPolicy()
    {
        return $this->container['scheduled_policy'];
    }

    /**
     * Sets scheduled_policy
     *
     * @param \Volcengine\Vke\Model\ScheduledPolicyForCreateScalingPolicyInput $scheduled_policy scheduled_policy
     *
     * @return $this
     */
    public function setScheduledPolicy($scheduled_policy)
    {
        $this->container['scheduled_policy'] = $scheduled_policy;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

