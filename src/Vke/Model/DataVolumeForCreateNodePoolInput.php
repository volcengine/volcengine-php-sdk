<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataVolumeForCreateNodePoolInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataVolumeForCreateNodePoolInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_system' => 'string',
        'mount_point' => 'string',
        'placement_group_id' => 'string',
        'size' => 'int',
        'snapshot_id' => 'string',
        'subgroup_number' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_system' => null,
        'mount_point' => null,
        'placement_group_id' => null,
        'size' => 'int32',
        'snapshot_id' => null,
        'subgroup_number' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_system' => 'FileSystem',
        'mount_point' => 'MountPoint',
        'placement_group_id' => 'PlacementGroupId',
        'size' => 'Size',
        'snapshot_id' => 'SnapshotId',
        'subgroup_number' => 'SubgroupNumber',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_system' => 'setFileSystem',
        'mount_point' => 'setMountPoint',
        'placement_group_id' => 'setPlacementGroupId',
        'size' => 'setSize',
        'snapshot_id' => 'setSnapshotId',
        'subgroup_number' => 'setSubgroupNumber',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_system' => 'getFileSystem',
        'mount_point' => 'getMountPoint',
        'placement_group_id' => 'getPlacementGroupId',
        'size' => 'getSize',
        'snapshot_id' => 'getSnapshotId',
        'subgroup_number' => 'getSubgroupNumber',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FILE_SYSTEM_EXT4 = 'Ext4';
    const FILE_SYSTEM_XFS = 'Xfs';
    const TYPE_ESSD_PL0 = 'ESSD_PL0';
    const TYPE_ESSD_FLEX_PL = 'ESSD_FlexPL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileSystemAllowableValues()
    {
        return [
            self::FILE_SYSTEM_EXT4,
            self::FILE_SYSTEM_XFS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ESSD_PL0,
            self::TYPE_ESSD_FLEX_PL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_system'] = isset($data['file_system']) ? $data['file_system'] : null;
        $this->container['mount_point'] = isset($data['mount_point']) ? $data['mount_point'] : null;
        $this->container['placement_group_id'] = isset($data['placement_group_id']) ? $data['placement_group_id'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['snapshot_id'] = isset($data['snapshot_id']) ? $data['snapshot_id'] : null;
        $this->container['subgroup_number'] = isset($data['subgroup_number']) ? $data['subgroup_number'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFileSystemAllowableValues();
        if (!is_null($this->container['file_system']) && !in_array($this->container['file_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'file_system', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_system
     *
     * @return string
     */
    public function getFileSystem()
    {
        return $this->container['file_system'];
    }

    /**
     * Sets file_system
     *
     * @param string $file_system file_system
     *
     * @return $this
     */
    public function setFileSystem($file_system)
    {
        $allowedValues = $this->getFileSystemAllowableValues();
        if (!is_null($file_system) && !in_array($file_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'file_system', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_system'] = $file_system;

        return $this;
    }

    /**
     * Gets mount_point
     *
     * @return string
     */
    public function getMountPoint()
    {
        return $this->container['mount_point'];
    }

    /**
     * Sets mount_point
     *
     * @param string $mount_point mount_point
     *
     * @return $this
     */
    public function setMountPoint($mount_point)
    {
        $this->container['mount_point'] = $mount_point;

        return $this;
    }

    /**
     * Gets placement_group_id
     *
     * @return string
     */
    public function getPlacementGroupId()
    {
        return $this->container['placement_group_id'];
    }

    /**
     * Sets placement_group_id
     *
     * @param string $placement_group_id placement_group_id
     *
     * @return $this
     */
    public function setPlacementGroupId($placement_group_id)
    {
        $this->container['placement_group_id'] = $placement_group_id;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return string
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param string $snapshot_id snapshot_id
     *
     * @return $this
     */
    public function setSnapshotId($snapshot_id)
    {
        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets subgroup_number
     *
     * @return int
     */
    public function getSubgroupNumber()
    {
        return $this->container['subgroup_number'];
    }

    /**
     * Sets subgroup_number
     *
     * @param int $subgroup_number subgroup_number
     *
     * @return $this
     */
    public function setSubgroupNumber($subgroup_number)
    {
        $this->container['subgroup_number'] = $subgroup_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

