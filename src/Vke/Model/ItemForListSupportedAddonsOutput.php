<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListSupportedAddonsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListSupportedAddonsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'categories' => 'string[]',
        'deploy_mode' => 'string',
        'deploy_node_types' => 'string[]',
        'name' => 'string',
        'necessary' => 'string',
        'pod_network_modes' => 'string[]',
        'versions' => '\Volcengine\Vke\Model\VersionForListSupportedAddonsOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'categories' => null,
        'deploy_mode' => null,
        'deploy_node_types' => null,
        'name' => null,
        'necessary' => null,
        'pod_network_modes' => null,
        'versions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categories' => 'Categories',
        'deploy_mode' => 'DeployMode',
        'deploy_node_types' => 'DeployNodeTypes',
        'name' => 'Name',
        'necessary' => 'Necessary',
        'pod_network_modes' => 'PodNetworkModes',
        'versions' => 'Versions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categories' => 'setCategories',
        'deploy_mode' => 'setDeployMode',
        'deploy_node_types' => 'setDeployNodeTypes',
        'name' => 'setName',
        'necessary' => 'setNecessary',
        'pod_network_modes' => 'setPodNetworkModes',
        'versions' => 'setVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categories' => 'getCategories',
        'deploy_mode' => 'getDeployMode',
        'deploy_node_types' => 'getDeployNodeTypes',
        'name' => 'getName',
        'necessary' => 'getNecessary',
        'pod_network_modes' => 'getPodNetworkModes',
        'versions' => 'getVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['deploy_mode'] = isset($data['deploy_mode']) ? $data['deploy_mode'] : null;
        $this->container['deploy_node_types'] = isset($data['deploy_node_types']) ? $data['deploy_node_types'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['necessary'] = isset($data['necessary']) ? $data['necessary'] : null;
        $this->container['pod_network_modes'] = isset($data['pod_network_modes']) ? $data['pod_network_modes'] : null;
        $this->container['versions'] = isset($data['versions']) ? $data['versions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets deploy_mode
     *
     * @return string
     */
    public function getDeployMode()
    {
        return $this->container['deploy_mode'];
    }

    /**
     * Sets deploy_mode
     *
     * @param string $deploy_mode deploy_mode
     *
     * @return $this
     */
    public function setDeployMode($deploy_mode)
    {
        $this->container['deploy_mode'] = $deploy_mode;

        return $this;
    }

    /**
     * Gets deploy_node_types
     *
     * @return string[]
     */
    public function getDeployNodeTypes()
    {
        return $this->container['deploy_node_types'];
    }

    /**
     * Sets deploy_node_types
     *
     * @param string[] $deploy_node_types deploy_node_types
     *
     * @return $this
     */
    public function setDeployNodeTypes($deploy_node_types)
    {
        $this->container['deploy_node_types'] = $deploy_node_types;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets necessary
     *
     * @return string
     */
    public function getNecessary()
    {
        return $this->container['necessary'];
    }

    /**
     * Sets necessary
     *
     * @param string $necessary necessary
     *
     * @return $this
     */
    public function setNecessary($necessary)
    {
        $this->container['necessary'] = $necessary;

        return $this;
    }

    /**
     * Gets pod_network_modes
     *
     * @return string[]
     */
    public function getPodNetworkModes()
    {
        return $this->container['pod_network_modes'];
    }

    /**
     * Sets pod_network_modes
     *
     * @param string[] $pod_network_modes pod_network_modes
     *
     * @return $this
     */
    public function setPodNetworkModes($pod_network_modes)
    {
        $this->container['pod_network_modes'] = $pod_network_modes;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \Volcengine\Vke\Model\VersionForListSupportedAddonsOutput[]
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \Volcengine\Vke\Model\VersionForListSupportedAddonsOutput[] $versions versions
     *
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

