<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class KubeletConfigForCreateNodePoolInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KubeletConfigForCreateNodePoolInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_manager_policy' => 'string',
        'eviction_hard' => '\Volcengine\Vke\Model\EvictionHardForCreateNodePoolInput[]',
        'feature_gates' => '\Volcengine\Vke\Model\FeatureGatesForCreateNodePoolInput',
        'kube_api_burst' => 'int',
        'kube_api_qps' => 'int',
        'kube_reserved' => '\Volcengine\Vke\Model\KubeReservedForCreateNodePoolInput[]',
        'max_pods' => 'int',
        'registry_burst' => 'int',
        'registry_pull_qps' => 'int',
        'serialize_image_pulls' => 'bool',
        'system_reserved' => '\Volcengine\Vke\Model\SystemReservedForCreateNodePoolInput[]',
        'topology_manager_policy' => 'string',
        'topology_manager_scope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_manager_policy' => null,
        'eviction_hard' => null,
        'feature_gates' => null,
        'kube_api_burst' => 'int32',
        'kube_api_qps' => 'int32',
        'kube_reserved' => null,
        'max_pods' => 'int32',
        'registry_burst' => 'int32',
        'registry_pull_qps' => 'int32',
        'serialize_image_pulls' => null,
        'system_reserved' => null,
        'topology_manager_policy' => null,
        'topology_manager_scope' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_manager_policy' => 'CpuManagerPolicy',
        'eviction_hard' => 'EvictionHard',
        'feature_gates' => 'FeatureGates',
        'kube_api_burst' => 'KubeApiBurst',
        'kube_api_qps' => 'KubeApiQps',
        'kube_reserved' => 'KubeReserved',
        'max_pods' => 'MaxPods',
        'registry_burst' => 'RegistryBurst',
        'registry_pull_qps' => 'RegistryPullQps',
        'serialize_image_pulls' => 'SerializeImagePulls',
        'system_reserved' => 'SystemReserved',
        'topology_manager_policy' => 'TopologyManagerPolicy',
        'topology_manager_scope' => 'TopologyManagerScope'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_manager_policy' => 'setCpuManagerPolicy',
        'eviction_hard' => 'setEvictionHard',
        'feature_gates' => 'setFeatureGates',
        'kube_api_burst' => 'setKubeApiBurst',
        'kube_api_qps' => 'setKubeApiQps',
        'kube_reserved' => 'setKubeReserved',
        'max_pods' => 'setMaxPods',
        'registry_burst' => 'setRegistryBurst',
        'registry_pull_qps' => 'setRegistryPullQps',
        'serialize_image_pulls' => 'setSerializeImagePulls',
        'system_reserved' => 'setSystemReserved',
        'topology_manager_policy' => 'setTopologyManagerPolicy',
        'topology_manager_scope' => 'setTopologyManagerScope'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_manager_policy' => 'getCpuManagerPolicy',
        'eviction_hard' => 'getEvictionHard',
        'feature_gates' => 'getFeatureGates',
        'kube_api_burst' => 'getKubeApiBurst',
        'kube_api_qps' => 'getKubeApiQps',
        'kube_reserved' => 'getKubeReserved',
        'max_pods' => 'getMaxPods',
        'registry_burst' => 'getRegistryBurst',
        'registry_pull_qps' => 'getRegistryPullQps',
        'serialize_image_pulls' => 'getSerializeImagePulls',
        'system_reserved' => 'getSystemReserved',
        'topology_manager_policy' => 'getTopologyManagerPolicy',
        'topology_manager_scope' => 'getTopologyManagerScope'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TOPOLOGY_MANAGER_POLICY_RESTRICTED = 'restricted';
    const TOPOLOGY_MANAGER_POLICY_BEST_EFFORT = 'best-effort';
    const TOPOLOGY_MANAGER_POLICY_NONE = 'none';
    const TOPOLOGY_MANAGER_POLICY_SINGLE_NUMA_NODE = 'single-numa-node';
    const TOPOLOGY_MANAGER_SCOPE_POD = 'pod';
    const TOPOLOGY_MANAGER_SCOPE_CONTAINER = 'container';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTopologyManagerPolicyAllowableValues()
    {
        return [
            self::TOPOLOGY_MANAGER_POLICY_RESTRICTED,
            self::TOPOLOGY_MANAGER_POLICY_BEST_EFFORT,
            self::TOPOLOGY_MANAGER_POLICY_NONE,
            self::TOPOLOGY_MANAGER_POLICY_SINGLE_NUMA_NODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTopologyManagerScopeAllowableValues()
    {
        return [
            self::TOPOLOGY_MANAGER_SCOPE_POD,
            self::TOPOLOGY_MANAGER_SCOPE_CONTAINER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_manager_policy'] = isset($data['cpu_manager_policy']) ? $data['cpu_manager_policy'] : null;
        $this->container['eviction_hard'] = isset($data['eviction_hard']) ? $data['eviction_hard'] : null;
        $this->container['feature_gates'] = isset($data['feature_gates']) ? $data['feature_gates'] : null;
        $this->container['kube_api_burst'] = isset($data['kube_api_burst']) ? $data['kube_api_burst'] : null;
        $this->container['kube_api_qps'] = isset($data['kube_api_qps']) ? $data['kube_api_qps'] : null;
        $this->container['kube_reserved'] = isset($data['kube_reserved']) ? $data['kube_reserved'] : null;
        $this->container['max_pods'] = isset($data['max_pods']) ? $data['max_pods'] : null;
        $this->container['registry_burst'] = isset($data['registry_burst']) ? $data['registry_burst'] : null;
        $this->container['registry_pull_qps'] = isset($data['registry_pull_qps']) ? $data['registry_pull_qps'] : null;
        $this->container['serialize_image_pulls'] = isset($data['serialize_image_pulls']) ? $data['serialize_image_pulls'] : null;
        $this->container['system_reserved'] = isset($data['system_reserved']) ? $data['system_reserved'] : null;
        $this->container['topology_manager_policy'] = isset($data['topology_manager_policy']) ? $data['topology_manager_policy'] : null;
        $this->container['topology_manager_scope'] = isset($data['topology_manager_scope']) ? $data['topology_manager_scope'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTopologyManagerPolicyAllowableValues();
        if (!is_null($this->container['topology_manager_policy']) && !in_array($this->container['topology_manager_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'topology_manager_policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTopologyManagerScopeAllowableValues();
        if (!is_null($this->container['topology_manager_scope']) && !in_array($this->container['topology_manager_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'topology_manager_scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_manager_policy
     *
     * @return string
     */
    public function getCpuManagerPolicy()
    {
        return $this->container['cpu_manager_policy'];
    }

    /**
     * Sets cpu_manager_policy
     *
     * @param string $cpu_manager_policy cpu_manager_policy
     *
     * @return $this
     */
    public function setCpuManagerPolicy($cpu_manager_policy)
    {
        $this->container['cpu_manager_policy'] = $cpu_manager_policy;

        return $this;
    }

    /**
     * Gets eviction_hard
     *
     * @return \Volcengine\Vke\Model\EvictionHardForCreateNodePoolInput[]
     */
    public function getEvictionHard()
    {
        return $this->container['eviction_hard'];
    }

    /**
     * Sets eviction_hard
     *
     * @param \Volcengine\Vke\Model\EvictionHardForCreateNodePoolInput[] $eviction_hard eviction_hard
     *
     * @return $this
     */
    public function setEvictionHard($eviction_hard)
    {
        $this->container['eviction_hard'] = $eviction_hard;

        return $this;
    }

    /**
     * Gets feature_gates
     *
     * @return \Volcengine\Vke\Model\FeatureGatesForCreateNodePoolInput
     */
    public function getFeatureGates()
    {
        return $this->container['feature_gates'];
    }

    /**
     * Sets feature_gates
     *
     * @param \Volcengine\Vke\Model\FeatureGatesForCreateNodePoolInput $feature_gates feature_gates
     *
     * @return $this
     */
    public function setFeatureGates($feature_gates)
    {
        $this->container['feature_gates'] = $feature_gates;

        return $this;
    }

    /**
     * Gets kube_api_burst
     *
     * @return int
     */
    public function getKubeApiBurst()
    {
        return $this->container['kube_api_burst'];
    }

    /**
     * Sets kube_api_burst
     *
     * @param int $kube_api_burst kube_api_burst
     *
     * @return $this
     */
    public function setKubeApiBurst($kube_api_burst)
    {
        $this->container['kube_api_burst'] = $kube_api_burst;

        return $this;
    }

    /**
     * Gets kube_api_qps
     *
     * @return int
     */
    public function getKubeApiQps()
    {
        return $this->container['kube_api_qps'];
    }

    /**
     * Sets kube_api_qps
     *
     * @param int $kube_api_qps kube_api_qps
     *
     * @return $this
     */
    public function setKubeApiQps($kube_api_qps)
    {
        $this->container['kube_api_qps'] = $kube_api_qps;

        return $this;
    }

    /**
     * Gets kube_reserved
     *
     * @return \Volcengine\Vke\Model\KubeReservedForCreateNodePoolInput[]
     */
    public function getKubeReserved()
    {
        return $this->container['kube_reserved'];
    }

    /**
     * Sets kube_reserved
     *
     * @param \Volcengine\Vke\Model\KubeReservedForCreateNodePoolInput[] $kube_reserved kube_reserved
     *
     * @return $this
     */
    public function setKubeReserved($kube_reserved)
    {
        $this->container['kube_reserved'] = $kube_reserved;

        return $this;
    }

    /**
     * Gets max_pods
     *
     * @return int
     */
    public function getMaxPods()
    {
        return $this->container['max_pods'];
    }

    /**
     * Sets max_pods
     *
     * @param int $max_pods max_pods
     *
     * @return $this
     */
    public function setMaxPods($max_pods)
    {
        $this->container['max_pods'] = $max_pods;

        return $this;
    }

    /**
     * Gets registry_burst
     *
     * @return int
     */
    public function getRegistryBurst()
    {
        return $this->container['registry_burst'];
    }

    /**
     * Sets registry_burst
     *
     * @param int $registry_burst registry_burst
     *
     * @return $this
     */
    public function setRegistryBurst($registry_burst)
    {
        $this->container['registry_burst'] = $registry_burst;

        return $this;
    }

    /**
     * Gets registry_pull_qps
     *
     * @return int
     */
    public function getRegistryPullQps()
    {
        return $this->container['registry_pull_qps'];
    }

    /**
     * Sets registry_pull_qps
     *
     * @param int $registry_pull_qps registry_pull_qps
     *
     * @return $this
     */
    public function setRegistryPullQps($registry_pull_qps)
    {
        $this->container['registry_pull_qps'] = $registry_pull_qps;

        return $this;
    }

    /**
     * Gets serialize_image_pulls
     *
     * @return bool
     */
    public function getSerializeImagePulls()
    {
        return $this->container['serialize_image_pulls'];
    }

    /**
     * Sets serialize_image_pulls
     *
     * @param bool $serialize_image_pulls serialize_image_pulls
     *
     * @return $this
     */
    public function setSerializeImagePulls($serialize_image_pulls)
    {
        $this->container['serialize_image_pulls'] = $serialize_image_pulls;

        return $this;
    }

    /**
     * Gets system_reserved
     *
     * @return \Volcengine\Vke\Model\SystemReservedForCreateNodePoolInput[]
     */
    public function getSystemReserved()
    {
        return $this->container['system_reserved'];
    }

    /**
     * Sets system_reserved
     *
     * @param \Volcengine\Vke\Model\SystemReservedForCreateNodePoolInput[] $system_reserved system_reserved
     *
     * @return $this
     */
    public function setSystemReserved($system_reserved)
    {
        $this->container['system_reserved'] = $system_reserved;

        return $this;
    }

    /**
     * Gets topology_manager_policy
     *
     * @return string
     */
    public function getTopologyManagerPolicy()
    {
        return $this->container['topology_manager_policy'];
    }

    /**
     * Sets topology_manager_policy
     *
     * @param string $topology_manager_policy topology_manager_policy
     *
     * @return $this
     */
    public function setTopologyManagerPolicy($topology_manager_policy)
    {
        $allowedValues = $this->getTopologyManagerPolicyAllowableValues();
        if (!is_null($topology_manager_policy) && !in_array($topology_manager_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'topology_manager_policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['topology_manager_policy'] = $topology_manager_policy;

        return $this;
    }

    /**
     * Gets topology_manager_scope
     *
     * @return string
     */
    public function getTopologyManagerScope()
    {
        return $this->container['topology_manager_scope'];
    }

    /**
     * Sets topology_manager_scope
     *
     * @param string $topology_manager_scope topology_manager_scope
     *
     * @return $this
     */
    public function setTopologyManagerScope($topology_manager_scope)
    {
        $allowedValues = $this->getTopologyManagerScopeAllowableValues();
        if (!is_null($topology_manager_scope) && !in_array($topology_manager_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'topology_manager_scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['topology_manager_scope'] = $topology_manager_scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

