<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vke\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListNodePoolsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListNodePoolsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_scaling' => '\Volcengine\Vke\Model\AutoScalingForListNodePoolsOutput',
        'cluster_id' => 'string',
        'create_client_token' => 'string',
        'create_time' => 'string',
        'id' => 'string',
        'kubernetes_config' => '\Volcengine\Vke\Model\KubernetesConfigForListNodePoolsOutput',
        'management' => '\Volcengine\Vke\Model\ManagementForListNodePoolsOutput',
        'name' => 'string',
        'node_config' => '\Volcengine\Vke\Model\NodeConfigForListNodePoolsOutput',
        'node_statistics' => '\Volcengine\Vke\Model\NodeStatisticsForListNodePoolsOutput',
        'status' => '\Volcengine\Vke\Model\StatusForListNodePoolsOutput',
        'tags' => '\Volcengine\Vke\Model\ConvertTagForListNodePoolsOutput[]',
        'update_client_token' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_scaling' => null,
        'cluster_id' => null,
        'create_client_token' => null,
        'create_time' => null,
        'id' => null,
        'kubernetes_config' => null,
        'management' => null,
        'name' => null,
        'node_config' => null,
        'node_statistics' => null,
        'status' => null,
        'tags' => null,
        'update_client_token' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_scaling' => 'AutoScaling',
        'cluster_id' => 'ClusterId',
        'create_client_token' => 'CreateClientToken',
        'create_time' => 'CreateTime',
        'id' => 'Id',
        'kubernetes_config' => 'KubernetesConfig',
        'management' => 'Management',
        'name' => 'Name',
        'node_config' => 'NodeConfig',
        'node_statistics' => 'NodeStatistics',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_client_token' => 'UpdateClientToken',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_scaling' => 'setAutoScaling',
        'cluster_id' => 'setClusterId',
        'create_client_token' => 'setCreateClientToken',
        'create_time' => 'setCreateTime',
        'id' => 'setId',
        'kubernetes_config' => 'setKubernetesConfig',
        'management' => 'setManagement',
        'name' => 'setName',
        'node_config' => 'setNodeConfig',
        'node_statistics' => 'setNodeStatistics',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_client_token' => 'setUpdateClientToken',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_scaling' => 'getAutoScaling',
        'cluster_id' => 'getClusterId',
        'create_client_token' => 'getCreateClientToken',
        'create_time' => 'getCreateTime',
        'id' => 'getId',
        'kubernetes_config' => 'getKubernetesConfig',
        'management' => 'getManagement',
        'name' => 'getName',
        'node_config' => 'getNodeConfig',
        'node_statistics' => 'getNodeStatistics',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_client_token' => 'getUpdateClientToken',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_scaling'] = isset($data['auto_scaling']) ? $data['auto_scaling'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['create_client_token'] = isset($data['create_client_token']) ? $data['create_client_token'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['kubernetes_config'] = isset($data['kubernetes_config']) ? $data['kubernetes_config'] : null;
        $this->container['management'] = isset($data['management']) ? $data['management'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_config'] = isset($data['node_config']) ? $data['node_config'] : null;
        $this->container['node_statistics'] = isset($data['node_statistics']) ? $data['node_statistics'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_client_token'] = isset($data['update_client_token']) ? $data['update_client_token'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_scaling
     *
     * @return \Volcengine\Vke\Model\AutoScalingForListNodePoolsOutput
     */
    public function getAutoScaling()
    {
        return $this->container['auto_scaling'];
    }

    /**
     * Sets auto_scaling
     *
     * @param \Volcengine\Vke\Model\AutoScalingForListNodePoolsOutput $auto_scaling auto_scaling
     *
     * @return $this
     */
    public function setAutoScaling($auto_scaling)
    {
        $this->container['auto_scaling'] = $auto_scaling;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets create_client_token
     *
     * @return string
     */
    public function getCreateClientToken()
    {
        return $this->container['create_client_token'];
    }

    /**
     * Sets create_client_token
     *
     * @param string $create_client_token create_client_token
     *
     * @return $this
     */
    public function setCreateClientToken($create_client_token)
    {
        $this->container['create_client_token'] = $create_client_token;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kubernetes_config
     *
     * @return \Volcengine\Vke\Model\KubernetesConfigForListNodePoolsOutput
     */
    public function getKubernetesConfig()
    {
        return $this->container['kubernetes_config'];
    }

    /**
     * Sets kubernetes_config
     *
     * @param \Volcengine\Vke\Model\KubernetesConfigForListNodePoolsOutput $kubernetes_config kubernetes_config
     *
     * @return $this
     */
    public function setKubernetesConfig($kubernetes_config)
    {
        $this->container['kubernetes_config'] = $kubernetes_config;

        return $this;
    }

    /**
     * Gets management
     *
     * @return \Volcengine\Vke\Model\ManagementForListNodePoolsOutput
     */
    public function getManagement()
    {
        return $this->container['management'];
    }

    /**
     * Sets management
     *
     * @param \Volcengine\Vke\Model\ManagementForListNodePoolsOutput $management management
     *
     * @return $this
     */
    public function setManagement($management)
    {
        $this->container['management'] = $management;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_config
     *
     * @return \Volcengine\Vke\Model\NodeConfigForListNodePoolsOutput
     */
    public function getNodeConfig()
    {
        return $this->container['node_config'];
    }

    /**
     * Sets node_config
     *
     * @param \Volcengine\Vke\Model\NodeConfigForListNodePoolsOutput $node_config node_config
     *
     * @return $this
     */
    public function setNodeConfig($node_config)
    {
        $this->container['node_config'] = $node_config;

        return $this;
    }

    /**
     * Gets node_statistics
     *
     * @return \Volcengine\Vke\Model\NodeStatisticsForListNodePoolsOutput
     */
    public function getNodeStatistics()
    {
        return $this->container['node_statistics'];
    }

    /**
     * Sets node_statistics
     *
     * @param \Volcengine\Vke\Model\NodeStatisticsForListNodePoolsOutput $node_statistics node_statistics
     *
     * @return $this
     */
    public function setNodeStatistics($node_statistics)
    {
        $this->container['node_statistics'] = $node_statistics;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Vke\Model\StatusForListNodePoolsOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Vke\Model\StatusForListNodePoolsOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vke\Model\ConvertTagForListNodePoolsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vke\Model\ConvertTagForListNodePoolsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_client_token
     *
     * @return string
     */
    public function getUpdateClientToken()
    {
        return $this->container['update_client_token'];
    }

    /**
     * Sets update_client_token
     *
     * @param string $update_client_token update_client_token
     *
     * @return $this
     */
    public function setUpdateClientToken($update_client_token)
    {
        $this->container['update_client_token'] = $update_client_token;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

