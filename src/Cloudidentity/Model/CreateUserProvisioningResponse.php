<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudidentity\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateUserProvisioningResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateUserProvisioningResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deletion_strategy' => 'string',
        'description' => 'string',
        'duplication_strategy' => 'string',
        'duplication_suffix' => 'string',
        'identity_source_strategy' => 'string',
        'principal_id' => 'string',
        'principal_type' => 'string',
        'provision_status' => 'string',
        'remark' => 'string',
        'target_id' => 'string',
        'user_provisioning_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deletion_strategy' => null,
        'description' => null,
        'duplication_strategy' => null,
        'duplication_suffix' => null,
        'identity_source_strategy' => null,
        'principal_id' => null,
        'principal_type' => null,
        'provision_status' => null,
        'remark' => null,
        'target_id' => null,
        'user_provisioning_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deletion_strategy' => 'DeletionStrategy',
        'description' => 'Description',
        'duplication_strategy' => 'DuplicationStrategy',
        'duplication_suffix' => 'DuplicationSuffix',
        'identity_source_strategy' => 'IdentitySourceStrategy',
        'principal_id' => 'PrincipalId',
        'principal_type' => 'PrincipalType',
        'provision_status' => 'ProvisionStatus',
        'remark' => 'Remark',
        'target_id' => 'TargetId',
        'user_provisioning_id' => 'UserProvisioningId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deletion_strategy' => 'setDeletionStrategy',
        'description' => 'setDescription',
        'duplication_strategy' => 'setDuplicationStrategy',
        'duplication_suffix' => 'setDuplicationSuffix',
        'identity_source_strategy' => 'setIdentitySourceStrategy',
        'principal_id' => 'setPrincipalId',
        'principal_type' => 'setPrincipalType',
        'provision_status' => 'setProvisionStatus',
        'remark' => 'setRemark',
        'target_id' => 'setTargetId',
        'user_provisioning_id' => 'setUserProvisioningId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deletion_strategy' => 'getDeletionStrategy',
        'description' => 'getDescription',
        'duplication_strategy' => 'getDuplicationStrategy',
        'duplication_suffix' => 'getDuplicationSuffix',
        'identity_source_strategy' => 'getIdentitySourceStrategy',
        'principal_id' => 'getPrincipalId',
        'principal_type' => 'getPrincipalType',
        'provision_status' => 'getProvisionStatus',
        'remark' => 'getRemark',
        'target_id' => 'getTargetId',
        'user_provisioning_id' => 'getUserProvisioningId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deletion_strategy'] = isset($data['deletion_strategy']) ? $data['deletion_strategy'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['duplication_strategy'] = isset($data['duplication_strategy']) ? $data['duplication_strategy'] : null;
        $this->container['duplication_suffix'] = isset($data['duplication_suffix']) ? $data['duplication_suffix'] : null;
        $this->container['identity_source_strategy'] = isset($data['identity_source_strategy']) ? $data['identity_source_strategy'] : null;
        $this->container['principal_id'] = isset($data['principal_id']) ? $data['principal_id'] : null;
        $this->container['principal_type'] = isset($data['principal_type']) ? $data['principal_type'] : null;
        $this->container['provision_status'] = isset($data['provision_status']) ? $data['provision_status'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['target_id'] = isset($data['target_id']) ? $data['target_id'] : null;
        $this->container['user_provisioning_id'] = isset($data['user_provisioning_id']) ? $data['user_provisioning_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deletion_strategy
     *
     * @return string
     */
    public function getDeletionStrategy()
    {
        return $this->container['deletion_strategy'];
    }

    /**
     * Sets deletion_strategy
     *
     * @param string $deletion_strategy deletion_strategy
     *
     * @return $this
     */
    public function setDeletionStrategy($deletion_strategy)
    {
        $this->container['deletion_strategy'] = $deletion_strategy;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets duplication_strategy
     *
     * @return string
     */
    public function getDuplicationStrategy()
    {
        return $this->container['duplication_strategy'];
    }

    /**
     * Sets duplication_strategy
     *
     * @param string $duplication_strategy duplication_strategy
     *
     * @return $this
     */
    public function setDuplicationStrategy($duplication_strategy)
    {
        $this->container['duplication_strategy'] = $duplication_strategy;

        return $this;
    }

    /**
     * Gets duplication_suffix
     *
     * @return string
     */
    public function getDuplicationSuffix()
    {
        return $this->container['duplication_suffix'];
    }

    /**
     * Sets duplication_suffix
     *
     * @param string $duplication_suffix duplication_suffix
     *
     * @return $this
     */
    public function setDuplicationSuffix($duplication_suffix)
    {
        $this->container['duplication_suffix'] = $duplication_suffix;

        return $this;
    }

    /**
     * Gets identity_source_strategy
     *
     * @return string
     */
    public function getIdentitySourceStrategy()
    {
        return $this->container['identity_source_strategy'];
    }

    /**
     * Sets identity_source_strategy
     *
     * @param string $identity_source_strategy identity_source_strategy
     *
     * @return $this
     */
    public function setIdentitySourceStrategy($identity_source_strategy)
    {
        $this->container['identity_source_strategy'] = $identity_source_strategy;

        return $this;
    }

    /**
     * Gets principal_id
     *
     * @return string
     */
    public function getPrincipalId()
    {
        return $this->container['principal_id'];
    }

    /**
     * Sets principal_id
     *
     * @param string $principal_id principal_id
     *
     * @return $this
     */
    public function setPrincipalId($principal_id)
    {
        $this->container['principal_id'] = $principal_id;

        return $this;
    }

    /**
     * Gets principal_type
     *
     * @return string
     */
    public function getPrincipalType()
    {
        return $this->container['principal_type'];
    }

    /**
     * Sets principal_type
     *
     * @param string $principal_type principal_type
     *
     * @return $this
     */
    public function setPrincipalType($principal_type)
    {
        $this->container['principal_type'] = $principal_type;

        return $this;
    }

    /**
     * Gets provision_status
     *
     * @return string
     */
    public function getProvisionStatus()
    {
        return $this->container['provision_status'];
    }

    /**
     * Sets provision_status
     *
     * @param string $provision_status provision_status
     *
     * @return $this
     */
    public function setProvisionStatus($provision_status)
    {
        $this->container['provision_status'] = $provision_status;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets target_id
     *
     * @return string
     */
    public function getTargetId()
    {
        return $this->container['target_id'];
    }

    /**
     * Sets target_id
     *
     * @param string $target_id target_id
     *
     * @return $this
     */
    public function setTargetId($target_id)
    {
        $this->container['target_id'] = $target_id;

        return $this;
    }

    /**
     * Gets user_provisioning_id
     *
     * @return string
     */
    public function getUserProvisioningId()
    {
        return $this->container['user_provisioning_id'];
    }

    /**
     * Sets user_provisioning_id
     *
     * @param string $user_provisioning_id user_provisioning_id
     *
     * @return $this
     */
    public function setUserProvisioningId($user_provisioning_id)
    {
        $this->container['user_provisioning_id'] = $user_provisioning_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

