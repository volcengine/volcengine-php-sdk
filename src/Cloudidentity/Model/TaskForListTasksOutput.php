<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudidentity\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TaskForListTasksOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskForListTasksOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_time' => 'string',
        'permission_set_id' => 'string',
        'permission_set_name' => 'string',
        'principal_id' => 'string',
        'principal_name' => 'string',
        'principal_type' => 'string',
        'status' => 'string',
        'target_id' => 'string',
        'target_name' => 'string',
        'task_id' => 'string',
        'task_type' => 'string',
        'updated_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_time' => null,
        'permission_set_id' => null,
        'permission_set_name' => null,
        'principal_id' => null,
        'principal_name' => null,
        'principal_type' => null,
        'status' => null,
        'target_id' => null,
        'target_name' => null,
        'task_id' => null,
        'task_type' => null,
        'updated_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_time' => 'CreatedTime',
        'permission_set_id' => 'PermissionSetId',
        'permission_set_name' => 'PermissionSetName',
        'principal_id' => 'PrincipalId',
        'principal_name' => 'PrincipalName',
        'principal_type' => 'PrincipalType',
        'status' => 'Status',
        'target_id' => 'TargetId',
        'target_name' => 'TargetName',
        'task_id' => 'TaskId',
        'task_type' => 'TaskType',
        'updated_time' => 'UpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_time' => 'setCreatedTime',
        'permission_set_id' => 'setPermissionSetId',
        'permission_set_name' => 'setPermissionSetName',
        'principal_id' => 'setPrincipalId',
        'principal_name' => 'setPrincipalName',
        'principal_type' => 'setPrincipalType',
        'status' => 'setStatus',
        'target_id' => 'setTargetId',
        'target_name' => 'setTargetName',
        'task_id' => 'setTaskId',
        'task_type' => 'setTaskType',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_time' => 'getCreatedTime',
        'permission_set_id' => 'getPermissionSetId',
        'permission_set_name' => 'getPermissionSetName',
        'principal_id' => 'getPrincipalId',
        'principal_name' => 'getPrincipalName',
        'principal_type' => 'getPrincipalType',
        'status' => 'getStatus',
        'target_id' => 'getTargetId',
        'target_name' => 'getTargetName',
        'task_id' => 'getTaskId',
        'task_type' => 'getTaskType',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['permission_set_id'] = isset($data['permission_set_id']) ? $data['permission_set_id'] : null;
        $this->container['permission_set_name'] = isset($data['permission_set_name']) ? $data['permission_set_name'] : null;
        $this->container['principal_id'] = isset($data['principal_id']) ? $data['principal_id'] : null;
        $this->container['principal_name'] = isset($data['principal_name']) ? $data['principal_name'] : null;
        $this->container['principal_type'] = isset($data['principal_type']) ? $data['principal_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['target_id'] = isset($data['target_id']) ? $data['target_id'] : null;
        $this->container['target_name'] = isset($data['target_name']) ? $data['target_name'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_type'] = isset($data['task_type']) ? $data['task_type'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets permission_set_id
     *
     * @return string
     */
    public function getPermissionSetId()
    {
        return $this->container['permission_set_id'];
    }

    /**
     * Sets permission_set_id
     *
     * @param string $permission_set_id permission_set_id
     *
     * @return $this
     */
    public function setPermissionSetId($permission_set_id)
    {
        $this->container['permission_set_id'] = $permission_set_id;

        return $this;
    }

    /**
     * Gets permission_set_name
     *
     * @return string
     */
    public function getPermissionSetName()
    {
        return $this->container['permission_set_name'];
    }

    /**
     * Sets permission_set_name
     *
     * @param string $permission_set_name permission_set_name
     *
     * @return $this
     */
    public function setPermissionSetName($permission_set_name)
    {
        $this->container['permission_set_name'] = $permission_set_name;

        return $this;
    }

    /**
     * Gets principal_id
     *
     * @return string
     */
    public function getPrincipalId()
    {
        return $this->container['principal_id'];
    }

    /**
     * Sets principal_id
     *
     * @param string $principal_id principal_id
     *
     * @return $this
     */
    public function setPrincipalId($principal_id)
    {
        $this->container['principal_id'] = $principal_id;

        return $this;
    }

    /**
     * Gets principal_name
     *
     * @return string
     */
    public function getPrincipalName()
    {
        return $this->container['principal_name'];
    }

    /**
     * Sets principal_name
     *
     * @param string $principal_name principal_name
     *
     * @return $this
     */
    public function setPrincipalName($principal_name)
    {
        $this->container['principal_name'] = $principal_name;

        return $this;
    }

    /**
     * Gets principal_type
     *
     * @return string
     */
    public function getPrincipalType()
    {
        return $this->container['principal_type'];
    }

    /**
     * Sets principal_type
     *
     * @param string $principal_type principal_type
     *
     * @return $this
     */
    public function setPrincipalType($principal_type)
    {
        $this->container['principal_type'] = $principal_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets target_id
     *
     * @return string
     */
    public function getTargetId()
    {
        return $this->container['target_id'];
    }

    /**
     * Sets target_id
     *
     * @param string $target_id target_id
     *
     * @return $this
     */
    public function setTargetId($target_id)
    {
        $this->container['target_id'] = $target_id;

        return $this;
    }

    /**
     * Gets target_name
     *
     * @return string
     */
    public function getTargetName()
    {
        return $this->container['target_name'];
    }

    /**
     * Sets target_name
     *
     * @param string $target_name target_name
     *
     * @return $this
     */
    public function setTargetName($target_name)
    {
        $this->container['target_name'] = $target_name;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return string
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param string $task_type task_type
     *
     * @return $this
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return string
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param string $updated_time updated_time
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

