<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Speechsaasprod20250521\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListMegaTTSTrainStatusRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListMegaTTSTrainStatusRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expire_time_end' => 'int',
        'expire_time_start' => 'int',
        'order_time_end' => 'int',
        'order_time_start' => 'int',
        'project_name' => 'string',
        'speaker_ids' => 'string[]',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expire_time_end' => 'int64',
        'expire_time_start' => 'int64',
        'order_time_end' => 'int64',
        'order_time_start' => 'int64',
        'project_name' => null,
        'speaker_ids' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expire_time_end' => 'ExpireTimeEnd',
        'expire_time_start' => 'ExpireTimeStart',
        'order_time_end' => 'OrderTimeEnd',
        'order_time_start' => 'OrderTimeStart',
        'project_name' => 'ProjectName',
        'speaker_ids' => 'SpeakerIDs',
        'state' => 'State'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expire_time_end' => 'setExpireTimeEnd',
        'expire_time_start' => 'setExpireTimeStart',
        'order_time_end' => 'setOrderTimeEnd',
        'order_time_start' => 'setOrderTimeStart',
        'project_name' => 'setProjectName',
        'speaker_ids' => 'setSpeakerIds',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expire_time_end' => 'getExpireTimeEnd',
        'expire_time_start' => 'getExpireTimeStart',
        'order_time_end' => 'getOrderTimeEnd',
        'order_time_start' => 'getOrderTimeStart',
        'project_name' => 'getProjectName',
        'speaker_ids' => 'getSpeakerIds',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expire_time_end'] = isset($data['expire_time_end']) ? $data['expire_time_end'] : null;
        $this->container['expire_time_start'] = isset($data['expire_time_start']) ? $data['expire_time_start'] : null;
        $this->container['order_time_end'] = isset($data['order_time_end']) ? $data['order_time_end'] : null;
        $this->container['order_time_start'] = isset($data['order_time_start']) ? $data['order_time_start'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['speaker_ids'] = isset($data['speaker_ids']) ? $data['speaker_ids'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['project_name'] === null) {
            $invalidProperties[] = "'project_name' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expire_time_end
     *
     * @return int
     */
    public function getExpireTimeEnd()
    {
        return $this->container['expire_time_end'];
    }

    /**
     * Sets expire_time_end
     *
     * @param int $expire_time_end expire_time_end
     *
     * @return $this
     */
    public function setExpireTimeEnd($expire_time_end)
    {
        $this->container['expire_time_end'] = $expire_time_end;

        return $this;
    }

    /**
     * Gets expire_time_start
     *
     * @return int
     */
    public function getExpireTimeStart()
    {
        return $this->container['expire_time_start'];
    }

    /**
     * Sets expire_time_start
     *
     * @param int $expire_time_start expire_time_start
     *
     * @return $this
     */
    public function setExpireTimeStart($expire_time_start)
    {
        $this->container['expire_time_start'] = $expire_time_start;

        return $this;
    }

    /**
     * Gets order_time_end
     *
     * @return int
     */
    public function getOrderTimeEnd()
    {
        return $this->container['order_time_end'];
    }

    /**
     * Sets order_time_end
     *
     * @param int $order_time_end order_time_end
     *
     * @return $this
     */
    public function setOrderTimeEnd($order_time_end)
    {
        $this->container['order_time_end'] = $order_time_end;

        return $this;
    }

    /**
     * Gets order_time_start
     *
     * @return int
     */
    public function getOrderTimeStart()
    {
        return $this->container['order_time_start'];
    }

    /**
     * Sets order_time_start
     *
     * @param int $order_time_start order_time_start
     *
     * @return $this
     */
    public function setOrderTimeStart($order_time_start)
    {
        $this->container['order_time_start'] = $order_time_start;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets speaker_ids
     *
     * @return string[]
     */
    public function getSpeakerIds()
    {
        return $this->container['speaker_ids'];
    }

    /**
     * Sets speaker_ids
     *
     * @param string[] $speaker_ids speaker_ids
     *
     * @return $this
     */
    public function setSpeakerIds($speaker_ids)
    {
        $this->container['speaker_ids'] = $speaker_ids;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

