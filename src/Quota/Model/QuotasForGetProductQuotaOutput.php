<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Quota\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class QuotasForGetProductQuotaOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuotasForGetProductQuotaOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applicable_type' => 'string',
        'applicable_value' => 'string',
        'description' => 'string',
        'dimensions' => '\Volcengine\Quota\Model\DimensionForGetProductQuotaOutput[]',
        'provider_code' => 'string',
        'quota_code' => 'string',
        'quota_type' => 'string',
        'total_quota' => 'double',
        'total_usage' => '\Volcengine\Quota\Model\TotalUsageForGetProductQuotaOutput',
        'trn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applicable_type' => null,
        'applicable_value' => null,
        'description' => null,
        'dimensions' => null,
        'provider_code' => null,
        'quota_code' => null,
        'quota_type' => null,
        'total_quota' => 'double',
        'total_usage' => null,
        'trn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicable_type' => 'ApplicableType',
        'applicable_value' => 'ApplicableValue',
        'description' => 'Description',
        'dimensions' => 'Dimensions',
        'provider_code' => 'ProviderCode',
        'quota_code' => 'QuotaCode',
        'quota_type' => 'QuotaType',
        'total_quota' => 'TotalQuota',
        'total_usage' => 'TotalUsage',
        'trn' => 'Trn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicable_type' => 'setApplicableType',
        'applicable_value' => 'setApplicableValue',
        'description' => 'setDescription',
        'dimensions' => 'setDimensions',
        'provider_code' => 'setProviderCode',
        'quota_code' => 'setQuotaCode',
        'quota_type' => 'setQuotaType',
        'total_quota' => 'setTotalQuota',
        'total_usage' => 'setTotalUsage',
        'trn' => 'setTrn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicable_type' => 'getApplicableType',
        'applicable_value' => 'getApplicableValue',
        'description' => 'getDescription',
        'dimensions' => 'getDimensions',
        'provider_code' => 'getProviderCode',
        'quota_code' => 'getQuotaCode',
        'quota_type' => 'getQuotaType',
        'total_quota' => 'getTotalQuota',
        'total_usage' => 'getTotalUsage',
        'trn' => 'getTrn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applicable_type'] = isset($data['applicable_type']) ? $data['applicable_type'] : null;
        $this->container['applicable_value'] = isset($data['applicable_value']) ? $data['applicable_value'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['quota_code'] = isset($data['quota_code']) ? $data['quota_code'] : null;
        $this->container['quota_type'] = isset($data['quota_type']) ? $data['quota_type'] : null;
        $this->container['total_quota'] = isset($data['total_quota']) ? $data['total_quota'] : null;
        $this->container['total_usage'] = isset($data['total_usage']) ? $data['total_usage'] : null;
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicable_type
     *
     * @return string
     */
    public function getApplicableType()
    {
        return $this->container['applicable_type'];
    }

    /**
     * Sets applicable_type
     *
     * @param string $applicable_type applicable_type
     *
     * @return $this
     */
    public function setApplicableType($applicable_type)
    {
        $this->container['applicable_type'] = $applicable_type;

        return $this;
    }

    /**
     * Gets applicable_value
     *
     * @return string
     */
    public function getApplicableValue()
    {
        return $this->container['applicable_value'];
    }

    /**
     * Sets applicable_value
     *
     * @param string $applicable_value applicable_value
     *
     * @return $this
     */
    public function setApplicableValue($applicable_value)
    {
        $this->container['applicable_value'] = $applicable_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Volcengine\Quota\Model\DimensionForGetProductQuotaOutput[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Volcengine\Quota\Model\DimensionForGetProductQuotaOutput[] $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets quota_code
     *
     * @return string
     */
    public function getQuotaCode()
    {
        return $this->container['quota_code'];
    }

    /**
     * Sets quota_code
     *
     * @param string $quota_code quota_code
     *
     * @return $this
     */
    public function setQuotaCode($quota_code)
    {
        $this->container['quota_code'] = $quota_code;

        return $this;
    }

    /**
     * Gets quota_type
     *
     * @return string
     */
    public function getQuotaType()
    {
        return $this->container['quota_type'];
    }

    /**
     * Sets quota_type
     *
     * @param string $quota_type quota_type
     *
     * @return $this
     */
    public function setQuotaType($quota_type)
    {
        $this->container['quota_type'] = $quota_type;

        return $this;
    }

    /**
     * Gets total_quota
     *
     * @return double
     */
    public function getTotalQuota()
    {
        return $this->container['total_quota'];
    }

    /**
     * Sets total_quota
     *
     * @param double $total_quota total_quota
     *
     * @return $this
     */
    public function setTotalQuota($total_quota)
    {
        $this->container['total_quota'] = $total_quota;

        return $this;
    }

    /**
     * Gets total_usage
     *
     * @return \Volcengine\Quota\Model\TotalUsageForGetProductQuotaOutput
     */
    public function getTotalUsage()
    {
        return $this->container['total_usage'];
    }

    /**
     * Sets total_usage
     *
     * @param \Volcengine\Quota\Model\TotalUsageForGetProductQuotaOutput $total_usage total_usage
     *
     * @return $this
     */
    public function setTotalUsage($total_usage)
    {
        $this->container['total_usage'] = $total_usage;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn trn
     *
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

