<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Quota\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ApplicationForGetQuotaApplicationOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationForGetQuotaApplicationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'application_id' => 'string',
        'apply_time' => 'string',
        'approve_value' => 'double',
        'audit_reason' => 'string',
        'desire_value' => 'double',
        'dimensions' => '\Volcengine\Quota\Model\DimensionForGetQuotaApplicationOutput[]',
        'effective_time' => 'string',
        'id' => 'int',
        'provider_code' => 'string',
        'provider_name' => 'string',
        'quota_code' => 'string',
        'quota_type' => 'string',
        'quota_unit' => 'string',
        'reason' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'application_id' => null,
        'apply_time' => null,
        'approve_value' => 'double',
        'audit_reason' => null,
        'desire_value' => 'double',
        'dimensions' => null,
        'effective_time' => null,
        'id' => 'int64',
        'provider_code' => null,
        'provider_name' => null,
        'quota_code' => null,
        'quota_type' => null,
        'quota_unit' => null,
        'reason' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_id' => 'ApplicationId',
        'apply_time' => 'ApplyTime',
        'approve_value' => 'ApproveValue',
        'audit_reason' => 'AuditReason',
        'desire_value' => 'DesireValue',
        'dimensions' => 'Dimensions',
        'effective_time' => 'EffectiveTime',
        'id' => 'ID',
        'provider_code' => 'ProviderCode',
        'provider_name' => 'ProviderName',
        'quota_code' => 'QuotaCode',
        'quota_type' => 'QuotaType',
        'quota_unit' => 'QuotaUnit',
        'reason' => 'Reason',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_id' => 'setApplicationId',
        'apply_time' => 'setApplyTime',
        'approve_value' => 'setApproveValue',
        'audit_reason' => 'setAuditReason',
        'desire_value' => 'setDesireValue',
        'dimensions' => 'setDimensions',
        'effective_time' => 'setEffectiveTime',
        'id' => 'setId',
        'provider_code' => 'setProviderCode',
        'provider_name' => 'setProviderName',
        'quota_code' => 'setQuotaCode',
        'quota_type' => 'setQuotaType',
        'quota_unit' => 'setQuotaUnit',
        'reason' => 'setReason',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_id' => 'getApplicationId',
        'apply_time' => 'getApplyTime',
        'approve_value' => 'getApproveValue',
        'audit_reason' => 'getAuditReason',
        'desire_value' => 'getDesireValue',
        'dimensions' => 'getDimensions',
        'effective_time' => 'getEffectiveTime',
        'id' => 'getId',
        'provider_code' => 'getProviderCode',
        'provider_name' => 'getProviderName',
        'quota_code' => 'getQuotaCode',
        'quota_type' => 'getQuotaType',
        'quota_unit' => 'getQuotaUnit',
        'reason' => 'getReason',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
        $this->container['apply_time'] = isset($data['apply_time']) ? $data['apply_time'] : null;
        $this->container['approve_value'] = isset($data['approve_value']) ? $data['approve_value'] : null;
        $this->container['audit_reason'] = isset($data['audit_reason']) ? $data['audit_reason'] : null;
        $this->container['desire_value'] = isset($data['desire_value']) ? $data['desire_value'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['effective_time'] = isset($data['effective_time']) ? $data['effective_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['quota_code'] = isset($data['quota_code']) ? $data['quota_code'] : null;
        $this->container['quota_type'] = isset($data['quota_type']) ? $data['quota_type'] : null;
        $this->container['quota_unit'] = isset($data['quota_unit']) ? $data['quota_unit'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_id
     *
     * @return string
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string $application_id application_id
     *
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets apply_time
     *
     * @return string
     */
    public function getApplyTime()
    {
        return $this->container['apply_time'];
    }

    /**
     * Sets apply_time
     *
     * @param string $apply_time apply_time
     *
     * @return $this
     */
    public function setApplyTime($apply_time)
    {
        $this->container['apply_time'] = $apply_time;

        return $this;
    }

    /**
     * Gets approve_value
     *
     * @return double
     */
    public function getApproveValue()
    {
        return $this->container['approve_value'];
    }

    /**
     * Sets approve_value
     *
     * @param double $approve_value approve_value
     *
     * @return $this
     */
    public function setApproveValue($approve_value)
    {
        $this->container['approve_value'] = $approve_value;

        return $this;
    }

    /**
     * Gets audit_reason
     *
     * @return string
     */
    public function getAuditReason()
    {
        return $this->container['audit_reason'];
    }

    /**
     * Sets audit_reason
     *
     * @param string $audit_reason audit_reason
     *
     * @return $this
     */
    public function setAuditReason($audit_reason)
    {
        $this->container['audit_reason'] = $audit_reason;

        return $this;
    }

    /**
     * Gets desire_value
     *
     * @return double
     */
    public function getDesireValue()
    {
        return $this->container['desire_value'];
    }

    /**
     * Sets desire_value
     *
     * @param double $desire_value desire_value
     *
     * @return $this
     */
    public function setDesireValue($desire_value)
    {
        $this->container['desire_value'] = $desire_value;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Volcengine\Quota\Model\DimensionForGetQuotaApplicationOutput[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Volcengine\Quota\Model\DimensionForGetQuotaApplicationOutput[] $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets effective_time
     *
     * @return string
     */
    public function getEffectiveTime()
    {
        return $this->container['effective_time'];
    }

    /**
     * Sets effective_time
     *
     * @param string $effective_time effective_time
     *
     * @return $this
     */
    public function setEffectiveTime($effective_time)
    {
        $this->container['effective_time'] = $effective_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string $provider_name provider_name
     *
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets quota_code
     *
     * @return string
     */
    public function getQuotaCode()
    {
        return $this->container['quota_code'];
    }

    /**
     * Sets quota_code
     *
     * @param string $quota_code quota_code
     *
     * @return $this
     */
    public function setQuotaCode($quota_code)
    {
        $this->container['quota_code'] = $quota_code;

        return $this;
    }

    /**
     * Gets quota_type
     *
     * @return string
     */
    public function getQuotaType()
    {
        return $this->container['quota_type'];
    }

    /**
     * Sets quota_type
     *
     * @param string $quota_type quota_type
     *
     * @return $this
     */
    public function setQuotaType($quota_type)
    {
        $this->container['quota_type'] = $quota_type;

        return $this;
    }

    /**
     * Gets quota_unit
     *
     * @return string
     */
    public function getQuotaUnit()
    {
        return $this->container['quota_unit'];
    }

    /**
     * Sets quota_unit
     *
     * @param string $quota_unit quota_unit
     *
     * @return $this
     */
    public function setQuotaUnit($quota_unit)
    {
        $this->container['quota_unit'] = $quota_unit;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

