<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Quota\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListQuotaAlarmRulesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListQuotaAlarmRulesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dimensions' => '\Volcengine\Quota\Model\DimensionForListQuotaAlarmRulesInput[]',
        'max_results' => 'int',
        'next_token' => 'string',
        'provider_code' => 'string',
        'quota_code' => 'string',
        'quota_type' => 'string',
        'rule_name' => 'string',
        'rule_name_search_key_word' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dimensions' => null,
        'max_results' => 'int32',
        'next_token' => null,
        'provider_code' => null,
        'quota_code' => null,
        'quota_type' => null,
        'rule_name' => null,
        'rule_name_search_key_word' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dimensions' => 'Dimensions',
        'max_results' => 'MaxResults',
        'next_token' => 'NextToken',
        'provider_code' => 'ProviderCode',
        'quota_code' => 'QuotaCode',
        'quota_type' => 'QuotaType',
        'rule_name' => 'RuleName',
        'rule_name_search_key_word' => 'RuleNameSearchKeyWord'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dimensions' => 'setDimensions',
        'max_results' => 'setMaxResults',
        'next_token' => 'setNextToken',
        'provider_code' => 'setProviderCode',
        'quota_code' => 'setQuotaCode',
        'quota_type' => 'setQuotaType',
        'rule_name' => 'setRuleName',
        'rule_name_search_key_word' => 'setRuleNameSearchKeyWord'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dimensions' => 'getDimensions',
        'max_results' => 'getMaxResults',
        'next_token' => 'getNextToken',
        'provider_code' => 'getProviderCode',
        'quota_code' => 'getQuotaCode',
        'quota_type' => 'getQuotaType',
        'rule_name' => 'getRuleName',
        'rule_name_search_key_word' => 'getRuleNameSearchKeyWord'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['quota_code'] = isset($data['quota_code']) ? $data['quota_code'] : null;
        $this->container['quota_type'] = isset($data['quota_type']) ? $data['quota_type'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
        $this->container['rule_name_search_key_word'] = isset($data['rule_name_search_key_word']) ? $data['rule_name_search_key_word'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dimensions
     *
     * @return \Volcengine\Quota\Model\DimensionForListQuotaAlarmRulesInput[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Volcengine\Quota\Model\DimensionForListQuotaAlarmRulesInput[] $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets quota_code
     *
     * @return string
     */
    public function getQuotaCode()
    {
        return $this->container['quota_code'];
    }

    /**
     * Sets quota_code
     *
     * @param string $quota_code quota_code
     *
     * @return $this
     */
    public function setQuotaCode($quota_code)
    {
        $this->container['quota_code'] = $quota_code;

        return $this;
    }

    /**
     * Gets quota_type
     *
     * @return string
     */
    public function getQuotaType()
    {
        return $this->container['quota_type'];
    }

    /**
     * Sets quota_type
     *
     * @param string $quota_type quota_type
     *
     * @return $this
     */
    public function setQuotaType($quota_type)
    {
        $this->container['quota_type'] = $quota_type;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets rule_name_search_key_word
     *
     * @return string
     */
    public function getRuleNameSearchKeyWord()
    {
        return $this->container['rule_name_search_key_word'];
    }

    /**
     * Sets rule_name_search_key_word
     *
     * @param string $rule_name_search_key_word rule_name_search_key_word
     *
     * @return $this
     */
    public function setRuleNameSearchKeyWord($rule_name_search_key_word)
    {
        $this->container['rule_name_search_key_word'] = $rule_name_search_key_word;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

