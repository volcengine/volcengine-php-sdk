<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Quota\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AlarmRecordListForListAlarmHistoryOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AlarmRecordListForListAlarmHistoryOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_time' => 'string',
        'alarm_type' => 'string',
        'alarm_value' => 'string',
        'dimensions' => 'string',
        'metric_unit' => 'string',
        'product_name' => 'string',
        'provider_code' => 'string',
        'quota_code' => 'string',
        'quota_type' => 'string',
        'rule_id' => 'string',
        'rule_name' => 'string',
        'send_message_status' => 'int',
        'threshold' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_time' => null,
        'alarm_type' => null,
        'alarm_value' => null,
        'dimensions' => null,
        'metric_unit' => null,
        'product_name' => null,
        'provider_code' => null,
        'quota_code' => null,
        'quota_type' => null,
        'rule_id' => null,
        'rule_name' => null,
        'send_message_status' => 'int32',
        'threshold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_time' => 'AlarmTime',
        'alarm_type' => 'AlarmType',
        'alarm_value' => 'AlarmValue',
        'dimensions' => 'Dimensions',
        'metric_unit' => 'MetricUnit',
        'product_name' => 'ProductName',
        'provider_code' => 'ProviderCode',
        'quota_code' => 'QuotaCode',
        'quota_type' => 'QuotaType',
        'rule_id' => 'RuleID',
        'rule_name' => 'RuleName',
        'send_message_status' => 'SendMessageStatus',
        'threshold' => 'Threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_time' => 'setAlarmTime',
        'alarm_type' => 'setAlarmType',
        'alarm_value' => 'setAlarmValue',
        'dimensions' => 'setDimensions',
        'metric_unit' => 'setMetricUnit',
        'product_name' => 'setProductName',
        'provider_code' => 'setProviderCode',
        'quota_code' => 'setQuotaCode',
        'quota_type' => 'setQuotaType',
        'rule_id' => 'setRuleId',
        'rule_name' => 'setRuleName',
        'send_message_status' => 'setSendMessageStatus',
        'threshold' => 'setThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_time' => 'getAlarmTime',
        'alarm_type' => 'getAlarmType',
        'alarm_value' => 'getAlarmValue',
        'dimensions' => 'getDimensions',
        'metric_unit' => 'getMetricUnit',
        'product_name' => 'getProductName',
        'provider_code' => 'getProviderCode',
        'quota_code' => 'getQuotaCode',
        'quota_type' => 'getQuotaType',
        'rule_id' => 'getRuleId',
        'rule_name' => 'getRuleName',
        'send_message_status' => 'getSendMessageStatus',
        'threshold' => 'getThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_time'] = isset($data['alarm_time']) ? $data['alarm_time'] : null;
        $this->container['alarm_type'] = isset($data['alarm_type']) ? $data['alarm_type'] : null;
        $this->container['alarm_value'] = isset($data['alarm_value']) ? $data['alarm_value'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['metric_unit'] = isset($data['metric_unit']) ? $data['metric_unit'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['quota_code'] = isset($data['quota_code']) ? $data['quota_code'] : null;
        $this->container['quota_type'] = isset($data['quota_type']) ? $data['quota_type'] : null;
        $this->container['rule_id'] = isset($data['rule_id']) ? $data['rule_id'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
        $this->container['send_message_status'] = isset($data['send_message_status']) ? $data['send_message_status'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_time
     *
     * @return string
     */
    public function getAlarmTime()
    {
        return $this->container['alarm_time'];
    }

    /**
     * Sets alarm_time
     *
     * @param string $alarm_time alarm_time
     *
     * @return $this
     */
    public function setAlarmTime($alarm_time)
    {
        $this->container['alarm_time'] = $alarm_time;

        return $this;
    }

    /**
     * Gets alarm_type
     *
     * @return string
     */
    public function getAlarmType()
    {
        return $this->container['alarm_type'];
    }

    /**
     * Sets alarm_type
     *
     * @param string $alarm_type alarm_type
     *
     * @return $this
     */
    public function setAlarmType($alarm_type)
    {
        $this->container['alarm_type'] = $alarm_type;

        return $this;
    }

    /**
     * Gets alarm_value
     *
     * @return string
     */
    public function getAlarmValue()
    {
        return $this->container['alarm_value'];
    }

    /**
     * Sets alarm_value
     *
     * @param string $alarm_value alarm_value
     *
     * @return $this
     */
    public function setAlarmValue($alarm_value)
    {
        $this->container['alarm_value'] = $alarm_value;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return string
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param string $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets metric_unit
     *
     * @return string
     */
    public function getMetricUnit()
    {
        return $this->container['metric_unit'];
    }

    /**
     * Sets metric_unit
     *
     * @param string $metric_unit metric_unit
     *
     * @return $this
     */
    public function setMetricUnit($metric_unit)
    {
        $this->container['metric_unit'] = $metric_unit;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets quota_code
     *
     * @return string
     */
    public function getQuotaCode()
    {
        return $this->container['quota_code'];
    }

    /**
     * Sets quota_code
     *
     * @param string $quota_code quota_code
     *
     * @return $this
     */
    public function setQuotaCode($quota_code)
    {
        $this->container['quota_code'] = $quota_code;

        return $this;
    }

    /**
     * Gets quota_type
     *
     * @return string
     */
    public function getQuotaType()
    {
        return $this->container['quota_type'];
    }

    /**
     * Sets quota_type
     *
     * @param string $quota_type quota_type
     *
     * @return $this
     */
    public function setQuotaType($quota_type)
    {
        $this->container['quota_type'] = $quota_type;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string $rule_id rule_id
     *
     * @return $this
     */
    public function setRuleId($rule_id)
    {
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets send_message_status
     *
     * @return int
     */
    public function getSendMessageStatus()
    {
        return $this->container['send_message_status'];
    }

    /**
     * Sets send_message_status
     *
     * @param int $send_message_status send_message_status
     *
     * @return $this
     */
    public function setSendMessageStatus($send_message_status)
    {
        $this->container['send_message_status'] = $send_message_status;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return string
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param string $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

