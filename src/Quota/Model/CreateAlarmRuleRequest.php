<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Quota\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateAlarmRuleRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateAlarmRuleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alarm_type' => 'string',
        'description' => 'string',
        'dimensions' => '\Volcengine\Quota\Model\DimensionForCreateAlarmRuleInput[]',
        'metric_unit' => 'string',
        'provider_code' => 'string',
        'quota_code' => 'string',
        'rule_name' => 'string',
        'silence_time' => 'int',
        'threshold' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alarm_type' => null,
        'description' => null,
        'dimensions' => null,
        'metric_unit' => null,
        'provider_code' => null,
        'quota_code' => null,
        'rule_name' => null,
        'silence_time' => 'int32',
        'threshold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alarm_type' => 'AlarmType',
        'description' => 'Description',
        'dimensions' => 'Dimensions',
        'metric_unit' => 'MetricUnit',
        'provider_code' => 'ProviderCode',
        'quota_code' => 'QuotaCode',
        'rule_name' => 'RuleName',
        'silence_time' => 'SilenceTime',
        'threshold' => 'Threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alarm_type' => 'setAlarmType',
        'description' => 'setDescription',
        'dimensions' => 'setDimensions',
        'metric_unit' => 'setMetricUnit',
        'provider_code' => 'setProviderCode',
        'quota_code' => 'setQuotaCode',
        'rule_name' => 'setRuleName',
        'silence_time' => 'setSilenceTime',
        'threshold' => 'setThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alarm_type' => 'getAlarmType',
        'description' => 'getDescription',
        'dimensions' => 'getDimensions',
        'metric_unit' => 'getMetricUnit',
        'provider_code' => 'getProviderCode',
        'quota_code' => 'getQuotaCode',
        'rule_name' => 'getRuleName',
        'silence_time' => 'getSilenceTime',
        'threshold' => 'getThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alarm_type'] = isset($data['alarm_type']) ? $data['alarm_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['metric_unit'] = isset($data['metric_unit']) ? $data['metric_unit'] : null;
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['quota_code'] = isset($data['quota_code']) ? $data['quota_code'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
        $this->container['silence_time'] = isset($data['silence_time']) ? $data['silence_time'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['alarm_type'] === null) {
            $invalidProperties[] = "'alarm_type' can't be null";
        }
        if ($this->container['metric_unit'] === null) {
            $invalidProperties[] = "'metric_unit' can't be null";
        }
        if ($this->container['provider_code'] === null) {
            $invalidProperties[] = "'provider_code' can't be null";
        }
        if ($this->container['quota_code'] === null) {
            $invalidProperties[] = "'quota_code' can't be null";
        }
        if ($this->container['rule_name'] === null) {
            $invalidProperties[] = "'rule_name' can't be null";
        }
        if ($this->container['threshold'] === null) {
            $invalidProperties[] = "'threshold' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alarm_type
     *
     * @return string
     */
    public function getAlarmType()
    {
        return $this->container['alarm_type'];
    }

    /**
     * Sets alarm_type
     *
     * @param string $alarm_type alarm_type
     *
     * @return $this
     */
    public function setAlarmType($alarm_type)
    {
        $this->container['alarm_type'] = $alarm_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Volcengine\Quota\Model\DimensionForCreateAlarmRuleInput[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Volcengine\Quota\Model\DimensionForCreateAlarmRuleInput[] $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets metric_unit
     *
     * @return string
     */
    public function getMetricUnit()
    {
        return $this->container['metric_unit'];
    }

    /**
     * Sets metric_unit
     *
     * @param string $metric_unit metric_unit
     *
     * @return $this
     */
    public function setMetricUnit($metric_unit)
    {
        $this->container['metric_unit'] = $metric_unit;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets quota_code
     *
     * @return string
     */
    public function getQuotaCode()
    {
        return $this->container['quota_code'];
    }

    /**
     * Sets quota_code
     *
     * @param string $quota_code quota_code
     *
     * @return $this
     */
    public function setQuotaCode($quota_code)
    {
        $this->container['quota_code'] = $quota_code;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets silence_time
     *
     * @return int
     */
    public function getSilenceTime()
    {
        return $this->container['silence_time'];
    }

    /**
     * Sets silence_time
     *
     * @param int $silence_time silence_time
     *
     * @return $this
     */
    public function setSilenceTime($silence_time)
    {
        $this->container['silence_time'] = $silence_time;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return string
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param string $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

