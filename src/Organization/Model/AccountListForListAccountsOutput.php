<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Organization\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AccountListForListAccountsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountListForListAccountsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'account_name' => 'string',
        'allow_console' => 'int',
        'allow_exit' => 'int',
        'created_time' => 'string',
        'delete_uk' => 'string',
        'deleted_time' => 'string',
        'description' => 'string',
        'id' => 'string',
        'iam_role' => 'string',
        'is_owner' => 'int',
        'join_type' => 'int',
        'org_id' => 'string',
        'org_type' => 'int',
        'org_unit_id' => 'string',
        'org_unit_name' => 'string',
        'org_verification_id' => 'string',
        'owner' => 'string',
        'show_name' => 'string',
        'tags' => '\Volcengine\Organization\Model\TagForListAccountsOutput[]',
        'updated_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'account_name' => null,
        'allow_console' => 'int32',
        'allow_exit' => 'int32',
        'created_time' => null,
        'delete_uk' => null,
        'deleted_time' => null,
        'description' => null,
        'id' => null,
        'iam_role' => null,
        'is_owner' => 'int32',
        'join_type' => 'int32',
        'org_id' => null,
        'org_type' => 'int32',
        'org_unit_id' => null,
        'org_unit_name' => null,
        'org_verification_id' => null,
        'owner' => null,
        'show_name' => null,
        'tags' => null,
        'updated_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'account_name' => 'AccountName',
        'allow_console' => 'AllowConsole',
        'allow_exit' => 'AllowExit',
        'created_time' => 'CreatedTime',
        'delete_uk' => 'DeleteUk',
        'deleted_time' => 'DeletedTime',
        'description' => 'Description',
        'id' => 'ID',
        'iam_role' => 'IamRole',
        'is_owner' => 'IsOwner',
        'join_type' => 'JoinType',
        'org_id' => 'OrgID',
        'org_type' => 'OrgType',
        'org_unit_id' => 'OrgUnitID',
        'org_unit_name' => 'OrgUnitName',
        'org_verification_id' => 'OrgVerificationID',
        'owner' => 'Owner',
        'show_name' => 'ShowName',
        'tags' => 'Tags',
        'updated_time' => 'UpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'allow_console' => 'setAllowConsole',
        'allow_exit' => 'setAllowExit',
        'created_time' => 'setCreatedTime',
        'delete_uk' => 'setDeleteUk',
        'deleted_time' => 'setDeletedTime',
        'description' => 'setDescription',
        'id' => 'setId',
        'iam_role' => 'setIamRole',
        'is_owner' => 'setIsOwner',
        'join_type' => 'setJoinType',
        'org_id' => 'setOrgId',
        'org_type' => 'setOrgType',
        'org_unit_id' => 'setOrgUnitId',
        'org_unit_name' => 'setOrgUnitName',
        'org_verification_id' => 'setOrgVerificationId',
        'owner' => 'setOwner',
        'show_name' => 'setShowName',
        'tags' => 'setTags',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'allow_console' => 'getAllowConsole',
        'allow_exit' => 'getAllowExit',
        'created_time' => 'getCreatedTime',
        'delete_uk' => 'getDeleteUk',
        'deleted_time' => 'getDeletedTime',
        'description' => 'getDescription',
        'id' => 'getId',
        'iam_role' => 'getIamRole',
        'is_owner' => 'getIsOwner',
        'join_type' => 'getJoinType',
        'org_id' => 'getOrgId',
        'org_type' => 'getOrgType',
        'org_unit_id' => 'getOrgUnitId',
        'org_unit_name' => 'getOrgUnitName',
        'org_verification_id' => 'getOrgVerificationId',
        'owner' => 'getOwner',
        'show_name' => 'getShowName',
        'tags' => 'getTags',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['allow_console'] = isset($data['allow_console']) ? $data['allow_console'] : null;
        $this->container['allow_exit'] = isset($data['allow_exit']) ? $data['allow_exit'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['delete_uk'] = isset($data['delete_uk']) ? $data['delete_uk'] : null;
        $this->container['deleted_time'] = isset($data['deleted_time']) ? $data['deleted_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['iam_role'] = isset($data['iam_role']) ? $data['iam_role'] : null;
        $this->container['is_owner'] = isset($data['is_owner']) ? $data['is_owner'] : null;
        $this->container['join_type'] = isset($data['join_type']) ? $data['join_type'] : null;
        $this->container['org_id'] = isset($data['org_id']) ? $data['org_id'] : null;
        $this->container['org_type'] = isset($data['org_type']) ? $data['org_type'] : null;
        $this->container['org_unit_id'] = isset($data['org_unit_id']) ? $data['org_unit_id'] : null;
        $this->container['org_unit_name'] = isset($data['org_unit_name']) ? $data['org_unit_name'] : null;
        $this->container['org_verification_id'] = isset($data['org_verification_id']) ? $data['org_verification_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['show_name'] = isset($data['show_name']) ? $data['show_name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets allow_console
     *
     * @return int
     */
    public function getAllowConsole()
    {
        return $this->container['allow_console'];
    }

    /**
     * Sets allow_console
     *
     * @param int $allow_console allow_console
     *
     * @return $this
     */
    public function setAllowConsole($allow_console)
    {
        $this->container['allow_console'] = $allow_console;

        return $this;
    }

    /**
     * Gets allow_exit
     *
     * @return int
     */
    public function getAllowExit()
    {
        return $this->container['allow_exit'];
    }

    /**
     * Sets allow_exit
     *
     * @param int $allow_exit allow_exit
     *
     * @return $this
     */
    public function setAllowExit($allow_exit)
    {
        $this->container['allow_exit'] = $allow_exit;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets delete_uk
     *
     * @return string
     */
    public function getDeleteUk()
    {
        return $this->container['delete_uk'];
    }

    /**
     * Sets delete_uk
     *
     * @param string $delete_uk delete_uk
     *
     * @return $this
     */
    public function setDeleteUk($delete_uk)
    {
        $this->container['delete_uk'] = $delete_uk;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time deleted_time
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets iam_role
     *
     * @return string
     */
    public function getIamRole()
    {
        return $this->container['iam_role'];
    }

    /**
     * Sets iam_role
     *
     * @param string $iam_role iam_role
     *
     * @return $this
     */
    public function setIamRole($iam_role)
    {
        $this->container['iam_role'] = $iam_role;

        return $this;
    }

    /**
     * Gets is_owner
     *
     * @return int
     */
    public function getIsOwner()
    {
        return $this->container['is_owner'];
    }

    /**
     * Sets is_owner
     *
     * @param int $is_owner is_owner
     *
     * @return $this
     */
    public function setIsOwner($is_owner)
    {
        $this->container['is_owner'] = $is_owner;

        return $this;
    }

    /**
     * Gets join_type
     *
     * @return int
     */
    public function getJoinType()
    {
        return $this->container['join_type'];
    }

    /**
     * Sets join_type
     *
     * @param int $join_type join_type
     *
     * @return $this
     */
    public function setJoinType($join_type)
    {
        $this->container['join_type'] = $join_type;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return string
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param string $org_id org_id
     *
     * @return $this
     */
    public function setOrgId($org_id)
    {
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets org_type
     *
     * @return int
     */
    public function getOrgType()
    {
        return $this->container['org_type'];
    }

    /**
     * Sets org_type
     *
     * @param int $org_type org_type
     *
     * @return $this
     */
    public function setOrgType($org_type)
    {
        $this->container['org_type'] = $org_type;

        return $this;
    }

    /**
     * Gets org_unit_id
     *
     * @return string
     */
    public function getOrgUnitId()
    {
        return $this->container['org_unit_id'];
    }

    /**
     * Sets org_unit_id
     *
     * @param string $org_unit_id org_unit_id
     *
     * @return $this
     */
    public function setOrgUnitId($org_unit_id)
    {
        $this->container['org_unit_id'] = $org_unit_id;

        return $this;
    }

    /**
     * Gets org_unit_name
     *
     * @return string
     */
    public function getOrgUnitName()
    {
        return $this->container['org_unit_name'];
    }

    /**
     * Sets org_unit_name
     *
     * @param string $org_unit_name org_unit_name
     *
     * @return $this
     */
    public function setOrgUnitName($org_unit_name)
    {
        $this->container['org_unit_name'] = $org_unit_name;

        return $this;
    }

    /**
     * Gets org_verification_id
     *
     * @return string
     */
    public function getOrgVerificationId()
    {
        return $this->container['org_verification_id'];
    }

    /**
     * Sets org_verification_id
     *
     * @param string $org_verification_id org_verification_id
     *
     * @return $this
     */
    public function setOrgVerificationId($org_verification_id)
    {
        $this->container['org_verification_id'] = $org_verification_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets show_name
     *
     * @return string
     */
    public function getShowName()
    {
        return $this->container['show_name'];
    }

    /**
     * Sets show_name
     *
     * @param string $show_name show_name
     *
     * @return $this
     */
    public function setShowName($show_name)
    {
        $this->container['show_name'] = $show_name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Organization\Model\TagForListAccountsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Organization\Model\TagForListAccountsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return string
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param string $updated_time updated_time
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

