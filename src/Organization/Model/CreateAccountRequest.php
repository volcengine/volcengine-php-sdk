<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Organization\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateAccountRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateAccountRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_name' => 'string',
        'description' => 'string',
        'inherit_profile' => 'bool',
        'org_unit_id' => 'string',
        'show_name' => 'string',
        'verification_relation_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_name' => null,
        'description' => null,
        'inherit_profile' => null,
        'org_unit_id' => null,
        'show_name' => null,
        'verification_relation_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'AccountName',
        'description' => 'Description',
        'inherit_profile' => 'InheritProfile',
        'org_unit_id' => 'OrgUnitId',
        'show_name' => 'ShowName',
        'verification_relation_id' => 'VerificationRelationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
        'description' => 'setDescription',
        'inherit_profile' => 'setInheritProfile',
        'org_unit_id' => 'setOrgUnitId',
        'show_name' => 'setShowName',
        'verification_relation_id' => 'setVerificationRelationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
        'description' => 'getDescription',
        'inherit_profile' => 'getInheritProfile',
        'org_unit_id' => 'getOrgUnitId',
        'show_name' => 'getShowName',
        'verification_relation_id' => 'getVerificationRelationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['inherit_profile'] = isset($data['inherit_profile']) ? $data['inherit_profile'] : null;
        $this->container['org_unit_id'] = isset($data['org_unit_id']) ? $data['org_unit_id'] : null;
        $this->container['show_name'] = isset($data['show_name']) ? $data['show_name'] : null;
        $this->container['verification_relation_id'] = isset($data['verification_relation_id']) ? $data['verification_relation_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ($this->container['show_name'] === null) {
            $invalidProperties[] = "'show_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets inherit_profile
     *
     * @return bool
     */
    public function getInheritProfile()
    {
        return $this->container['inherit_profile'];
    }

    /**
     * Sets inherit_profile
     *
     * @param bool $inherit_profile inherit_profile
     *
     * @return $this
     */
    public function setInheritProfile($inherit_profile)
    {
        $this->container['inherit_profile'] = $inherit_profile;

        return $this;
    }

    /**
     * Gets org_unit_id
     *
     * @return string
     */
    public function getOrgUnitId()
    {
        return $this->container['org_unit_id'];
    }

    /**
     * Sets org_unit_id
     *
     * @param string $org_unit_id org_unit_id
     *
     * @return $this
     */
    public function setOrgUnitId($org_unit_id)
    {
        $this->container['org_unit_id'] = $org_unit_id;

        return $this;
    }

    /**
     * Gets show_name
     *
     * @return string
     */
    public function getShowName()
    {
        return $this->container['show_name'];
    }

    /**
     * Sets show_name
     *
     * @param string $show_name show_name
     *
     * @return $this
     */
    public function setShowName($show_name)
    {
        $this->container['show_name'] = $show_name;

        return $this;
    }

    /**
     * Gets verification_relation_id
     *
     * @return string
     */
    public function getVerificationRelationId()
    {
        return $this->container['verification_relation_id'];
    }

    /**
     * Sets verification_relation_id
     *
     * @param string $verification_relation_id verification_relation_id
     *
     * @return $this
     */
    public function setVerificationRelationId($verification_relation_id)
    {
        $this->container['verification_relation_id'] = $verification_relation_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

