<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Organization\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class OrgQuitApplicationForDescribeQuitApplicationOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrgQuitApplicationForDescribeQuitApplicationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'apply_reason' => 'string',
        'audit_reason' => 'string',
        'audited_time' => 'string',
        'created_time' => 'string',
        'delete_uk' => 'string',
        'deleted_time' => 'string',
        'id' => 'string',
        'org_id' => 'string',
        'owner' => 'string',
        'status' => 'int',
        'updated_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'apply_reason' => null,
        'audit_reason' => null,
        'audited_time' => null,
        'created_time' => null,
        'delete_uk' => null,
        'deleted_time' => null,
        'id' => null,
        'org_id' => null,
        'owner' => null,
        'status' => 'int32',
        'updated_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'apply_reason' => 'ApplyReason',
        'audit_reason' => 'AuditReason',
        'audited_time' => 'AuditedTime',
        'created_time' => 'CreatedTime',
        'delete_uk' => 'DeleteUk',
        'deleted_time' => 'DeletedTime',
        'id' => 'ID',
        'org_id' => 'OrgID',
        'owner' => 'Owner',
        'status' => 'Status',
        'updated_time' => 'UpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'apply_reason' => 'setApplyReason',
        'audit_reason' => 'setAuditReason',
        'audited_time' => 'setAuditedTime',
        'created_time' => 'setCreatedTime',
        'delete_uk' => 'setDeleteUk',
        'deleted_time' => 'setDeletedTime',
        'id' => 'setId',
        'org_id' => 'setOrgId',
        'owner' => 'setOwner',
        'status' => 'setStatus',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'apply_reason' => 'getApplyReason',
        'audit_reason' => 'getAuditReason',
        'audited_time' => 'getAuditedTime',
        'created_time' => 'getCreatedTime',
        'delete_uk' => 'getDeleteUk',
        'deleted_time' => 'getDeletedTime',
        'id' => 'getId',
        'org_id' => 'getOrgId',
        'owner' => 'getOwner',
        'status' => 'getStatus',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['apply_reason'] = isset($data['apply_reason']) ? $data['apply_reason'] : null;
        $this->container['audit_reason'] = isset($data['audit_reason']) ? $data['audit_reason'] : null;
        $this->container['audited_time'] = isset($data['audited_time']) ? $data['audited_time'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['delete_uk'] = isset($data['delete_uk']) ? $data['delete_uk'] : null;
        $this->container['deleted_time'] = isset($data['deleted_time']) ? $data['deleted_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['org_id'] = isset($data['org_id']) ? $data['org_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets apply_reason
     *
     * @return string
     */
    public function getApplyReason()
    {
        return $this->container['apply_reason'];
    }

    /**
     * Sets apply_reason
     *
     * @param string $apply_reason apply_reason
     *
     * @return $this
     */
    public function setApplyReason($apply_reason)
    {
        $this->container['apply_reason'] = $apply_reason;

        return $this;
    }

    /**
     * Gets audit_reason
     *
     * @return string
     */
    public function getAuditReason()
    {
        return $this->container['audit_reason'];
    }

    /**
     * Sets audit_reason
     *
     * @param string $audit_reason audit_reason
     *
     * @return $this
     */
    public function setAuditReason($audit_reason)
    {
        $this->container['audit_reason'] = $audit_reason;

        return $this;
    }

    /**
     * Gets audited_time
     *
     * @return string
     */
    public function getAuditedTime()
    {
        return $this->container['audited_time'];
    }

    /**
     * Sets audited_time
     *
     * @param string $audited_time audited_time
     *
     * @return $this
     */
    public function setAuditedTime($audited_time)
    {
        $this->container['audited_time'] = $audited_time;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets delete_uk
     *
     * @return string
     */
    public function getDeleteUk()
    {
        return $this->container['delete_uk'];
    }

    /**
     * Sets delete_uk
     *
     * @param string $delete_uk delete_uk
     *
     * @return $this
     */
    public function setDeleteUk($delete_uk)
    {
        $this->container['delete_uk'] = $delete_uk;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time deleted_time
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return string
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param string $org_id org_id
     *
     * @return $this
     */
    public function setOrgId($org_id)
    {
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return string
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param string $updated_time updated_time
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

