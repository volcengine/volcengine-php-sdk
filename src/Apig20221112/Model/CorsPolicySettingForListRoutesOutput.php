<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig20221112\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CorsPolicySettingForListRoutesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CorsPolicySettingForListRoutesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_credentials' => 'bool',
        'allow_headers' => 'string[]',
        'allow_methods' => 'string[]',
        'allow_origins' => '\Volcengine\Apig20221112\Model\AllowOriginForListRoutesOutput[]',
        'enable' => 'bool',
        'expose_headers' => 'string[]',
        'max_age' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_credentials' => null,
        'allow_headers' => null,
        'allow_methods' => null,
        'allow_origins' => null,
        'enable' => null,
        'expose_headers' => null,
        'max_age' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_credentials' => 'AllowCredentials',
        'allow_headers' => 'AllowHeaders',
        'allow_methods' => 'AllowMethods',
        'allow_origins' => 'AllowOrigins',
        'enable' => 'Enable',
        'expose_headers' => 'ExposeHeaders',
        'max_age' => 'MaxAge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_credentials' => 'setAllowCredentials',
        'allow_headers' => 'setAllowHeaders',
        'allow_methods' => 'setAllowMethods',
        'allow_origins' => 'setAllowOrigins',
        'enable' => 'setEnable',
        'expose_headers' => 'setExposeHeaders',
        'max_age' => 'setMaxAge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_credentials' => 'getAllowCredentials',
        'allow_headers' => 'getAllowHeaders',
        'allow_methods' => 'getAllowMethods',
        'allow_origins' => 'getAllowOrigins',
        'enable' => 'getEnable',
        'expose_headers' => 'getExposeHeaders',
        'max_age' => 'getMaxAge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_credentials'] = isset($data['allow_credentials']) ? $data['allow_credentials'] : null;
        $this->container['allow_headers'] = isset($data['allow_headers']) ? $data['allow_headers'] : null;
        $this->container['allow_methods'] = isset($data['allow_methods']) ? $data['allow_methods'] : null;
        $this->container['allow_origins'] = isset($data['allow_origins']) ? $data['allow_origins'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['expose_headers'] = isset($data['expose_headers']) ? $data['expose_headers'] : null;
        $this->container['max_age'] = isset($data['max_age']) ? $data['max_age'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_credentials
     *
     * @return bool
     */
    public function getAllowCredentials()
    {
        return $this->container['allow_credentials'];
    }

    /**
     * Sets allow_credentials
     *
     * @param bool $allow_credentials allow_credentials
     *
     * @return $this
     */
    public function setAllowCredentials($allow_credentials)
    {
        $this->container['allow_credentials'] = $allow_credentials;

        return $this;
    }

    /**
     * Gets allow_headers
     *
     * @return string[]
     */
    public function getAllowHeaders()
    {
        return $this->container['allow_headers'];
    }

    /**
     * Sets allow_headers
     *
     * @param string[] $allow_headers allow_headers
     *
     * @return $this
     */
    public function setAllowHeaders($allow_headers)
    {
        $this->container['allow_headers'] = $allow_headers;

        return $this;
    }

    /**
     * Gets allow_methods
     *
     * @return string[]
     */
    public function getAllowMethods()
    {
        return $this->container['allow_methods'];
    }

    /**
     * Sets allow_methods
     *
     * @param string[] $allow_methods allow_methods
     *
     * @return $this
     */
    public function setAllowMethods($allow_methods)
    {
        $this->container['allow_methods'] = $allow_methods;

        return $this;
    }

    /**
     * Gets allow_origins
     *
     * @return \Volcengine\Apig20221112\Model\AllowOriginForListRoutesOutput[]
     */
    public function getAllowOrigins()
    {
        return $this->container['allow_origins'];
    }

    /**
     * Sets allow_origins
     *
     * @param \Volcengine\Apig20221112\Model\AllowOriginForListRoutesOutput[] $allow_origins allow_origins
     *
     * @return $this
     */
    public function setAllowOrigins($allow_origins)
    {
        $this->container['allow_origins'] = $allow_origins;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets expose_headers
     *
     * @return string[]
     */
    public function getExposeHeaders()
    {
        return $this->container['expose_headers'];
    }

    /**
     * Sets expose_headers
     *
     * @param string[] $expose_headers expose_headers
     *
     * @return $this
     */
    public function setExposeHeaders($expose_headers)
    {
        $this->container['expose_headers'] = $expose_headers;

        return $this;
    }

    /**
     * Gets max_age
     *
     * @return int
     */
    public function getMaxAge()
    {
        return $this->container['max_age'];
    }

    /**
     * Sets max_age
     *
     * @param int $max_age max_age
     *
     * @return $this
     */
    public function setMaxAge($max_age)
    {
        $this->container['max_age'] = $max_age;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

