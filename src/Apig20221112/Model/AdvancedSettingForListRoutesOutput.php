<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Apig20221112\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AdvancedSettingForListRoutesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvancedSettingForListRoutesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cors_policy_setting' => '\Volcengine\Apig20221112\Model\CorsPolicySettingForListRoutesOutput',
        'header_operations' => '\Volcengine\Apig20221112\Model\HeaderOperationForListRoutesOutput[]',
        'mirror_policies' => '\Volcengine\Apig20221112\Model\MirrorPolicyForListRoutesOutput[]',
        'retry_policy_setting' => '\Volcengine\Apig20221112\Model\RetryPolicySettingForListRoutesOutput',
        'timeout_setting' => '\Volcengine\Apig20221112\Model\TimeoutSettingForListRoutesOutput',
        'url_rewrite_setting' => '\Volcengine\Apig20221112\Model\URLRewriteSettingForListRoutesOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cors_policy_setting' => null,
        'header_operations' => null,
        'mirror_policies' => null,
        'retry_policy_setting' => null,
        'timeout_setting' => null,
        'url_rewrite_setting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cors_policy_setting' => 'CorsPolicySetting',
        'header_operations' => 'HeaderOperations',
        'mirror_policies' => 'MirrorPolicies',
        'retry_policy_setting' => 'RetryPolicySetting',
        'timeout_setting' => 'TimeoutSetting',
        'url_rewrite_setting' => 'URLRewriteSetting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cors_policy_setting' => 'setCorsPolicySetting',
        'header_operations' => 'setHeaderOperations',
        'mirror_policies' => 'setMirrorPolicies',
        'retry_policy_setting' => 'setRetryPolicySetting',
        'timeout_setting' => 'setTimeoutSetting',
        'url_rewrite_setting' => 'setUrlRewriteSetting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cors_policy_setting' => 'getCorsPolicySetting',
        'header_operations' => 'getHeaderOperations',
        'mirror_policies' => 'getMirrorPolicies',
        'retry_policy_setting' => 'getRetryPolicySetting',
        'timeout_setting' => 'getTimeoutSetting',
        'url_rewrite_setting' => 'getUrlRewriteSetting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cors_policy_setting'] = isset($data['cors_policy_setting']) ? $data['cors_policy_setting'] : null;
        $this->container['header_operations'] = isset($data['header_operations']) ? $data['header_operations'] : null;
        $this->container['mirror_policies'] = isset($data['mirror_policies']) ? $data['mirror_policies'] : null;
        $this->container['retry_policy_setting'] = isset($data['retry_policy_setting']) ? $data['retry_policy_setting'] : null;
        $this->container['timeout_setting'] = isset($data['timeout_setting']) ? $data['timeout_setting'] : null;
        $this->container['url_rewrite_setting'] = isset($data['url_rewrite_setting']) ? $data['url_rewrite_setting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cors_policy_setting
     *
     * @return \Volcengine\Apig20221112\Model\CorsPolicySettingForListRoutesOutput
     */
    public function getCorsPolicySetting()
    {
        return $this->container['cors_policy_setting'];
    }

    /**
     * Sets cors_policy_setting
     *
     * @param \Volcengine\Apig20221112\Model\CorsPolicySettingForListRoutesOutput $cors_policy_setting cors_policy_setting
     *
     * @return $this
     */
    public function setCorsPolicySetting($cors_policy_setting)
    {
        $this->container['cors_policy_setting'] = $cors_policy_setting;

        return $this;
    }

    /**
     * Gets header_operations
     *
     * @return \Volcengine\Apig20221112\Model\HeaderOperationForListRoutesOutput[]
     */
    public function getHeaderOperations()
    {
        return $this->container['header_operations'];
    }

    /**
     * Sets header_operations
     *
     * @param \Volcengine\Apig20221112\Model\HeaderOperationForListRoutesOutput[] $header_operations header_operations
     *
     * @return $this
     */
    public function setHeaderOperations($header_operations)
    {
        $this->container['header_operations'] = $header_operations;

        return $this;
    }

    /**
     * Gets mirror_policies
     *
     * @return \Volcengine\Apig20221112\Model\MirrorPolicyForListRoutesOutput[]
     */
    public function getMirrorPolicies()
    {
        return $this->container['mirror_policies'];
    }

    /**
     * Sets mirror_policies
     *
     * @param \Volcengine\Apig20221112\Model\MirrorPolicyForListRoutesOutput[] $mirror_policies mirror_policies
     *
     * @return $this
     */
    public function setMirrorPolicies($mirror_policies)
    {
        $this->container['mirror_policies'] = $mirror_policies;

        return $this;
    }

    /**
     * Gets retry_policy_setting
     *
     * @return \Volcengine\Apig20221112\Model\RetryPolicySettingForListRoutesOutput
     */
    public function getRetryPolicySetting()
    {
        return $this->container['retry_policy_setting'];
    }

    /**
     * Sets retry_policy_setting
     *
     * @param \Volcengine\Apig20221112\Model\RetryPolicySettingForListRoutesOutput $retry_policy_setting retry_policy_setting
     *
     * @return $this
     */
    public function setRetryPolicySetting($retry_policy_setting)
    {
        $this->container['retry_policy_setting'] = $retry_policy_setting;

        return $this;
    }

    /**
     * Gets timeout_setting
     *
     * @return \Volcengine\Apig20221112\Model\TimeoutSettingForListRoutesOutput
     */
    public function getTimeoutSetting()
    {
        return $this->container['timeout_setting'];
    }

    /**
     * Sets timeout_setting
     *
     * @param \Volcengine\Apig20221112\Model\TimeoutSettingForListRoutesOutput $timeout_setting timeout_setting
     *
     * @return $this
     */
    public function setTimeoutSetting($timeout_setting)
    {
        $this->container['timeout_setting'] = $timeout_setting;

        return $this;
    }

    /**
     * Gets url_rewrite_setting
     *
     * @return \Volcengine\Apig20221112\Model\URLRewriteSettingForListRoutesOutput
     */
    public function getUrlRewriteSetting()
    {
        return $this->container['url_rewrite_setting'];
    }

    /**
     * Sets url_rewrite_setting
     *
     * @param \Volcengine\Apig20221112\Model\URLRewriteSettingForListRoutesOutput $url_rewrite_setting url_rewrite_setting
     *
     * @return $this
     */
    public function setUrlRewriteSetting($url_rewrite_setting)
    {
        $this->container['url_rewrite_setting'] = $url_rewrite_setting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

