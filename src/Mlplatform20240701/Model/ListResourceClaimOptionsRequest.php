<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListResourceClaimOptionsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListResourceClaimOptionsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'preemptible' => 'bool',
        'resource_queue_id' => 'string',
        'resource_reservation_plan_id' => 'string',
        'support_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'preemptible' => null,
        'resource_queue_id' => null,
        'resource_reservation_plan_id' => null,
        'support_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'preemptible' => 'Preemptible',
        'resource_queue_id' => 'ResourceQueueId',
        'resource_reservation_plan_id' => 'ResourceReservationPlanId',
        'support_status' => 'SupportStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'preemptible' => 'setPreemptible',
        'resource_queue_id' => 'setResourceQueueId',
        'resource_reservation_plan_id' => 'setResourceReservationPlanId',
        'support_status' => 'setSupportStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'preemptible' => 'getPreemptible',
        'resource_queue_id' => 'getResourceQueueId',
        'resource_reservation_plan_id' => 'getResourceReservationPlanId',
        'support_status' => 'getSupportStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUPPORT_STATUS_VALID = 'Valid';
    const SUPPORT_STATUS_DEPRECATED = 'Deprecated';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportStatusAllowableValues()
    {
        return [
            self::SUPPORT_STATUS_VALID,
            self::SUPPORT_STATUS_DEPRECATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['preemptible'] = isset($data['preemptible']) ? $data['preemptible'] : null;
        $this->container['resource_queue_id'] = isset($data['resource_queue_id']) ? $data['resource_queue_id'] : null;
        $this->container['resource_reservation_plan_id'] = isset($data['resource_reservation_plan_id']) ? $data['resource_reservation_plan_id'] : null;
        $this->container['support_status'] = isset($data['support_status']) ? $data['support_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSupportStatusAllowableValues();
        if (!is_null($this->container['support_status']) && !in_array($this->container['support_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'support_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets preemptible
     *
     * @return bool
     */
    public function getPreemptible()
    {
        return $this->container['preemptible'];
    }

    /**
     * Sets preemptible
     *
     * @param bool $preemptible preemptible
     *
     * @return $this
     */
    public function setPreemptible($preemptible)
    {
        $this->container['preemptible'] = $preemptible;

        return $this;
    }

    /**
     * Gets resource_queue_id
     *
     * @return string
     */
    public function getResourceQueueId()
    {
        return $this->container['resource_queue_id'];
    }

    /**
     * Sets resource_queue_id
     *
     * @param string $resource_queue_id resource_queue_id
     *
     * @return $this
     */
    public function setResourceQueueId($resource_queue_id)
    {
        $this->container['resource_queue_id'] = $resource_queue_id;

        return $this;
    }

    /**
     * Gets resource_reservation_plan_id
     *
     * @return string
     */
    public function getResourceReservationPlanId()
    {
        return $this->container['resource_reservation_plan_id'];
    }

    /**
     * Sets resource_reservation_plan_id
     *
     * @param string $resource_reservation_plan_id resource_reservation_plan_id
     *
     * @return $this
     */
    public function setResourceReservationPlanId($resource_reservation_plan_id)
    {
        $this->container['resource_reservation_plan_id'] = $resource_reservation_plan_id;

        return $this;
    }

    /**
     * Gets support_status
     *
     * @return string
     */
    public function getSupportStatus()
    {
        return $this->container['support_status'];
    }

    /**
     * Sets support_status
     *
     * @param string $support_status support_status
     *
     * @return $this
     */
    public function setSupportStatus($support_status)
    {
        $allowedValues = $this->getSupportStatusAllowableValues();
        if (!is_null($support_status) && !in_array($support_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'support_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['support_status'] = $support_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

