<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListDevInstancesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListDevInstancesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_user_ids' => 'int[]',
        'id_contains' => 'string',
        'ids' => 'string[]',
        'name_contains' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'relationship' => 'string',
        'resource_group_ids' => 'string[]',
        'resource_queue_ids' => 'string[]',
        'resource_reservation_plan_ids' => 'string[]',
        'sort_by' => 'string',
        'sort_order' => 'string',
        'states' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_user_ids' => 'int32',
        'id_contains' => null,
        'ids' => null,
        'name_contains' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'relationship' => null,
        'resource_group_ids' => null,
        'resource_queue_ids' => null,
        'resource_reservation_plan_ids' => null,
        'sort_by' => null,
        'sort_order' => null,
        'states' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_user_ids' => 'CreateUserIds',
        'id_contains' => 'IdContains',
        'ids' => 'Ids',
        'name_contains' => 'NameContains',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'relationship' => 'Relationship',
        'resource_group_ids' => 'ResourceGroupIds',
        'resource_queue_ids' => 'ResourceQueueIds',
        'resource_reservation_plan_ids' => 'ResourceReservationPlanIds',
        'sort_by' => 'SortBy',
        'sort_order' => 'SortOrder',
        'states' => 'States'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_user_ids' => 'setCreateUserIds',
        'id_contains' => 'setIdContains',
        'ids' => 'setIds',
        'name_contains' => 'setNameContains',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'relationship' => 'setRelationship',
        'resource_group_ids' => 'setResourceGroupIds',
        'resource_queue_ids' => 'setResourceQueueIds',
        'resource_reservation_plan_ids' => 'setResourceReservationPlanIds',
        'sort_by' => 'setSortBy',
        'sort_order' => 'setSortOrder',
        'states' => 'setStates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_user_ids' => 'getCreateUserIds',
        'id_contains' => 'getIdContains',
        'ids' => 'getIds',
        'name_contains' => 'getNameContains',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'relationship' => 'getRelationship',
        'resource_group_ids' => 'getResourceGroupIds',
        'resource_queue_ids' => 'getResourceQueueIds',
        'resource_reservation_plan_ids' => 'getResourceReservationPlanIds',
        'sort_by' => 'getSortBy',
        'sort_order' => 'getSortOrder',
        'states' => 'getStates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RELATIONSHIP_CREATED = 'Created';
    const RELATIONSHIP_OWNED = 'Owned';
    const SORT_BY_CREATE_TIME = 'CreateTime';
    const SORT_ORDER_ASCEND = 'Ascend';
    const SORT_ORDER_DESCEND = 'Descend';
    const STATES_PENDING = 'Pending';
    const STATES_DEPLOYING = 'Deploying';
    const STATES_RUNNING = 'Running';
    const STATES_STOPPING = 'Stopping';
    const STATES_STOPPED = 'Stopped';
    const STATES_DELETING = 'Deleting';
    const STATES_ABNORMAL = 'Abnormal';
    const STATES_FAILED = 'Failed';
    const STATES_UPGRADING = 'Upgrading';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelationshipAllowableValues()
    {
        return [
            self::RELATIONSHIP_CREATED,
            self::RELATIONSHIP_OWNED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortByAllowableValues()
    {
        return [
            self::SORT_BY_CREATE_TIME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortOrderAllowableValues()
    {
        return [
            self::SORT_ORDER_ASCEND,
            self::SORT_ORDER_DESCEND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatesAllowableValues()
    {
        return [
            self::STATES_PENDING,
            self::STATES_DEPLOYING,
            self::STATES_RUNNING,
            self::STATES_STOPPING,
            self::STATES_STOPPED,
            self::STATES_DELETING,
            self::STATES_ABNORMAL,
            self::STATES_FAILED,
            self::STATES_UPGRADING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_user_ids'] = isset($data['create_user_ids']) ? $data['create_user_ids'] : null;
        $this->container['id_contains'] = isset($data['id_contains']) ? $data['id_contains'] : null;
        $this->container['ids'] = isset($data['ids']) ? $data['ids'] : null;
        $this->container['name_contains'] = isset($data['name_contains']) ? $data['name_contains'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
        $this->container['resource_group_ids'] = isset($data['resource_group_ids']) ? $data['resource_group_ids'] : null;
        $this->container['resource_queue_ids'] = isset($data['resource_queue_ids']) ? $data['resource_queue_ids'] : null;
        $this->container['resource_reservation_plan_ids'] = isset($data['resource_reservation_plan_ids']) ? $data['resource_reservation_plan_ids'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRelationshipAllowableValues();
        if (!is_null($this->container['relationship']) && !in_array($this->container['relationship'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'relationship', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSortByAllowableValues();
        if (!is_null($this->container['sort_by']) && !in_array($this->container['sort_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($this->container['sort_order']) && !in_array($this->container['sort_order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort_order', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_user_ids
     *
     * @return int[]
     */
    public function getCreateUserIds()
    {
        return $this->container['create_user_ids'];
    }

    /**
     * Sets create_user_ids
     *
     * @param int[] $create_user_ids create_user_ids
     *
     * @return $this
     */
    public function setCreateUserIds($create_user_ids)
    {
        $this->container['create_user_ids'] = $create_user_ids;

        return $this;
    }

    /**
     * Gets id_contains
     *
     * @return string
     */
    public function getIdContains()
    {
        return $this->container['id_contains'];
    }

    /**
     * Sets id_contains
     *
     * @param string $id_contains id_contains
     *
     * @return $this
     */
    public function setIdContains($id_contains)
    {
        $this->container['id_contains'] = $id_contains;

        return $this;
    }

    /**
     * Gets ids
     *
     * @return string[]
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param string[] $ids ids
     *
     * @return $this
     */
    public function setIds($ids)
    {
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets name_contains
     *
     * @return string
     */
    public function getNameContains()
    {
        return $this->container['name_contains'];
    }

    /**
     * Sets name_contains
     *
     * @param string $name_contains name_contains
     *
     * @return $this
     */
    public function setNameContains($name_contains)
    {
        $this->container['name_contains'] = $name_contains;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return string
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param string $relationship relationship
     *
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $allowedValues = $this->getRelationshipAllowableValues();
        if (!is_null($relationship) && !in_array($relationship, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'relationship', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets resource_group_ids
     *
     * @return string[]
     */
    public function getResourceGroupIds()
    {
        return $this->container['resource_group_ids'];
    }

    /**
     * Sets resource_group_ids
     *
     * @param string[] $resource_group_ids resource_group_ids
     *
     * @return $this
     */
    public function setResourceGroupIds($resource_group_ids)
    {
        $this->container['resource_group_ids'] = $resource_group_ids;

        return $this;
    }

    /**
     * Gets resource_queue_ids
     *
     * @return string[]
     */
    public function getResourceQueueIds()
    {
        return $this->container['resource_queue_ids'];
    }

    /**
     * Sets resource_queue_ids
     *
     * @param string[] $resource_queue_ids resource_queue_ids
     *
     * @return $this
     */
    public function setResourceQueueIds($resource_queue_ids)
    {
        $this->container['resource_queue_ids'] = $resource_queue_ids;

        return $this;
    }

    /**
     * Gets resource_reservation_plan_ids
     *
     * @return string[]
     */
    public function getResourceReservationPlanIds()
    {
        return $this->container['resource_reservation_plan_ids'];
    }

    /**
     * Sets resource_reservation_plan_ids
     *
     * @param string[] $resource_reservation_plan_ids resource_reservation_plan_ids
     *
     * @return $this
     */
    public function setResourceReservationPlanIds($resource_reservation_plan_ids)
    {
        $this->container['resource_reservation_plan_ids'] = $resource_reservation_plan_ids;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by sort_by
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $allowedValues = $this->getSortByAllowableValues();
        if (!is_null($sort_by) && !in_array($sort_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($sort_order) && !in_array($sort_order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort_order', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets states
     *
     * @return string[]
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param string[] $states states
     *
     * @return $this
     */
    public function setStates($states)
    {
        $allowedValues = $this->getStatesAllowableValues();
        if (!is_null($states) && array_diff($states, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'states', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['states'] = $states;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

