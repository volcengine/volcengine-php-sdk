<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class StatusForListJobInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StatusForListJobInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diagnose_message' => 'string',
        'diagnose_state' => 'string',
        'end_time' => 'string',
        'exit_code' => 'int',
        'holding_end_time' => 'string',
        'message' => 'string',
        'numa_status' => 'string',
        'secondary_state' => 'string',
        'start_time' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diagnose_message' => null,
        'diagnose_state' => null,
        'end_time' => null,
        'exit_code' => 'int32',
        'holding_end_time' => null,
        'message' => null,
        'numa_status' => null,
        'secondary_state' => null,
        'start_time' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diagnose_message' => 'DiagnoseMessage',
        'diagnose_state' => 'DiagnoseState',
        'end_time' => 'EndTime',
        'exit_code' => 'ExitCode',
        'holding_end_time' => 'HoldingEndTime',
        'message' => 'Message',
        'numa_status' => 'NumaStatus',
        'secondary_state' => 'SecondaryState',
        'start_time' => 'StartTime',
        'state' => 'State'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diagnose_message' => 'setDiagnoseMessage',
        'diagnose_state' => 'setDiagnoseState',
        'end_time' => 'setEndTime',
        'exit_code' => 'setExitCode',
        'holding_end_time' => 'setHoldingEndTime',
        'message' => 'setMessage',
        'numa_status' => 'setNumaStatus',
        'secondary_state' => 'setSecondaryState',
        'start_time' => 'setStartTime',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diagnose_message' => 'getDiagnoseMessage',
        'diagnose_state' => 'getDiagnoseState',
        'end_time' => 'getEndTime',
        'exit_code' => 'getExitCode',
        'holding_end_time' => 'getHoldingEndTime',
        'message' => 'getMessage',
        'numa_status' => 'getNumaStatus',
        'secondary_state' => 'getSecondaryState',
        'start_time' => 'getStartTime',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIAGNOSE_STATE_WAITING = 'Waiting';
    const DIAGNOSE_STATE_RUNNING = 'Running';
    const DIAGNOSE_STATE_PASSED = 'Passed';
    const DIAGNOSE_STATE_FAILED = 'Failed';
    const DIAGNOSE_STATE_ABNORMAL = 'Abnormal';
    const SECONDARY_STATE_COMPLETED_HOLDING = 'CompletedHolding';
    const SECONDARY_STATE_FAILED_HOLDING = 'FailedHolding';
    const SECONDARY_STATE_NODE_WENT_DOWN = 'NodeWentDown';
    const SECONDARY_STATE_MACHINE_FAULT = 'MachineFault';
    const SECONDARY_STATE_MACHINE_SUSPECTED = 'MachineSuspected';
    const SECONDARY_STATE_MACHINE_REGULAR = 'MachineRegular';
    const SECONDARY_STATE_POD_OOM_KILLED = 'PodOOMKilled';
    const SECONDARY_STATE_POD_RECLAIMED = 'PodReclaimed';
    const SECONDARY_STATE_POD_AUTO_GPU_COMPACTED = 'PodAutoGPUCompacted';
    const SECONDARY_STATE_POD_EVICT_BY_QOS = 'PodEvictByQOS';
    const SECONDARY_STATE_POD_EVICT_BY_GPU_PREEMPT_CPU = 'PodEvictByGPUPreemptCPU';
    const SECONDARY_STATE_DIAGNOSIS_ENV_DIAG_FAILED = 'DiagnosisEnvDiagFailed';
    const STATE_QUEUEING = 'Queueing';
    const STATE_DEPLOYING = 'Deploying';
    const STATE_RUNNING = 'Running';
    const STATE_COMPLETED = 'Completed';
    const STATE_FAILED = 'Failed';
    const STATE_STOPPING = 'Stopping';
    const STATE_STOPPED = 'Stopped';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiagnoseStateAllowableValues()
    {
        return [
            self::DIAGNOSE_STATE_WAITING,
            self::DIAGNOSE_STATE_RUNNING,
            self::DIAGNOSE_STATE_PASSED,
            self::DIAGNOSE_STATE_FAILED,
            self::DIAGNOSE_STATE_ABNORMAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondaryStateAllowableValues()
    {
        return [
            self::SECONDARY_STATE_COMPLETED_HOLDING,
            self::SECONDARY_STATE_FAILED_HOLDING,
            self::SECONDARY_STATE_NODE_WENT_DOWN,
            self::SECONDARY_STATE_MACHINE_FAULT,
            self::SECONDARY_STATE_MACHINE_SUSPECTED,
            self::SECONDARY_STATE_MACHINE_REGULAR,
            self::SECONDARY_STATE_POD_OOM_KILLED,
            self::SECONDARY_STATE_POD_RECLAIMED,
            self::SECONDARY_STATE_POD_AUTO_GPU_COMPACTED,
            self::SECONDARY_STATE_POD_EVICT_BY_QOS,
            self::SECONDARY_STATE_POD_EVICT_BY_GPU_PREEMPT_CPU,
            self::SECONDARY_STATE_DIAGNOSIS_ENV_DIAG_FAILED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_QUEUEING,
            self::STATE_DEPLOYING,
            self::STATE_RUNNING,
            self::STATE_COMPLETED,
            self::STATE_FAILED,
            self::STATE_STOPPING,
            self::STATE_STOPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diagnose_message'] = isset($data['diagnose_message']) ? $data['diagnose_message'] : null;
        $this->container['diagnose_state'] = isset($data['diagnose_state']) ? $data['diagnose_state'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['exit_code'] = isset($data['exit_code']) ? $data['exit_code'] : null;
        $this->container['holding_end_time'] = isset($data['holding_end_time']) ? $data['holding_end_time'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['numa_status'] = isset($data['numa_status']) ? $data['numa_status'] : null;
        $this->container['secondary_state'] = isset($data['secondary_state']) ? $data['secondary_state'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDiagnoseStateAllowableValues();
        if (!is_null($this->container['diagnose_state']) && !in_array($this->container['diagnose_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'diagnose_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondaryStateAllowableValues();
        if (!is_null($this->container['secondary_state']) && !in_array($this->container['secondary_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secondary_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diagnose_message
     *
     * @return string
     */
    public function getDiagnoseMessage()
    {
        return $this->container['diagnose_message'];
    }

    /**
     * Sets diagnose_message
     *
     * @param string $diagnose_message diagnose_message
     *
     * @return $this
     */
    public function setDiagnoseMessage($diagnose_message)
    {
        $this->container['diagnose_message'] = $diagnose_message;

        return $this;
    }

    /**
     * Gets diagnose_state
     *
     * @return string
     */
    public function getDiagnoseState()
    {
        return $this->container['diagnose_state'];
    }

    /**
     * Sets diagnose_state
     *
     * @param string $diagnose_state diagnose_state
     *
     * @return $this
     */
    public function setDiagnoseState($diagnose_state)
    {
        $allowedValues = $this->getDiagnoseStateAllowableValues();
        if (!is_null($diagnose_state) && !in_array($diagnose_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'diagnose_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['diagnose_state'] = $diagnose_state;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets exit_code
     *
     * @return int
     */
    public function getExitCode()
    {
        return $this->container['exit_code'];
    }

    /**
     * Sets exit_code
     *
     * @param int $exit_code exit_code
     *
     * @return $this
     */
    public function setExitCode($exit_code)
    {
        $this->container['exit_code'] = $exit_code;

        return $this;
    }

    /**
     * Gets holding_end_time
     *
     * @return string
     */
    public function getHoldingEndTime()
    {
        return $this->container['holding_end_time'];
    }

    /**
     * Sets holding_end_time
     *
     * @param string $holding_end_time holding_end_time
     *
     * @return $this
     */
    public function setHoldingEndTime($holding_end_time)
    {
        $this->container['holding_end_time'] = $holding_end_time;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets numa_status
     *
     * @return string
     */
    public function getNumaStatus()
    {
        return $this->container['numa_status'];
    }

    /**
     * Sets numa_status
     *
     * @param string $numa_status numa_status
     *
     * @return $this
     */
    public function setNumaStatus($numa_status)
    {
        $this->container['numa_status'] = $numa_status;

        return $this;
    }

    /**
     * Gets secondary_state
     *
     * @return string
     */
    public function getSecondaryState()
    {
        return $this->container['secondary_state'];
    }

    /**
     * Sets secondary_state
     *
     * @param string $secondary_state secondary_state
     *
     * @return $this
     */
    public function setSecondaryState($secondary_state)
    {
        $allowedValues = $this->getSecondaryStateAllowableValues();
        if (!is_null($secondary_state) && !in_array($secondary_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secondary_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secondary_state'] = $secondary_state;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

