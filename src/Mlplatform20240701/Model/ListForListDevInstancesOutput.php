<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListForListDevInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListForListDevInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_image_build' => 'bool',
        'create_time' => 'string',
        'creator_trn' => 'string',
        'description' => 'string',
        'expected_stop_time' => 'string',
        'id' => 'string',
        'image' => '\Volcengine\Mlplatform20240701\Model\ImageForListDevInstancesOutput',
        'is_building_image' => 'bool',
        'launch_time' => 'string',
        'name' => 'string',
        'node_affinity_spec' => '\Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForListDevInstancesOutput',
        'numa_affinity' => 'string',
        'numa_status' => 'string',
        'ports' => '\Volcengine\Mlplatform20240701\Model\PortForListDevInstancesOutput[]',
        'resource_claim' => '\Volcengine\Mlplatform20240701\Model\ResourceClaimForListDevInstancesOutput',
        'resource_queue_id' => 'string',
        'ssh_public_key' => 'string',
        'status' => '\Volcengine\Mlplatform20240701\Model\StatusForListDevInstancesOutput',
        'stop_time' => 'string',
        'stopped_time' => 'string',
        'storages' => '\Volcengine\Mlplatform20240701\Model\StorageForListDevInstancesOutput[]',
        'update_time' => 'string',
        'volume' => '\Volcengine\Mlplatform20240701\Model\VolumeForListDevInstancesOutput',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_image_build' => null,
        'create_time' => null,
        'creator_trn' => null,
        'description' => null,
        'expected_stop_time' => null,
        'id' => null,
        'image' => null,
        'is_building_image' => null,
        'launch_time' => null,
        'name' => null,
        'node_affinity_spec' => null,
        'numa_affinity' => null,
        'numa_status' => null,
        'ports' => null,
        'resource_claim' => null,
        'resource_queue_id' => null,
        'ssh_public_key' => null,
        'status' => null,
        'stop_time' => null,
        'stopped_time' => null,
        'storages' => null,
        'update_time' => null,
        'volume' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_image_build' => 'AllowImageBuild',
        'create_time' => 'CreateTime',
        'creator_trn' => 'CreatorTrn',
        'description' => 'Description',
        'expected_stop_time' => 'ExpectedStopTime',
        'id' => 'Id',
        'image' => 'Image',
        'is_building_image' => 'IsBuildingImage',
        'launch_time' => 'LaunchTime',
        'name' => 'Name',
        'node_affinity_spec' => 'NodeAffinitySpec',
        'numa_affinity' => 'NumaAffinity',
        'numa_status' => 'NumaStatus',
        'ports' => 'Ports',
        'resource_claim' => 'ResourceClaim',
        'resource_queue_id' => 'ResourceQueueId',
        'ssh_public_key' => 'SshPublicKey',
        'status' => 'Status',
        'stop_time' => 'StopTime',
        'stopped_time' => 'StoppedTime',
        'storages' => 'Storages',
        'update_time' => 'UpdateTime',
        'volume' => 'Volume',
        'zone_id' => 'ZoneID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_image_build' => 'setAllowImageBuild',
        'create_time' => 'setCreateTime',
        'creator_trn' => 'setCreatorTrn',
        'description' => 'setDescription',
        'expected_stop_time' => 'setExpectedStopTime',
        'id' => 'setId',
        'image' => 'setImage',
        'is_building_image' => 'setIsBuildingImage',
        'launch_time' => 'setLaunchTime',
        'name' => 'setName',
        'node_affinity_spec' => 'setNodeAffinitySpec',
        'numa_affinity' => 'setNumaAffinity',
        'numa_status' => 'setNumaStatus',
        'ports' => 'setPorts',
        'resource_claim' => 'setResourceClaim',
        'resource_queue_id' => 'setResourceQueueId',
        'ssh_public_key' => 'setSshPublicKey',
        'status' => 'setStatus',
        'stop_time' => 'setStopTime',
        'stopped_time' => 'setStoppedTime',
        'storages' => 'setStorages',
        'update_time' => 'setUpdateTime',
        'volume' => 'setVolume',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_image_build' => 'getAllowImageBuild',
        'create_time' => 'getCreateTime',
        'creator_trn' => 'getCreatorTrn',
        'description' => 'getDescription',
        'expected_stop_time' => 'getExpectedStopTime',
        'id' => 'getId',
        'image' => 'getImage',
        'is_building_image' => 'getIsBuildingImage',
        'launch_time' => 'getLaunchTime',
        'name' => 'getName',
        'node_affinity_spec' => 'getNodeAffinitySpec',
        'numa_affinity' => 'getNumaAffinity',
        'numa_status' => 'getNumaStatus',
        'ports' => 'getPorts',
        'resource_claim' => 'getResourceClaim',
        'resource_queue_id' => 'getResourceQueueId',
        'ssh_public_key' => 'getSshPublicKey',
        'status' => 'getStatus',
        'stop_time' => 'getStopTime',
        'stopped_time' => 'getStoppedTime',
        'storages' => 'getStorages',
        'update_time' => 'getUpdateTime',
        'volume' => 'getVolume',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_image_build'] = isset($data['allow_image_build']) ? $data['allow_image_build'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['creator_trn'] = isset($data['creator_trn']) ? $data['creator_trn'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expected_stop_time'] = isset($data['expected_stop_time']) ? $data['expected_stop_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['is_building_image'] = isset($data['is_building_image']) ? $data['is_building_image'] : null;
        $this->container['launch_time'] = isset($data['launch_time']) ? $data['launch_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_affinity_spec'] = isset($data['node_affinity_spec']) ? $data['node_affinity_spec'] : null;
        $this->container['numa_affinity'] = isset($data['numa_affinity']) ? $data['numa_affinity'] : null;
        $this->container['numa_status'] = isset($data['numa_status']) ? $data['numa_status'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['resource_claim'] = isset($data['resource_claim']) ? $data['resource_claim'] : null;
        $this->container['resource_queue_id'] = isset($data['resource_queue_id']) ? $data['resource_queue_id'] : null;
        $this->container['ssh_public_key'] = isset($data['ssh_public_key']) ? $data['ssh_public_key'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['stop_time'] = isset($data['stop_time']) ? $data['stop_time'] : null;
        $this->container['stopped_time'] = isset($data['stopped_time']) ? $data['stopped_time'] : null;
        $this->container['storages'] = isset($data['storages']) ? $data['storages'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_image_build
     *
     * @return bool
     */
    public function getAllowImageBuild()
    {
        return $this->container['allow_image_build'];
    }

    /**
     * Sets allow_image_build
     *
     * @param bool $allow_image_build allow_image_build
     *
     * @return $this
     */
    public function setAllowImageBuild($allow_image_build)
    {
        $this->container['allow_image_build'] = $allow_image_build;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets creator_trn
     *
     * @return string
     */
    public function getCreatorTrn()
    {
        return $this->container['creator_trn'];
    }

    /**
     * Sets creator_trn
     *
     * @param string $creator_trn creator_trn
     *
     * @return $this
     */
    public function setCreatorTrn($creator_trn)
    {
        $this->container['creator_trn'] = $creator_trn;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expected_stop_time
     *
     * @return string
     */
    public function getExpectedStopTime()
    {
        return $this->container['expected_stop_time'];
    }

    /**
     * Sets expected_stop_time
     *
     * @param string $expected_stop_time expected_stop_time
     *
     * @return $this
     */
    public function setExpectedStopTime($expected_stop_time)
    {
        $this->container['expected_stop_time'] = $expected_stop_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Volcengine\Mlplatform20240701\Model\ImageForListDevInstancesOutput
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Volcengine\Mlplatform20240701\Model\ImageForListDevInstancesOutput $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets is_building_image
     *
     * @return bool
     */
    public function getIsBuildingImage()
    {
        return $this->container['is_building_image'];
    }

    /**
     * Sets is_building_image
     *
     * @param bool $is_building_image is_building_image
     *
     * @return $this
     */
    public function setIsBuildingImage($is_building_image)
    {
        $this->container['is_building_image'] = $is_building_image;

        return $this;
    }

    /**
     * Gets launch_time
     *
     * @return string
     */
    public function getLaunchTime()
    {
        return $this->container['launch_time'];
    }

    /**
     * Sets launch_time
     *
     * @param string $launch_time launch_time
     *
     * @return $this
     */
    public function setLaunchTime($launch_time)
    {
        $this->container['launch_time'] = $launch_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_affinity_spec
     *
     * @return \Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForListDevInstancesOutput
     */
    public function getNodeAffinitySpec()
    {
        return $this->container['node_affinity_spec'];
    }

    /**
     * Sets node_affinity_spec
     *
     * @param \Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForListDevInstancesOutput $node_affinity_spec node_affinity_spec
     *
     * @return $this
     */
    public function setNodeAffinitySpec($node_affinity_spec)
    {
        $this->container['node_affinity_spec'] = $node_affinity_spec;

        return $this;
    }

    /**
     * Gets numa_affinity
     *
     * @return string
     */
    public function getNumaAffinity()
    {
        return $this->container['numa_affinity'];
    }

    /**
     * Sets numa_affinity
     *
     * @param string $numa_affinity numa_affinity
     *
     * @return $this
     */
    public function setNumaAffinity($numa_affinity)
    {
        $this->container['numa_affinity'] = $numa_affinity;

        return $this;
    }

    /**
     * Gets numa_status
     *
     * @return string
     */
    public function getNumaStatus()
    {
        return $this->container['numa_status'];
    }

    /**
     * Sets numa_status
     *
     * @param string $numa_status numa_status
     *
     * @return $this
     */
    public function setNumaStatus($numa_status)
    {
        $this->container['numa_status'] = $numa_status;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Volcengine\Mlplatform20240701\Model\PortForListDevInstancesOutput[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Volcengine\Mlplatform20240701\Model\PortForListDevInstancesOutput[] $ports ports
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets resource_claim
     *
     * @return \Volcengine\Mlplatform20240701\Model\ResourceClaimForListDevInstancesOutput
     */
    public function getResourceClaim()
    {
        return $this->container['resource_claim'];
    }

    /**
     * Sets resource_claim
     *
     * @param \Volcengine\Mlplatform20240701\Model\ResourceClaimForListDevInstancesOutput $resource_claim resource_claim
     *
     * @return $this
     */
    public function setResourceClaim($resource_claim)
    {
        $this->container['resource_claim'] = $resource_claim;

        return $this;
    }

    /**
     * Gets resource_queue_id
     *
     * @return string
     */
    public function getResourceQueueId()
    {
        return $this->container['resource_queue_id'];
    }

    /**
     * Sets resource_queue_id
     *
     * @param string $resource_queue_id resource_queue_id
     *
     * @return $this
     */
    public function setResourceQueueId($resource_queue_id)
    {
        $this->container['resource_queue_id'] = $resource_queue_id;

        return $this;
    }

    /**
     * Gets ssh_public_key
     *
     * @return string
     */
    public function getSshPublicKey()
    {
        return $this->container['ssh_public_key'];
    }

    /**
     * Sets ssh_public_key
     *
     * @param string $ssh_public_key ssh_public_key
     *
     * @return $this
     */
    public function setSshPublicKey($ssh_public_key)
    {
        $this->container['ssh_public_key'] = $ssh_public_key;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Mlplatform20240701\Model\StatusForListDevInstancesOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Mlplatform20240701\Model\StatusForListDevInstancesOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets stop_time
     *
     * @return string
     */
    public function getStopTime()
    {
        return $this->container['stop_time'];
    }

    /**
     * Sets stop_time
     *
     * @param string $stop_time stop_time
     *
     * @return $this
     */
    public function setStopTime($stop_time)
    {
        $this->container['stop_time'] = $stop_time;

        return $this;
    }

    /**
     * Gets stopped_time
     *
     * @return string
     */
    public function getStoppedTime()
    {
        return $this->container['stopped_time'];
    }

    /**
     * Sets stopped_time
     *
     * @param string $stopped_time stopped_time
     *
     * @return $this
     */
    public function setStoppedTime($stopped_time)
    {
        $this->container['stopped_time'] = $stopped_time;

        return $this;
    }

    /**
     * Gets storages
     *
     * @return \Volcengine\Mlplatform20240701\Model\StorageForListDevInstancesOutput[]
     */
    public function getStorages()
    {
        return $this->container['storages'];
    }

    /**
     * Sets storages
     *
     * @param \Volcengine\Mlplatform20240701\Model\StorageForListDevInstancesOutput[] $storages storages
     *
     * @return $this
     */
    public function setStorages($storages)
    {
        $this->container['storages'] = $storages;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return \Volcengine\Mlplatform20240701\Model\VolumeForListDevInstancesOutput
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param \Volcengine\Mlplatform20240701\Model\VolumeForListDevInstancesOutput $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

