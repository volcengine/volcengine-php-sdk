<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListServicesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListServicesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time_after' => 'string',
        'create_time_before' => 'string',
        'name_contains' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'sort_by' => 'string',
        'sort_order' => 'string',
        'state' => 'string',
        'update_time_after' => 'string',
        'update_time_before' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time_after' => null,
        'create_time_before' => null,
        'name_contains' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'sort_by' => null,
        'sort_order' => null,
        'state' => null,
        'update_time_after' => null,
        'update_time_before' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time_after' => 'CreateTimeAfter',
        'create_time_before' => 'CreateTimeBefore',
        'name_contains' => 'NameContains',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'sort_by' => 'SortBy',
        'sort_order' => 'SortOrder',
        'state' => 'State',
        'update_time_after' => 'UpdateTimeAfter',
        'update_time_before' => 'UpdateTimeBefore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time_after' => 'setCreateTimeAfter',
        'create_time_before' => 'setCreateTimeBefore',
        'name_contains' => 'setNameContains',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'sort_by' => 'setSortBy',
        'sort_order' => 'setSortOrder',
        'state' => 'setState',
        'update_time_after' => 'setUpdateTimeAfter',
        'update_time_before' => 'setUpdateTimeBefore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time_after' => 'getCreateTimeAfter',
        'create_time_before' => 'getCreateTimeBefore',
        'name_contains' => 'getNameContains',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'sort_by' => 'getSortBy',
        'sort_order' => 'getSortOrder',
        'state' => 'getState',
        'update_time_after' => 'getUpdateTimeAfter',
        'update_time_before' => 'getUpdateTimeBefore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SORT_BY_CREATE_TIME = 'CreateTime';
    const SORT_ORDER_ASCEND = 'Ascend';
    const SORT_ORDER_DESCEND = 'Descend';
    const STATE_NONE = 'None';
    const STATE_CREATING = 'Creating';
    const STATE_INSERVICE = 'Inservice';
    const STATE_STOPPING = 'Stopping';
    const STATE_STOPPED = 'Stopped';
    const STATE_DELETING = 'Deleting';
    const STATE_ABNORMAL = 'Abnormal';
    const STATE_STAGING = 'Staging';
    const STATE_DELETED = 'Deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortByAllowableValues()
    {
        return [
            self::SORT_BY_CREATE_TIME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortOrderAllowableValues()
    {
        return [
            self::SORT_ORDER_ASCEND,
            self::SORT_ORDER_DESCEND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_NONE,
            self::STATE_CREATING,
            self::STATE_INSERVICE,
            self::STATE_STOPPING,
            self::STATE_STOPPED,
            self::STATE_DELETING,
            self::STATE_ABNORMAL,
            self::STATE_STAGING,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time_after'] = isset($data['create_time_after']) ? $data['create_time_after'] : null;
        $this->container['create_time_before'] = isset($data['create_time_before']) ? $data['create_time_before'] : null;
        $this->container['name_contains'] = isset($data['name_contains']) ? $data['name_contains'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['update_time_after'] = isset($data['update_time_after']) ? $data['update_time_after'] : null;
        $this->container['update_time_before'] = isset($data['update_time_before']) ? $data['update_time_before'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSortByAllowableValues();
        if (!is_null($this->container['sort_by']) && !in_array($this->container['sort_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($this->container['sort_order']) && !in_array($this->container['sort_order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort_order', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time_after
     *
     * @return string
     */
    public function getCreateTimeAfter()
    {
        return $this->container['create_time_after'];
    }

    /**
     * Sets create_time_after
     *
     * @param string $create_time_after create_time_after
     *
     * @return $this
     */
    public function setCreateTimeAfter($create_time_after)
    {
        $this->container['create_time_after'] = $create_time_after;

        return $this;
    }

    /**
     * Gets create_time_before
     *
     * @return string
     */
    public function getCreateTimeBefore()
    {
        return $this->container['create_time_before'];
    }

    /**
     * Sets create_time_before
     *
     * @param string $create_time_before create_time_before
     *
     * @return $this
     */
    public function setCreateTimeBefore($create_time_before)
    {
        $this->container['create_time_before'] = $create_time_before;

        return $this;
    }

    /**
     * Gets name_contains
     *
     * @return string
     */
    public function getNameContains()
    {
        return $this->container['name_contains'];
    }

    /**
     * Sets name_contains
     *
     * @param string $name_contains name_contains
     *
     * @return $this
     */
    public function setNameContains($name_contains)
    {
        $this->container['name_contains'] = $name_contains;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by sort_by
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $allowedValues = $this->getSortByAllowableValues();
        if (!is_null($sort_by) && !in_array($sort_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($sort_order) && !in_array($sort_order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort_order', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets update_time_after
     *
     * @return string
     */
    public function getUpdateTimeAfter()
    {
        return $this->container['update_time_after'];
    }

    /**
     * Sets update_time_after
     *
     * @param string $update_time_after update_time_after
     *
     * @return $this
     */
    public function setUpdateTimeAfter($update_time_after)
    {
        $this->container['update_time_after'] = $update_time_after;

        return $this;
    }

    /**
     * Gets update_time_before
     *
     * @return string
     */
    public function getUpdateTimeBefore()
    {
        return $this->container['update_time_before'];
    }

    /**
     * Sets update_time_before
     *
     * @param string $update_time_before update_time_before
     *
     * @return $this
     */
    public function setUpdateTimeBefore($update_time_before)
    {
        $this->container['update_time_before'] = $update_time_before;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

