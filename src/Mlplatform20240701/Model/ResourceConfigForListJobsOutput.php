<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ResourceConfigForListJobsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResourceConfigForListJobsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'holding_time_seconds' => 'int',
        'max_runtime_seconds' => 'int',
        'numa_affinity' => 'string',
        'only_use_suspected_node' => 'bool',
        'preemptible' => 'bool',
        'priority' => 'int',
        'resource_queue_id' => 'string',
        'resource_reservation' => 'bool',
        'resource_reservation_plan_id' => 'string',
        'roles' => '\Volcengine\Mlplatform20240701\Model\RoleForListJobsOutput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'holding_time_seconds' => 'int64',
        'max_runtime_seconds' => 'int64',
        'numa_affinity' => null,
        'only_use_suspected_node' => null,
        'preemptible' => null,
        'priority' => 'int32',
        'resource_queue_id' => null,
        'resource_reservation' => null,
        'resource_reservation_plan_id' => null,
        'roles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'holding_time_seconds' => 'HoldingTimeSeconds',
        'max_runtime_seconds' => 'MaxRuntimeSeconds',
        'numa_affinity' => 'NumaAffinity',
        'only_use_suspected_node' => 'OnlyUseSuspectedNode',
        'preemptible' => 'Preemptible',
        'priority' => 'Priority',
        'resource_queue_id' => 'ResourceQueueId',
        'resource_reservation' => 'ResourceReservation',
        'resource_reservation_plan_id' => 'ResourceReservationPlanId',
        'roles' => 'Roles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'holding_time_seconds' => 'setHoldingTimeSeconds',
        'max_runtime_seconds' => 'setMaxRuntimeSeconds',
        'numa_affinity' => 'setNumaAffinity',
        'only_use_suspected_node' => 'setOnlyUseSuspectedNode',
        'preemptible' => 'setPreemptible',
        'priority' => 'setPriority',
        'resource_queue_id' => 'setResourceQueueId',
        'resource_reservation' => 'setResourceReservation',
        'resource_reservation_plan_id' => 'setResourceReservationPlanId',
        'roles' => 'setRoles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'holding_time_seconds' => 'getHoldingTimeSeconds',
        'max_runtime_seconds' => 'getMaxRuntimeSeconds',
        'numa_affinity' => 'getNumaAffinity',
        'only_use_suspected_node' => 'getOnlyUseSuspectedNode',
        'preemptible' => 'getPreemptible',
        'priority' => 'getPriority',
        'resource_queue_id' => 'getResourceQueueId',
        'resource_reservation' => 'getResourceReservation',
        'resource_reservation_plan_id' => 'getResourceReservationPlanId',
        'roles' => 'getRoles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['holding_time_seconds'] = isset($data['holding_time_seconds']) ? $data['holding_time_seconds'] : null;
        $this->container['max_runtime_seconds'] = isset($data['max_runtime_seconds']) ? $data['max_runtime_seconds'] : null;
        $this->container['numa_affinity'] = isset($data['numa_affinity']) ? $data['numa_affinity'] : null;
        $this->container['only_use_suspected_node'] = isset($data['only_use_suspected_node']) ? $data['only_use_suspected_node'] : null;
        $this->container['preemptible'] = isset($data['preemptible']) ? $data['preemptible'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['resource_queue_id'] = isset($data['resource_queue_id']) ? $data['resource_queue_id'] : null;
        $this->container['resource_reservation'] = isset($data['resource_reservation']) ? $data['resource_reservation'] : null;
        $this->container['resource_reservation_plan_id'] = isset($data['resource_reservation_plan_id']) ? $data['resource_reservation_plan_id'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets holding_time_seconds
     *
     * @return int
     */
    public function getHoldingTimeSeconds()
    {
        return $this->container['holding_time_seconds'];
    }

    /**
     * Sets holding_time_seconds
     *
     * @param int $holding_time_seconds holding_time_seconds
     *
     * @return $this
     */
    public function setHoldingTimeSeconds($holding_time_seconds)
    {
        $this->container['holding_time_seconds'] = $holding_time_seconds;

        return $this;
    }

    /**
     * Gets max_runtime_seconds
     *
     * @return int
     */
    public function getMaxRuntimeSeconds()
    {
        return $this->container['max_runtime_seconds'];
    }

    /**
     * Sets max_runtime_seconds
     *
     * @param int $max_runtime_seconds max_runtime_seconds
     *
     * @return $this
     */
    public function setMaxRuntimeSeconds($max_runtime_seconds)
    {
        $this->container['max_runtime_seconds'] = $max_runtime_seconds;

        return $this;
    }

    /**
     * Gets numa_affinity
     *
     * @return string
     */
    public function getNumaAffinity()
    {
        return $this->container['numa_affinity'];
    }

    /**
     * Sets numa_affinity
     *
     * @param string $numa_affinity numa_affinity
     *
     * @return $this
     */
    public function setNumaAffinity($numa_affinity)
    {
        $this->container['numa_affinity'] = $numa_affinity;

        return $this;
    }

    /**
     * Gets only_use_suspected_node
     *
     * @return bool
     */
    public function getOnlyUseSuspectedNode()
    {
        return $this->container['only_use_suspected_node'];
    }

    /**
     * Sets only_use_suspected_node
     *
     * @param bool $only_use_suspected_node only_use_suspected_node
     *
     * @return $this
     */
    public function setOnlyUseSuspectedNode($only_use_suspected_node)
    {
        $this->container['only_use_suspected_node'] = $only_use_suspected_node;

        return $this;
    }

    /**
     * Gets preemptible
     *
     * @return bool
     */
    public function getPreemptible()
    {
        return $this->container['preemptible'];
    }

    /**
     * Sets preemptible
     *
     * @param bool $preemptible preemptible
     *
     * @return $this
     */
    public function setPreemptible($preemptible)
    {
        $this->container['preemptible'] = $preemptible;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets resource_queue_id
     *
     * @return string
     */
    public function getResourceQueueId()
    {
        return $this->container['resource_queue_id'];
    }

    /**
     * Sets resource_queue_id
     *
     * @param string $resource_queue_id resource_queue_id
     *
     * @return $this
     */
    public function setResourceQueueId($resource_queue_id)
    {
        $this->container['resource_queue_id'] = $resource_queue_id;

        return $this;
    }

    /**
     * Gets resource_reservation
     *
     * @return bool
     */
    public function getResourceReservation()
    {
        return $this->container['resource_reservation'];
    }

    /**
     * Sets resource_reservation
     *
     * @param bool $resource_reservation resource_reservation
     *
     * @return $this
     */
    public function setResourceReservation($resource_reservation)
    {
        $this->container['resource_reservation'] = $resource_reservation;

        return $this;
    }

    /**
     * Gets resource_reservation_plan_id
     *
     * @return string
     */
    public function getResourceReservationPlanId()
    {
        return $this->container['resource_reservation_plan_id'];
    }

    /**
     * Sets resource_reservation_plan_id
     *
     * @param string $resource_reservation_plan_id resource_reservation_plan_id
     *
     * @return $this
     */
    public function setResourceReservationPlanId($resource_reservation_plan_id)
    {
        $this->container['resource_reservation_plan_id'] = $resource_reservation_plan_id;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Volcengine\Mlplatform20240701\Model\RoleForListJobsOutput[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Volcengine\Mlplatform20240701\Model\RoleForListJobsOutput[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

