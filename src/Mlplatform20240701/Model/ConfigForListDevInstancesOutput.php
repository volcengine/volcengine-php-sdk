<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ConfigForListDevInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigForListDevInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cfs' => '\Volcengine\Mlplatform20240701\Model\CfsForListDevInstancesOutput',
        'nas' => '\Volcengine\Mlplatform20240701\Model\NasForListDevInstancesOutput',
        'nas_ap' => '\Volcengine\Mlplatform20240701\Model\NasAPForListDevInstancesOutput',
        'sfcs' => '\Volcengine\Mlplatform20240701\Model\SfcsForListDevInstancesOutput',
        'tos' => '\Volcengine\Mlplatform20240701\Model\TosForListDevInstancesOutput',
        'vepfs' => '\Volcengine\Mlplatform20240701\Model\VepfsForListDevInstancesOutput',
        'vepfs_ap' => '\Volcengine\Mlplatform20240701\Model\VepfsAPForListDevInstancesOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cfs' => null,
        'nas' => null,
        'nas_ap' => null,
        'sfcs' => null,
        'tos' => null,
        'vepfs' => null,
        'vepfs_ap' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cfs' => 'Cfs',
        'nas' => 'Nas',
        'nas_ap' => 'NasAP',
        'sfcs' => 'Sfcs',
        'tos' => 'Tos',
        'vepfs' => 'Vepfs',
        'vepfs_ap' => 'VepfsAP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cfs' => 'setCfs',
        'nas' => 'setNas',
        'nas_ap' => 'setNasAp',
        'sfcs' => 'setSfcs',
        'tos' => 'setTos',
        'vepfs' => 'setVepfs',
        'vepfs_ap' => 'setVepfsAp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cfs' => 'getCfs',
        'nas' => 'getNas',
        'nas_ap' => 'getNasAp',
        'sfcs' => 'getSfcs',
        'tos' => 'getTos',
        'vepfs' => 'getVepfs',
        'vepfs_ap' => 'getVepfsAp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cfs'] = isset($data['cfs']) ? $data['cfs'] : null;
        $this->container['nas'] = isset($data['nas']) ? $data['nas'] : null;
        $this->container['nas_ap'] = isset($data['nas_ap']) ? $data['nas_ap'] : null;
        $this->container['sfcs'] = isset($data['sfcs']) ? $data['sfcs'] : null;
        $this->container['tos'] = isset($data['tos']) ? $data['tos'] : null;
        $this->container['vepfs'] = isset($data['vepfs']) ? $data['vepfs'] : null;
        $this->container['vepfs_ap'] = isset($data['vepfs_ap']) ? $data['vepfs_ap'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cfs
     *
     * @return \Volcengine\Mlplatform20240701\Model\CfsForListDevInstancesOutput
     */
    public function getCfs()
    {
        return $this->container['cfs'];
    }

    /**
     * Sets cfs
     *
     * @param \Volcengine\Mlplatform20240701\Model\CfsForListDevInstancesOutput $cfs cfs
     *
     * @return $this
     */
    public function setCfs($cfs)
    {
        $this->container['cfs'] = $cfs;

        return $this;
    }

    /**
     * Gets nas
     *
     * @return \Volcengine\Mlplatform20240701\Model\NasForListDevInstancesOutput
     */
    public function getNas()
    {
        return $this->container['nas'];
    }

    /**
     * Sets nas
     *
     * @param \Volcengine\Mlplatform20240701\Model\NasForListDevInstancesOutput $nas nas
     *
     * @return $this
     */
    public function setNas($nas)
    {
        $this->container['nas'] = $nas;

        return $this;
    }

    /**
     * Gets nas_ap
     *
     * @return \Volcengine\Mlplatform20240701\Model\NasAPForListDevInstancesOutput
     */
    public function getNasAp()
    {
        return $this->container['nas_ap'];
    }

    /**
     * Sets nas_ap
     *
     * @param \Volcengine\Mlplatform20240701\Model\NasAPForListDevInstancesOutput $nas_ap nas_ap
     *
     * @return $this
     */
    public function setNasAp($nas_ap)
    {
        $this->container['nas_ap'] = $nas_ap;

        return $this;
    }

    /**
     * Gets sfcs
     *
     * @return \Volcengine\Mlplatform20240701\Model\SfcsForListDevInstancesOutput
     */
    public function getSfcs()
    {
        return $this->container['sfcs'];
    }

    /**
     * Sets sfcs
     *
     * @param \Volcengine\Mlplatform20240701\Model\SfcsForListDevInstancesOutput $sfcs sfcs
     *
     * @return $this
     */
    public function setSfcs($sfcs)
    {
        $this->container['sfcs'] = $sfcs;

        return $this;
    }

    /**
     * Gets tos
     *
     * @return \Volcengine\Mlplatform20240701\Model\TosForListDevInstancesOutput
     */
    public function getTos()
    {
        return $this->container['tos'];
    }

    /**
     * Sets tos
     *
     * @param \Volcengine\Mlplatform20240701\Model\TosForListDevInstancesOutput $tos tos
     *
     * @return $this
     */
    public function setTos($tos)
    {
        $this->container['tos'] = $tos;

        return $this;
    }

    /**
     * Gets vepfs
     *
     * @return \Volcengine\Mlplatform20240701\Model\VepfsForListDevInstancesOutput
     */
    public function getVepfs()
    {
        return $this->container['vepfs'];
    }

    /**
     * Sets vepfs
     *
     * @param \Volcengine\Mlplatform20240701\Model\VepfsForListDevInstancesOutput $vepfs vepfs
     *
     * @return $this
     */
    public function setVepfs($vepfs)
    {
        $this->container['vepfs'] = $vepfs;

        return $this;
    }

    /**
     * Gets vepfs_ap
     *
     * @return \Volcengine\Mlplatform20240701\Model\VepfsAPForListDevInstancesOutput
     */
    public function getVepfsAp()
    {
        return $this->container['vepfs_ap'];
    }

    /**
     * Sets vepfs_ap
     *
     * @param \Volcengine\Mlplatform20240701\Model\VepfsAPForListDevInstancesOutput $vepfs_ap vepfs_ap
     *
     * @return $this
     */
    public function setVepfsAp($vepfs_ap)
    {
        $this->container['vepfs_ap'] = $vepfs_ap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

