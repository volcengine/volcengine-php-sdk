<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateResourceGroupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateResourceGroupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_renew' => 'bool',
        'auto_renew_period' => 'int',
        'charge_type' => 'string',
        'description' => 'string',
        'dry_run' => 'bool',
        'm_gpu_enabled' => 'bool',
        'name' => 'string',
        'period' => 'int',
        'period_unit' => 'string',
        'project_name' => 'string',
        'resource_config' => '\Volcengine\Mlplatform20240701\Model\ResourceConfigForCreateResourceGroupInput',
        'storage_config' => '\Volcengine\Mlplatform20240701\Model\StorageConfigForCreateResourceGroupInput',
        'v_rdma_enabled' => 'bool',
        'workload_network_config' => '\Volcengine\Mlplatform20240701\Model\WorkloadNetworkConfigForCreateResourceGroupInput',
        'workload_network_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_renew' => null,
        'auto_renew_period' => 'int32',
        'charge_type' => null,
        'description' => null,
        'dry_run' => null,
        'm_gpu_enabled' => null,
        'name' => null,
        'period' => 'int32',
        'period_unit' => null,
        'project_name' => null,
        'resource_config' => null,
        'storage_config' => null,
        'v_rdma_enabled' => null,
        'workload_network_config' => null,
        'workload_network_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_renew' => 'AutoRenew',
        'auto_renew_period' => 'AutoRenewPeriod',
        'charge_type' => 'ChargeType',
        'description' => 'Description',
        'dry_run' => 'DryRun',
        'm_gpu_enabled' => 'MGpuEnabled',
        'name' => 'Name',
        'period' => 'Period',
        'period_unit' => 'PeriodUnit',
        'project_name' => 'ProjectName',
        'resource_config' => 'ResourceConfig',
        'storage_config' => 'StorageConfig',
        'v_rdma_enabled' => 'VRdmaEnabled',
        'workload_network_config' => 'WorkloadNetworkConfig',
        'workload_network_mode' => 'WorkloadNetworkMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_renew' => 'setAutoRenew',
        'auto_renew_period' => 'setAutoRenewPeriod',
        'charge_type' => 'setChargeType',
        'description' => 'setDescription',
        'dry_run' => 'setDryRun',
        'm_gpu_enabled' => 'setMGpuEnabled',
        'name' => 'setName',
        'period' => 'setPeriod',
        'period_unit' => 'setPeriodUnit',
        'project_name' => 'setProjectName',
        'resource_config' => 'setResourceConfig',
        'storage_config' => 'setStorageConfig',
        'v_rdma_enabled' => 'setVRdmaEnabled',
        'workload_network_config' => 'setWorkloadNetworkConfig',
        'workload_network_mode' => 'setWorkloadNetworkMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_renew' => 'getAutoRenew',
        'auto_renew_period' => 'getAutoRenewPeriod',
        'charge_type' => 'getChargeType',
        'description' => 'getDescription',
        'dry_run' => 'getDryRun',
        'm_gpu_enabled' => 'getMGpuEnabled',
        'name' => 'getName',
        'period' => 'getPeriod',
        'period_unit' => 'getPeriodUnit',
        'project_name' => 'getProjectName',
        'resource_config' => 'getResourceConfig',
        'storage_config' => 'getStorageConfig',
        'v_rdma_enabled' => 'getVRdmaEnabled',
        'workload_network_config' => 'getWorkloadNetworkConfig',
        'workload_network_mode' => 'getWorkloadNetworkMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHARGE_TYPE_PRE_PAID = 'PrePaid';
    const CHARGE_TYPE_POST_PAID = 'PostPaid';
    const CHARGE_TYPE_ON_DEMAND = 'OnDemand';
    const PERIOD_UNIT_DAY = 'Day';
    const PERIOD_UNIT_MONTH = 'Month';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeTypeAllowableValues()
    {
        return [
            self::CHARGE_TYPE_PRE_PAID,
            self::CHARGE_TYPE_POST_PAID,
            self::CHARGE_TYPE_ON_DEMAND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodUnitAllowableValues()
    {
        return [
            self::PERIOD_UNIT_DAY,
            self::PERIOD_UNIT_MONTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['auto_renew_period'] = isset($data['auto_renew_period']) ? $data['auto_renew_period'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dry_run'] = isset($data['dry_run']) ? $data['dry_run'] : null;
        $this->container['m_gpu_enabled'] = isset($data['m_gpu_enabled']) ? $data['m_gpu_enabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['period_unit'] = isset($data['period_unit']) ? $data['period_unit'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['resource_config'] = isset($data['resource_config']) ? $data['resource_config'] : null;
        $this->container['storage_config'] = isset($data['storage_config']) ? $data['storage_config'] : null;
        $this->container['v_rdma_enabled'] = isset($data['v_rdma_enabled']) ? $data['v_rdma_enabled'] : null;
        $this->container['workload_network_config'] = isset($data['workload_network_config']) ? $data['workload_network_config'] : null;
        $this->container['workload_network_mode'] = isset($data['workload_network_mode']) ? $data['workload_network_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['charge_type'] === null) {
            $invalidProperties[] = "'charge_type' can't be null";
        }
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($this->container['charge_type']) && !in_array($this->container['charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getPeriodUnitAllowableValues();
        if (!is_null($this->container['period_unit']) && !in_array($this->container['period_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'period_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets auto_renew_period
     *
     * @return int
     */
    public function getAutoRenewPeriod()
    {
        return $this->container['auto_renew_period'];
    }

    /**
     * Sets auto_renew_period
     *
     * @param int $auto_renew_period auto_renew_period
     *
     * @return $this
     */
    public function setAutoRenewPeriod($auto_renew_period)
    {
        $this->container['auto_renew_period'] = $auto_renew_period;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!in_array($charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dry_run
     *
     * @return bool
     */
    public function getDryRun()
    {
        return $this->container['dry_run'];
    }

    /**
     * Sets dry_run
     *
     * @param bool $dry_run dry_run
     *
     * @return $this
     */
    public function setDryRun($dry_run)
    {
        $this->container['dry_run'] = $dry_run;

        return $this;
    }

    /**
     * Gets m_gpu_enabled
     *
     * @return bool
     */
    public function getMGpuEnabled()
    {
        return $this->container['m_gpu_enabled'];
    }

    /**
     * Sets m_gpu_enabled
     *
     * @param bool $m_gpu_enabled m_gpu_enabled
     *
     * @return $this
     */
    public function setMGpuEnabled($m_gpu_enabled)
    {
        $this->container['m_gpu_enabled'] = $m_gpu_enabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets period_unit
     *
     * @return string
     */
    public function getPeriodUnit()
    {
        return $this->container['period_unit'];
    }

    /**
     * Sets period_unit
     *
     * @param string $period_unit period_unit
     *
     * @return $this
     */
    public function setPeriodUnit($period_unit)
    {
        $allowedValues = $this->getPeriodUnitAllowableValues();
        if (!is_null($period_unit) && !in_array($period_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'period_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period_unit'] = $period_unit;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets resource_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\ResourceConfigForCreateResourceGroupInput
     */
    public function getResourceConfig()
    {
        return $this->container['resource_config'];
    }

    /**
     * Sets resource_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\ResourceConfigForCreateResourceGroupInput $resource_config resource_config
     *
     * @return $this
     */
    public function setResourceConfig($resource_config)
    {
        $this->container['resource_config'] = $resource_config;

        return $this;
    }

    /**
     * Gets storage_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\StorageConfigForCreateResourceGroupInput
     */
    public function getStorageConfig()
    {
        return $this->container['storage_config'];
    }

    /**
     * Sets storage_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\StorageConfigForCreateResourceGroupInput $storage_config storage_config
     *
     * @return $this
     */
    public function setStorageConfig($storage_config)
    {
        $this->container['storage_config'] = $storage_config;

        return $this;
    }

    /**
     * Gets v_rdma_enabled
     *
     * @return bool
     */
    public function getVRdmaEnabled()
    {
        return $this->container['v_rdma_enabled'];
    }

    /**
     * Sets v_rdma_enabled
     *
     * @param bool $v_rdma_enabled v_rdma_enabled
     *
     * @return $this
     */
    public function setVRdmaEnabled($v_rdma_enabled)
    {
        $this->container['v_rdma_enabled'] = $v_rdma_enabled;

        return $this;
    }

    /**
     * Gets workload_network_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\WorkloadNetworkConfigForCreateResourceGroupInput
     */
    public function getWorkloadNetworkConfig()
    {
        return $this->container['workload_network_config'];
    }

    /**
     * Sets workload_network_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\WorkloadNetworkConfigForCreateResourceGroupInput $workload_network_config workload_network_config
     *
     * @return $this
     */
    public function setWorkloadNetworkConfig($workload_network_config)
    {
        $this->container['workload_network_config'] = $workload_network_config;

        return $this;
    }

    /**
     * Gets workload_network_mode
     *
     * @return string
     */
    public function getWorkloadNetworkMode()
    {
        return $this->container['workload_network_mode'];
    }

    /**
     * Sets workload_network_mode
     *
     * @param string $workload_network_mode workload_network_mode
     *
     * @return $this
     */
    public function setWorkloadNetworkMode($workload_network_mode)
    {
        $this->container['workload_network_mode'] = $workload_network_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

