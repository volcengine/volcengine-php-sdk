<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ReservationConfigForCreateResourceReservationPlanInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReservationConfigForCreateResourceReservationPlanInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_duration_hours' => 'int',
        'min_duration_hours' => 'int',
        'recurrence_end_time' => 'string',
        'recurrence_interval' => 'string',
        'recurrence_start_time' => 'string',
        'reservation_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_duration_hours' => 'int64',
        'min_duration_hours' => 'int64',
        'recurrence_end_time' => null,
        'recurrence_interval' => null,
        'recurrence_start_time' => null,
        'reservation_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_duration_hours' => 'MaxDurationHours',
        'min_duration_hours' => 'MinDurationHours',
        'recurrence_end_time' => 'RecurrenceEndTime',
        'recurrence_interval' => 'RecurrenceInterval',
        'recurrence_start_time' => 'RecurrenceStartTime',
        'reservation_type' => 'ReservationType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_duration_hours' => 'setMaxDurationHours',
        'min_duration_hours' => 'setMinDurationHours',
        'recurrence_end_time' => 'setRecurrenceEndTime',
        'recurrence_interval' => 'setRecurrenceInterval',
        'recurrence_start_time' => 'setRecurrenceStartTime',
        'reservation_type' => 'setReservationType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_duration_hours' => 'getMaxDurationHours',
        'min_duration_hours' => 'getMinDurationHours',
        'recurrence_end_time' => 'getRecurrenceEndTime',
        'recurrence_interval' => 'getRecurrenceInterval',
        'recurrence_start_time' => 'getRecurrenceStartTime',
        'reservation_type' => 'getReservationType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_duration_hours'] = isset($data['max_duration_hours']) ? $data['max_duration_hours'] : null;
        $this->container['min_duration_hours'] = isset($data['min_duration_hours']) ? $data['min_duration_hours'] : null;
        $this->container['recurrence_end_time'] = isset($data['recurrence_end_time']) ? $data['recurrence_end_time'] : null;
        $this->container['recurrence_interval'] = isset($data['recurrence_interval']) ? $data['recurrence_interval'] : null;
        $this->container['recurrence_start_time'] = isset($data['recurrence_start_time']) ? $data['recurrence_start_time'] : null;
        $this->container['reservation_type'] = isset($data['reservation_type']) ? $data['reservation_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_duration_hours
     *
     * @return int
     */
    public function getMaxDurationHours()
    {
        return $this->container['max_duration_hours'];
    }

    /**
     * Sets max_duration_hours
     *
     * @param int $max_duration_hours max_duration_hours
     *
     * @return $this
     */
    public function setMaxDurationHours($max_duration_hours)
    {
        $this->container['max_duration_hours'] = $max_duration_hours;

        return $this;
    }

    /**
     * Gets min_duration_hours
     *
     * @return int
     */
    public function getMinDurationHours()
    {
        return $this->container['min_duration_hours'];
    }

    /**
     * Sets min_duration_hours
     *
     * @param int $min_duration_hours min_duration_hours
     *
     * @return $this
     */
    public function setMinDurationHours($min_duration_hours)
    {
        $this->container['min_duration_hours'] = $min_duration_hours;

        return $this;
    }

    /**
     * Gets recurrence_end_time
     *
     * @return string
     */
    public function getRecurrenceEndTime()
    {
        return $this->container['recurrence_end_time'];
    }

    /**
     * Sets recurrence_end_time
     *
     * @param string $recurrence_end_time recurrence_end_time
     *
     * @return $this
     */
    public function setRecurrenceEndTime($recurrence_end_time)
    {
        $this->container['recurrence_end_time'] = $recurrence_end_time;

        return $this;
    }

    /**
     * Gets recurrence_interval
     *
     * @return string
     */
    public function getRecurrenceInterval()
    {
        return $this->container['recurrence_interval'];
    }

    /**
     * Sets recurrence_interval
     *
     * @param string $recurrence_interval recurrence_interval
     *
     * @return $this
     */
    public function setRecurrenceInterval($recurrence_interval)
    {
        $this->container['recurrence_interval'] = $recurrence_interval;

        return $this;
    }

    /**
     * Gets recurrence_start_time
     *
     * @return string
     */
    public function getRecurrenceStartTime()
    {
        return $this->container['recurrence_start_time'];
    }

    /**
     * Sets recurrence_start_time
     *
     * @param string $recurrence_start_time recurrence_start_time
     *
     * @return $this
     */
    public function setRecurrenceStartTime($recurrence_start_time)
    {
        $this->container['recurrence_start_time'] = $recurrence_start_time;

        return $this;
    }

    /**
     * Gets reservation_type
     *
     * @return string
     */
    public function getReservationType()
    {
        return $this->container['reservation_type'];
    }

    /**
     * Sets reservation_type
     *
     * @param string $reservation_type reservation_type
     *
     * @return $this
     */
    public function setReservationType($reservation_type)
    {
        $this->container['reservation_type'] = $reservation_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

