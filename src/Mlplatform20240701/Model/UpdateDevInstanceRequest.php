<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateDevInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateDevInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'credential' => '\Volcengine\Mlplatform20240701\Model\CredentialForUpdateDevInstanceInput',
        'default_folder' => 'string',
        'description' => 'string',
        'id' => 'string',
        'name' => 'string',
        'node_affinity_spec' => '\Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForUpdateDevInstanceInput',
        'numa_affinity' => 'string',
        'ports' => '\Volcengine\Mlplatform20240701\Model\PortForUpdateDevInstanceInput[]',
        'resource_claim' => '\Volcengine\Mlplatform20240701\Model\ResourceClaimForUpdateDevInstanceInput',
        'resource_queue_id' => 'string',
        'resource_reservation_plan_id' => 'string',
        'ssh_public_key' => 'string',
        'storages' => '\Volcengine\Mlplatform20240701\Model\StorageForUpdateDevInstanceInput[]',
        'volume_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'credential' => null,
        'default_folder' => null,
        'description' => null,
        'id' => null,
        'name' => null,
        'node_affinity_spec' => null,
        'numa_affinity' => null,
        'ports' => null,
        'resource_claim' => null,
        'resource_queue_id' => null,
        'resource_reservation_plan_id' => null,
        'ssh_public_key' => null,
        'storages' => null,
        'volume_size' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credential' => 'Credential',
        'default_folder' => 'DefaultFolder',
        'description' => 'Description',
        'id' => 'Id',
        'name' => 'Name',
        'node_affinity_spec' => 'NodeAffinitySpec',
        'numa_affinity' => 'NumaAffinity',
        'ports' => 'Ports',
        'resource_claim' => 'ResourceClaim',
        'resource_queue_id' => 'ResourceQueueId',
        'resource_reservation_plan_id' => 'ResourceReservationPlanId',
        'ssh_public_key' => 'SshPublicKey',
        'storages' => 'Storages',
        'volume_size' => 'VolumeSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credential' => 'setCredential',
        'default_folder' => 'setDefaultFolder',
        'description' => 'setDescription',
        'id' => 'setId',
        'name' => 'setName',
        'node_affinity_spec' => 'setNodeAffinitySpec',
        'numa_affinity' => 'setNumaAffinity',
        'ports' => 'setPorts',
        'resource_claim' => 'setResourceClaim',
        'resource_queue_id' => 'setResourceQueueId',
        'resource_reservation_plan_id' => 'setResourceReservationPlanId',
        'ssh_public_key' => 'setSshPublicKey',
        'storages' => 'setStorages',
        'volume_size' => 'setVolumeSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credential' => 'getCredential',
        'default_folder' => 'getDefaultFolder',
        'description' => 'getDescription',
        'id' => 'getId',
        'name' => 'getName',
        'node_affinity_spec' => 'getNodeAffinitySpec',
        'numa_affinity' => 'getNumaAffinity',
        'ports' => 'getPorts',
        'resource_claim' => 'getResourceClaim',
        'resource_queue_id' => 'getResourceQueueId',
        'resource_reservation_plan_id' => 'getResourceReservationPlanId',
        'ssh_public_key' => 'getSshPublicKey',
        'storages' => 'getStorages',
        'volume_size' => 'getVolumeSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['credential'] = isset($data['credential']) ? $data['credential'] : null;
        $this->container['default_folder'] = isset($data['default_folder']) ? $data['default_folder'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_affinity_spec'] = isset($data['node_affinity_spec']) ? $data['node_affinity_spec'] : null;
        $this->container['numa_affinity'] = isset($data['numa_affinity']) ? $data['numa_affinity'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['resource_claim'] = isset($data['resource_claim']) ? $data['resource_claim'] : null;
        $this->container['resource_queue_id'] = isset($data['resource_queue_id']) ? $data['resource_queue_id'] : null;
        $this->container['resource_reservation_plan_id'] = isset($data['resource_reservation_plan_id']) ? $data['resource_reservation_plan_id'] : null;
        $this->container['ssh_public_key'] = isset($data['ssh_public_key']) ? $data['ssh_public_key'] : null;
        $this->container['storages'] = isset($data['storages']) ? $data['storages'] : null;
        $this->container['volume_size'] = isset($data['volume_size']) ? $data['volume_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credential
     *
     * @return \Volcengine\Mlplatform20240701\Model\CredentialForUpdateDevInstanceInput
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param \Volcengine\Mlplatform20240701\Model\CredentialForUpdateDevInstanceInput $credential credential
     *
     * @return $this
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets default_folder
     *
     * @return string
     */
    public function getDefaultFolder()
    {
        return $this->container['default_folder'];
    }

    /**
     * Sets default_folder
     *
     * @param string $default_folder default_folder
     *
     * @return $this
     */
    public function setDefaultFolder($default_folder)
    {
        $this->container['default_folder'] = $default_folder;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_affinity_spec
     *
     * @return \Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForUpdateDevInstanceInput
     */
    public function getNodeAffinitySpec()
    {
        return $this->container['node_affinity_spec'];
    }

    /**
     * Sets node_affinity_spec
     *
     * @param \Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForUpdateDevInstanceInput $node_affinity_spec node_affinity_spec
     *
     * @return $this
     */
    public function setNodeAffinitySpec($node_affinity_spec)
    {
        $this->container['node_affinity_spec'] = $node_affinity_spec;

        return $this;
    }

    /**
     * Gets numa_affinity
     *
     * @return string
     */
    public function getNumaAffinity()
    {
        return $this->container['numa_affinity'];
    }

    /**
     * Sets numa_affinity
     *
     * @param string $numa_affinity numa_affinity
     *
     * @return $this
     */
    public function setNumaAffinity($numa_affinity)
    {
        $this->container['numa_affinity'] = $numa_affinity;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Volcengine\Mlplatform20240701\Model\PortForUpdateDevInstanceInput[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Volcengine\Mlplatform20240701\Model\PortForUpdateDevInstanceInput[] $ports ports
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets resource_claim
     *
     * @return \Volcengine\Mlplatform20240701\Model\ResourceClaimForUpdateDevInstanceInput
     */
    public function getResourceClaim()
    {
        return $this->container['resource_claim'];
    }

    /**
     * Sets resource_claim
     *
     * @param \Volcengine\Mlplatform20240701\Model\ResourceClaimForUpdateDevInstanceInput $resource_claim resource_claim
     *
     * @return $this
     */
    public function setResourceClaim($resource_claim)
    {
        $this->container['resource_claim'] = $resource_claim;

        return $this;
    }

    /**
     * Gets resource_queue_id
     *
     * @return string
     */
    public function getResourceQueueId()
    {
        return $this->container['resource_queue_id'];
    }

    /**
     * Sets resource_queue_id
     *
     * @param string $resource_queue_id resource_queue_id
     *
     * @return $this
     */
    public function setResourceQueueId($resource_queue_id)
    {
        $this->container['resource_queue_id'] = $resource_queue_id;

        return $this;
    }

    /**
     * Gets resource_reservation_plan_id
     *
     * @return string
     */
    public function getResourceReservationPlanId()
    {
        return $this->container['resource_reservation_plan_id'];
    }

    /**
     * Sets resource_reservation_plan_id
     *
     * @param string $resource_reservation_plan_id resource_reservation_plan_id
     *
     * @return $this
     */
    public function setResourceReservationPlanId($resource_reservation_plan_id)
    {
        $this->container['resource_reservation_plan_id'] = $resource_reservation_plan_id;

        return $this;
    }

    /**
     * Gets ssh_public_key
     *
     * @return string
     */
    public function getSshPublicKey()
    {
        return $this->container['ssh_public_key'];
    }

    /**
     * Sets ssh_public_key
     *
     * @param string $ssh_public_key ssh_public_key
     *
     * @return $this
     */
    public function setSshPublicKey($ssh_public_key)
    {
        $this->container['ssh_public_key'] = $ssh_public_key;

        return $this;
    }

    /**
     * Gets storages
     *
     * @return \Volcengine\Mlplatform20240701\Model\StorageForUpdateDevInstanceInput[]
     */
    public function getStorages()
    {
        return $this->container['storages'];
    }

    /**
     * Sets storages
     *
     * @param \Volcengine\Mlplatform20240701\Model\StorageForUpdateDevInstanceInput[] $storages storages
     *
     * @return $this
     */
    public function setStorages($storages)
    {
        $this->container['storages'] = $storages;

        return $this;
    }

    /**
     * Gets volume_size
     *
     * @return int
     */
    public function getVolumeSize()
    {
        return $this->container['volume_size'];
    }

    /**
     * Sets volume_size
     *
     * @param int $volume_size volume_size
     *
     * @return $this
     */
    public function setVolumeSize($volume_size)
    {
        $this->container['volume_size'] = $volume_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

