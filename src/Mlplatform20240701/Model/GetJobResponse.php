<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetJobResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetJobResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'created_by' => 'string',
        'description' => 'string',
        'diagnose_config' => '\Volcengine\Mlplatform20240701\Model\DiagnoseConfigForGetJobOutput[]',
        'id' => 'string',
        'initial_id' => 'string',
        'name' => 'string',
        'observable_config' => '\Volcengine\Mlplatform20240701\Model\ObservableConfigForGetJobOutput',
        'private_network_config' => '\Volcengine\Mlplatform20240701\Model\PrivateNetworkConfigForGetJobOutput',
        'project_name' => 'string',
        'resource_config' => '\Volcengine\Mlplatform20240701\Model\ResourceConfigForGetJobOutput',
        'retry_config' => '\Volcengine\Mlplatform20240701\Model\RetryConfigForGetJobOutput',
        'runtime_config' => '\Volcengine\Mlplatform20240701\Model\RuntimeConfigForGetJobOutput',
        'status' => '\Volcengine\Mlplatform20240701\Model\StatusForGetJobOutput',
        'stop_reason' => 'string',
        'storage_config' => '\Volcengine\Mlplatform20240701\Model\StorageConfigForGetJobOutput',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'created_by' => null,
        'description' => null,
        'diagnose_config' => null,
        'id' => null,
        'initial_id' => null,
        'name' => null,
        'observable_config' => null,
        'private_network_config' => null,
        'project_name' => null,
        'resource_config' => null,
        'retry_config' => null,
        'runtime_config' => null,
        'status' => null,
        'stop_reason' => null,
        'storage_config' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'CreateTime',
        'created_by' => 'CreatedBy',
        'description' => 'Description',
        'diagnose_config' => 'DiagnoseConfig',
        'id' => 'Id',
        'initial_id' => 'InitialId',
        'name' => 'Name',
        'observable_config' => 'ObservableConfig',
        'private_network_config' => 'PrivateNetworkConfig',
        'project_name' => 'ProjectName',
        'resource_config' => 'ResourceConfig',
        'retry_config' => 'RetryConfig',
        'runtime_config' => 'RuntimeConfig',
        'status' => 'Status',
        'stop_reason' => 'StopReason',
        'storage_config' => 'StorageConfig',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'created_by' => 'setCreatedBy',
        'description' => 'setDescription',
        'diagnose_config' => 'setDiagnoseConfig',
        'id' => 'setId',
        'initial_id' => 'setInitialId',
        'name' => 'setName',
        'observable_config' => 'setObservableConfig',
        'private_network_config' => 'setPrivateNetworkConfig',
        'project_name' => 'setProjectName',
        'resource_config' => 'setResourceConfig',
        'retry_config' => 'setRetryConfig',
        'runtime_config' => 'setRuntimeConfig',
        'status' => 'setStatus',
        'stop_reason' => 'setStopReason',
        'storage_config' => 'setStorageConfig',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'created_by' => 'getCreatedBy',
        'description' => 'getDescription',
        'diagnose_config' => 'getDiagnoseConfig',
        'id' => 'getId',
        'initial_id' => 'getInitialId',
        'name' => 'getName',
        'observable_config' => 'getObservableConfig',
        'private_network_config' => 'getPrivateNetworkConfig',
        'project_name' => 'getProjectName',
        'resource_config' => 'getResourceConfig',
        'retry_config' => 'getRetryConfig',
        'runtime_config' => 'getRuntimeConfig',
        'status' => 'getStatus',
        'stop_reason' => 'getStopReason',
        'storage_config' => 'getStorageConfig',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['diagnose_config'] = isset($data['diagnose_config']) ? $data['diagnose_config'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['initial_id'] = isset($data['initial_id']) ? $data['initial_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['observable_config'] = isset($data['observable_config']) ? $data['observable_config'] : null;
        $this->container['private_network_config'] = isset($data['private_network_config']) ? $data['private_network_config'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['resource_config'] = isset($data['resource_config']) ? $data['resource_config'] : null;
        $this->container['retry_config'] = isset($data['retry_config']) ? $data['retry_config'] : null;
        $this->container['runtime_config'] = isset($data['runtime_config']) ? $data['runtime_config'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['stop_reason'] = isset($data['stop_reason']) ? $data['stop_reason'] : null;
        $this->container['storage_config'] = isset($data['storage_config']) ? $data['storage_config'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets diagnose_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\DiagnoseConfigForGetJobOutput[]
     */
    public function getDiagnoseConfig()
    {
        return $this->container['diagnose_config'];
    }

    /**
     * Sets diagnose_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\DiagnoseConfigForGetJobOutput[] $diagnose_config diagnose_config
     *
     * @return $this
     */
    public function setDiagnoseConfig($diagnose_config)
    {
        $this->container['diagnose_config'] = $diagnose_config;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initial_id
     *
     * @return string
     */
    public function getInitialId()
    {
        return $this->container['initial_id'];
    }

    /**
     * Sets initial_id
     *
     * @param string $initial_id initial_id
     *
     * @return $this
     */
    public function setInitialId($initial_id)
    {
        $this->container['initial_id'] = $initial_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets observable_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\ObservableConfigForGetJobOutput
     */
    public function getObservableConfig()
    {
        return $this->container['observable_config'];
    }

    /**
     * Sets observable_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\ObservableConfigForGetJobOutput $observable_config observable_config
     *
     * @return $this
     */
    public function setObservableConfig($observable_config)
    {
        $this->container['observable_config'] = $observable_config;

        return $this;
    }

    /**
     * Gets private_network_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\PrivateNetworkConfigForGetJobOutput
     */
    public function getPrivateNetworkConfig()
    {
        return $this->container['private_network_config'];
    }

    /**
     * Sets private_network_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\PrivateNetworkConfigForGetJobOutput $private_network_config private_network_config
     *
     * @return $this
     */
    public function setPrivateNetworkConfig($private_network_config)
    {
        $this->container['private_network_config'] = $private_network_config;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets resource_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\ResourceConfigForGetJobOutput
     */
    public function getResourceConfig()
    {
        return $this->container['resource_config'];
    }

    /**
     * Sets resource_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\ResourceConfigForGetJobOutput $resource_config resource_config
     *
     * @return $this
     */
    public function setResourceConfig($resource_config)
    {
        $this->container['resource_config'] = $resource_config;

        return $this;
    }

    /**
     * Gets retry_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\RetryConfigForGetJobOutput
     */
    public function getRetryConfig()
    {
        return $this->container['retry_config'];
    }

    /**
     * Sets retry_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\RetryConfigForGetJobOutput $retry_config retry_config
     *
     * @return $this
     */
    public function setRetryConfig($retry_config)
    {
        $this->container['retry_config'] = $retry_config;

        return $this;
    }

    /**
     * Gets runtime_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\RuntimeConfigForGetJobOutput
     */
    public function getRuntimeConfig()
    {
        return $this->container['runtime_config'];
    }

    /**
     * Sets runtime_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\RuntimeConfigForGetJobOutput $runtime_config runtime_config
     *
     * @return $this
     */
    public function setRuntimeConfig($runtime_config)
    {
        $this->container['runtime_config'] = $runtime_config;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Mlplatform20240701\Model\StatusForGetJobOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Mlplatform20240701\Model\StatusForGetJobOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets stop_reason
     *
     * @return string
     */
    public function getStopReason()
    {
        return $this->container['stop_reason'];
    }

    /**
     * Sets stop_reason
     *
     * @param string $stop_reason stop_reason
     *
     * @return $this
     */
    public function setStopReason($stop_reason)
    {
        $this->container['stop_reason'] = $stop_reason;

        return $this;
    }

    /**
     * Gets storage_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\StorageConfigForGetJobOutput
     */
    public function getStorageConfig()
    {
        return $this->container['storage_config'];
    }

    /**
     * Sets storage_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\StorageConfigForGetJobOutput $storage_config storage_config
     *
     * @return $this
     */
    public function setStorageConfig($storage_config)
    {
        $this->container['storage_config'] = $storage_config;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

