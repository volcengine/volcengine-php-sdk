<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetOIDCProviderResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOIDCProviderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_ids' => 'string[]',
        'create_date' => 'string',
        'description' => 'string',
        'issuance_limit_time' => 'int',
        'issuer_url' => 'string',
        'oidc_provider_name' => 'string',
        'thumbprints' => 'string[]',
        'trn' => 'string',
        'update_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_ids' => null,
        'create_date' => null,
        'description' => null,
        'issuance_limit_time' => 'int32',
        'issuer_url' => null,
        'oidc_provider_name' => null,
        'thumbprints' => null,
        'trn' => null,
        'update_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_ids' => 'ClientIDs',
        'create_date' => 'CreateDate',
        'description' => 'Description',
        'issuance_limit_time' => 'IssuanceLimitTime',
        'issuer_url' => 'IssuerURL',
        'oidc_provider_name' => 'OIDCProviderName',
        'thumbprints' => 'Thumbprints',
        'trn' => 'Trn',
        'update_date' => 'UpdateDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_ids' => 'setClientIds',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'issuance_limit_time' => 'setIssuanceLimitTime',
        'issuer_url' => 'setIssuerUrl',
        'oidc_provider_name' => 'setOidcProviderName',
        'thumbprints' => 'setThumbprints',
        'trn' => 'setTrn',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_ids' => 'getClientIds',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'issuance_limit_time' => 'getIssuanceLimitTime',
        'issuer_url' => 'getIssuerUrl',
        'oidc_provider_name' => 'getOidcProviderName',
        'thumbprints' => 'getThumbprints',
        'trn' => 'getTrn',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_ids'] = isset($data['client_ids']) ? $data['client_ids'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['issuance_limit_time'] = isset($data['issuance_limit_time']) ? $data['issuance_limit_time'] : null;
        $this->container['issuer_url'] = isset($data['issuer_url']) ? $data['issuer_url'] : null;
        $this->container['oidc_provider_name'] = isset($data['oidc_provider_name']) ? $data['oidc_provider_name'] : null;
        $this->container['thumbprints'] = isset($data['thumbprints']) ? $data['thumbprints'] : null;
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_ids
     *
     * @return string[]
     */
    public function getClientIds()
    {
        return $this->container['client_ids'];
    }

    /**
     * Sets client_ids
     *
     * @param string[] $client_ids client_ids
     *
     * @return $this
     */
    public function setClientIds($client_ids)
    {
        $this->container['client_ids'] = $client_ids;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets issuance_limit_time
     *
     * @return int
     */
    public function getIssuanceLimitTime()
    {
        return $this->container['issuance_limit_time'];
    }

    /**
     * Sets issuance_limit_time
     *
     * @param int $issuance_limit_time issuance_limit_time
     *
     * @return $this
     */
    public function setIssuanceLimitTime($issuance_limit_time)
    {
        $this->container['issuance_limit_time'] = $issuance_limit_time;

        return $this;
    }

    /**
     * Gets issuer_url
     *
     * @return string
     */
    public function getIssuerUrl()
    {
        return $this->container['issuer_url'];
    }

    /**
     * Sets issuer_url
     *
     * @param string $issuer_url issuer_url
     *
     * @return $this
     */
    public function setIssuerUrl($issuer_url)
    {
        $this->container['issuer_url'] = $issuer_url;

        return $this;
    }

    /**
     * Gets oidc_provider_name
     *
     * @return string
     */
    public function getOidcProviderName()
    {
        return $this->container['oidc_provider_name'];
    }

    /**
     * Sets oidc_provider_name
     *
     * @param string $oidc_provider_name oidc_provider_name
     *
     * @return $this
     */
    public function setOidcProviderName($oidc_provider_name)
    {
        $this->container['oidc_provider_name'] = $oidc_provider_name;

        return $this;
    }

    /**
     * Gets thumbprints
     *
     * @return string[]
     */
    public function getThumbprints()
    {
        return $this->container['thumbprints'];
    }

    /**
     * Sets thumbprints
     *
     * @param string[] $thumbprints thumbprints
     *
     * @return $this
     */
    public function setThumbprints($thumbprints)
    {
        $this->container['thumbprints'] = $thumbprints;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn trn
     *
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

