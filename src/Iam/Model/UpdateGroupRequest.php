<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateGroupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateGroupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'new_description' => 'string',
        'new_display_name' => 'string',
        'new_user_group_name' => 'string',
        'user_group_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'new_description' => null,
        'new_display_name' => null,
        'new_user_group_name' => null,
        'user_group_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_description' => 'NewDescription',
        'new_display_name' => 'NewDisplayName',
        'new_user_group_name' => 'NewUserGroupName',
        'user_group_name' => 'UserGroupName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_description' => 'setNewDescription',
        'new_display_name' => 'setNewDisplayName',
        'new_user_group_name' => 'setNewUserGroupName',
        'user_group_name' => 'setUserGroupName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_description' => 'getNewDescription',
        'new_display_name' => 'getNewDisplayName',
        'new_user_group_name' => 'getNewUserGroupName',
        'user_group_name' => 'getUserGroupName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_description'] = isset($data['new_description']) ? $data['new_description'] : null;
        $this->container['new_display_name'] = isset($data['new_display_name']) ? $data['new_display_name'] : null;
        $this->container['new_user_group_name'] = isset($data['new_user_group_name']) ? $data['new_user_group_name'] : null;
        $this->container['user_group_name'] = isset($data['user_group_name']) ? $data['user_group_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_group_name'] === null) {
            $invalidProperties[] = "'user_group_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_description
     *
     * @return string
     */
    public function getNewDescription()
    {
        return $this->container['new_description'];
    }

    /**
     * Sets new_description
     *
     * @param string $new_description new_description
     *
     * @return $this
     */
    public function setNewDescription($new_description)
    {
        $this->container['new_description'] = $new_description;

        return $this;
    }

    /**
     * Gets new_display_name
     *
     * @return string
     */
    public function getNewDisplayName()
    {
        return $this->container['new_display_name'];
    }

    /**
     * Sets new_display_name
     *
     * @param string $new_display_name new_display_name
     *
     * @return $this
     */
    public function setNewDisplayName($new_display_name)
    {
        $this->container['new_display_name'] = $new_display_name;

        return $this;
    }

    /**
     * Gets new_user_group_name
     *
     * @return string
     */
    public function getNewUserGroupName()
    {
        return $this->container['new_user_group_name'];
    }

    /**
     * Sets new_user_group_name
     *
     * @param string $new_user_group_name new_user_group_name
     *
     * @return $this
     */
    public function setNewUserGroupName($new_user_group_name)
    {
        $this->container['new_user_group_name'] = $new_user_group_name;

        return $this;
    }

    /**
     * Gets user_group_name
     *
     * @return string
     */
    public function getUserGroupName()
    {
        return $this->container['user_group_name'];
    }

    /**
     * Sets user_group_name
     *
     * @param string $user_group_name user_group_name
     *
     * @return $this
     */
    public function setUserGroupName($user_group_name)
    {
        $this->container['user_group_name'] = $user_group_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

