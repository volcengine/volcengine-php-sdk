<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SummaryMapForGetAccountSummaryOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SummaryMapForGetAccountSummaryOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_keys_per_account_quota' => 'int',
        'access_keys_per_user_quota' => 'int',
        'attached_policies_per_group_quota' => 'int',
        'attached_policies_per_role_quota' => 'int',
        'attached_policies_per_user_quota' => 'int',
        'attached_system_policies_per_group_quota' => 'int',
        'attached_system_policies_per_role_quota' => 'int',
        'attached_system_policies_per_user_quota' => 'int',
        'groups_per_user_quota' => 'int',
        'groups_quota' => 'int',
        'groups_usage' => 'int',
        'policies_quota' => 'int',
        'policies_usage' => 'int',
        'policy_size' => 'int',
        'roles_quota' => 'int',
        'roles_usage' => 'int',
        'users_quota' => 'int',
        'users_usage' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_keys_per_account_quota' => 'int64',
        'access_keys_per_user_quota' => 'int64',
        'attached_policies_per_group_quota' => 'int64',
        'attached_policies_per_role_quota' => 'int64',
        'attached_policies_per_user_quota' => 'int64',
        'attached_system_policies_per_group_quota' => 'int64',
        'attached_system_policies_per_role_quota' => 'int64',
        'attached_system_policies_per_user_quota' => 'int64',
        'groups_per_user_quota' => 'int64',
        'groups_quota' => 'int64',
        'groups_usage' => 'int64',
        'policies_quota' => 'int64',
        'policies_usage' => 'int64',
        'policy_size' => 'int64',
        'roles_quota' => 'int64',
        'roles_usage' => 'int64',
        'users_quota' => 'int64',
        'users_usage' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_keys_per_account_quota' => 'AccessKeysPerAccountQuota',
        'access_keys_per_user_quota' => 'AccessKeysPerUserQuota',
        'attached_policies_per_group_quota' => 'AttachedPoliciesPerGroupQuota',
        'attached_policies_per_role_quota' => 'AttachedPoliciesPerRoleQuota',
        'attached_policies_per_user_quota' => 'AttachedPoliciesPerUserQuota',
        'attached_system_policies_per_group_quota' => 'AttachedSystemPoliciesPerGroupQuota',
        'attached_system_policies_per_role_quota' => 'AttachedSystemPoliciesPerRoleQuota',
        'attached_system_policies_per_user_quota' => 'AttachedSystemPoliciesPerUserQuota',
        'groups_per_user_quota' => 'GroupsPerUserQuota',
        'groups_quota' => 'GroupsQuota',
        'groups_usage' => 'GroupsUsage',
        'policies_quota' => 'PoliciesQuota',
        'policies_usage' => 'PoliciesUsage',
        'policy_size' => 'PolicySize',
        'roles_quota' => 'RolesQuota',
        'roles_usage' => 'RolesUsage',
        'users_quota' => 'UsersQuota',
        'users_usage' => 'UsersUsage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_keys_per_account_quota' => 'setAccessKeysPerAccountQuota',
        'access_keys_per_user_quota' => 'setAccessKeysPerUserQuota',
        'attached_policies_per_group_quota' => 'setAttachedPoliciesPerGroupQuota',
        'attached_policies_per_role_quota' => 'setAttachedPoliciesPerRoleQuota',
        'attached_policies_per_user_quota' => 'setAttachedPoliciesPerUserQuota',
        'attached_system_policies_per_group_quota' => 'setAttachedSystemPoliciesPerGroupQuota',
        'attached_system_policies_per_role_quota' => 'setAttachedSystemPoliciesPerRoleQuota',
        'attached_system_policies_per_user_quota' => 'setAttachedSystemPoliciesPerUserQuota',
        'groups_per_user_quota' => 'setGroupsPerUserQuota',
        'groups_quota' => 'setGroupsQuota',
        'groups_usage' => 'setGroupsUsage',
        'policies_quota' => 'setPoliciesQuota',
        'policies_usage' => 'setPoliciesUsage',
        'policy_size' => 'setPolicySize',
        'roles_quota' => 'setRolesQuota',
        'roles_usage' => 'setRolesUsage',
        'users_quota' => 'setUsersQuota',
        'users_usage' => 'setUsersUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_keys_per_account_quota' => 'getAccessKeysPerAccountQuota',
        'access_keys_per_user_quota' => 'getAccessKeysPerUserQuota',
        'attached_policies_per_group_quota' => 'getAttachedPoliciesPerGroupQuota',
        'attached_policies_per_role_quota' => 'getAttachedPoliciesPerRoleQuota',
        'attached_policies_per_user_quota' => 'getAttachedPoliciesPerUserQuota',
        'attached_system_policies_per_group_quota' => 'getAttachedSystemPoliciesPerGroupQuota',
        'attached_system_policies_per_role_quota' => 'getAttachedSystemPoliciesPerRoleQuota',
        'attached_system_policies_per_user_quota' => 'getAttachedSystemPoliciesPerUserQuota',
        'groups_per_user_quota' => 'getGroupsPerUserQuota',
        'groups_quota' => 'getGroupsQuota',
        'groups_usage' => 'getGroupsUsage',
        'policies_quota' => 'getPoliciesQuota',
        'policies_usage' => 'getPoliciesUsage',
        'policy_size' => 'getPolicySize',
        'roles_quota' => 'getRolesQuota',
        'roles_usage' => 'getRolesUsage',
        'users_quota' => 'getUsersQuota',
        'users_usage' => 'getUsersUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_keys_per_account_quota'] = isset($data['access_keys_per_account_quota']) ? $data['access_keys_per_account_quota'] : null;
        $this->container['access_keys_per_user_quota'] = isset($data['access_keys_per_user_quota']) ? $data['access_keys_per_user_quota'] : null;
        $this->container['attached_policies_per_group_quota'] = isset($data['attached_policies_per_group_quota']) ? $data['attached_policies_per_group_quota'] : null;
        $this->container['attached_policies_per_role_quota'] = isset($data['attached_policies_per_role_quota']) ? $data['attached_policies_per_role_quota'] : null;
        $this->container['attached_policies_per_user_quota'] = isset($data['attached_policies_per_user_quota']) ? $data['attached_policies_per_user_quota'] : null;
        $this->container['attached_system_policies_per_group_quota'] = isset($data['attached_system_policies_per_group_quota']) ? $data['attached_system_policies_per_group_quota'] : null;
        $this->container['attached_system_policies_per_role_quota'] = isset($data['attached_system_policies_per_role_quota']) ? $data['attached_system_policies_per_role_quota'] : null;
        $this->container['attached_system_policies_per_user_quota'] = isset($data['attached_system_policies_per_user_quota']) ? $data['attached_system_policies_per_user_quota'] : null;
        $this->container['groups_per_user_quota'] = isset($data['groups_per_user_quota']) ? $data['groups_per_user_quota'] : null;
        $this->container['groups_quota'] = isset($data['groups_quota']) ? $data['groups_quota'] : null;
        $this->container['groups_usage'] = isset($data['groups_usage']) ? $data['groups_usage'] : null;
        $this->container['policies_quota'] = isset($data['policies_quota']) ? $data['policies_quota'] : null;
        $this->container['policies_usage'] = isset($data['policies_usage']) ? $data['policies_usage'] : null;
        $this->container['policy_size'] = isset($data['policy_size']) ? $data['policy_size'] : null;
        $this->container['roles_quota'] = isset($data['roles_quota']) ? $data['roles_quota'] : null;
        $this->container['roles_usage'] = isset($data['roles_usage']) ? $data['roles_usage'] : null;
        $this->container['users_quota'] = isset($data['users_quota']) ? $data['users_quota'] : null;
        $this->container['users_usage'] = isset($data['users_usage']) ? $data['users_usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_keys_per_account_quota
     *
     * @return int
     */
    public function getAccessKeysPerAccountQuota()
    {
        return $this->container['access_keys_per_account_quota'];
    }

    /**
     * Sets access_keys_per_account_quota
     *
     * @param int $access_keys_per_account_quota access_keys_per_account_quota
     *
     * @return $this
     */
    public function setAccessKeysPerAccountQuota($access_keys_per_account_quota)
    {
        $this->container['access_keys_per_account_quota'] = $access_keys_per_account_quota;

        return $this;
    }

    /**
     * Gets access_keys_per_user_quota
     *
     * @return int
     */
    public function getAccessKeysPerUserQuota()
    {
        return $this->container['access_keys_per_user_quota'];
    }

    /**
     * Sets access_keys_per_user_quota
     *
     * @param int $access_keys_per_user_quota access_keys_per_user_quota
     *
     * @return $this
     */
    public function setAccessKeysPerUserQuota($access_keys_per_user_quota)
    {
        $this->container['access_keys_per_user_quota'] = $access_keys_per_user_quota;

        return $this;
    }

    /**
     * Gets attached_policies_per_group_quota
     *
     * @return int
     */
    public function getAttachedPoliciesPerGroupQuota()
    {
        return $this->container['attached_policies_per_group_quota'];
    }

    /**
     * Sets attached_policies_per_group_quota
     *
     * @param int $attached_policies_per_group_quota attached_policies_per_group_quota
     *
     * @return $this
     */
    public function setAttachedPoliciesPerGroupQuota($attached_policies_per_group_quota)
    {
        $this->container['attached_policies_per_group_quota'] = $attached_policies_per_group_quota;

        return $this;
    }

    /**
     * Gets attached_policies_per_role_quota
     *
     * @return int
     */
    public function getAttachedPoliciesPerRoleQuota()
    {
        return $this->container['attached_policies_per_role_quota'];
    }

    /**
     * Sets attached_policies_per_role_quota
     *
     * @param int $attached_policies_per_role_quota attached_policies_per_role_quota
     *
     * @return $this
     */
    public function setAttachedPoliciesPerRoleQuota($attached_policies_per_role_quota)
    {
        $this->container['attached_policies_per_role_quota'] = $attached_policies_per_role_quota;

        return $this;
    }

    /**
     * Gets attached_policies_per_user_quota
     *
     * @return int
     */
    public function getAttachedPoliciesPerUserQuota()
    {
        return $this->container['attached_policies_per_user_quota'];
    }

    /**
     * Sets attached_policies_per_user_quota
     *
     * @param int $attached_policies_per_user_quota attached_policies_per_user_quota
     *
     * @return $this
     */
    public function setAttachedPoliciesPerUserQuota($attached_policies_per_user_quota)
    {
        $this->container['attached_policies_per_user_quota'] = $attached_policies_per_user_quota;

        return $this;
    }

    /**
     * Gets attached_system_policies_per_group_quota
     *
     * @return int
     */
    public function getAttachedSystemPoliciesPerGroupQuota()
    {
        return $this->container['attached_system_policies_per_group_quota'];
    }

    /**
     * Sets attached_system_policies_per_group_quota
     *
     * @param int $attached_system_policies_per_group_quota attached_system_policies_per_group_quota
     *
     * @return $this
     */
    public function setAttachedSystemPoliciesPerGroupQuota($attached_system_policies_per_group_quota)
    {
        $this->container['attached_system_policies_per_group_quota'] = $attached_system_policies_per_group_quota;

        return $this;
    }

    /**
     * Gets attached_system_policies_per_role_quota
     *
     * @return int
     */
    public function getAttachedSystemPoliciesPerRoleQuota()
    {
        return $this->container['attached_system_policies_per_role_quota'];
    }

    /**
     * Sets attached_system_policies_per_role_quota
     *
     * @param int $attached_system_policies_per_role_quota attached_system_policies_per_role_quota
     *
     * @return $this
     */
    public function setAttachedSystemPoliciesPerRoleQuota($attached_system_policies_per_role_quota)
    {
        $this->container['attached_system_policies_per_role_quota'] = $attached_system_policies_per_role_quota;

        return $this;
    }

    /**
     * Gets attached_system_policies_per_user_quota
     *
     * @return int
     */
    public function getAttachedSystemPoliciesPerUserQuota()
    {
        return $this->container['attached_system_policies_per_user_quota'];
    }

    /**
     * Sets attached_system_policies_per_user_quota
     *
     * @param int $attached_system_policies_per_user_quota attached_system_policies_per_user_quota
     *
     * @return $this
     */
    public function setAttachedSystemPoliciesPerUserQuota($attached_system_policies_per_user_quota)
    {
        $this->container['attached_system_policies_per_user_quota'] = $attached_system_policies_per_user_quota;

        return $this;
    }

    /**
     * Gets groups_per_user_quota
     *
     * @return int
     */
    public function getGroupsPerUserQuota()
    {
        return $this->container['groups_per_user_quota'];
    }

    /**
     * Sets groups_per_user_quota
     *
     * @param int $groups_per_user_quota groups_per_user_quota
     *
     * @return $this
     */
    public function setGroupsPerUserQuota($groups_per_user_quota)
    {
        $this->container['groups_per_user_quota'] = $groups_per_user_quota;

        return $this;
    }

    /**
     * Gets groups_quota
     *
     * @return int
     */
    public function getGroupsQuota()
    {
        return $this->container['groups_quota'];
    }

    /**
     * Sets groups_quota
     *
     * @param int $groups_quota groups_quota
     *
     * @return $this
     */
    public function setGroupsQuota($groups_quota)
    {
        $this->container['groups_quota'] = $groups_quota;

        return $this;
    }

    /**
     * Gets groups_usage
     *
     * @return int
     */
    public function getGroupsUsage()
    {
        return $this->container['groups_usage'];
    }

    /**
     * Sets groups_usage
     *
     * @param int $groups_usage groups_usage
     *
     * @return $this
     */
    public function setGroupsUsage($groups_usage)
    {
        $this->container['groups_usage'] = $groups_usage;

        return $this;
    }

    /**
     * Gets policies_quota
     *
     * @return int
     */
    public function getPoliciesQuota()
    {
        return $this->container['policies_quota'];
    }

    /**
     * Sets policies_quota
     *
     * @param int $policies_quota policies_quota
     *
     * @return $this
     */
    public function setPoliciesQuota($policies_quota)
    {
        $this->container['policies_quota'] = $policies_quota;

        return $this;
    }

    /**
     * Gets policies_usage
     *
     * @return int
     */
    public function getPoliciesUsage()
    {
        return $this->container['policies_usage'];
    }

    /**
     * Sets policies_usage
     *
     * @param int $policies_usage policies_usage
     *
     * @return $this
     */
    public function setPoliciesUsage($policies_usage)
    {
        $this->container['policies_usage'] = $policies_usage;

        return $this;
    }

    /**
     * Gets policy_size
     *
     * @return int
     */
    public function getPolicySize()
    {
        return $this->container['policy_size'];
    }

    /**
     * Sets policy_size
     *
     * @param int $policy_size policy_size
     *
     * @return $this
     */
    public function setPolicySize($policy_size)
    {
        $this->container['policy_size'] = $policy_size;

        return $this;
    }

    /**
     * Gets roles_quota
     *
     * @return int
     */
    public function getRolesQuota()
    {
        return $this->container['roles_quota'];
    }

    /**
     * Sets roles_quota
     *
     * @param int $roles_quota roles_quota
     *
     * @return $this
     */
    public function setRolesQuota($roles_quota)
    {
        $this->container['roles_quota'] = $roles_quota;

        return $this;
    }

    /**
     * Gets roles_usage
     *
     * @return int
     */
    public function getRolesUsage()
    {
        return $this->container['roles_usage'];
    }

    /**
     * Sets roles_usage
     *
     * @param int $roles_usage roles_usage
     *
     * @return $this
     */
    public function setRolesUsage($roles_usage)
    {
        $this->container['roles_usage'] = $roles_usage;

        return $this;
    }

    /**
     * Gets users_quota
     *
     * @return int
     */
    public function getUsersQuota()
    {
        return $this->container['users_quota'];
    }

    /**
     * Sets users_quota
     *
     * @param int $users_quota users_quota
     *
     * @return $this
     */
    public function setUsersQuota($users_quota)
    {
        $this->container['users_quota'] = $users_quota;

        return $this;
    }

    /**
     * Gets users_usage
     *
     * @return int
     */
    public function getUsersUsage()
    {
        return $this->container['users_usage'];
    }

    /**
     * Sets users_usage
     *
     * @param int $users_usage users_usage
     *
     * @return $this
     */
    public function setUsersUsage($users_usage)
    {
        $this->container['users_usage'] = $users_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

