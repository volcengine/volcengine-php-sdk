<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdateOAuthProviderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateOAuthProviderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorize_template' => 'string',
        'authorize_url' => 'string',
        'client_id' => 'string',
        'client_secret' => 'string',
        'description' => 'string',
        'identity_map_type' => 'int',
        'idp_identity_key' => 'string',
        'o_auth_provider_name' => 'string',
        'scope' => 'string',
        'status' => 'int',
        'token_url' => 'string',
        'user_info_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorize_template' => null,
        'authorize_url' => null,
        'client_id' => null,
        'client_secret' => null,
        'description' => null,
        'identity_map_type' => 'int32',
        'idp_identity_key' => null,
        'o_auth_provider_name' => null,
        'scope' => null,
        'status' => 'int32',
        'token_url' => null,
        'user_info_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorize_template' => 'AuthorizeTemplate',
        'authorize_url' => 'AuthorizeURL',
        'client_id' => 'ClientId',
        'client_secret' => 'ClientSecret',
        'description' => 'Description',
        'identity_map_type' => 'IdentityMapType',
        'idp_identity_key' => 'IdpIdentityKey',
        'o_auth_provider_name' => 'OAuthProviderName',
        'scope' => 'Scope',
        'status' => 'Status',
        'token_url' => 'TokenURL',
        'user_info_url' => 'UserInfoURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorize_template' => 'setAuthorizeTemplate',
        'authorize_url' => 'setAuthorizeUrl',
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'description' => 'setDescription',
        'identity_map_type' => 'setIdentityMapType',
        'idp_identity_key' => 'setIdpIdentityKey',
        'o_auth_provider_name' => 'setOAuthProviderName',
        'scope' => 'setScope',
        'status' => 'setStatus',
        'token_url' => 'setTokenUrl',
        'user_info_url' => 'setUserInfoUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorize_template' => 'getAuthorizeTemplate',
        'authorize_url' => 'getAuthorizeUrl',
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'description' => 'getDescription',
        'identity_map_type' => 'getIdentityMapType',
        'idp_identity_key' => 'getIdpIdentityKey',
        'o_auth_provider_name' => 'getOAuthProviderName',
        'scope' => 'getScope',
        'status' => 'getStatus',
        'token_url' => 'getTokenUrl',
        'user_info_url' => 'getUserInfoUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorize_template'] = isset($data['authorize_template']) ? $data['authorize_template'] : null;
        $this->container['authorize_url'] = isset($data['authorize_url']) ? $data['authorize_url'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_secret'] = isset($data['client_secret']) ? $data['client_secret'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['identity_map_type'] = isset($data['identity_map_type']) ? $data['identity_map_type'] : null;
        $this->container['idp_identity_key'] = isset($data['idp_identity_key']) ? $data['idp_identity_key'] : null;
        $this->container['o_auth_provider_name'] = isset($data['o_auth_provider_name']) ? $data['o_auth_provider_name'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['token_url'] = isset($data['token_url']) ? $data['token_url'] : null;
        $this->container['user_info_url'] = isset($data['user_info_url']) ? $data['user_info_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['o_auth_provider_name'] === null) {
            $invalidProperties[] = "'o_auth_provider_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorize_template
     *
     * @return string
     */
    public function getAuthorizeTemplate()
    {
        return $this->container['authorize_template'];
    }

    /**
     * Sets authorize_template
     *
     * @param string $authorize_template authorize_template
     *
     * @return $this
     */
    public function setAuthorizeTemplate($authorize_template)
    {
        $this->container['authorize_template'] = $authorize_template;

        return $this;
    }

    /**
     * Gets authorize_url
     *
     * @return string
     */
    public function getAuthorizeUrl()
    {
        return $this->container['authorize_url'];
    }

    /**
     * Sets authorize_url
     *
     * @param string $authorize_url authorize_url
     *
     * @return $this
     */
    public function setAuthorizeUrl($authorize_url)
    {
        $this->container['authorize_url'] = $authorize_url;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string $client_secret client_secret
     *
     * @return $this
     */
    public function setClientSecret($client_secret)
    {
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets identity_map_type
     *
     * @return int
     */
    public function getIdentityMapType()
    {
        return $this->container['identity_map_type'];
    }

    /**
     * Sets identity_map_type
     *
     * @param int $identity_map_type identity_map_type
     *
     * @return $this
     */
    public function setIdentityMapType($identity_map_type)
    {
        $this->container['identity_map_type'] = $identity_map_type;

        return $this;
    }

    /**
     * Gets idp_identity_key
     *
     * @return string
     */
    public function getIdpIdentityKey()
    {
        return $this->container['idp_identity_key'];
    }

    /**
     * Sets idp_identity_key
     *
     * @param string $idp_identity_key idp_identity_key
     *
     * @return $this
     */
    public function setIdpIdentityKey($idp_identity_key)
    {
        $this->container['idp_identity_key'] = $idp_identity_key;

        return $this;
    }

    /**
     * Gets o_auth_provider_name
     *
     * @return string
     */
    public function getOAuthProviderName()
    {
        return $this->container['o_auth_provider_name'];
    }

    /**
     * Sets o_auth_provider_name
     *
     * @param string $o_auth_provider_name o_auth_provider_name
     *
     * @return $this
     */
    public function setOAuthProviderName($o_auth_provider_name)
    {
        $this->container['o_auth_provider_name'] = $o_auth_provider_name;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token_url
     *
     * @return string
     */
    public function getTokenUrl()
    {
        return $this->container['token_url'];
    }

    /**
     * Sets token_url
     *
     * @param string $token_url token_url
     *
     * @return $this
     */
    public function setTokenUrl($token_url)
    {
        $this->container['token_url'] = $token_url;

        return $this;
    }

    /**
     * Gets user_info_url
     *
     * @return string
     */
    public function getUserInfoUrl()
    {
        return $this->container['user_info_url'];
    }

    /**
     * Sets user_info_url
     *
     * @param string $user_info_url user_info_url
     *
     * @return $this
     */
    public function setUserInfoUrl($user_info_url)
    {
        $this->container['user_info_url'] = $user_info_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

