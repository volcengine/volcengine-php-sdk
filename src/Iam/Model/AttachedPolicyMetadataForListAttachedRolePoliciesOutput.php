<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AttachedPolicyMetadataForListAttachedRolePoliciesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AttachedPolicyMetadataForListAttachedRolePoliciesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attach_date' => 'string',
        'description' => 'string',
        'policy_name' => 'string',
        'policy_scope' => '\Volcengine\Iam\Model\PolicyScopeForListAttachedRolePoliciesOutput[]',
        'policy_trn' => 'string',
        'policy_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attach_date' => null,
        'description' => null,
        'policy_name' => null,
        'policy_scope' => null,
        'policy_trn' => null,
        'policy_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attach_date' => 'AttachDate',
        'description' => 'Description',
        'policy_name' => 'PolicyName',
        'policy_scope' => 'PolicyScope',
        'policy_trn' => 'PolicyTrn',
        'policy_type' => 'PolicyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attach_date' => 'setAttachDate',
        'description' => 'setDescription',
        'policy_name' => 'setPolicyName',
        'policy_scope' => 'setPolicyScope',
        'policy_trn' => 'setPolicyTrn',
        'policy_type' => 'setPolicyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attach_date' => 'getAttachDate',
        'description' => 'getDescription',
        'policy_name' => 'getPolicyName',
        'policy_scope' => 'getPolicyScope',
        'policy_trn' => 'getPolicyTrn',
        'policy_type' => 'getPolicyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attach_date'] = isset($data['attach_date']) ? $data['attach_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['policy_name'] = isset($data['policy_name']) ? $data['policy_name'] : null;
        $this->container['policy_scope'] = isset($data['policy_scope']) ? $data['policy_scope'] : null;
        $this->container['policy_trn'] = isset($data['policy_trn']) ? $data['policy_trn'] : null;
        $this->container['policy_type'] = isset($data['policy_type']) ? $data['policy_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attach_date
     *
     * @return string
     */
    public function getAttachDate()
    {
        return $this->container['attach_date'];
    }

    /**
     * Sets attach_date
     *
     * @param string $attach_date attach_date
     *
     * @return $this
     */
    public function setAttachDate($attach_date)
    {
        $this->container['attach_date'] = $attach_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets policy_name
     *
     * @return string
     */
    public function getPolicyName()
    {
        return $this->container['policy_name'];
    }

    /**
     * Sets policy_name
     *
     * @param string $policy_name policy_name
     *
     * @return $this
     */
    public function setPolicyName($policy_name)
    {
        $this->container['policy_name'] = $policy_name;

        return $this;
    }

    /**
     * Gets policy_scope
     *
     * @return \Volcengine\Iam\Model\PolicyScopeForListAttachedRolePoliciesOutput[]
     */
    public function getPolicyScope()
    {
        return $this->container['policy_scope'];
    }

    /**
     * Sets policy_scope
     *
     * @param \Volcengine\Iam\Model\PolicyScopeForListAttachedRolePoliciesOutput[] $policy_scope policy_scope
     *
     * @return $this
     */
    public function setPolicyScope($policy_scope)
    {
        $this->container['policy_scope'] = $policy_scope;

        return $this;
    }

    /**
     * Gets policy_trn
     *
     * @return string
     */
    public function getPolicyTrn()
    {
        return $this->container['policy_trn'];
    }

    /**
     * Sets policy_trn
     *
     * @param string $policy_trn policy_trn
     *
     * @return $this
     */
    public function setPolicyTrn($policy_trn)
    {
        $this->container['policy_trn'] = $policy_trn;

        return $this;
    }

    /**
     * Gets policy_type
     *
     * @return string
     */
    public function getPolicyType()
    {
        return $this->container['policy_type'];
    }

    /**
     * Sets policy_type
     *
     * @param string $policy_type policy_type
     *
     * @return $this
     */
    public function setPolicyType($policy_type)
    {
        $this->container['policy_type'] = $policy_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

