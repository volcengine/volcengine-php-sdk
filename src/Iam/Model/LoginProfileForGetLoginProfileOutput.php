<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class LoginProfileForGetLoginProfileOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoginProfileForGetLoginProfileOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_date' => 'string',
        'last_login_date' => 'string',
        'last_login_ip' => 'string',
        'last_reset_password_time' => 'int',
        'login_allowed' => 'bool',
        'login_locked' => 'bool',
        'password_expire_at' => 'int',
        'password_reset_required' => 'bool',
        'safe_auth_exempt_duration' => 'int',
        'safe_auth_exempt_required' => 'int',
        'safe_auth_exempt_unit' => 'int',
        'safe_auth_flag' => 'bool',
        'safe_auth_type' => 'string',
        'update_date' => 'string',
        'user_id' => 'int',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_date' => null,
        'last_login_date' => null,
        'last_login_ip' => null,
        'last_reset_password_time' => 'int64',
        'login_allowed' => null,
        'login_locked' => null,
        'password_expire_at' => 'int64',
        'password_reset_required' => null,
        'safe_auth_exempt_duration' => 'int32',
        'safe_auth_exempt_required' => 'int32',
        'safe_auth_exempt_unit' => 'int32',
        'safe_auth_flag' => null,
        'safe_auth_type' => null,
        'update_date' => null,
        'user_id' => 'int64',
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_date' => 'CreateDate',
        'last_login_date' => 'LastLoginDate',
        'last_login_ip' => 'LastLoginIp',
        'last_reset_password_time' => 'LastResetPasswordTime',
        'login_allowed' => 'LoginAllowed',
        'login_locked' => 'LoginLocked',
        'password_expire_at' => 'PasswordExpireAt',
        'password_reset_required' => 'PasswordResetRequired',
        'safe_auth_exempt_duration' => 'SafeAuthExemptDuration',
        'safe_auth_exempt_required' => 'SafeAuthExemptRequired',
        'safe_auth_exempt_unit' => 'SafeAuthExemptUnit',
        'safe_auth_flag' => 'SafeAuthFlag',
        'safe_auth_type' => 'SafeAuthType',
        'update_date' => 'UpdateDate',
        'user_id' => 'UserId',
        'user_name' => 'UserName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_date' => 'setCreateDate',
        'last_login_date' => 'setLastLoginDate',
        'last_login_ip' => 'setLastLoginIp',
        'last_reset_password_time' => 'setLastResetPasswordTime',
        'login_allowed' => 'setLoginAllowed',
        'login_locked' => 'setLoginLocked',
        'password_expire_at' => 'setPasswordExpireAt',
        'password_reset_required' => 'setPasswordResetRequired',
        'safe_auth_exempt_duration' => 'setSafeAuthExemptDuration',
        'safe_auth_exempt_required' => 'setSafeAuthExemptRequired',
        'safe_auth_exempt_unit' => 'setSafeAuthExemptUnit',
        'safe_auth_flag' => 'setSafeAuthFlag',
        'safe_auth_type' => 'setSafeAuthType',
        'update_date' => 'setUpdateDate',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_date' => 'getCreateDate',
        'last_login_date' => 'getLastLoginDate',
        'last_login_ip' => 'getLastLoginIp',
        'last_reset_password_time' => 'getLastResetPasswordTime',
        'login_allowed' => 'getLoginAllowed',
        'login_locked' => 'getLoginLocked',
        'password_expire_at' => 'getPasswordExpireAt',
        'password_reset_required' => 'getPasswordResetRequired',
        'safe_auth_exempt_duration' => 'getSafeAuthExemptDuration',
        'safe_auth_exempt_required' => 'getSafeAuthExemptRequired',
        'safe_auth_exempt_unit' => 'getSafeAuthExemptUnit',
        'safe_auth_flag' => 'getSafeAuthFlag',
        'safe_auth_type' => 'getSafeAuthType',
        'update_date' => 'getUpdateDate',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['last_login_date'] = isset($data['last_login_date']) ? $data['last_login_date'] : null;
        $this->container['last_login_ip'] = isset($data['last_login_ip']) ? $data['last_login_ip'] : null;
        $this->container['last_reset_password_time'] = isset($data['last_reset_password_time']) ? $data['last_reset_password_time'] : null;
        $this->container['login_allowed'] = isset($data['login_allowed']) ? $data['login_allowed'] : null;
        $this->container['login_locked'] = isset($data['login_locked']) ? $data['login_locked'] : null;
        $this->container['password_expire_at'] = isset($data['password_expire_at']) ? $data['password_expire_at'] : null;
        $this->container['password_reset_required'] = isset($data['password_reset_required']) ? $data['password_reset_required'] : null;
        $this->container['safe_auth_exempt_duration'] = isset($data['safe_auth_exempt_duration']) ? $data['safe_auth_exempt_duration'] : null;
        $this->container['safe_auth_exempt_required'] = isset($data['safe_auth_exempt_required']) ? $data['safe_auth_exempt_required'] : null;
        $this->container['safe_auth_exempt_unit'] = isset($data['safe_auth_exempt_unit']) ? $data['safe_auth_exempt_unit'] : null;
        $this->container['safe_auth_flag'] = isset($data['safe_auth_flag']) ? $data['safe_auth_flag'] : null;
        $this->container['safe_auth_type'] = isset($data['safe_auth_type']) ? $data['safe_auth_type'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_date
     *
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_login_date
     *
     * @return string
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     *
     * @param string $last_login_date last_login_date
     *
     * @return $this
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets last_login_ip
     *
     * @return string
     */
    public function getLastLoginIp()
    {
        return $this->container['last_login_ip'];
    }

    /**
     * Sets last_login_ip
     *
     * @param string $last_login_ip last_login_ip
     *
     * @return $this
     */
    public function setLastLoginIp($last_login_ip)
    {
        $this->container['last_login_ip'] = $last_login_ip;

        return $this;
    }

    /**
     * Gets last_reset_password_time
     *
     * @return int
     */
    public function getLastResetPasswordTime()
    {
        return $this->container['last_reset_password_time'];
    }

    /**
     * Sets last_reset_password_time
     *
     * @param int $last_reset_password_time last_reset_password_time
     *
     * @return $this
     */
    public function setLastResetPasswordTime($last_reset_password_time)
    {
        $this->container['last_reset_password_time'] = $last_reset_password_time;

        return $this;
    }

    /**
     * Gets login_allowed
     *
     * @return bool
     */
    public function getLoginAllowed()
    {
        return $this->container['login_allowed'];
    }

    /**
     * Sets login_allowed
     *
     * @param bool $login_allowed login_allowed
     *
     * @return $this
     */
    public function setLoginAllowed($login_allowed)
    {
        $this->container['login_allowed'] = $login_allowed;

        return $this;
    }

    /**
     * Gets login_locked
     *
     * @return bool
     */
    public function getLoginLocked()
    {
        return $this->container['login_locked'];
    }

    /**
     * Sets login_locked
     *
     * @param bool $login_locked login_locked
     *
     * @return $this
     */
    public function setLoginLocked($login_locked)
    {
        $this->container['login_locked'] = $login_locked;

        return $this;
    }

    /**
     * Gets password_expire_at
     *
     * @return int
     */
    public function getPasswordExpireAt()
    {
        return $this->container['password_expire_at'];
    }

    /**
     * Sets password_expire_at
     *
     * @param int $password_expire_at password_expire_at
     *
     * @return $this
     */
    public function setPasswordExpireAt($password_expire_at)
    {
        $this->container['password_expire_at'] = $password_expire_at;

        return $this;
    }

    /**
     * Gets password_reset_required
     *
     * @return bool
     */
    public function getPasswordResetRequired()
    {
        return $this->container['password_reset_required'];
    }

    /**
     * Sets password_reset_required
     *
     * @param bool $password_reset_required password_reset_required
     *
     * @return $this
     */
    public function setPasswordResetRequired($password_reset_required)
    {
        $this->container['password_reset_required'] = $password_reset_required;

        return $this;
    }

    /**
     * Gets safe_auth_exempt_duration
     *
     * @return int
     */
    public function getSafeAuthExemptDuration()
    {
        return $this->container['safe_auth_exempt_duration'];
    }

    /**
     * Sets safe_auth_exempt_duration
     *
     * @param int $safe_auth_exempt_duration safe_auth_exempt_duration
     *
     * @return $this
     */
    public function setSafeAuthExemptDuration($safe_auth_exempt_duration)
    {
        $this->container['safe_auth_exempt_duration'] = $safe_auth_exempt_duration;

        return $this;
    }

    /**
     * Gets safe_auth_exempt_required
     *
     * @return int
     */
    public function getSafeAuthExemptRequired()
    {
        return $this->container['safe_auth_exempt_required'];
    }

    /**
     * Sets safe_auth_exempt_required
     *
     * @param int $safe_auth_exempt_required safe_auth_exempt_required
     *
     * @return $this
     */
    public function setSafeAuthExemptRequired($safe_auth_exempt_required)
    {
        $this->container['safe_auth_exempt_required'] = $safe_auth_exempt_required;

        return $this;
    }

    /**
     * Gets safe_auth_exempt_unit
     *
     * @return int
     */
    public function getSafeAuthExemptUnit()
    {
        return $this->container['safe_auth_exempt_unit'];
    }

    /**
     * Sets safe_auth_exempt_unit
     *
     * @param int $safe_auth_exempt_unit safe_auth_exempt_unit
     *
     * @return $this
     */
    public function setSafeAuthExemptUnit($safe_auth_exempt_unit)
    {
        $this->container['safe_auth_exempt_unit'] = $safe_auth_exempt_unit;

        return $this;
    }

    /**
     * Gets safe_auth_flag
     *
     * @return bool
     */
    public function getSafeAuthFlag()
    {
        return $this->container['safe_auth_flag'];
    }

    /**
     * Sets safe_auth_flag
     *
     * @param bool $safe_auth_flag safe_auth_flag
     *
     * @return $this
     */
    public function setSafeAuthFlag($safe_auth_flag)
    {
        $this->container['safe_auth_flag'] = $safe_auth_flag;

        return $this;
    }

    /**
     * Gets safe_auth_type
     *
     * @return string
     */
    public function getSafeAuthType()
    {
        return $this->container['safe_auth_type'];
    }

    /**
     * Sets safe_auth_type
     *
     * @param string $safe_auth_type safe_auth_type
     *
     * @return $this
     */
    public function setSafeAuthType($safe_auth_type)
    {
        $this->container['safe_auth_type'] = $safe_auth_type;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

