<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RoleForCreateRoleOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoleForCreateRoleOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_date' => 'string',
        'description' => 'string',
        'display_name' => 'string',
        'is_service_linked_role' => 'int',
        'max_session_duration' => 'int',
        'role_id' => 'int',
        'role_name' => 'string',
        'tags' => '\Volcengine\Iam\Model\TagForCreateRoleOutput[]',
        'trn' => 'string',
        'trust_policy_document' => 'string',
        'update_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_date' => null,
        'description' => null,
        'display_name' => null,
        'is_service_linked_role' => 'int32',
        'max_session_duration' => 'int32',
        'role_id' => 'int32',
        'role_name' => null,
        'tags' => null,
        'trn' => null,
        'trust_policy_document' => null,
        'update_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_date' => 'CreateDate',
        'description' => 'Description',
        'display_name' => 'DisplayName',
        'is_service_linked_role' => 'IsServiceLinkedRole',
        'max_session_duration' => 'MaxSessionDuration',
        'role_id' => 'RoleId',
        'role_name' => 'RoleName',
        'tags' => 'Tags',
        'trn' => 'Trn',
        'trust_policy_document' => 'TrustPolicyDocument',
        'update_date' => 'UpdateDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'is_service_linked_role' => 'setIsServiceLinkedRole',
        'max_session_duration' => 'setMaxSessionDuration',
        'role_id' => 'setRoleId',
        'role_name' => 'setRoleName',
        'tags' => 'setTags',
        'trn' => 'setTrn',
        'trust_policy_document' => 'setTrustPolicyDocument',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'is_service_linked_role' => 'getIsServiceLinkedRole',
        'max_session_duration' => 'getMaxSessionDuration',
        'role_id' => 'getRoleId',
        'role_name' => 'getRoleName',
        'tags' => 'getTags',
        'trn' => 'getTrn',
        'trust_policy_document' => 'getTrustPolicyDocument',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['is_service_linked_role'] = isset($data['is_service_linked_role']) ? $data['is_service_linked_role'] : null;
        $this->container['max_session_duration'] = isset($data['max_session_duration']) ? $data['max_session_duration'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['role_name'] = isset($data['role_name']) ? $data['role_name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
        $this->container['trust_policy_document'] = isset($data['trust_policy_document']) ? $data['trust_policy_document'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_date
     *
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets is_service_linked_role
     *
     * @return int
     */
    public function getIsServiceLinkedRole()
    {
        return $this->container['is_service_linked_role'];
    }

    /**
     * Sets is_service_linked_role
     *
     * @param int $is_service_linked_role is_service_linked_role
     *
     * @return $this
     */
    public function setIsServiceLinkedRole($is_service_linked_role)
    {
        $this->container['is_service_linked_role'] = $is_service_linked_role;

        return $this;
    }

    /**
     * Gets max_session_duration
     *
     * @return int
     */
    public function getMaxSessionDuration()
    {
        return $this->container['max_session_duration'];
    }

    /**
     * Sets max_session_duration
     *
     * @param int $max_session_duration max_session_duration
     *
     * @return $this
     */
    public function setMaxSessionDuration($max_session_duration)
    {
        $this->container['max_session_duration'] = $max_session_duration;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param int $role_id role_id
     *
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets role_name
     *
     * @return string
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     *
     * @param string $role_name role_name
     *
     * @return $this
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Iam\Model\TagForCreateRoleOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Iam\Model\TagForCreateRoleOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn trn
     *
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets trust_policy_document
     *
     * @return string
     */
    public function getTrustPolicyDocument()
    {
        return $this->container['trust_policy_document'];
    }

    /**
     * Sets trust_policy_document
     *
     * @param string $trust_policy_document trust_policy_document
     *
     * @return $this
     */
    public function setTrustPolicyDocument($trust_policy_document)
    {
        $this->container['trust_policy_document'] = $trust_policy_document;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

