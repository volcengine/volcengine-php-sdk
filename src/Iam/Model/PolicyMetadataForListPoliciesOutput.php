<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PolicyMetadataForListPoliciesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PolicyMetadataForListPoliciesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attachment_count' => 'int',
        'category' => 'string',
        'create_date' => 'string',
        'description' => 'string',
        'is_service_role_policy' => 'int',
        'policy_document' => 'string',
        'policy_name' => 'string',
        'policy_trn' => 'string',
        'policy_type' => 'string',
        'update_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attachment_count' => 'int32',
        'category' => null,
        'create_date' => null,
        'description' => null,
        'is_service_role_policy' => 'int32',
        'policy_document' => null,
        'policy_name' => null,
        'policy_trn' => null,
        'policy_type' => null,
        'update_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attachment_count' => 'AttachmentCount',
        'category' => 'Category',
        'create_date' => 'CreateDate',
        'description' => 'Description',
        'is_service_role_policy' => 'IsServiceRolePolicy',
        'policy_document' => 'PolicyDocument',
        'policy_name' => 'PolicyName',
        'policy_trn' => 'PolicyTrn',
        'policy_type' => 'PolicyType',
        'update_date' => 'UpdateDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attachment_count' => 'setAttachmentCount',
        'category' => 'setCategory',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'is_service_role_policy' => 'setIsServiceRolePolicy',
        'policy_document' => 'setPolicyDocument',
        'policy_name' => 'setPolicyName',
        'policy_trn' => 'setPolicyTrn',
        'policy_type' => 'setPolicyType',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attachment_count' => 'getAttachmentCount',
        'category' => 'getCategory',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'is_service_role_policy' => 'getIsServiceRolePolicy',
        'policy_document' => 'getPolicyDocument',
        'policy_name' => 'getPolicyName',
        'policy_trn' => 'getPolicyTrn',
        'policy_type' => 'getPolicyType',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attachment_count'] = isset($data['attachment_count']) ? $data['attachment_count'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_service_role_policy'] = isset($data['is_service_role_policy']) ? $data['is_service_role_policy'] : null;
        $this->container['policy_document'] = isset($data['policy_document']) ? $data['policy_document'] : null;
        $this->container['policy_name'] = isset($data['policy_name']) ? $data['policy_name'] : null;
        $this->container['policy_trn'] = isset($data['policy_trn']) ? $data['policy_trn'] : null;
        $this->container['policy_type'] = isset($data['policy_type']) ? $data['policy_type'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attachment_count
     *
     * @return int
     */
    public function getAttachmentCount()
    {
        return $this->container['attachment_count'];
    }

    /**
     * Sets attachment_count
     *
     * @param int $attachment_count attachment_count
     *
     * @return $this
     */
    public function setAttachmentCount($attachment_count)
    {
        $this->container['attachment_count'] = $attachment_count;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_service_role_policy
     *
     * @return int
     */
    public function getIsServiceRolePolicy()
    {
        return $this->container['is_service_role_policy'];
    }

    /**
     * Sets is_service_role_policy
     *
     * @param int $is_service_role_policy is_service_role_policy
     *
     * @return $this
     */
    public function setIsServiceRolePolicy($is_service_role_policy)
    {
        $this->container['is_service_role_policy'] = $is_service_role_policy;

        return $this;
    }

    /**
     * Gets policy_document
     *
     * @return string
     */
    public function getPolicyDocument()
    {
        return $this->container['policy_document'];
    }

    /**
     * Sets policy_document
     *
     * @param string $policy_document policy_document
     *
     * @return $this
     */
    public function setPolicyDocument($policy_document)
    {
        $this->container['policy_document'] = $policy_document;

        return $this;
    }

    /**
     * Gets policy_name
     *
     * @return string
     */
    public function getPolicyName()
    {
        return $this->container['policy_name'];
    }

    /**
     * Sets policy_name
     *
     * @param string $policy_name policy_name
     *
     * @return $this
     */
    public function setPolicyName($policy_name)
    {
        $this->container['policy_name'] = $policy_name;

        return $this;
    }

    /**
     * Gets policy_trn
     *
     * @return string
     */
    public function getPolicyTrn()
    {
        return $this->container['policy_trn'];
    }

    /**
     * Sets policy_trn
     *
     * @param string $policy_trn policy_trn
     *
     * @return $this
     */
    public function setPolicyTrn($policy_trn)
    {
        $this->container['policy_trn'] = $policy_trn;

        return $this;
    }

    /**
     * Gets policy_type
     *
     * @return string
     */
    public function getPolicyType()
    {
        return $this->container['policy_type'];
    }

    /**
     * Sets policy_type
     *
     * @param string $policy_type policy_type
     *
     * @return $this
     */
    public function setPolicyType($policy_type)
    {
        $this->container['policy_type'] = $policy_type;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

