<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetSAMLProviderResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetSAMLProviderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certificate_expire_time' => 'string',
        'create_date' => 'string',
        'description' => 'string',
        'encoded_saml_metadata_document' => 'string',
        'provider_name' => 'string',
        'sso_type' => 'int',
        'status' => 'int',
        'trn' => 'string',
        'update_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'certificate_expire_time' => null,
        'create_date' => null,
        'description' => null,
        'encoded_saml_metadata_document' => null,
        'provider_name' => null,
        'sso_type' => 'int32',
        'status' => 'int32',
        'trn' => null,
        'update_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certificate_expire_time' => 'CertificateExpireTime',
        'create_date' => 'CreateDate',
        'description' => 'Description',
        'encoded_saml_metadata_document' => 'EncodedSAMLMetadataDocument',
        'provider_name' => 'ProviderName',
        'sso_type' => 'SSOType',
        'status' => 'Status',
        'trn' => 'Trn',
        'update_date' => 'UpdateDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certificate_expire_time' => 'setCertificateExpireTime',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'encoded_saml_metadata_document' => 'setEncodedSamlMetadataDocument',
        'provider_name' => 'setProviderName',
        'sso_type' => 'setSsoType',
        'status' => 'setStatus',
        'trn' => 'setTrn',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certificate_expire_time' => 'getCertificateExpireTime',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'encoded_saml_metadata_document' => 'getEncodedSamlMetadataDocument',
        'provider_name' => 'getProviderName',
        'sso_type' => 'getSsoType',
        'status' => 'getStatus',
        'trn' => 'getTrn',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certificate_expire_time'] = isset($data['certificate_expire_time']) ? $data['certificate_expire_time'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['encoded_saml_metadata_document'] = isset($data['encoded_saml_metadata_document']) ? $data['encoded_saml_metadata_document'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['sso_type'] = isset($data['sso_type']) ? $data['sso_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certificate_expire_time
     *
     * @return string
     */
    public function getCertificateExpireTime()
    {
        return $this->container['certificate_expire_time'];
    }

    /**
     * Sets certificate_expire_time
     *
     * @param string $certificate_expire_time certificate_expire_time
     *
     * @return $this
     */
    public function setCertificateExpireTime($certificate_expire_time)
    {
        $this->container['certificate_expire_time'] = $certificate_expire_time;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets encoded_saml_metadata_document
     *
     * @return string
     */
    public function getEncodedSamlMetadataDocument()
    {
        return $this->container['encoded_saml_metadata_document'];
    }

    /**
     * Sets encoded_saml_metadata_document
     *
     * @param string $encoded_saml_metadata_document encoded_saml_metadata_document
     *
     * @return $this
     */
    public function setEncodedSamlMetadataDocument($encoded_saml_metadata_document)
    {
        $this->container['encoded_saml_metadata_document'] = $encoded_saml_metadata_document;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string $provider_name provider_name
     *
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets sso_type
     *
     * @return int
     */
    public function getSsoType()
    {
        return $this->container['sso_type'];
    }

    /**
     * Sets sso_type
     *
     * @param int $sso_type sso_type
     *
     * @return $this
     */
    public function setSsoType($sso_type)
    {
        $this->container['sso_type'] = $sso_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn trn
     *
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

