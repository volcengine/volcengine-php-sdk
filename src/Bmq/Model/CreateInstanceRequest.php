<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateInstanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateInstanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_renew' => 'bool',
        'billing_period' => 'string',
        'billing_type' => 'string',
        'description' => 'string',
        'eip_id' => 'string',
        'message_retention' => 'int',
        'name' => 'string',
        'project_name' => 'string',
        'security_group_id_list' => 'string[]',
        'specification' => 'string',
        'subnet_id_list' => 'string[]',
        'times' => 'int',
        'vpc_id' => 'string',
        'zone_id_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_renew' => null,
        'billing_period' => null,
        'billing_type' => null,
        'description' => null,
        'eip_id' => null,
        'message_retention' => 'int32',
        'name' => null,
        'project_name' => null,
        'security_group_id_list' => null,
        'specification' => null,
        'subnet_id_list' => null,
        'times' => 'int32',
        'vpc_id' => null,
        'zone_id_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_renew' => 'AutoRenew',
        'billing_period' => 'BillingPeriod',
        'billing_type' => 'BillingType',
        'description' => 'Description',
        'eip_id' => 'EipId',
        'message_retention' => 'MessageRetention',
        'name' => 'Name',
        'project_name' => 'ProjectName',
        'security_group_id_list' => 'SecurityGroupIdList',
        'specification' => 'Specification',
        'subnet_id_list' => 'SubnetIdList',
        'times' => 'Times',
        'vpc_id' => 'VpcId',
        'zone_id_list' => 'ZoneIdList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_renew' => 'setAutoRenew',
        'billing_period' => 'setBillingPeriod',
        'billing_type' => 'setBillingType',
        'description' => 'setDescription',
        'eip_id' => 'setEipId',
        'message_retention' => 'setMessageRetention',
        'name' => 'setName',
        'project_name' => 'setProjectName',
        'security_group_id_list' => 'setSecurityGroupIdList',
        'specification' => 'setSpecification',
        'subnet_id_list' => 'setSubnetIdList',
        'times' => 'setTimes',
        'vpc_id' => 'setVpcId',
        'zone_id_list' => 'setZoneIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_renew' => 'getAutoRenew',
        'billing_period' => 'getBillingPeriod',
        'billing_type' => 'getBillingType',
        'description' => 'getDescription',
        'eip_id' => 'getEipId',
        'message_retention' => 'getMessageRetention',
        'name' => 'getName',
        'project_name' => 'getProjectName',
        'security_group_id_list' => 'getSecurityGroupIdList',
        'specification' => 'getSpecification',
        'subnet_id_list' => 'getSubnetIdList',
        'times' => 'getTimes',
        'vpc_id' => 'getVpcId',
        'zone_id_list' => 'getZoneIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BILLING_PERIOD_HOURLY = 'HOURLY';
    const BILLING_PERIOD_MONTHLY = 'MONTHLY';
    const BILLING_TYPE_MIX = 'MIX';
    const BILLING_TYPE_POST = 'POST';
    const BILLING_TYPE_PRE = 'PRE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingPeriodAllowableValues()
    {
        return [
            self::BILLING_PERIOD_HOURLY,
            self::BILLING_PERIOD_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingTypeAllowableValues()
    {
        return [
            self::BILLING_TYPE_MIX,
            self::BILLING_TYPE_POST,
            self::BILLING_TYPE_PRE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['eip_id'] = isset($data['eip_id']) ? $data['eip_id'] : null;
        $this->container['message_retention'] = isset($data['message_retention']) ? $data['message_retention'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['security_group_id_list'] = isset($data['security_group_id_list']) ? $data['security_group_id_list'] : null;
        $this->container['specification'] = isset($data['specification']) ? $data['specification'] : null;
        $this->container['subnet_id_list'] = isset($data['subnet_id_list']) ? $data['subnet_id_list'] : null;
        $this->container['times'] = isset($data['times']) ? $data['times'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_id_list'] = isset($data['zone_id_list']) ? $data['zone_id_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBillingPeriodAllowableValues();
        if (!is_null($this->container['billing_period']) && !in_array($this->container['billing_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['billing_type'] === null) {
            $invalidProperties[] = "'billing_type' can't be null";
        }
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!is_null($this->container['billing_type']) && !in_array($this->container['billing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['specification'] === null) {
            $invalidProperties[] = "'specification' can't be null";
        }
        if ($this->container['vpc_id'] === null) {
            $invalidProperties[] = "'vpc_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets billing_period
     *
     * @return string
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     *
     * @param string $billing_period billing_period
     *
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $allowedValues = $this->getBillingPeriodAllowableValues();
        if (!is_null($billing_period) && !in_array($billing_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return string
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param string $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!in_array($billing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eip_id
     *
     * @return string
     */
    public function getEipId()
    {
        return $this->container['eip_id'];
    }

    /**
     * Sets eip_id
     *
     * @param string $eip_id eip_id
     *
     * @return $this
     */
    public function setEipId($eip_id)
    {
        $this->container['eip_id'] = $eip_id;

        return $this;
    }

    /**
     * Gets message_retention
     *
     * @return int
     */
    public function getMessageRetention()
    {
        return $this->container['message_retention'];
    }

    /**
     * Sets message_retention
     *
     * @param int $message_retention message_retention
     *
     * @return $this
     */
    public function setMessageRetention($message_retention)
    {
        $this->container['message_retention'] = $message_retention;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets security_group_id_list
     *
     * @return string[]
     */
    public function getSecurityGroupIdList()
    {
        return $this->container['security_group_id_list'];
    }

    /**
     * Sets security_group_id_list
     *
     * @param string[] $security_group_id_list security_group_id_list
     *
     * @return $this
     */
    public function setSecurityGroupIdList($security_group_id_list)
    {
        $this->container['security_group_id_list'] = $security_group_id_list;

        return $this;
    }

    /**
     * Gets specification
     *
     * @return string
     */
    public function getSpecification()
    {
        return $this->container['specification'];
    }

    /**
     * Sets specification
     *
     * @param string $specification specification
     *
     * @return $this
     */
    public function setSpecification($specification)
    {
        $this->container['specification'] = $specification;

        return $this;
    }

    /**
     * Gets subnet_id_list
     *
     * @return string[]
     */
    public function getSubnetIdList()
    {
        return $this->container['subnet_id_list'];
    }

    /**
     * Sets subnet_id_list
     *
     * @param string[] $subnet_id_list subnet_id_list
     *
     * @return $this
     */
    public function setSubnetIdList($subnet_id_list)
    {
        $this->container['subnet_id_list'] = $subnet_id_list;

        return $this;
    }

    /**
     * Gets times
     *
     * @return int
     */
    public function getTimes()
    {
        return $this->container['times'];
    }

    /**
     * Sets times
     *
     * @param int $times times
     *
     * @return $this
     */
    public function setTimes($times)
    {
        $this->container['times'] = $times;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_id_list
     *
     * @return string[]
     */
    public function getZoneIdList()
    {
        return $this->container['zone_id_list'];
    }

    /**
     * Sets zone_id_list
     *
     * @param string[] $zone_id_list zone_id_list
     *
     * @return $this
     */
    public function setZoneIdList($zone_id_list)
    {
        $this->container['zone_id_list'] = $zone_id_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

