<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModifyOverlayAccessRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModifyOverlayAccessRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_vpcs' => 'string[]',
        'del_vpcs' => 'string[]',
        'instance_id' => 'string',
        'protocols' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'add_vpcs' => null,
        'del_vpcs' => null,
        'instance_id' => null,
        'protocols' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_vpcs' => 'AddVpcs',
        'del_vpcs' => 'DelVpcs',
        'instance_id' => 'InstanceId',
        'protocols' => 'Protocols'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_vpcs' => 'setAddVpcs',
        'del_vpcs' => 'setDelVpcs',
        'instance_id' => 'setInstanceId',
        'protocols' => 'setProtocols'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_vpcs' => 'getAddVpcs',
        'del_vpcs' => 'getDelVpcs',
        'instance_id' => 'getInstanceId',
        'protocols' => 'getProtocols'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROTOCOLS_PLAINTEXT = 'PLAINTEXT';
    const PROTOCOLS_SASL_PLAINTEXT = 'SASL_PLAINTEXT';
    const PROTOCOLS_SSL = 'SSL';
    const PROTOCOLS_WS = 'WS';
    const PROTOCOLS_WSS = 'WSS';
    const PROTOCOLS_TCP = 'TCP';
    const PROTOCOLS_SSL_TCP = 'SSL_TCP';
    const PROTOCOLS_HTTP = 'HTTP';
    const PROTOCOLS_HTTPS = 'HTTPS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolsAllowableValues()
    {
        return [
            self::PROTOCOLS_PLAINTEXT,
            self::PROTOCOLS_SASL_PLAINTEXT,
            self::PROTOCOLS_SSL,
            self::PROTOCOLS_WS,
            self::PROTOCOLS_WSS,
            self::PROTOCOLS_TCP,
            self::PROTOCOLS_SSL_TCP,
            self::PROTOCOLS_HTTP,
            self::PROTOCOLS_HTTPS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_vpcs'] = isset($data['add_vpcs']) ? $data['add_vpcs'] : null;
        $this->container['del_vpcs'] = isset($data['del_vpcs']) ? $data['del_vpcs'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['protocols'] = isset($data['protocols']) ? $data['protocols'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_vpcs
     *
     * @return string[]
     */
    public function getAddVpcs()
    {
        return $this->container['add_vpcs'];
    }

    /**
     * Sets add_vpcs
     *
     * @param string[] $add_vpcs add_vpcs
     *
     * @return $this
     */
    public function setAddVpcs($add_vpcs)
    {
        $this->container['add_vpcs'] = $add_vpcs;

        return $this;
    }

    /**
     * Gets del_vpcs
     *
     * @return string[]
     */
    public function getDelVpcs()
    {
        return $this->container['del_vpcs'];
    }

    /**
     * Sets del_vpcs
     *
     * @param string[] $del_vpcs del_vpcs
     *
     * @return $this
     */
    public function setDelVpcs($del_vpcs)
    {
        $this->container['del_vpcs'] = $del_vpcs;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets protocols
     *
     * @return string[]
     */
    public function getProtocols()
    {
        return $this->container['protocols'];
    }

    /**
     * Sets protocols
     *
     * @param string[] $protocols protocols
     *
     * @return $this
     */
    public function setProtocols($protocols)
    {
        $allowedValues = $this->getProtocolsAllowableValues();
        if (!is_null($protocols) && array_diff($protocols, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocols', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocols'] = $protocols;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

