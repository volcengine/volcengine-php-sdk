<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PublicForDescribeInstanceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublicForDescribeInstanceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
        'eip_id' => 'string',
        'plain' => 'string',
        'plain_port' => 'int',
        'sasl' => 'string',
        'sasl_port' => 'int',
        'ssl' => 'string',
        'ssl_port' => 'int',
        'status' => 'string',
        'vpc_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'eip_id' => null,
        'plain' => null,
        'plain_port' => 'int32',
        'sasl' => null,
        'sasl_port' => 'int32',
        'ssl' => null,
        'ssl_port' => 'int32',
        'status' => null,
        'vpc_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'Address',
        'eip_id' => 'EipId',
        'plain' => 'Plain',
        'plain_port' => 'PlainPort',
        'sasl' => 'Sasl',
        'sasl_port' => 'SaslPort',
        'ssl' => 'Ssl',
        'ssl_port' => 'SslPort',
        'status' => 'Status',
        'vpc_ids' => 'VpcIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'eip_id' => 'setEipId',
        'plain' => 'setPlain',
        'plain_port' => 'setPlainPort',
        'sasl' => 'setSasl',
        'sasl_port' => 'setSaslPort',
        'ssl' => 'setSsl',
        'ssl_port' => 'setSslPort',
        'status' => 'setStatus',
        'vpc_ids' => 'setVpcIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'eip_id' => 'getEipId',
        'plain' => 'getPlain',
        'plain_port' => 'getPlainPort',
        'sasl' => 'getSasl',
        'sasl_port' => 'getSaslPort',
        'ssl' => 'getSsl',
        'ssl_port' => 'getSslPort',
        'status' => 'getStatus',
        'vpc_ids' => 'getVpcIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['eip_id'] = isset($data['eip_id']) ? $data['eip_id'] : null;
        $this->container['plain'] = isset($data['plain']) ? $data['plain'] : null;
        $this->container['plain_port'] = isset($data['plain_port']) ? $data['plain_port'] : null;
        $this->container['sasl'] = isset($data['sasl']) ? $data['sasl'] : null;
        $this->container['sasl_port'] = isset($data['sasl_port']) ? $data['sasl_port'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
        $this->container['ssl_port'] = isset($data['ssl_port']) ? $data['ssl_port'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['vpc_ids'] = isset($data['vpc_ids']) ? $data['vpc_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets eip_id
     *
     * @return string
     */
    public function getEipId()
    {
        return $this->container['eip_id'];
    }

    /**
     * Sets eip_id
     *
     * @param string $eip_id eip_id
     *
     * @return $this
     */
    public function setEipId($eip_id)
    {
        $this->container['eip_id'] = $eip_id;

        return $this;
    }

    /**
     * Gets plain
     *
     * @return string
     */
    public function getPlain()
    {
        return $this->container['plain'];
    }

    /**
     * Sets plain
     *
     * @param string $plain plain
     *
     * @return $this
     */
    public function setPlain($plain)
    {
        $this->container['plain'] = $plain;

        return $this;
    }

    /**
     * Gets plain_port
     *
     * @return int
     */
    public function getPlainPort()
    {
        return $this->container['plain_port'];
    }

    /**
     * Sets plain_port
     *
     * @param int $plain_port plain_port
     *
     * @return $this
     */
    public function setPlainPort($plain_port)
    {
        $this->container['plain_port'] = $plain_port;

        return $this;
    }

    /**
     * Gets sasl
     *
     * @return string
     */
    public function getSasl()
    {
        return $this->container['sasl'];
    }

    /**
     * Sets sasl
     *
     * @param string $sasl sasl
     *
     * @return $this
     */
    public function setSasl($sasl)
    {
        $this->container['sasl'] = $sasl;

        return $this;
    }

    /**
     * Gets sasl_port
     *
     * @return int
     */
    public function getSaslPort()
    {
        return $this->container['sasl_port'];
    }

    /**
     * Sets sasl_port
     *
     * @param int $sasl_port sasl_port
     *
     * @return $this
     */
    public function setSaslPort($sasl_port)
    {
        $this->container['sasl_port'] = $sasl_port;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string $ssl ssl
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ssl_port
     *
     * @return int
     */
    public function getSslPort()
    {
        return $this->container['ssl_port'];
    }

    /**
     * Sets ssl_port
     *
     * @param int $ssl_port ssl_port
     *
     * @return $this
     */
    public function setSslPort($ssl_port)
    {
        $this->container['ssl_port'] = $ssl_port;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vpc_ids
     *
     * @return string[]
     */
    public function getVpcIds()
    {
        return $this->container['vpc_ids'];
    }

    /**
     * Sets vpc_ids
     *
     * @param string[] $vpc_ids vpc_ids
     *
     * @return $this
     */
    public function setVpcIds($vpc_ids)
    {
        $this->container['vpc_ids'] = $vpc_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

