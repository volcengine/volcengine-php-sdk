<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ResetSubscriptionOffsetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResetSubscriptionOffsetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_id' => 'string',
        'offset_type' => 'string',
        'partition_id' => 'int',
        'reset_by' => 'string',
        'reset_value' => 'int',
        'topic_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group_id' => null,
        'offset_type' => null,
        'partition_id' => 'int32',
        'reset_by' => null,
        'reset_value' => 'int64',
        'topic_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_id' => 'GroupId',
        'offset_type' => 'OffsetType',
        'partition_id' => 'PartitionId',
        'reset_by' => 'ResetBy',
        'reset_value' => 'ResetValue',
        'topic_id' => 'TopicId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_id' => 'setGroupId',
        'offset_type' => 'setOffsetType',
        'partition_id' => 'setPartitionId',
        'reset_by' => 'setResetBy',
        'reset_value' => 'setResetValue',
        'topic_id' => 'setTopicId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_id' => 'getGroupId',
        'offset_type' => 'getOffsetType',
        'partition_id' => 'getPartitionId',
        'reset_by' => 'getResetBy',
        'reset_value' => 'getResetValue',
        'topic_id' => 'getTopicId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OFFSET_TYPE_EARLIEST = 'EARLIEST';
    const OFFSET_TYPE_CURRENT = 'CURRENT';
    const OFFSET_TYPE_LATEST = 'LATEST';
    const RESET_BY_TIMESTAMP = 'TIMESTAMP';
    const RESET_BY_OFFSET = 'OFFSET';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOffsetTypeAllowableValues()
    {
        return [
            self::OFFSET_TYPE_EARLIEST,
            self::OFFSET_TYPE_CURRENT,
            self::OFFSET_TYPE_LATEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResetByAllowableValues()
    {
        return [
            self::RESET_BY_TIMESTAMP,
            self::RESET_BY_OFFSET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['offset_type'] = isset($data['offset_type']) ? $data['offset_type'] : null;
        $this->container['partition_id'] = isset($data['partition_id']) ? $data['partition_id'] : null;
        $this->container['reset_by'] = isset($data['reset_by']) ? $data['reset_by'] : null;
        $this->container['reset_value'] = isset($data['reset_value']) ? $data['reset_value'] : null;
        $this->container['topic_id'] = isset($data['topic_id']) ? $data['topic_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['group_id'] === null) {
            $invalidProperties[] = "'group_id' can't be null";
        }
        $allowedValues = $this->getOffsetTypeAllowableValues();
        if (!is_null($this->container['offset_type']) && !in_array($this->container['offset_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'offset_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reset_by'] === null) {
            $invalidProperties[] = "'reset_by' can't be null";
        }
        $allowedValues = $this->getResetByAllowableValues();
        if (!is_null($this->container['reset_by']) && !in_array($this->container['reset_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reset_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reset_value'] === null) {
            $invalidProperties[] = "'reset_value' can't be null";
        }
        if ($this->container['topic_id'] === null) {
            $invalidProperties[] = "'topic_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets offset_type
     *
     * @return string
     */
    public function getOffsetType()
    {
        return $this->container['offset_type'];
    }

    /**
     * Sets offset_type
     *
     * @param string $offset_type offset_type
     *
     * @return $this
     */
    public function setOffsetType($offset_type)
    {
        $allowedValues = $this->getOffsetTypeAllowableValues();
        if (!is_null($offset_type) && !in_array($offset_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'offset_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['offset_type'] = $offset_type;

        return $this;
    }

    /**
     * Gets partition_id
     *
     * @return int
     */
    public function getPartitionId()
    {
        return $this->container['partition_id'];
    }

    /**
     * Sets partition_id
     *
     * @param int $partition_id partition_id
     *
     * @return $this
     */
    public function setPartitionId($partition_id)
    {
        $this->container['partition_id'] = $partition_id;

        return $this;
    }

    /**
     * Gets reset_by
     *
     * @return string
     */
    public function getResetBy()
    {
        return $this->container['reset_by'];
    }

    /**
     * Sets reset_by
     *
     * @param string $reset_by reset_by
     *
     * @return $this
     */
    public function setResetBy($reset_by)
    {
        $allowedValues = $this->getResetByAllowableValues();
        if (!in_array($reset_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reset_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reset_by'] = $reset_by;

        return $this;
    }

    /**
     * Gets reset_value
     *
     * @return int
     */
    public function getResetValue()
    {
        return $this->container['reset_value'];
    }

    /**
     * Sets reset_value
     *
     * @param int $reset_value reset_value
     *
     * @return $this
     */
    public function setResetValue($reset_value)
    {
        $this->container['reset_value'] = $reset_value;

        return $this;
    }

    /**
     * Gets topic_id
     *
     * @return string
     */
    public function getTopicId()
    {
        return $this->container['topic_id'];
    }

    /**
     * Sets topic_id
     *
     * @param string $topic_id topic_id
     *
     * @return $this
     */
    public function setTopicId($topic_id)
    {
        $this->container['topic_id'] = $topic_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

