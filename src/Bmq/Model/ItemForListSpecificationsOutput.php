<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListSpecificationsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListSpecificationsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_limit' => 'int',
        'name' => 'string',
        'partition_limit' => 'int',
        'ranking' => 'double',
        'read_bandwidth' => 'int',
        'required_enis' => 'int',
        'topic_limit' => 'int',
        'write_bandwidth' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group_limit' => 'int32',
        'name' => null,
        'partition_limit' => 'int32',
        'ranking' => 'double',
        'read_bandwidth' => 'int32',
        'required_enis' => 'int32',
        'topic_limit' => 'int32',
        'write_bandwidth' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_limit' => 'GroupLimit',
        'name' => 'Name',
        'partition_limit' => 'PartitionLimit',
        'ranking' => 'Ranking',
        'read_bandwidth' => 'ReadBandwidth',
        'required_enis' => 'RequiredEnis',
        'topic_limit' => 'TopicLimit',
        'write_bandwidth' => 'WriteBandwidth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_limit' => 'setGroupLimit',
        'name' => 'setName',
        'partition_limit' => 'setPartitionLimit',
        'ranking' => 'setRanking',
        'read_bandwidth' => 'setReadBandwidth',
        'required_enis' => 'setRequiredEnis',
        'topic_limit' => 'setTopicLimit',
        'write_bandwidth' => 'setWriteBandwidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_limit' => 'getGroupLimit',
        'name' => 'getName',
        'partition_limit' => 'getPartitionLimit',
        'ranking' => 'getRanking',
        'read_bandwidth' => 'getReadBandwidth',
        'required_enis' => 'getRequiredEnis',
        'topic_limit' => 'getTopicLimit',
        'write_bandwidth' => 'getWriteBandwidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_limit'] = isset($data['group_limit']) ? $data['group_limit'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['partition_limit'] = isset($data['partition_limit']) ? $data['partition_limit'] : null;
        $this->container['ranking'] = isset($data['ranking']) ? $data['ranking'] : null;
        $this->container['read_bandwidth'] = isset($data['read_bandwidth']) ? $data['read_bandwidth'] : null;
        $this->container['required_enis'] = isset($data['required_enis']) ? $data['required_enis'] : null;
        $this->container['topic_limit'] = isset($data['topic_limit']) ? $data['topic_limit'] : null;
        $this->container['write_bandwidth'] = isset($data['write_bandwidth']) ? $data['write_bandwidth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_limit
     *
     * @return int
     */
    public function getGroupLimit()
    {
        return $this->container['group_limit'];
    }

    /**
     * Sets group_limit
     *
     * @param int $group_limit group_limit
     *
     * @return $this
     */
    public function setGroupLimit($group_limit)
    {
        $this->container['group_limit'] = $group_limit;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets partition_limit
     *
     * @return int
     */
    public function getPartitionLimit()
    {
        return $this->container['partition_limit'];
    }

    /**
     * Sets partition_limit
     *
     * @param int $partition_limit partition_limit
     *
     * @return $this
     */
    public function setPartitionLimit($partition_limit)
    {
        $this->container['partition_limit'] = $partition_limit;

        return $this;
    }

    /**
     * Gets ranking
     *
     * @return double
     */
    public function getRanking()
    {
        return $this->container['ranking'];
    }

    /**
     * Sets ranking
     *
     * @param double $ranking ranking
     *
     * @return $this
     */
    public function setRanking($ranking)
    {
        $this->container['ranking'] = $ranking;

        return $this;
    }

    /**
     * Gets read_bandwidth
     *
     * @return int
     */
    public function getReadBandwidth()
    {
        return $this->container['read_bandwidth'];
    }

    /**
     * Sets read_bandwidth
     *
     * @param int $read_bandwidth read_bandwidth
     *
     * @return $this
     */
    public function setReadBandwidth($read_bandwidth)
    {
        $this->container['read_bandwidth'] = $read_bandwidth;

        return $this;
    }

    /**
     * Gets required_enis
     *
     * @return int
     */
    public function getRequiredEnis()
    {
        return $this->container['required_enis'];
    }

    /**
     * Sets required_enis
     *
     * @param int $required_enis required_enis
     *
     * @return $this
     */
    public function setRequiredEnis($required_enis)
    {
        $this->container['required_enis'] = $required_enis;

        return $this;
    }

    /**
     * Gets topic_limit
     *
     * @return int
     */
    public function getTopicLimit()
    {
        return $this->container['topic_limit'];
    }

    /**
     * Sets topic_limit
     *
     * @param int $topic_limit topic_limit
     *
     * @return $this
     */
    public function setTopicLimit($topic_limit)
    {
        $this->container['topic_limit'] = $topic_limit;

        return $this;
    }

    /**
     * Gets write_bandwidth
     *
     * @return int
     */
    public function getWriteBandwidth()
    {
        return $this->container['write_bandwidth'];
    }

    /**
     * Sets write_bandwidth
     *
     * @param int $write_bandwidth write_bandwidth
     *
     * @return $this
     */
    public function setWriteBandwidth($write_bandwidth)
    {
        $this->container['write_bandwidth'] = $write_bandwidth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

