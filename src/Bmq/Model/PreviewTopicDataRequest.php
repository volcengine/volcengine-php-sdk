<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PreviewTopicDataRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreviewTopicDataRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_value' => 'int',
        'instance_id' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'partitions' => 'int[]',
        'preview_type' => 'string',
        'relative_value' => 'int',
        'topic_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_value' => 'int64',
        'instance_id' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'partitions' => 'int32',
        'preview_type' => null,
        'relative_value' => 'int64',
        'topic_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_value' => 'EndValue',
        'instance_id' => 'InstanceId',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'partitions' => 'Partitions',
        'preview_type' => 'PreviewType',
        'relative_value' => 'RelativeValue',
        'topic_name' => 'TopicName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_value' => 'setEndValue',
        'instance_id' => 'setInstanceId',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'partitions' => 'setPartitions',
        'preview_type' => 'setPreviewType',
        'relative_value' => 'setRelativeValue',
        'topic_name' => 'setTopicName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_value' => 'getEndValue',
        'instance_id' => 'getInstanceId',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'partitions' => 'getPartitions',
        'preview_type' => 'getPreviewType',
        'relative_value' => 'getRelativeValue',
        'topic_name' => 'getTopicName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_value'] = isset($data['end_value']) ? $data['end_value'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['partitions'] = isset($data['partitions']) ? $data['partitions'] : null;
        $this->container['preview_type'] = isset($data['preview_type']) ? $data['preview_type'] : null;
        $this->container['relative_value'] = isset($data['relative_value']) ? $data['relative_value'] : null;
        $this->container['topic_name'] = isset($data['topic_name']) ? $data['topic_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance_id'] === null) {
            $invalidProperties[] = "'instance_id' can't be null";
        }
        if ($this->container['preview_type'] === null) {
            $invalidProperties[] = "'preview_type' can't be null";
        }
        if ($this->container['relative_value'] === null) {
            $invalidProperties[] = "'relative_value' can't be null";
        }
        if ($this->container['topic_name'] === null) {
            $invalidProperties[] = "'topic_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_value
     *
     * @return int
     */
    public function getEndValue()
    {
        return $this->container['end_value'];
    }

    /**
     * Sets end_value
     *
     * @param int $end_value end_value
     *
     * @return $this
     */
    public function setEndValue($end_value)
    {
        $this->container['end_value'] = $end_value;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets partitions
     *
     * @return int[]
     */
    public function getPartitions()
    {
        return $this->container['partitions'];
    }

    /**
     * Sets partitions
     *
     * @param int[] $partitions partitions
     *
     * @return $this
     */
    public function setPartitions($partitions)
    {
        $this->container['partitions'] = $partitions;

        return $this;
    }

    /**
     * Gets preview_type
     *
     * @return string
     */
    public function getPreviewType()
    {
        return $this->container['preview_type'];
    }

    /**
     * Sets preview_type
     *
     * @param string $preview_type preview_type
     *
     * @return $this
     */
    public function setPreviewType($preview_type)
    {
        $this->container['preview_type'] = $preview_type;

        return $this;
    }

    /**
     * Gets relative_value
     *
     * @return int
     */
    public function getRelativeValue()
    {
        return $this->container['relative_value'];
    }

    /**
     * Sets relative_value
     *
     * @param int $relative_value relative_value
     *
     * @return $this
     */
    public function setRelativeValue($relative_value)
    {
        $this->container['relative_value'] = $relative_value;

        return $this;
    }

    /**
     * Gets topic_name
     *
     * @return string
     */
    public function getTopicName()
    {
        return $this->container['topic_name'];
    }

    /**
     * Sets topic_name
     *
     * @param string $topic_name topic_name
     *
     * @return $this
     */
    public function setTopicName($topic_name)
    {
        $this->container['topic_name'] = $topic_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

