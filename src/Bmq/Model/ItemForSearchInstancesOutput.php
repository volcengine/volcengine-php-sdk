<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Bmq\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForSearchInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForSearchInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auth_enabled' => 'bool',
        'billing_type' => 'string',
        'create_time' => 'string',
        'description' => 'string',
        'expiration_time' => 'string',
        'instance_id' => 'string',
        'message_retention' => 'int',
        'name' => 'string',
        'region_id' => 'string',
        'resource_tags' => '\Volcengine\Bmq\Model\ResourceTagForSearchInstancesOutput[]',
        'specification' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Bmq\Model\TagForSearchInstancesOutput[]',
        'vpc_id' => 'string',
        'zone_id_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auth_enabled' => null,
        'billing_type' => null,
        'create_time' => null,
        'description' => null,
        'expiration_time' => null,
        'instance_id' => null,
        'message_retention' => 'int32',
        'name' => null,
        'region_id' => null,
        'resource_tags' => null,
        'specification' => null,
        'status' => null,
        'tags' => null,
        'vpc_id' => null,
        'zone_id_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_enabled' => 'AuthEnabled',
        'billing_type' => 'BillingType',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'expiration_time' => 'ExpirationTime',
        'instance_id' => 'InstanceId',
        'message_retention' => 'MessageRetention',
        'name' => 'Name',
        'region_id' => 'RegionId',
        'resource_tags' => 'ResourceTags',
        'specification' => 'Specification',
        'status' => 'Status',
        'tags' => 'Tags',
        'vpc_id' => 'VpcId',
        'zone_id_list' => 'ZoneIdList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_enabled' => 'setAuthEnabled',
        'billing_type' => 'setBillingType',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'expiration_time' => 'setExpirationTime',
        'instance_id' => 'setInstanceId',
        'message_retention' => 'setMessageRetention',
        'name' => 'setName',
        'region_id' => 'setRegionId',
        'resource_tags' => 'setResourceTags',
        'specification' => 'setSpecification',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'vpc_id' => 'setVpcId',
        'zone_id_list' => 'setZoneIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_enabled' => 'getAuthEnabled',
        'billing_type' => 'getBillingType',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'expiration_time' => 'getExpirationTime',
        'instance_id' => 'getInstanceId',
        'message_retention' => 'getMessageRetention',
        'name' => 'getName',
        'region_id' => 'getRegionId',
        'resource_tags' => 'getResourceTags',
        'specification' => 'getSpecification',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'vpc_id' => 'getVpcId',
        'zone_id_list' => 'getZoneIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BILLING_TYPE_MIX = 'MIX';
    const BILLING_TYPE_POST = 'POST';
    const BILLING_TYPE_PRE = 'PRE';
    const STATUS_INITIALIZING = 'INITIALIZING';
    const STATUS_INITIALIZATION_FAILED = 'INITIALIZATION_FAILED';
    const STATUS_RUNNING = 'RUNNING';
    const STATUS_UPDATING = 'UPDATING';
    const STATUS_SCALE_UP = 'SCALE_UP';
    const STATUS_SCALE_DOWN = 'SCALE_DOWN';
    const STATUS_MODIFYING = 'MODIFYING';
    const STATUS_MODIFY_FAILED = 'MODIFY_FAILED';
    const STATUS_RELEASING = 'RELEASING';
    const STATUS_STOPPING = 'STOPPING';
    const STATUS_STOPPED = 'STOPPED';
    const STATUS_RECOVERING = 'RECOVERING';
    const STATUS_EXCEPTION = 'EXCEPTION';
    const STATUS_EXPANDING_CAPACITY = 'EXPANDING_CAPACITY';
    const STATUS_CAPACITY_EXPAXION_FAILED = 'CAPACITY_EXPAXION_FAILED';
    const STATUS_CANCEL_EXPANDING_CAPACITY = 'CANCEL_EXPANDING_CAPACITY';
    const STATUS_EXPIRED = 'EXPIRED';
    const STATUS_STARTING = 'STARTING';
    const STATUS_RESTARTING = 'RESTARTING';
    const STATUS_UNPAID = 'UNPAID';
    const STATUS_PARTIAL_EXCEPTION = 'PARTIAL_EXCEPTION';
    const STATUS_SHUTDOWN = 'SHUTDOWN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingTypeAllowableValues()
    {
        return [
            self::BILLING_TYPE_MIX,
            self::BILLING_TYPE_POST,
            self::BILLING_TYPE_PRE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INITIALIZING,
            self::STATUS_INITIALIZATION_FAILED,
            self::STATUS_RUNNING,
            self::STATUS_UPDATING,
            self::STATUS_SCALE_UP,
            self::STATUS_SCALE_DOWN,
            self::STATUS_MODIFYING,
            self::STATUS_MODIFY_FAILED,
            self::STATUS_RELEASING,
            self::STATUS_STOPPING,
            self::STATUS_STOPPED,
            self::STATUS_RECOVERING,
            self::STATUS_EXCEPTION,
            self::STATUS_EXPANDING_CAPACITY,
            self::STATUS_CAPACITY_EXPAXION_FAILED,
            self::STATUS_CANCEL_EXPANDING_CAPACITY,
            self::STATUS_EXPIRED,
            self::STATUS_STARTING,
            self::STATUS_RESTARTING,
            self::STATUS_UNPAID,
            self::STATUS_PARTIAL_EXCEPTION,
            self::STATUS_SHUTDOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_enabled'] = isset($data['auth_enabled']) ? $data['auth_enabled'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expiration_time'] = isset($data['expiration_time']) ? $data['expiration_time'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['message_retention'] = isset($data['message_retention']) ? $data['message_retention'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['resource_tags'] = isset($data['resource_tags']) ? $data['resource_tags'] : null;
        $this->container['specification'] = isset($data['specification']) ? $data['specification'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['zone_id_list'] = isset($data['zone_id_list']) ? $data['zone_id_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!is_null($this->container['billing_type']) && !in_array($this->container['billing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_enabled
     *
     * @return bool
     */
    public function getAuthEnabled()
    {
        return $this->container['auth_enabled'];
    }

    /**
     * Sets auth_enabled
     *
     * @param bool $auth_enabled auth_enabled
     *
     * @return $this
     */
    public function setAuthEnabled($auth_enabled)
    {
        $this->container['auth_enabled'] = $auth_enabled;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return string
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param string $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!is_null($billing_type) && !in_array($billing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return string
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param string $expiration_time expiration_time
     *
     * @return $this
     */
    public function setExpirationTime($expiration_time)
    {
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets message_retention
     *
     * @return int
     */
    public function getMessageRetention()
    {
        return $this->container['message_retention'];
    }

    /**
     * Sets message_retention
     *
     * @param int $message_retention message_retention
     *
     * @return $this
     */
    public function setMessageRetention($message_retention)
    {
        $this->container['message_retention'] = $message_retention;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets resource_tags
     *
     * @return \Volcengine\Bmq\Model\ResourceTagForSearchInstancesOutput[]
     */
    public function getResourceTags()
    {
        return $this->container['resource_tags'];
    }

    /**
     * Sets resource_tags
     *
     * @param \Volcengine\Bmq\Model\ResourceTagForSearchInstancesOutput[] $resource_tags resource_tags
     *
     * @return $this
     */
    public function setResourceTags($resource_tags)
    {
        $this->container['resource_tags'] = $resource_tags;

        return $this;
    }

    /**
     * Gets specification
     *
     * @return string
     */
    public function getSpecification()
    {
        return $this->container['specification'];
    }

    /**
     * Sets specification
     *
     * @param string $specification specification
     *
     * @return $this
     */
    public function setSpecification($specification)
    {
        $this->container['specification'] = $specification;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Bmq\Model\TagForSearchInstancesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Bmq\Model\TagForSearchInstancesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets zone_id_list
     *
     * @return string[]
     */
    public function getZoneIdList()
    {
        return $this->container['zone_id_list'];
    }

    /**
     * Sets zone_id_list
     *
     * @param string[] $zone_id_list zone_id_list
     *
     * @return $this
     */
    public function setZoneIdList($zone_id_list)
    {
        $this->container['zone_id_list'] = $zone_id_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

