<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TransitRouterMulticastGroupForDescribeTransitRouterMulticastGroupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransitRouterMulticastGroupForDescribeTransitRouterMulticastGroupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_time' => 'string',
        'group_ip_address' => 'string',
        'group_member' => 'string',
        'group_source' => 'string',
        'member_type' => 'string',
        'network_interface_id' => 'string',
        'resource_id' => 'string',
        'resource_type' => 'string',
        'source_type' => 'string',
        'status' => 'string',
        'subnet_id' => 'string',
        'transit_router_attachment_id' => 'string',
        'transit_router_id' => 'string',
        'transit_router_multicast_domain_id' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_time' => null,
        'group_ip_address' => null,
        'group_member' => null,
        'group_source' => null,
        'member_type' => null,
        'network_interface_id' => null,
        'resource_id' => null,
        'resource_type' => null,
        'source_type' => null,
        'status' => null,
        'subnet_id' => null,
        'transit_router_attachment_id' => null,
        'transit_router_id' => null,
        'transit_router_multicast_domain_id' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_time' => 'CreationTime',
        'group_ip_address' => 'GroupIpAddress',
        'group_member' => 'GroupMember',
        'group_source' => 'GroupSource',
        'member_type' => 'MemberType',
        'network_interface_id' => 'NetworkInterfaceId',
        'resource_id' => 'ResourceId',
        'resource_type' => 'ResourceType',
        'source_type' => 'SourceType',
        'status' => 'Status',
        'subnet_id' => 'SubnetId',
        'transit_router_attachment_id' => 'TransitRouterAttachmentId',
        'transit_router_id' => 'TransitRouterId',
        'transit_router_multicast_domain_id' => 'TransitRouterMulticastDomainId',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_time' => 'setCreationTime',
        'group_ip_address' => 'setGroupIpAddress',
        'group_member' => 'setGroupMember',
        'group_source' => 'setGroupSource',
        'member_type' => 'setMemberType',
        'network_interface_id' => 'setNetworkInterfaceId',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'source_type' => 'setSourceType',
        'status' => 'setStatus',
        'subnet_id' => 'setSubnetId',
        'transit_router_attachment_id' => 'setTransitRouterAttachmentId',
        'transit_router_id' => 'setTransitRouterId',
        'transit_router_multicast_domain_id' => 'setTransitRouterMulticastDomainId',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_time' => 'getCreationTime',
        'group_ip_address' => 'getGroupIpAddress',
        'group_member' => 'getGroupMember',
        'group_source' => 'getGroupSource',
        'member_type' => 'getMemberType',
        'network_interface_id' => 'getNetworkInterfaceId',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'source_type' => 'getSourceType',
        'status' => 'getStatus',
        'subnet_id' => 'getSubnetId',
        'transit_router_attachment_id' => 'getTransitRouterAttachmentId',
        'transit_router_id' => 'getTransitRouterId',
        'transit_router_multicast_domain_id' => 'getTransitRouterMulticastDomainId',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['group_ip_address'] = isset($data['group_ip_address']) ? $data['group_ip_address'] : null;
        $this->container['group_member'] = isset($data['group_member']) ? $data['group_member'] : null;
        $this->container['group_source'] = isset($data['group_source']) ? $data['group_source'] : null;
        $this->container['member_type'] = isset($data['member_type']) ? $data['member_type'] : null;
        $this->container['network_interface_id'] = isset($data['network_interface_id']) ? $data['network_interface_id'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
        $this->container['source_type'] = isset($data['source_type']) ? $data['source_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['transit_router_attachment_id'] = isset($data['transit_router_attachment_id']) ? $data['transit_router_attachment_id'] : null;
        $this->container['transit_router_id'] = isset($data['transit_router_id']) ? $data['transit_router_id'] : null;
        $this->container['transit_router_multicast_domain_id'] = isset($data['transit_router_multicast_domain_id']) ? $data['transit_router_multicast_domain_id'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets group_ip_address
     *
     * @return string
     */
    public function getGroupIpAddress()
    {
        return $this->container['group_ip_address'];
    }

    /**
     * Sets group_ip_address
     *
     * @param string $group_ip_address group_ip_address
     *
     * @return $this
     */
    public function setGroupIpAddress($group_ip_address)
    {
        $this->container['group_ip_address'] = $group_ip_address;

        return $this;
    }

    /**
     * Gets group_member
     *
     * @return string
     */
    public function getGroupMember()
    {
        return $this->container['group_member'];
    }

    /**
     * Sets group_member
     *
     * @param string $group_member group_member
     *
     * @return $this
     */
    public function setGroupMember($group_member)
    {
        $this->container['group_member'] = $group_member;

        return $this;
    }

    /**
     * Gets group_source
     *
     * @return string
     */
    public function getGroupSource()
    {
        return $this->container['group_source'];
    }

    /**
     * Sets group_source
     *
     * @param string $group_source group_source
     *
     * @return $this
     */
    public function setGroupSource($group_source)
    {
        $this->container['group_source'] = $group_source;

        return $this;
    }

    /**
     * Gets member_type
     *
     * @return string
     */
    public function getMemberType()
    {
        return $this->container['member_type'];
    }

    /**
     * Sets member_type
     *
     * @param string $member_type member_type
     *
     * @return $this
     */
    public function setMemberType($member_type)
    {
        $this->container['member_type'] = $member_type;

        return $this;
    }

    /**
     * Gets network_interface_id
     *
     * @return string
     */
    public function getNetworkInterfaceId()
    {
        return $this->container['network_interface_id'];
    }

    /**
     * Sets network_interface_id
     *
     * @param string $network_interface_id network_interface_id
     *
     * @return $this
     */
    public function setNetworkInterfaceId($network_interface_id)
    {
        $this->container['network_interface_id'] = $network_interface_id;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string $source_type source_type
     *
     * @return $this
     */
    public function setSourceType($source_type)
    {
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets transit_router_attachment_id
     *
     * @return string
     */
    public function getTransitRouterAttachmentId()
    {
        return $this->container['transit_router_attachment_id'];
    }

    /**
     * Sets transit_router_attachment_id
     *
     * @param string $transit_router_attachment_id transit_router_attachment_id
     *
     * @return $this
     */
    public function setTransitRouterAttachmentId($transit_router_attachment_id)
    {
        $this->container['transit_router_attachment_id'] = $transit_router_attachment_id;

        return $this;
    }

    /**
     * Gets transit_router_id
     *
     * @return string
     */
    public function getTransitRouterId()
    {
        return $this->container['transit_router_id'];
    }

    /**
     * Sets transit_router_id
     *
     * @param string $transit_router_id transit_router_id
     *
     * @return $this
     */
    public function setTransitRouterId($transit_router_id)
    {
        $this->container['transit_router_id'] = $transit_router_id;

        return $this;
    }

    /**
     * Gets transit_router_multicast_domain_id
     *
     * @return string
     */
    public function getTransitRouterMulticastDomainId()
    {
        return $this->container['transit_router_multicast_domain_id'];
    }

    /**
     * Sets transit_router_multicast_domain_id
     *
     * @param string $transit_router_multicast_domain_id transit_router_multicast_domain_id
     *
     * @return $this
     */
    public function setTransitRouterMulticastDomainId($transit_router_multicast_domain_id)
    {
        $this->container['transit_router_multicast_domain_id'] = $transit_router_multicast_domain_id;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

