<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeTransitRouterMulticastGroupsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeTransitRouterMulticastGroupsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_ip_address' => 'string',
        'is_group_member' => 'bool',
        'is_group_source' => 'bool',
        'member_type' => 'string',
        'network_interface_ids' => 'string[]',
        'page_number' => 'int',
        'page_size' => 'int',
        'resource_id' => 'string',
        'resource_type' => 'string',
        'source_type' => 'string',
        'subnet_ids' => 'string[]',
        'transit_router_attachment_id' => 'string',
        'transit_router_multicast_domain_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group_ip_address' => null,
        'is_group_member' => null,
        'is_group_source' => null,
        'member_type' => null,
        'network_interface_ids' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'resource_id' => null,
        'resource_type' => null,
        'source_type' => null,
        'subnet_ids' => null,
        'transit_router_attachment_id' => null,
        'transit_router_multicast_domain_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_ip_address' => 'GroupIpAddress',
        'is_group_member' => 'IsGroupMember',
        'is_group_source' => 'IsGroupSource',
        'member_type' => 'MemberType',
        'network_interface_ids' => 'NetworkInterfaceIds',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'resource_id' => 'ResourceId',
        'resource_type' => 'ResourceType',
        'source_type' => 'SourceType',
        'subnet_ids' => 'SubnetIds',
        'transit_router_attachment_id' => 'TransitRouterAttachmentId',
        'transit_router_multicast_domain_id' => 'TransitRouterMulticastDomainId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_ip_address' => 'setGroupIpAddress',
        'is_group_member' => 'setIsGroupMember',
        'is_group_source' => 'setIsGroupSource',
        'member_type' => 'setMemberType',
        'network_interface_ids' => 'setNetworkInterfaceIds',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'source_type' => 'setSourceType',
        'subnet_ids' => 'setSubnetIds',
        'transit_router_attachment_id' => 'setTransitRouterAttachmentId',
        'transit_router_multicast_domain_id' => 'setTransitRouterMulticastDomainId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_ip_address' => 'getGroupIpAddress',
        'is_group_member' => 'getIsGroupMember',
        'is_group_source' => 'getIsGroupSource',
        'member_type' => 'getMemberType',
        'network_interface_ids' => 'getNetworkInterfaceIds',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'source_type' => 'getSourceType',
        'subnet_ids' => 'getSubnetIds',
        'transit_router_attachment_id' => 'getTransitRouterAttachmentId',
        'transit_router_multicast_domain_id' => 'getTransitRouterMulticastDomainId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_ip_address'] = isset($data['group_ip_address']) ? $data['group_ip_address'] : null;
        $this->container['is_group_member'] = isset($data['is_group_member']) ? $data['is_group_member'] : null;
        $this->container['is_group_source'] = isset($data['is_group_source']) ? $data['is_group_source'] : null;
        $this->container['member_type'] = isset($data['member_type']) ? $data['member_type'] : null;
        $this->container['network_interface_ids'] = isset($data['network_interface_ids']) ? $data['network_interface_ids'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
        $this->container['source_type'] = isset($data['source_type']) ? $data['source_type'] : null;
        $this->container['subnet_ids'] = isset($data['subnet_ids']) ? $data['subnet_ids'] : null;
        $this->container['transit_router_attachment_id'] = isset($data['transit_router_attachment_id']) ? $data['transit_router_attachment_id'] : null;
        $this->container['transit_router_multicast_domain_id'] = isset($data['transit_router_multicast_domain_id']) ? $data['transit_router_multicast_domain_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_ip_address
     *
     * @return string
     */
    public function getGroupIpAddress()
    {
        return $this->container['group_ip_address'];
    }

    /**
     * Sets group_ip_address
     *
     * @param string $group_ip_address group_ip_address
     *
     * @return $this
     */
    public function setGroupIpAddress($group_ip_address)
    {
        $this->container['group_ip_address'] = $group_ip_address;

        return $this;
    }

    /**
     * Gets is_group_member
     *
     * @return bool
     */
    public function getIsGroupMember()
    {
        return $this->container['is_group_member'];
    }

    /**
     * Sets is_group_member
     *
     * @param bool $is_group_member is_group_member
     *
     * @return $this
     */
    public function setIsGroupMember($is_group_member)
    {
        $this->container['is_group_member'] = $is_group_member;

        return $this;
    }

    /**
     * Gets is_group_source
     *
     * @return bool
     */
    public function getIsGroupSource()
    {
        return $this->container['is_group_source'];
    }

    /**
     * Sets is_group_source
     *
     * @param bool $is_group_source is_group_source
     *
     * @return $this
     */
    public function setIsGroupSource($is_group_source)
    {
        $this->container['is_group_source'] = $is_group_source;

        return $this;
    }

    /**
     * Gets member_type
     *
     * @return string
     */
    public function getMemberType()
    {
        return $this->container['member_type'];
    }

    /**
     * Sets member_type
     *
     * @param string $member_type member_type
     *
     * @return $this
     */
    public function setMemberType($member_type)
    {
        $this->container['member_type'] = $member_type;

        return $this;
    }

    /**
     * Gets network_interface_ids
     *
     * @return string[]
     */
    public function getNetworkInterfaceIds()
    {
        return $this->container['network_interface_ids'];
    }

    /**
     * Sets network_interface_ids
     *
     * @param string[] $network_interface_ids network_interface_ids
     *
     * @return $this
     */
    public function setNetworkInterfaceIds($network_interface_ids)
    {
        $this->container['network_interface_ids'] = $network_interface_ids;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string $source_type source_type
     *
     * @return $this
     */
    public function setSourceType($source_type)
    {
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets subnet_ids
     *
     * @return string[]
     */
    public function getSubnetIds()
    {
        return $this->container['subnet_ids'];
    }

    /**
     * Sets subnet_ids
     *
     * @param string[] $subnet_ids subnet_ids
     *
     * @return $this
     */
    public function setSubnetIds($subnet_ids)
    {
        $this->container['subnet_ids'] = $subnet_ids;

        return $this;
    }

    /**
     * Gets transit_router_attachment_id
     *
     * @return string
     */
    public function getTransitRouterAttachmentId()
    {
        return $this->container['transit_router_attachment_id'];
    }

    /**
     * Sets transit_router_attachment_id
     *
     * @param string $transit_router_attachment_id transit_router_attachment_id
     *
     * @return $this
     */
    public function setTransitRouterAttachmentId($transit_router_attachment_id)
    {
        $this->container['transit_router_attachment_id'] = $transit_router_attachment_id;

        return $this;
    }

    /**
     * Gets transit_router_multicast_domain_id
     *
     * @return string
     */
    public function getTransitRouterMulticastDomainId()
    {
        return $this->container['transit_router_multicast_domain_id'];
    }

    /**
     * Sets transit_router_multicast_domain_id
     *
     * @param string $transit_router_multicast_domain_id transit_router_multicast_domain_id
     *
     * @return $this
     */
    public function setTransitRouterMulticastDomainId($transit_router_multicast_domain_id)
    {
        $this->container['transit_router_multicast_domain_id'] = $transit_router_multicast_domain_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

