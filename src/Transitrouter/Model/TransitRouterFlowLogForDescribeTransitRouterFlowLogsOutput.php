<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TransitRouterFlowLogForDescribeTransitRouterFlowLogsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransitRouterFlowLogForDescribeTransitRouterFlowLogsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'aggregation_interval' => 'int',
        'created_at' => 'string',
        'description' => 'string',
        'log_format_string' => 'string',
        'resource_id' => 'string',
        'resource_type' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Transitrouter\Model\TagForDescribeTransitRouterFlowLogsOutput[]',
        'tls_project_id' => 'string',
        'tls_project_name' => 'string',
        'tls_topic_id' => 'string',
        'tls_topic_name' => 'string',
        'transit_router_flow_log_id' => 'string',
        'transit_router_flow_log_name' => 'string',
        'transit_router_id' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'aggregation_interval' => 'int32',
        'created_at' => null,
        'description' => null,
        'log_format_string' => null,
        'resource_id' => null,
        'resource_type' => null,
        'status' => null,
        'tags' => null,
        'tls_project_id' => null,
        'tls_project_name' => null,
        'tls_topic_id' => null,
        'tls_topic_name' => null,
        'transit_router_flow_log_id' => null,
        'transit_router_flow_log_name' => null,
        'transit_router_id' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'aggregation_interval' => 'AggregationInterval',
        'created_at' => 'CreatedAt',
        'description' => 'Description',
        'log_format_string' => 'LogFormatString',
        'resource_id' => 'ResourceId',
        'resource_type' => 'ResourceType',
        'status' => 'Status',
        'tags' => 'Tags',
        'tls_project_id' => 'TlsProjectId',
        'tls_project_name' => 'TlsProjectName',
        'tls_topic_id' => 'TlsTopicId',
        'tls_topic_name' => 'TlsTopicName',
        'transit_router_flow_log_id' => 'TransitRouterFlowLogId',
        'transit_router_flow_log_name' => 'TransitRouterFlowLogName',
        'transit_router_id' => 'TransitRouterId',
        'updated_at' => 'UpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'aggregation_interval' => 'setAggregationInterval',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'log_format_string' => 'setLogFormatString',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'tls_project_id' => 'setTlsProjectId',
        'tls_project_name' => 'setTlsProjectName',
        'tls_topic_id' => 'setTlsTopicId',
        'tls_topic_name' => 'setTlsTopicName',
        'transit_router_flow_log_id' => 'setTransitRouterFlowLogId',
        'transit_router_flow_log_name' => 'setTransitRouterFlowLogName',
        'transit_router_id' => 'setTransitRouterId',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'aggregation_interval' => 'getAggregationInterval',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'log_format_string' => 'getLogFormatString',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'tls_project_id' => 'getTlsProjectId',
        'tls_project_name' => 'getTlsProjectName',
        'tls_topic_id' => 'getTlsTopicId',
        'tls_topic_name' => 'getTlsTopicName',
        'transit_router_flow_log_id' => 'getTransitRouterFlowLogId',
        'transit_router_flow_log_name' => 'getTransitRouterFlowLogName',
        'transit_router_id' => 'getTransitRouterId',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['aggregation_interval'] = isset($data['aggregation_interval']) ? $data['aggregation_interval'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['log_format_string'] = isset($data['log_format_string']) ? $data['log_format_string'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['tls_project_id'] = isset($data['tls_project_id']) ? $data['tls_project_id'] : null;
        $this->container['tls_project_name'] = isset($data['tls_project_name']) ? $data['tls_project_name'] : null;
        $this->container['tls_topic_id'] = isset($data['tls_topic_id']) ? $data['tls_topic_id'] : null;
        $this->container['tls_topic_name'] = isset($data['tls_topic_name']) ? $data['tls_topic_name'] : null;
        $this->container['transit_router_flow_log_id'] = isset($data['transit_router_flow_log_id']) ? $data['transit_router_flow_log_id'] : null;
        $this->container['transit_router_flow_log_name'] = isset($data['transit_router_flow_log_name']) ? $data['transit_router_flow_log_name'] : null;
        $this->container['transit_router_id'] = isset($data['transit_router_id']) ? $data['transit_router_id'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets aggregation_interval
     *
     * @return int
     */
    public function getAggregationInterval()
    {
        return $this->container['aggregation_interval'];
    }

    /**
     * Sets aggregation_interval
     *
     * @param int $aggregation_interval aggregation_interval
     *
     * @return $this
     */
    public function setAggregationInterval($aggregation_interval)
    {
        $this->container['aggregation_interval'] = $aggregation_interval;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets log_format_string
     *
     * @return string
     */
    public function getLogFormatString()
    {
        return $this->container['log_format_string'];
    }

    /**
     * Sets log_format_string
     *
     * @param string $log_format_string log_format_string
     *
     * @return $this
     */
    public function setLogFormatString($log_format_string)
    {
        $this->container['log_format_string'] = $log_format_string;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Transitrouter\Model\TagForDescribeTransitRouterFlowLogsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Transitrouter\Model\TagForDescribeTransitRouterFlowLogsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tls_project_id
     *
     * @return string
     */
    public function getTlsProjectId()
    {
        return $this->container['tls_project_id'];
    }

    /**
     * Sets tls_project_id
     *
     * @param string $tls_project_id tls_project_id
     *
     * @return $this
     */
    public function setTlsProjectId($tls_project_id)
    {
        $this->container['tls_project_id'] = $tls_project_id;

        return $this;
    }

    /**
     * Gets tls_project_name
     *
     * @return string
     */
    public function getTlsProjectName()
    {
        return $this->container['tls_project_name'];
    }

    /**
     * Sets tls_project_name
     *
     * @param string $tls_project_name tls_project_name
     *
     * @return $this
     */
    public function setTlsProjectName($tls_project_name)
    {
        $this->container['tls_project_name'] = $tls_project_name;

        return $this;
    }

    /**
     * Gets tls_topic_id
     *
     * @return string
     */
    public function getTlsTopicId()
    {
        return $this->container['tls_topic_id'];
    }

    /**
     * Sets tls_topic_id
     *
     * @param string $tls_topic_id tls_topic_id
     *
     * @return $this
     */
    public function setTlsTopicId($tls_topic_id)
    {
        $this->container['tls_topic_id'] = $tls_topic_id;

        return $this;
    }

    /**
     * Gets tls_topic_name
     *
     * @return string
     */
    public function getTlsTopicName()
    {
        return $this->container['tls_topic_name'];
    }

    /**
     * Sets tls_topic_name
     *
     * @param string $tls_topic_name tls_topic_name
     *
     * @return $this
     */
    public function setTlsTopicName($tls_topic_name)
    {
        $this->container['tls_topic_name'] = $tls_topic_name;

        return $this;
    }

    /**
     * Gets transit_router_flow_log_id
     *
     * @return string
     */
    public function getTransitRouterFlowLogId()
    {
        return $this->container['transit_router_flow_log_id'];
    }

    /**
     * Sets transit_router_flow_log_id
     *
     * @param string $transit_router_flow_log_id transit_router_flow_log_id
     *
     * @return $this
     */
    public function setTransitRouterFlowLogId($transit_router_flow_log_id)
    {
        $this->container['transit_router_flow_log_id'] = $transit_router_flow_log_id;

        return $this;
    }

    /**
     * Gets transit_router_flow_log_name
     *
     * @return string
     */
    public function getTransitRouterFlowLogName()
    {
        return $this->container['transit_router_flow_log_name'];
    }

    /**
     * Sets transit_router_flow_log_name
     *
     * @param string $transit_router_flow_log_name transit_router_flow_log_name
     *
     * @return $this
     */
    public function setTransitRouterFlowLogName($transit_router_flow_log_name)
    {
        $this->container['transit_router_flow_log_name'] = $transit_router_flow_log_name;

        return $this;
    }

    /**
     * Gets transit_router_id
     *
     * @return string
     */
    public function getTransitRouterId()
    {
        return $this->container['transit_router_id'];
    }

    /**
     * Sets transit_router_id
     *
     * @param string $transit_router_id transit_router_id
     *
     * @return $this
     */
    public function setTransitRouterId($transit_router_id)
    {
        $this->container['transit_router_id'] = $transit_router_id;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

