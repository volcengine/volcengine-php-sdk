<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeTransitRouterFlowLogsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeTransitRouterFlowLogsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_number' => 'string',
        'page_size' => 'string',
        'resource_id' => 'string',
        'resource_type' => 'string',
        'status' => 'string',
        'tag_filters' => '\Volcengine\Transitrouter\Model\TagFilterForDescribeTransitRouterFlowLogsInput[]',
        'tls_project_id' => 'string',
        'tls_topic_id' => 'string',
        'transit_router_flow_log_ids' => 'string[]',
        'transit_router_flow_log_name' => 'string',
        'transit_router_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_number' => null,
        'page_size' => null,
        'resource_id' => null,
        'resource_type' => null,
        'status' => null,
        'tag_filters' => null,
        'tls_project_id' => null,
        'tls_topic_id' => null,
        'transit_router_flow_log_ids' => null,
        'transit_router_flow_log_name' => null,
        'transit_router_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'resource_id' => 'ResourceId',
        'resource_type' => 'ResourceType',
        'status' => 'Status',
        'tag_filters' => 'TagFilters',
        'tls_project_id' => 'TlsProjectId',
        'tls_topic_id' => 'TlsTopicId',
        'transit_router_flow_log_ids' => 'TransitRouterFlowLogIds',
        'transit_router_flow_log_name' => 'TransitRouterFlowLogName',
        'transit_router_id' => 'TransitRouterId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'status' => 'setStatus',
        'tag_filters' => 'setTagFilters',
        'tls_project_id' => 'setTlsProjectId',
        'tls_topic_id' => 'setTlsTopicId',
        'transit_router_flow_log_ids' => 'setTransitRouterFlowLogIds',
        'transit_router_flow_log_name' => 'setTransitRouterFlowLogName',
        'transit_router_id' => 'setTransitRouterId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'status' => 'getStatus',
        'tag_filters' => 'getTagFilters',
        'tls_project_id' => 'getTlsProjectId',
        'tls_topic_id' => 'getTlsTopicId',
        'transit_router_flow_log_ids' => 'getTransitRouterFlowLogIds',
        'transit_router_flow_log_name' => 'getTransitRouterFlowLogName',
        'transit_router_id' => 'getTransitRouterId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
        $this->container['tls_project_id'] = isset($data['tls_project_id']) ? $data['tls_project_id'] : null;
        $this->container['tls_topic_id'] = isset($data['tls_topic_id']) ? $data['tls_topic_id'] : null;
        $this->container['transit_router_flow_log_ids'] = isset($data['transit_router_flow_log_ids']) ? $data['transit_router_flow_log_ids'] : null;
        $this->container['transit_router_flow_log_name'] = isset($data['transit_router_flow_log_name']) ? $data['transit_router_flow_log_name'] : null;
        $this->container['transit_router_id'] = isset($data['transit_router_id']) ? $data['transit_router_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['resource_id'] === null) {
            $invalidProperties[] = "'resource_id' can't be null";
        }
        if ($this->container['resource_type'] === null) {
            $invalidProperties[] = "'resource_type' can't be null";
        }
        if ($this->container['transit_router_id'] === null) {
            $invalidProperties[] = "'transit_router_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_number
     *
     * @return string
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param string $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return string
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param string $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Transitrouter\Model\TagFilterForDescribeTransitRouterFlowLogsInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Transitrouter\Model\TagFilterForDescribeTransitRouterFlowLogsInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }

    /**
     * Gets tls_project_id
     *
     * @return string
     */
    public function getTlsProjectId()
    {
        return $this->container['tls_project_id'];
    }

    /**
     * Sets tls_project_id
     *
     * @param string $tls_project_id tls_project_id
     *
     * @return $this
     */
    public function setTlsProjectId($tls_project_id)
    {
        $this->container['tls_project_id'] = $tls_project_id;

        return $this;
    }

    /**
     * Gets tls_topic_id
     *
     * @return string
     */
    public function getTlsTopicId()
    {
        return $this->container['tls_topic_id'];
    }

    /**
     * Sets tls_topic_id
     *
     * @param string $tls_topic_id tls_topic_id
     *
     * @return $this
     */
    public function setTlsTopicId($tls_topic_id)
    {
        $this->container['tls_topic_id'] = $tls_topic_id;

        return $this;
    }

    /**
     * Gets transit_router_flow_log_ids
     *
     * @return string[]
     */
    public function getTransitRouterFlowLogIds()
    {
        return $this->container['transit_router_flow_log_ids'];
    }

    /**
     * Sets transit_router_flow_log_ids
     *
     * @param string[] $transit_router_flow_log_ids transit_router_flow_log_ids
     *
     * @return $this
     */
    public function setTransitRouterFlowLogIds($transit_router_flow_log_ids)
    {
        $this->container['transit_router_flow_log_ids'] = $transit_router_flow_log_ids;

        return $this;
    }

    /**
     * Gets transit_router_flow_log_name
     *
     * @return string
     */
    public function getTransitRouterFlowLogName()
    {
        return $this->container['transit_router_flow_log_name'];
    }

    /**
     * Sets transit_router_flow_log_name
     *
     * @param string $transit_router_flow_log_name transit_router_flow_log_name
     *
     * @return $this
     */
    public function setTransitRouterFlowLogName($transit_router_flow_log_name)
    {
        $this->container['transit_router_flow_log_name'] = $transit_router_flow_log_name;

        return $this;
    }

    /**
     * Gets transit_router_id
     *
     * @return string
     */
    public function getTransitRouterId()
    {
        return $this->container['transit_router_id'];
    }

    /**
     * Sets transit_router_id
     *
     * @param string $transit_router_id transit_router_id
     *
     * @return $this
     */
    public function setTransitRouterId($transit_router_id)
    {
        $this->container['transit_router_id'] = $transit_router_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

