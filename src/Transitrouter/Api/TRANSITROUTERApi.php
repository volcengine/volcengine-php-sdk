<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Volcengine\Common\ApiException;
use Volcengine\Common\Configuration;
use Volcengine\Common\HeaderSelector;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\Utils;

class TRANSITROUTERApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function associateTransitRouterAttachmentToRouteTable($body)
    {
        list($response) = $this->associateTransitRouterAttachmentToRouteTableWithHttpInfo($body);
        return $response;
    }

    public function associateTransitRouterAttachmentToRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterAttachmentToRouteTableResponse';
        $request = $this->associateTransitRouterAttachmentToRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateTransitRouterAttachmentToRouteTableAsync($body)
    {
        return $this->associateTransitRouterAttachmentToRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateTransitRouterAttachmentToRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterAttachmentToRouteTableResponse';
        $request = $this->associateTransitRouterAttachmentToRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateTransitRouterAttachmentToRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateTransitRouterAttachmentToRouteTable'
            );
        }

        $resourcePath = '/AssociateTransitRouterAttachmentToRouteTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateTransitRouterForwardPolicyTableToAttachment($body)
    {
        list($response) = $this->associateTransitRouterForwardPolicyTableToAttachmentWithHttpInfo($body);
        return $response;
    }

    public function associateTransitRouterForwardPolicyTableToAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterForwardPolicyTableToAttachmentResponse';
        $request = $this->associateTransitRouterForwardPolicyTableToAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateTransitRouterForwardPolicyTableToAttachmentAsync($body)
    {
        return $this->associateTransitRouterForwardPolicyTableToAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateTransitRouterForwardPolicyTableToAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterForwardPolicyTableToAttachmentResponse';
        $request = $this->associateTransitRouterForwardPolicyTableToAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateTransitRouterForwardPolicyTableToAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateTransitRouterForwardPolicyTableToAttachment'
            );
        }

        $resourcePath = '/AssociateTransitRouterForwardPolicyTableToAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateTransitRouterMulticastDomain($body)
    {
        list($response) = $this->associateTransitRouterMulticastDomainWithHttpInfo($body);
        return $response;
    }

    public function associateTransitRouterMulticastDomainWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterMulticastDomainResponse';
        $request = $this->associateTransitRouterMulticastDomainRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateTransitRouterMulticastDomainAsync($body)
    {
        return $this->associateTransitRouterMulticastDomainAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateTransitRouterMulticastDomainAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterMulticastDomainResponse';
        $request = $this->associateTransitRouterMulticastDomainRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateTransitRouterMulticastDomainRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateTransitRouterMulticastDomain'
            );
        }

        $resourcePath = '/AssociateTransitRouterMulticastDomain/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateTransitRouterRoutePolicyToRouteTable($body)
    {
        list($response) = $this->associateTransitRouterRoutePolicyToRouteTableWithHttpInfo($body);
        return $response;
    }

    public function associateTransitRouterRoutePolicyToRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterRoutePolicyToRouteTableResponse';
        $request = $this->associateTransitRouterRoutePolicyToRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateTransitRouterRoutePolicyToRouteTableAsync($body)
    {
        return $this->associateTransitRouterRoutePolicyToRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateTransitRouterRoutePolicyToRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterRoutePolicyToRouteTableResponse';
        $request = $this->associateTransitRouterRoutePolicyToRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateTransitRouterRoutePolicyToRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateTransitRouterRoutePolicyToRouteTable'
            );
        }

        $resourcePath = '/AssociateTransitRouterRoutePolicyToRouteTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateTransitRouterTrafficQosMarkingPolicyToAttachment($body)
    {
        list($response) = $this->associateTransitRouterTrafficQosMarkingPolicyToAttachmentWithHttpInfo($body);
        return $response;
    }

    public function associateTransitRouterTrafficQosMarkingPolicyToAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterTrafficQosMarkingPolicyToAttachmentResponse';
        $request = $this->associateTransitRouterTrafficQosMarkingPolicyToAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateTransitRouterTrafficQosMarkingPolicyToAttachmentAsync($body)
    {
        return $this->associateTransitRouterTrafficQosMarkingPolicyToAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateTransitRouterTrafficQosMarkingPolicyToAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterTrafficQosMarkingPolicyToAttachmentResponse';
        $request = $this->associateTransitRouterTrafficQosMarkingPolicyToAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateTransitRouterTrafficQosMarkingPolicyToAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateTransitRouterTrafficQosMarkingPolicyToAttachment'
            );
        }

        $resourcePath = '/AssociateTransitRouterTrafficQosMarkingPolicyToAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateTransitRouterTrafficQosQueuePolicyToAttachment($body)
    {
        list($response) = $this->associateTransitRouterTrafficQosQueuePolicyToAttachmentWithHttpInfo($body);
        return $response;
    }

    public function associateTransitRouterTrafficQosQueuePolicyToAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterTrafficQosQueuePolicyToAttachmentResponse';
        $request = $this->associateTransitRouterTrafficQosQueuePolicyToAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateTransitRouterTrafficQosQueuePolicyToAttachmentAsync($body)
    {
        return $this->associateTransitRouterTrafficQosQueuePolicyToAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateTransitRouterTrafficQosQueuePolicyToAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\AssociateTransitRouterTrafficQosQueuePolicyToAttachmentResponse';
        $request = $this->associateTransitRouterTrafficQosQueuePolicyToAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateTransitRouterTrafficQosQueuePolicyToAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateTransitRouterTrafficQosQueuePolicyToAttachment'
            );
        }

        $resourcePath = '/AssociateTransitRouterTrafficQosQueuePolicyToAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouter($body)
    {
        list($response) = $this->createTransitRouterWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterResponse';
        $request = $this->createTransitRouterRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterAsync($body)
    {
        return $this->createTransitRouterAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterResponse';
        $request = $this->createTransitRouterRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouter'
            );
        }

        $resourcePath = '/CreateTransitRouter/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterBandwidthPackage($body)
    {
        list($response) = $this->createTransitRouterBandwidthPackageWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterBandwidthPackageWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterBandwidthPackageResponse';
        $request = $this->createTransitRouterBandwidthPackageRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterBandwidthPackageAsync($body)
    {
        return $this->createTransitRouterBandwidthPackageAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterBandwidthPackageAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterBandwidthPackageResponse';
        $request = $this->createTransitRouterBandwidthPackageRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterBandwidthPackageRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterBandwidthPackage'
            );
        }

        $resourcePath = '/CreateTransitRouterBandwidthPackage/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterDirectConnectGatewayAttachment($body)
    {
        list($response) = $this->createTransitRouterDirectConnectGatewayAttachmentWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterDirectConnectGatewayAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterDirectConnectGatewayAttachmentResponse';
        $request = $this->createTransitRouterDirectConnectGatewayAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterDirectConnectGatewayAttachmentAsync($body)
    {
        return $this->createTransitRouterDirectConnectGatewayAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterDirectConnectGatewayAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterDirectConnectGatewayAttachmentResponse';
        $request = $this->createTransitRouterDirectConnectGatewayAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterDirectConnectGatewayAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterDirectConnectGatewayAttachment'
            );
        }

        $resourcePath = '/CreateTransitRouterDirectConnectGatewayAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterFlowLog($body)
    {
        list($response) = $this->createTransitRouterFlowLogWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterFlowLogWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterFlowLogResponse';
        $request = $this->createTransitRouterFlowLogRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterFlowLogAsync($body)
    {
        return $this->createTransitRouterFlowLogAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterFlowLogAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterFlowLogResponse';
        $request = $this->createTransitRouterFlowLogRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterFlowLogRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterFlowLog'
            );
        }

        $resourcePath = '/CreateTransitRouterFlowLog/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterForwardPolicyEntry($body)
    {
        list($response) = $this->createTransitRouterForwardPolicyEntryWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterForwardPolicyEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterForwardPolicyEntryResponse';
        $request = $this->createTransitRouterForwardPolicyEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterForwardPolicyEntryAsync($body)
    {
        return $this->createTransitRouterForwardPolicyEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterForwardPolicyEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterForwardPolicyEntryResponse';
        $request = $this->createTransitRouterForwardPolicyEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterForwardPolicyEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterForwardPolicyEntry'
            );
        }

        $resourcePath = '/CreateTransitRouterForwardPolicyEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterForwardPolicyTable($body)
    {
        list($response) = $this->createTransitRouterForwardPolicyTableWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterForwardPolicyTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterForwardPolicyTableResponse';
        $request = $this->createTransitRouterForwardPolicyTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterForwardPolicyTableAsync($body)
    {
        return $this->createTransitRouterForwardPolicyTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterForwardPolicyTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterForwardPolicyTableResponse';
        $request = $this->createTransitRouterForwardPolicyTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterForwardPolicyTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterForwardPolicyTable'
            );
        }

        $resourcePath = '/CreateTransitRouterForwardPolicyTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterMulticastDomain($body)
    {
        list($response) = $this->createTransitRouterMulticastDomainWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterMulticastDomainWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterMulticastDomainResponse';
        $request = $this->createTransitRouterMulticastDomainRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterMulticastDomainAsync($body)
    {
        return $this->createTransitRouterMulticastDomainAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterMulticastDomainAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterMulticastDomainResponse';
        $request = $this->createTransitRouterMulticastDomainRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterMulticastDomainRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterMulticastDomain'
            );
        }

        $resourcePath = '/CreateTransitRouterMulticastDomain/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterMulticastGroupMember($body)
    {
        list($response) = $this->createTransitRouterMulticastGroupMemberWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterMulticastGroupMemberWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterMulticastGroupMemberResponse';
        $request = $this->createTransitRouterMulticastGroupMemberRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterMulticastGroupMemberAsync($body)
    {
        return $this->createTransitRouterMulticastGroupMemberAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterMulticastGroupMemberAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterMulticastGroupMemberResponse';
        $request = $this->createTransitRouterMulticastGroupMemberRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterMulticastGroupMemberRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterMulticastGroupMember'
            );
        }

        $resourcePath = '/CreateTransitRouterMulticastGroupMember/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterMulticastGroupSource($body)
    {
        list($response) = $this->createTransitRouterMulticastGroupSourceWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterMulticastGroupSourceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterMulticastGroupSourceResponse';
        $request = $this->createTransitRouterMulticastGroupSourceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterMulticastGroupSourceAsync($body)
    {
        return $this->createTransitRouterMulticastGroupSourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterMulticastGroupSourceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterMulticastGroupSourceResponse';
        $request = $this->createTransitRouterMulticastGroupSourceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterMulticastGroupSourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterMulticastGroupSource'
            );
        }

        $resourcePath = '/CreateTransitRouterMulticastGroupSource/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterPeerAttachment($body)
    {
        list($response) = $this->createTransitRouterPeerAttachmentWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterPeerAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterPeerAttachmentResponse';
        $request = $this->createTransitRouterPeerAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterPeerAttachmentAsync($body)
    {
        return $this->createTransitRouterPeerAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterPeerAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterPeerAttachmentResponse';
        $request = $this->createTransitRouterPeerAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterPeerAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterPeerAttachment'
            );
        }

        $resourcePath = '/CreateTransitRouterPeerAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterRouteEntry($body)
    {
        list($response) = $this->createTransitRouterRouteEntryWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterRouteEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRouteEntryResponse';
        $request = $this->createTransitRouterRouteEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterRouteEntryAsync($body)
    {
        return $this->createTransitRouterRouteEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterRouteEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRouteEntryResponse';
        $request = $this->createTransitRouterRouteEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterRouteEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterRouteEntry'
            );
        }

        $resourcePath = '/CreateTransitRouterRouteEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterRoutePolicyEntry($body)
    {
        list($response) = $this->createTransitRouterRoutePolicyEntryWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterRoutePolicyEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRoutePolicyEntryResponse';
        $request = $this->createTransitRouterRoutePolicyEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterRoutePolicyEntryAsync($body)
    {
        return $this->createTransitRouterRoutePolicyEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterRoutePolicyEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRoutePolicyEntryResponse';
        $request = $this->createTransitRouterRoutePolicyEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterRoutePolicyEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterRoutePolicyEntry'
            );
        }

        $resourcePath = '/CreateTransitRouterRoutePolicyEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterRoutePolicyTable($body)
    {
        list($response) = $this->createTransitRouterRoutePolicyTableWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterRoutePolicyTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRoutePolicyTableResponse';
        $request = $this->createTransitRouterRoutePolicyTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterRoutePolicyTableAsync($body)
    {
        return $this->createTransitRouterRoutePolicyTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterRoutePolicyTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRoutePolicyTableResponse';
        $request = $this->createTransitRouterRoutePolicyTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterRoutePolicyTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterRoutePolicyTable'
            );
        }

        $resourcePath = '/CreateTransitRouterRoutePolicyTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterRouteTable($body)
    {
        list($response) = $this->createTransitRouterRouteTableWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRouteTableResponse';
        $request = $this->createTransitRouterRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterRouteTableAsync($body)
    {
        return $this->createTransitRouterRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterRouteTableResponse';
        $request = $this->createTransitRouterRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterRouteTable'
            );
        }

        $resourcePath = '/CreateTransitRouterRouteTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterTrafficQosMarkingEntry($body)
    {
        list($response) = $this->createTransitRouterTrafficQosMarkingEntryWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterTrafficQosMarkingEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosMarkingEntryResponse';
        $request = $this->createTransitRouterTrafficQosMarkingEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterTrafficQosMarkingEntryAsync($body)
    {
        return $this->createTransitRouterTrafficQosMarkingEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterTrafficQosMarkingEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosMarkingEntryResponse';
        $request = $this->createTransitRouterTrafficQosMarkingEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterTrafficQosMarkingEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterTrafficQosMarkingEntry'
            );
        }

        $resourcePath = '/CreateTransitRouterTrafficQosMarkingEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterTrafficQosMarkingPolicy($body)
    {
        list($response) = $this->createTransitRouterTrafficQosMarkingPolicyWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterTrafficQosMarkingPolicyWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosMarkingPolicyResponse';
        $request = $this->createTransitRouterTrafficQosMarkingPolicyRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterTrafficQosMarkingPolicyAsync($body)
    {
        return $this->createTransitRouterTrafficQosMarkingPolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterTrafficQosMarkingPolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosMarkingPolicyResponse';
        $request = $this->createTransitRouterTrafficQosMarkingPolicyRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterTrafficQosMarkingPolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterTrafficQosMarkingPolicy'
            );
        }

        $resourcePath = '/CreateTransitRouterTrafficQosMarkingPolicy/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterTrafficQosQueueEntry($body)
    {
        list($response) = $this->createTransitRouterTrafficQosQueueEntryWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterTrafficQosQueueEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosQueueEntryResponse';
        $request = $this->createTransitRouterTrafficQosQueueEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterTrafficQosQueueEntryAsync($body)
    {
        return $this->createTransitRouterTrafficQosQueueEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterTrafficQosQueueEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosQueueEntryResponse';
        $request = $this->createTransitRouterTrafficQosQueueEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterTrafficQosQueueEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterTrafficQosQueueEntry'
            );
        }

        $resourcePath = '/CreateTransitRouterTrafficQosQueueEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterTrafficQosQueuePolicy($body)
    {
        list($response) = $this->createTransitRouterTrafficQosQueuePolicyWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterTrafficQosQueuePolicyWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosQueuePolicyResponse';
        $request = $this->createTransitRouterTrafficQosQueuePolicyRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterTrafficQosQueuePolicyAsync($body)
    {
        return $this->createTransitRouterTrafficQosQueuePolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterTrafficQosQueuePolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterTrafficQosQueuePolicyResponse';
        $request = $this->createTransitRouterTrafficQosQueuePolicyRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterTrafficQosQueuePolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterTrafficQosQueuePolicy'
            );
        }

        $resourcePath = '/CreateTransitRouterTrafficQosQueuePolicy/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterVpcAttachment($body)
    {
        list($response) = $this->createTransitRouterVpcAttachmentWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterVpcAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterVpcAttachmentResponse';
        $request = $this->createTransitRouterVpcAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterVpcAttachmentAsync($body)
    {
        return $this->createTransitRouterVpcAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterVpcAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterVpcAttachmentResponse';
        $request = $this->createTransitRouterVpcAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterVpcAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterVpcAttachment'
            );
        }

        $resourcePath = '/CreateTransitRouterVpcAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createTransitRouterVpnAttachment($body)
    {
        list($response) = $this->createTransitRouterVpnAttachmentWithHttpInfo($body);
        return $response;
    }

    public function createTransitRouterVpnAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterVpnAttachmentResponse';
        $request = $this->createTransitRouterVpnAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTransitRouterVpnAttachmentAsync($body)
    {
        return $this->createTransitRouterVpnAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTransitRouterVpnAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\CreateTransitRouterVpnAttachmentResponse';
        $request = $this->createTransitRouterVpnAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTransitRouterVpnAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransitRouterVpnAttachment'
            );
        }

        $resourcePath = '/CreateTransitRouterVpnAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouter($body)
    {
        list($response) = $this->deleteTransitRouterWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterResponse';
        $request = $this->deleteTransitRouterRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterAsync($body)
    {
        return $this->deleteTransitRouterAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterResponse';
        $request = $this->deleteTransitRouterRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouter'
            );
        }

        $resourcePath = '/DeleteTransitRouter/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterBandwidthPackage($body)
    {
        list($response) = $this->deleteTransitRouterBandwidthPackageWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterBandwidthPackageWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterBandwidthPackageResponse';
        $request = $this->deleteTransitRouterBandwidthPackageRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterBandwidthPackageAsync($body)
    {
        return $this->deleteTransitRouterBandwidthPackageAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterBandwidthPackageAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterBandwidthPackageResponse';
        $request = $this->deleteTransitRouterBandwidthPackageRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterBandwidthPackageRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterBandwidthPackage'
            );
        }

        $resourcePath = '/DeleteTransitRouterBandwidthPackage/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterDirectConnectGatewayAttachment($body)
    {
        list($response) = $this->deleteTransitRouterDirectConnectGatewayAttachmentWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterDirectConnectGatewayAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterDirectConnectGatewayAttachmentResponse';
        $request = $this->deleteTransitRouterDirectConnectGatewayAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterDirectConnectGatewayAttachmentAsync($body)
    {
        return $this->deleteTransitRouterDirectConnectGatewayAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterDirectConnectGatewayAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterDirectConnectGatewayAttachmentResponse';
        $request = $this->deleteTransitRouterDirectConnectGatewayAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterDirectConnectGatewayAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterDirectConnectGatewayAttachment'
            );
        }

        $resourcePath = '/DeleteTransitRouterDirectConnectGatewayAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterFlowLog($body)
    {
        list($response) = $this->deleteTransitRouterFlowLogWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterFlowLogWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterFlowLogResponse';
        $request = $this->deleteTransitRouterFlowLogRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterFlowLogAsync($body)
    {
        return $this->deleteTransitRouterFlowLogAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterFlowLogAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterFlowLogResponse';
        $request = $this->deleteTransitRouterFlowLogRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterFlowLogRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterFlowLog'
            );
        }

        $resourcePath = '/DeleteTransitRouterFlowLog/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterForwardPolicyEntry($body)
    {
        list($response) = $this->deleteTransitRouterForwardPolicyEntryWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterForwardPolicyEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterForwardPolicyEntryResponse';
        $request = $this->deleteTransitRouterForwardPolicyEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterForwardPolicyEntryAsync($body)
    {
        return $this->deleteTransitRouterForwardPolicyEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterForwardPolicyEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterForwardPolicyEntryResponse';
        $request = $this->deleteTransitRouterForwardPolicyEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterForwardPolicyEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterForwardPolicyEntry'
            );
        }

        $resourcePath = '/DeleteTransitRouterForwardPolicyEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterForwardPolicyTable($body)
    {
        list($response) = $this->deleteTransitRouterForwardPolicyTableWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterForwardPolicyTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterForwardPolicyTableResponse';
        $request = $this->deleteTransitRouterForwardPolicyTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterForwardPolicyTableAsync($body)
    {
        return $this->deleteTransitRouterForwardPolicyTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterForwardPolicyTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterForwardPolicyTableResponse';
        $request = $this->deleteTransitRouterForwardPolicyTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterForwardPolicyTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterForwardPolicyTable'
            );
        }

        $resourcePath = '/DeleteTransitRouterForwardPolicyTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterMulticastDomain($body)
    {
        list($response) = $this->deleteTransitRouterMulticastDomainWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterMulticastDomainWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterMulticastDomainResponse';
        $request = $this->deleteTransitRouterMulticastDomainRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterMulticastDomainAsync($body)
    {
        return $this->deleteTransitRouterMulticastDomainAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterMulticastDomainAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterMulticastDomainResponse';
        $request = $this->deleteTransitRouterMulticastDomainRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterMulticastDomainRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterMulticastDomain'
            );
        }

        $resourcePath = '/DeleteTransitRouterMulticastDomain/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterMulticastGroupMember($body)
    {
        list($response) = $this->deleteTransitRouterMulticastGroupMemberWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterMulticastGroupMemberWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterMulticastGroupMemberResponse';
        $request = $this->deleteTransitRouterMulticastGroupMemberRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterMulticastGroupMemberAsync($body)
    {
        return $this->deleteTransitRouterMulticastGroupMemberAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterMulticastGroupMemberAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterMulticastGroupMemberResponse';
        $request = $this->deleteTransitRouterMulticastGroupMemberRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterMulticastGroupMemberRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterMulticastGroupMember'
            );
        }

        $resourcePath = '/DeleteTransitRouterMulticastGroupMember/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterMulticastGroupSource($body)
    {
        list($response) = $this->deleteTransitRouterMulticastGroupSourceWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterMulticastGroupSourceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterMulticastGroupSourceResponse';
        $request = $this->deleteTransitRouterMulticastGroupSourceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterMulticastGroupSourceAsync($body)
    {
        return $this->deleteTransitRouterMulticastGroupSourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterMulticastGroupSourceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterMulticastGroupSourceResponse';
        $request = $this->deleteTransitRouterMulticastGroupSourceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterMulticastGroupSourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterMulticastGroupSource'
            );
        }

        $resourcePath = '/DeleteTransitRouterMulticastGroupSource/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterPeerAttachment($body)
    {
        list($response) = $this->deleteTransitRouterPeerAttachmentWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterPeerAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterPeerAttachmentResponse';
        $request = $this->deleteTransitRouterPeerAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterPeerAttachmentAsync($body)
    {
        return $this->deleteTransitRouterPeerAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterPeerAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterPeerAttachmentResponse';
        $request = $this->deleteTransitRouterPeerAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterPeerAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterPeerAttachment'
            );
        }

        $resourcePath = '/DeleteTransitRouterPeerAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterRouteEntry($body)
    {
        list($response) = $this->deleteTransitRouterRouteEntryWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterRouteEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRouteEntryResponse';
        $request = $this->deleteTransitRouterRouteEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterRouteEntryAsync($body)
    {
        return $this->deleteTransitRouterRouteEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterRouteEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRouteEntryResponse';
        $request = $this->deleteTransitRouterRouteEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterRouteEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterRouteEntry'
            );
        }

        $resourcePath = '/DeleteTransitRouterRouteEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterRoutePolicyEntry($body)
    {
        list($response) = $this->deleteTransitRouterRoutePolicyEntryWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterRoutePolicyEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRoutePolicyEntryResponse';
        $request = $this->deleteTransitRouterRoutePolicyEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterRoutePolicyEntryAsync($body)
    {
        return $this->deleteTransitRouterRoutePolicyEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterRoutePolicyEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRoutePolicyEntryResponse';
        $request = $this->deleteTransitRouterRoutePolicyEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterRoutePolicyEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterRoutePolicyEntry'
            );
        }

        $resourcePath = '/DeleteTransitRouterRoutePolicyEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterRoutePolicyTable($body)
    {
        list($response) = $this->deleteTransitRouterRoutePolicyTableWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterRoutePolicyTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRoutePolicyTableResponse';
        $request = $this->deleteTransitRouterRoutePolicyTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterRoutePolicyTableAsync($body)
    {
        return $this->deleteTransitRouterRoutePolicyTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterRoutePolicyTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRoutePolicyTableResponse';
        $request = $this->deleteTransitRouterRoutePolicyTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterRoutePolicyTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterRoutePolicyTable'
            );
        }

        $resourcePath = '/DeleteTransitRouterRoutePolicyTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterRouteTable($body)
    {
        list($response) = $this->deleteTransitRouterRouteTableWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRouteTableResponse';
        $request = $this->deleteTransitRouterRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterRouteTableAsync($body)
    {
        return $this->deleteTransitRouterRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterRouteTableResponse';
        $request = $this->deleteTransitRouterRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterRouteTable'
            );
        }

        $resourcePath = '/DeleteTransitRouterRouteTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterTrafficQosMarkingEntry($body)
    {
        list($response) = $this->deleteTransitRouterTrafficQosMarkingEntryWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterTrafficQosMarkingEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosMarkingEntryResponse';
        $request = $this->deleteTransitRouterTrafficQosMarkingEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterTrafficQosMarkingEntryAsync($body)
    {
        return $this->deleteTransitRouterTrafficQosMarkingEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterTrafficQosMarkingEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosMarkingEntryResponse';
        $request = $this->deleteTransitRouterTrafficQosMarkingEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterTrafficQosMarkingEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterTrafficQosMarkingEntry'
            );
        }

        $resourcePath = '/DeleteTransitRouterTrafficQosMarkingEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterTrafficQosMarkingPolicy($body)
    {
        list($response) = $this->deleteTransitRouterTrafficQosMarkingPolicyWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterTrafficQosMarkingPolicyWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosMarkingPolicyResponse';
        $request = $this->deleteTransitRouterTrafficQosMarkingPolicyRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterTrafficQosMarkingPolicyAsync($body)
    {
        return $this->deleteTransitRouterTrafficQosMarkingPolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterTrafficQosMarkingPolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosMarkingPolicyResponse';
        $request = $this->deleteTransitRouterTrafficQosMarkingPolicyRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterTrafficQosMarkingPolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterTrafficQosMarkingPolicy'
            );
        }

        $resourcePath = '/DeleteTransitRouterTrafficQosMarkingPolicy/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterTrafficQosQueueEntry($body)
    {
        list($response) = $this->deleteTransitRouterTrafficQosQueueEntryWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterTrafficQosQueueEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosQueueEntryResponse';
        $request = $this->deleteTransitRouterTrafficQosQueueEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterTrafficQosQueueEntryAsync($body)
    {
        return $this->deleteTransitRouterTrafficQosQueueEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterTrafficQosQueueEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosQueueEntryResponse';
        $request = $this->deleteTransitRouterTrafficQosQueueEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterTrafficQosQueueEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterTrafficQosQueueEntry'
            );
        }

        $resourcePath = '/DeleteTransitRouterTrafficQosQueueEntry/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterTrafficQosQueuePolicy($body)
    {
        list($response) = $this->deleteTransitRouterTrafficQosQueuePolicyWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterTrafficQosQueuePolicyWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosQueuePolicyResponse';
        $request = $this->deleteTransitRouterTrafficQosQueuePolicyRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterTrafficQosQueuePolicyAsync($body)
    {
        return $this->deleteTransitRouterTrafficQosQueuePolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterTrafficQosQueuePolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterTrafficQosQueuePolicyResponse';
        $request = $this->deleteTransitRouterTrafficQosQueuePolicyRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterTrafficQosQueuePolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterTrafficQosQueuePolicy'
            );
        }

        $resourcePath = '/DeleteTransitRouterTrafficQosQueuePolicy/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterVpcAttachment($body)
    {
        list($response) = $this->deleteTransitRouterVpcAttachmentWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterVpcAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterVpcAttachmentResponse';
        $request = $this->deleteTransitRouterVpcAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterVpcAttachmentAsync($body)
    {
        return $this->deleteTransitRouterVpcAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterVpcAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterVpcAttachmentResponse';
        $request = $this->deleteTransitRouterVpcAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterVpcAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterVpcAttachment'
            );
        }

        $resourcePath = '/DeleteTransitRouterVpcAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTransitRouterVpnAttachment($body)
    {
        list($response) = $this->deleteTransitRouterVpnAttachmentWithHttpInfo($body);
        return $response;
    }

    public function deleteTransitRouterVpnAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterVpnAttachmentResponse';
        $request = $this->deleteTransitRouterVpnAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTransitRouterVpnAttachmentAsync($body)
    {
        return $this->deleteTransitRouterVpnAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTransitRouterVpnAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DeleteTransitRouterVpnAttachmentResponse';
        $request = $this->deleteTransitRouterVpnAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTransitRouterVpnAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteTransitRouterVpnAttachment'
            );
        }

        $resourcePath = '/DeleteTransitRouterVpnAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterAttachments($body)
    {
        list($response) = $this->describeTransitRouterAttachmentsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterAttachmentsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterAttachmentsResponse';
        $request = $this->describeTransitRouterAttachmentsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterAttachmentsAsync($body)
    {
        return $this->describeTransitRouterAttachmentsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterAttachmentsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterAttachmentsResponse';
        $request = $this->describeTransitRouterAttachmentsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterAttachmentsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterAttachments'
            );
        }

        $resourcePath = '/DescribeTransitRouterAttachments/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterBandwidthPackages($body)
    {
        list($response) = $this->describeTransitRouterBandwidthPackagesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterBandwidthPackagesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterBandwidthPackagesResponse';
        $request = $this->describeTransitRouterBandwidthPackagesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterBandwidthPackagesAsync($body)
    {
        return $this->describeTransitRouterBandwidthPackagesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterBandwidthPackagesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterBandwidthPackagesResponse';
        $request = $this->describeTransitRouterBandwidthPackagesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterBandwidthPackagesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterBandwidthPackages'
            );
        }

        $resourcePath = '/DescribeTransitRouterBandwidthPackages/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterBandwidthPackagesBilling($body)
    {
        list($response) = $this->describeTransitRouterBandwidthPackagesBillingWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterBandwidthPackagesBillingWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterBandwidthPackagesBillingResponse';
        $request = $this->describeTransitRouterBandwidthPackagesBillingRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterBandwidthPackagesBillingAsync($body)
    {
        return $this->describeTransitRouterBandwidthPackagesBillingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterBandwidthPackagesBillingAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterBandwidthPackagesBillingResponse';
        $request = $this->describeTransitRouterBandwidthPackagesBillingRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterBandwidthPackagesBillingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterBandwidthPackagesBilling'
            );
        }

        $resourcePath = '/DescribeTransitRouterBandwidthPackagesBilling/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterDirectConnectGatewayAttachments($body)
    {
        list($response) = $this->describeTransitRouterDirectConnectGatewayAttachmentsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterDirectConnectGatewayAttachmentsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterDirectConnectGatewayAttachmentsResponse';
        $request = $this->describeTransitRouterDirectConnectGatewayAttachmentsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterDirectConnectGatewayAttachmentsAsync($body)
    {
        return $this->describeTransitRouterDirectConnectGatewayAttachmentsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterDirectConnectGatewayAttachmentsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterDirectConnectGatewayAttachmentsResponse';
        $request = $this->describeTransitRouterDirectConnectGatewayAttachmentsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterDirectConnectGatewayAttachmentsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterDirectConnectGatewayAttachments'
            );
        }

        $resourcePath = '/DescribeTransitRouterDirectConnectGatewayAttachments/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterFlowLogs($body)
    {
        list($response) = $this->describeTransitRouterFlowLogsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterFlowLogsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterFlowLogsResponse';
        $request = $this->describeTransitRouterFlowLogsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterFlowLogsAsync($body)
    {
        return $this->describeTransitRouterFlowLogsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterFlowLogsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterFlowLogsResponse';
        $request = $this->describeTransitRouterFlowLogsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterFlowLogsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterFlowLogs'
            );
        }

        $resourcePath = '/DescribeTransitRouterFlowLogs/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterForwardPolicyEntries($body)
    {
        list($response) = $this->describeTransitRouterForwardPolicyEntriesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterForwardPolicyEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterForwardPolicyEntriesResponse';
        $request = $this->describeTransitRouterForwardPolicyEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterForwardPolicyEntriesAsync($body)
    {
        return $this->describeTransitRouterForwardPolicyEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterForwardPolicyEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterForwardPolicyEntriesResponse';
        $request = $this->describeTransitRouterForwardPolicyEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterForwardPolicyEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterForwardPolicyEntries'
            );
        }

        $resourcePath = '/DescribeTransitRouterForwardPolicyEntries/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterForwardPolicyTables($body)
    {
        list($response) = $this->describeTransitRouterForwardPolicyTablesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterForwardPolicyTablesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterForwardPolicyTablesResponse';
        $request = $this->describeTransitRouterForwardPolicyTablesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterForwardPolicyTablesAsync($body)
    {
        return $this->describeTransitRouterForwardPolicyTablesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterForwardPolicyTablesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterForwardPolicyTablesResponse';
        $request = $this->describeTransitRouterForwardPolicyTablesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterForwardPolicyTablesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterForwardPolicyTables'
            );
        }

        $resourcePath = '/DescribeTransitRouterForwardPolicyTables/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterMulticastDomainAssociations($body)
    {
        list($response) = $this->describeTransitRouterMulticastDomainAssociationsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterMulticastDomainAssociationsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterMulticastDomainAssociationsResponse';
        $request = $this->describeTransitRouterMulticastDomainAssociationsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterMulticastDomainAssociationsAsync($body)
    {
        return $this->describeTransitRouterMulticastDomainAssociationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterMulticastDomainAssociationsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterMulticastDomainAssociationsResponse';
        $request = $this->describeTransitRouterMulticastDomainAssociationsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterMulticastDomainAssociationsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterMulticastDomainAssociations'
            );
        }

        $resourcePath = '/DescribeTransitRouterMulticastDomainAssociations/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterMulticastDomains($body)
    {
        list($response) = $this->describeTransitRouterMulticastDomainsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterMulticastDomainsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterMulticastDomainsResponse';
        $request = $this->describeTransitRouterMulticastDomainsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterMulticastDomainsAsync($body)
    {
        return $this->describeTransitRouterMulticastDomainsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterMulticastDomainsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterMulticastDomainsResponse';
        $request = $this->describeTransitRouterMulticastDomainsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterMulticastDomainsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterMulticastDomains'
            );
        }

        $resourcePath = '/DescribeTransitRouterMulticastDomains/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterMulticastGroups($body)
    {
        list($response) = $this->describeTransitRouterMulticastGroupsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterMulticastGroupsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterMulticastGroupsResponse';
        $request = $this->describeTransitRouterMulticastGroupsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterMulticastGroupsAsync($body)
    {
        return $this->describeTransitRouterMulticastGroupsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterMulticastGroupsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterMulticastGroupsResponse';
        $request = $this->describeTransitRouterMulticastGroupsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterMulticastGroupsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterMulticastGroups'
            );
        }

        $resourcePath = '/DescribeTransitRouterMulticastGroups/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterPeerAttachments($body)
    {
        list($response) = $this->describeTransitRouterPeerAttachmentsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterPeerAttachmentsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterPeerAttachmentsResponse';
        $request = $this->describeTransitRouterPeerAttachmentsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterPeerAttachmentsAsync($body)
    {
        return $this->describeTransitRouterPeerAttachmentsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterPeerAttachmentsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterPeerAttachmentsResponse';
        $request = $this->describeTransitRouterPeerAttachmentsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterPeerAttachmentsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterPeerAttachments'
            );
        }

        $resourcePath = '/DescribeTransitRouterPeerAttachments/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRegions($body)
    {
        list($response) = $this->describeTransitRouterRegionsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRegionsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRegionsResponse';
        $request = $this->describeTransitRouterRegionsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRegionsAsync($body)
    {
        return $this->describeTransitRouterRegionsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRegionsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRegionsResponse';
        $request = $this->describeTransitRouterRegionsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRegionsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRegions'
            );
        }

        $resourcePath = '/DescribeTransitRouterRegions/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRouteEntries($body)
    {
        list($response) = $this->describeTransitRouterRouteEntriesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRouteEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteEntriesResponse';
        $request = $this->describeTransitRouterRouteEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRouteEntriesAsync($body)
    {
        return $this->describeTransitRouterRouteEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRouteEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteEntriesResponse';
        $request = $this->describeTransitRouterRouteEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRouteEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRouteEntries'
            );
        }

        $resourcePath = '/DescribeTransitRouterRouteEntries/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRoutePolicyEntries($body)
    {
        list($response) = $this->describeTransitRouterRoutePolicyEntriesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRoutePolicyEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRoutePolicyEntriesResponse';
        $request = $this->describeTransitRouterRoutePolicyEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRoutePolicyEntriesAsync($body)
    {
        return $this->describeTransitRouterRoutePolicyEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRoutePolicyEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRoutePolicyEntriesResponse';
        $request = $this->describeTransitRouterRoutePolicyEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRoutePolicyEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRoutePolicyEntries'
            );
        }

        $resourcePath = '/DescribeTransitRouterRoutePolicyEntries/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRoutePolicyTables($body)
    {
        list($response) = $this->describeTransitRouterRoutePolicyTablesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRoutePolicyTablesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRoutePolicyTablesResponse';
        $request = $this->describeTransitRouterRoutePolicyTablesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRoutePolicyTablesAsync($body)
    {
        return $this->describeTransitRouterRoutePolicyTablesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRoutePolicyTablesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRoutePolicyTablesResponse';
        $request = $this->describeTransitRouterRoutePolicyTablesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRoutePolicyTablesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRoutePolicyTables'
            );
        }

        $resourcePath = '/DescribeTransitRouterRoutePolicyTables/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRouteTableAssociations($body)
    {
        list($response) = $this->describeTransitRouterRouteTableAssociationsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRouteTableAssociationsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteTableAssociationsResponse';
        $request = $this->describeTransitRouterRouteTableAssociationsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRouteTableAssociationsAsync($body)
    {
        return $this->describeTransitRouterRouteTableAssociationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRouteTableAssociationsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteTableAssociationsResponse';
        $request = $this->describeTransitRouterRouteTableAssociationsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRouteTableAssociationsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRouteTableAssociations'
            );
        }

        $resourcePath = '/DescribeTransitRouterRouteTableAssociations/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRouteTablePropagations($body)
    {
        list($response) = $this->describeTransitRouterRouteTablePropagationsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRouteTablePropagationsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteTablePropagationsResponse';
        $request = $this->describeTransitRouterRouteTablePropagationsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRouteTablePropagationsAsync($body)
    {
        return $this->describeTransitRouterRouteTablePropagationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRouteTablePropagationsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteTablePropagationsResponse';
        $request = $this->describeTransitRouterRouteTablePropagationsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRouteTablePropagationsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRouteTablePropagations'
            );
        }

        $resourcePath = '/DescribeTransitRouterRouteTablePropagations/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterRouteTables($body)
    {
        list($response) = $this->describeTransitRouterRouteTablesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterRouteTablesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteTablesResponse';
        $request = $this->describeTransitRouterRouteTablesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterRouteTablesAsync($body)
    {
        return $this->describeTransitRouterRouteTablesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterRouteTablesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterRouteTablesResponse';
        $request = $this->describeTransitRouterRouteTablesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterRouteTablesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterRouteTables'
            );
        }

        $resourcePath = '/DescribeTransitRouterRouteTables/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterTrafficQosMarkingEntries($body)
    {
        list($response) = $this->describeTransitRouterTrafficQosMarkingEntriesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterTrafficQosMarkingEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosMarkingEntriesResponse';
        $request = $this->describeTransitRouterTrafficQosMarkingEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterTrafficQosMarkingEntriesAsync($body)
    {
        return $this->describeTransitRouterTrafficQosMarkingEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterTrafficQosMarkingEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosMarkingEntriesResponse';
        $request = $this->describeTransitRouterTrafficQosMarkingEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterTrafficQosMarkingEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterTrafficQosMarkingEntries'
            );
        }

        $resourcePath = '/DescribeTransitRouterTrafficQosMarkingEntries/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterTrafficQosMarkingPolicies($body)
    {
        list($response) = $this->describeTransitRouterTrafficQosMarkingPoliciesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterTrafficQosMarkingPoliciesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosMarkingPoliciesResponse';
        $request = $this->describeTransitRouterTrafficQosMarkingPoliciesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterTrafficQosMarkingPoliciesAsync($body)
    {
        return $this->describeTransitRouterTrafficQosMarkingPoliciesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterTrafficQosMarkingPoliciesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosMarkingPoliciesResponse';
        $request = $this->describeTransitRouterTrafficQosMarkingPoliciesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterTrafficQosMarkingPoliciesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterTrafficQosMarkingPolicies'
            );
        }

        $resourcePath = '/DescribeTransitRouterTrafficQosMarkingPolicies/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterTrafficQosQueueEntries($body)
    {
        list($response) = $this->describeTransitRouterTrafficQosQueueEntriesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterTrafficQosQueueEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosQueueEntriesResponse';
        $request = $this->describeTransitRouterTrafficQosQueueEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterTrafficQosQueueEntriesAsync($body)
    {
        return $this->describeTransitRouterTrafficQosQueueEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterTrafficQosQueueEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosQueueEntriesResponse';
        $request = $this->describeTransitRouterTrafficQosQueueEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterTrafficQosQueueEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterTrafficQosQueueEntries'
            );
        }

        $resourcePath = '/DescribeTransitRouterTrafficQosQueueEntries/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterTrafficQosQueuePolicies($body)
    {
        list($response) = $this->describeTransitRouterTrafficQosQueuePoliciesWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterTrafficQosQueuePoliciesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosQueuePoliciesResponse';
        $request = $this->describeTransitRouterTrafficQosQueuePoliciesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterTrafficQosQueuePoliciesAsync($body)
    {
        return $this->describeTransitRouterTrafficQosQueuePoliciesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterTrafficQosQueuePoliciesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterTrafficQosQueuePoliciesResponse';
        $request = $this->describeTransitRouterTrafficQosQueuePoliciesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterTrafficQosQueuePoliciesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterTrafficQosQueuePolicies'
            );
        }

        $resourcePath = '/DescribeTransitRouterTrafficQosQueuePolicies/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterVpcAttachments($body)
    {
        list($response) = $this->describeTransitRouterVpcAttachmentsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterVpcAttachmentsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterVpcAttachmentsResponse';
        $request = $this->describeTransitRouterVpcAttachmentsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterVpcAttachmentsAsync($body)
    {
        return $this->describeTransitRouterVpcAttachmentsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterVpcAttachmentsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterVpcAttachmentsResponse';
        $request = $this->describeTransitRouterVpcAttachmentsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterVpcAttachmentsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterVpcAttachments'
            );
        }

        $resourcePath = '/DescribeTransitRouterVpcAttachments/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouterVpnAttachments($body)
    {
        list($response) = $this->describeTransitRouterVpnAttachmentsWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRouterVpnAttachmentsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterVpnAttachmentsResponse';
        $request = $this->describeTransitRouterVpnAttachmentsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRouterVpnAttachmentsAsync($body)
    {
        return $this->describeTransitRouterVpnAttachmentsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRouterVpnAttachmentsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRouterVpnAttachmentsResponse';
        $request = $this->describeTransitRouterVpnAttachmentsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRouterVpnAttachmentsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouterVpnAttachments'
            );
        }

        $resourcePath = '/DescribeTransitRouterVpnAttachments/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTransitRouters($body)
    {
        list($response) = $this->describeTransitRoutersWithHttpInfo($body);
        return $response;
    }

    public function describeTransitRoutersWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRoutersResponse';
        $request = $this->describeTransitRoutersRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTransitRoutersAsync($body)
    {
        return $this->describeTransitRoutersAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTransitRoutersAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DescribeTransitRoutersResponse';
        $request = $this->describeTransitRoutersRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTransitRoutersRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeTransitRouters'
            );
        }

        $resourcePath = '/DescribeTransitRouters/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function disableTransitRouterRouteTablePropagation($body)
    {
        list($response) = $this->disableTransitRouterRouteTablePropagationWithHttpInfo($body);
        return $response;
    }

    public function disableTransitRouterRouteTablePropagationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DisableTransitRouterRouteTablePropagationResponse';
        $request = $this->disableTransitRouterRouteTablePropagationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function disableTransitRouterRouteTablePropagationAsync($body)
    {
        return $this->disableTransitRouterRouteTablePropagationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function disableTransitRouterRouteTablePropagationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DisableTransitRouterRouteTablePropagationResponse';
        $request = $this->disableTransitRouterRouteTablePropagationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function disableTransitRouterRouteTablePropagationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling disableTransitRouterRouteTablePropagation'
            );
        }

        $resourcePath = '/DisableTransitRouterRouteTablePropagation/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function dissociateTransitRouterAttachmentFromRouteTable($body)
    {
        list($response) = $this->dissociateTransitRouterAttachmentFromRouteTableWithHttpInfo($body);
        return $response;
    }

    public function dissociateTransitRouterAttachmentFromRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterAttachmentFromRouteTableResponse';
        $request = $this->dissociateTransitRouterAttachmentFromRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function dissociateTransitRouterAttachmentFromRouteTableAsync($body)
    {
        return $this->dissociateTransitRouterAttachmentFromRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function dissociateTransitRouterAttachmentFromRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterAttachmentFromRouteTableResponse';
        $request = $this->dissociateTransitRouterAttachmentFromRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function dissociateTransitRouterAttachmentFromRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dissociateTransitRouterAttachmentFromRouteTable'
            );
        }

        $resourcePath = '/DissociateTransitRouterAttachmentFromRouteTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function dissociateTransitRouterForwardPolicyTableFromAttachment($body)
    {
        list($response) = $this->dissociateTransitRouterForwardPolicyTableFromAttachmentWithHttpInfo($body);
        return $response;
    }

    public function dissociateTransitRouterForwardPolicyTableFromAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterForwardPolicyTableFromAttachmentResponse';
        $request = $this->dissociateTransitRouterForwardPolicyTableFromAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function dissociateTransitRouterForwardPolicyTableFromAttachmentAsync($body)
    {
        return $this->dissociateTransitRouterForwardPolicyTableFromAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function dissociateTransitRouterForwardPolicyTableFromAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterForwardPolicyTableFromAttachmentResponse';
        $request = $this->dissociateTransitRouterForwardPolicyTableFromAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function dissociateTransitRouterForwardPolicyTableFromAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dissociateTransitRouterForwardPolicyTableFromAttachment'
            );
        }

        $resourcePath = '/DissociateTransitRouterForwardPolicyTableFromAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function dissociateTransitRouterMulticastDomain($body)
    {
        list($response) = $this->dissociateTransitRouterMulticastDomainWithHttpInfo($body);
        return $response;
    }

    public function dissociateTransitRouterMulticastDomainWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterMulticastDomainResponse';
        $request = $this->dissociateTransitRouterMulticastDomainRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function dissociateTransitRouterMulticastDomainAsync($body)
    {
        return $this->dissociateTransitRouterMulticastDomainAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function dissociateTransitRouterMulticastDomainAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterMulticastDomainResponse';
        $request = $this->dissociateTransitRouterMulticastDomainRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function dissociateTransitRouterMulticastDomainRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dissociateTransitRouterMulticastDomain'
            );
        }

        $resourcePath = '/DissociateTransitRouterMulticastDomain/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function dissociateTransitRouterRoutePolicyFromRouteTable($body)
    {
        list($response) = $this->dissociateTransitRouterRoutePolicyFromRouteTableWithHttpInfo($body);
        return $response;
    }

    public function dissociateTransitRouterRoutePolicyFromRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterRoutePolicyFromRouteTableResponse';
        $request = $this->dissociateTransitRouterRoutePolicyFromRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function dissociateTransitRouterRoutePolicyFromRouteTableAsync($body)
    {
        return $this->dissociateTransitRouterRoutePolicyFromRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function dissociateTransitRouterRoutePolicyFromRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterRoutePolicyFromRouteTableResponse';
        $request = $this->dissociateTransitRouterRoutePolicyFromRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function dissociateTransitRouterRoutePolicyFromRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dissociateTransitRouterRoutePolicyFromRouteTable'
            );
        }

        $resourcePath = '/DissociateTransitRouterRoutePolicyFromRouteTable/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function dissociateTransitRouterTrafficQosMarkingPolicyFromAttachment($body)
    {
        list($response) = $this->dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentWithHttpInfo($body);
        return $response;
    }

    public function dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentResponse';
        $request = $this->dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentAsync($body)
    {
        return $this->dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentResponse';
        $request = $this->dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function dissociateTransitRouterTrafficQosMarkingPolicyFromAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dissociateTransitRouterTrafficQosMarkingPolicyFromAttachment'
            );
        }

        $resourcePath = '/DissociateTransitRouterTrafficQosMarkingPolicyFromAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function dissociateTransitRouterTrafficQosQueuePolicyFromAttachment($body)
    {
        list($response) = $this->dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentWithHttpInfo($body);
        return $response;
    }

    public function dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterTrafficQosQueuePolicyFromAttachmentResponse';
        $request = $this->dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentAsync($body)
    {
        return $this->dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\DissociateTransitRouterTrafficQosQueuePolicyFromAttachmentResponse';
        $request = $this->dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function dissociateTransitRouterTrafficQosQueuePolicyFromAttachmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dissociateTransitRouterTrafficQosQueuePolicyFromAttachment'
            );
        }

        $resourcePath = '/DissociateTransitRouterTrafficQosQueuePolicyFromAttachment/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function enableTransitRouterRouteTablePropagation($body)
    {
        list($response) = $this->enableTransitRouterRouteTablePropagationWithHttpInfo($body);
        return $response;
    }

    public function enableTransitRouterRouteTablePropagationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\EnableTransitRouterRouteTablePropagationResponse';
        $request = $this->enableTransitRouterRouteTablePropagationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function enableTransitRouterRouteTablePropagationAsync($body)
    {
        return $this->enableTransitRouterRouteTablePropagationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function enableTransitRouterRouteTablePropagationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\EnableTransitRouterRouteTablePropagationResponse';
        $request = $this->enableTransitRouterRouteTablePropagationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function enableTransitRouterRouteTablePropagationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling enableTransitRouterRouteTablePropagation'
            );
        }

        $resourcePath = '/EnableTransitRouterRouteTablePropagation/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function listTagsForResources($body)
    {
        list($response) = $this->listTagsForResourcesWithHttpInfo($body);
        return $response;
    }

    public function listTagsForResourcesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ListTagsForResourcesResponse';
        $request = $this->listTagsForResourcesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function listTagsForResourcesAsync($body)
    {
        return $this->listTagsForResourcesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function listTagsForResourcesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ListTagsForResourcesResponse';
        $request = $this->listTagsForResourcesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function listTagsForResourcesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listTagsForResources'
            );
        }

        $resourcePath = '/ListTagsForResources/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterAttributes($body)
    {
        list($response) = $this->modifyTransitRouterAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterAttributesResponse';
        $request = $this->modifyTransitRouterAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterAttributesAsync($body)
    {
        return $this->modifyTransitRouterAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterAttributesResponse';
        $request = $this->modifyTransitRouterAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterBandwidthPackageAttributes($body)
    {
        list($response) = $this->modifyTransitRouterBandwidthPackageAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterBandwidthPackageAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterBandwidthPackageAttributesResponse';
        $request = $this->modifyTransitRouterBandwidthPackageAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterBandwidthPackageAttributesAsync($body)
    {
        return $this->modifyTransitRouterBandwidthPackageAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterBandwidthPackageAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterBandwidthPackageAttributesResponse';
        $request = $this->modifyTransitRouterBandwidthPackageAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterBandwidthPackageAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterBandwidthPackageAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterBandwidthPackageAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterDirectConnectGatewayAttachmentAttributes($body)
    {
        list($response) = $this->modifyTransitRouterDirectConnectGatewayAttachmentAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterDirectConnectGatewayAttachmentAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterDirectConnectGatewayAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterDirectConnectGatewayAttachmentAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterDirectConnectGatewayAttachmentAttributesAsync($body)
    {
        return $this->modifyTransitRouterDirectConnectGatewayAttachmentAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterDirectConnectGatewayAttachmentAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterDirectConnectGatewayAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterDirectConnectGatewayAttachmentAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterDirectConnectGatewayAttachmentAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterDirectConnectGatewayAttachmentAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterDirectConnectGatewayAttachmentAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterFlowLogAttributes($body)
    {
        list($response) = $this->modifyTransitRouterFlowLogAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterFlowLogAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterFlowLogAttributesResponse';
        $request = $this->modifyTransitRouterFlowLogAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterFlowLogAttributesAsync($body)
    {
        return $this->modifyTransitRouterFlowLogAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterFlowLogAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterFlowLogAttributesResponse';
        $request = $this->modifyTransitRouterFlowLogAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterFlowLogAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterFlowLogAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterFlowLogAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterForwardPolicyEntryAttributes($body)
    {
        list($response) = $this->modifyTransitRouterForwardPolicyEntryAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterForwardPolicyEntryAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterForwardPolicyEntryAttributesResponse';
        $request = $this->modifyTransitRouterForwardPolicyEntryAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterForwardPolicyEntryAttributesAsync($body)
    {
        return $this->modifyTransitRouterForwardPolicyEntryAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterForwardPolicyEntryAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterForwardPolicyEntryAttributesResponse';
        $request = $this->modifyTransitRouterForwardPolicyEntryAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterForwardPolicyEntryAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterForwardPolicyEntryAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterForwardPolicyEntryAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterForwardPolicyTableAssociation($body)
    {
        list($response) = $this->modifyTransitRouterForwardPolicyTableAssociationWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterForwardPolicyTableAssociationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterForwardPolicyTableAssociationResponse';
        $request = $this->modifyTransitRouterForwardPolicyTableAssociationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterForwardPolicyTableAssociationAsync($body)
    {
        return $this->modifyTransitRouterForwardPolicyTableAssociationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterForwardPolicyTableAssociationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterForwardPolicyTableAssociationResponse';
        $request = $this->modifyTransitRouterForwardPolicyTableAssociationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterForwardPolicyTableAssociationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterForwardPolicyTableAssociation'
            );
        }

        $resourcePath = '/ModifyTransitRouterForwardPolicyTableAssociation/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterForwardPolicyTableAttributes($body)
    {
        list($response) = $this->modifyTransitRouterForwardPolicyTableAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterForwardPolicyTableAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterForwardPolicyTableAttributesResponse';
        $request = $this->modifyTransitRouterForwardPolicyTableAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterForwardPolicyTableAttributesAsync($body)
    {
        return $this->modifyTransitRouterForwardPolicyTableAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterForwardPolicyTableAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterForwardPolicyTableAttributesResponse';
        $request = $this->modifyTransitRouterForwardPolicyTableAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterForwardPolicyTableAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterForwardPolicyTableAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterForwardPolicyTableAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterMulticastDomainAttributes($body)
    {
        list($response) = $this->modifyTransitRouterMulticastDomainAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterMulticastDomainAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterMulticastDomainAttributesResponse';
        $request = $this->modifyTransitRouterMulticastDomainAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterMulticastDomainAttributesAsync($body)
    {
        return $this->modifyTransitRouterMulticastDomainAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterMulticastDomainAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterMulticastDomainAttributesResponse';
        $request = $this->modifyTransitRouterMulticastDomainAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterMulticastDomainAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterMulticastDomainAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterMulticastDomainAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterPeerAttachmentAttributes($body)
    {
        list($response) = $this->modifyTransitRouterPeerAttachmentAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterPeerAttachmentAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterPeerAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterPeerAttachmentAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterPeerAttachmentAttributesAsync($body)
    {
        return $this->modifyTransitRouterPeerAttachmentAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterPeerAttachmentAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterPeerAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterPeerAttachmentAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterPeerAttachmentAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterPeerAttachmentAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterPeerAttachmentAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterRouteEntryAttributes($body)
    {
        list($response) = $this->modifyTransitRouterRouteEntryAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterRouteEntryAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRouteEntryAttributesResponse';
        $request = $this->modifyTransitRouterRouteEntryAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterRouteEntryAttributesAsync($body)
    {
        return $this->modifyTransitRouterRouteEntryAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterRouteEntryAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRouteEntryAttributesResponse';
        $request = $this->modifyTransitRouterRouteEntryAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterRouteEntryAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterRouteEntryAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterRouteEntryAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterRoutePolicyAssociation($body)
    {
        list($response) = $this->modifyTransitRouterRoutePolicyAssociationWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterRoutePolicyAssociationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRoutePolicyAssociationResponse';
        $request = $this->modifyTransitRouterRoutePolicyAssociationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterRoutePolicyAssociationAsync($body)
    {
        return $this->modifyTransitRouterRoutePolicyAssociationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterRoutePolicyAssociationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRoutePolicyAssociationResponse';
        $request = $this->modifyTransitRouterRoutePolicyAssociationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterRoutePolicyAssociationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterRoutePolicyAssociation'
            );
        }

        $resourcePath = '/ModifyTransitRouterRoutePolicyAssociation/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterRoutePolicyEntryAttributes($body)
    {
        list($response) = $this->modifyTransitRouterRoutePolicyEntryAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterRoutePolicyEntryAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRoutePolicyEntryAttributesResponse';
        $request = $this->modifyTransitRouterRoutePolicyEntryAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterRoutePolicyEntryAttributesAsync($body)
    {
        return $this->modifyTransitRouterRoutePolicyEntryAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterRoutePolicyEntryAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRoutePolicyEntryAttributesResponse';
        $request = $this->modifyTransitRouterRoutePolicyEntryAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterRoutePolicyEntryAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterRoutePolicyEntryAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterRoutePolicyEntryAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterRoutePolicyTableAttributes($body)
    {
        list($response) = $this->modifyTransitRouterRoutePolicyTableAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterRoutePolicyTableAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRoutePolicyTableAttributesResponse';
        $request = $this->modifyTransitRouterRoutePolicyTableAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterRoutePolicyTableAttributesAsync($body)
    {
        return $this->modifyTransitRouterRoutePolicyTableAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterRoutePolicyTableAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRoutePolicyTableAttributesResponse';
        $request = $this->modifyTransitRouterRoutePolicyTableAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterRoutePolicyTableAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterRoutePolicyTableAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterRoutePolicyTableAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterRouteTableAssociationAttributes($body)
    {
        list($response) = $this->modifyTransitRouterRouteTableAssociationAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterRouteTableAssociationAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRouteTableAssociationAttributesResponse';
        $request = $this->modifyTransitRouterRouteTableAssociationAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterRouteTableAssociationAttributesAsync($body)
    {
        return $this->modifyTransitRouterRouteTableAssociationAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterRouteTableAssociationAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRouteTableAssociationAttributesResponse';
        $request = $this->modifyTransitRouterRouteTableAssociationAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterRouteTableAssociationAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterRouteTableAssociationAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterRouteTableAssociationAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterRouteTableAttributes($body)
    {
        list($response) = $this->modifyTransitRouterRouteTableAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterRouteTableAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRouteTableAttributesResponse';
        $request = $this->modifyTransitRouterRouteTableAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterRouteTableAttributesAsync($body)
    {
        return $this->modifyTransitRouterRouteTableAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterRouteTableAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterRouteTableAttributesResponse';
        $request = $this->modifyTransitRouterRouteTableAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterRouteTableAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterRouteTableAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterRouteTableAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAssociation($body)
    {
        list($response) = $this->modifyTransitRouterTrafficQosMarkingPolicyAssociationWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAssociationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosMarkingPolicyAssociationResponse';
        $request = $this->modifyTransitRouterTrafficQosMarkingPolicyAssociationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAssociationAsync($body)
    {
        return $this->modifyTransitRouterTrafficQosMarkingPolicyAssociationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAssociationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosMarkingPolicyAssociationResponse';
        $request = $this->modifyTransitRouterTrafficQosMarkingPolicyAssociationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterTrafficQosMarkingPolicyAssociationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterTrafficQosMarkingPolicyAssociation'
            );
        }

        $resourcePath = '/ModifyTransitRouterTrafficQosMarkingPolicyAssociation/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAttributes($body)
    {
        list($response) = $this->modifyTransitRouterTrafficQosMarkingPolicyAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosMarkingPolicyAttributesResponse';
        $request = $this->modifyTransitRouterTrafficQosMarkingPolicyAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAttributesAsync($body)
    {
        return $this->modifyTransitRouterTrafficQosMarkingPolicyAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterTrafficQosMarkingPolicyAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosMarkingPolicyAttributesResponse';
        $request = $this->modifyTransitRouterTrafficQosMarkingPolicyAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterTrafficQosMarkingPolicyAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterTrafficQosMarkingPolicyAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterTrafficQosMarkingPolicyAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAssociation($body)
    {
        list($response) = $this->modifyTransitRouterTrafficQosQueuePolicyAssociationWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAssociationWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosQueuePolicyAssociationResponse';
        $request = $this->modifyTransitRouterTrafficQosQueuePolicyAssociationRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAssociationAsync($body)
    {
        return $this->modifyTransitRouterTrafficQosQueuePolicyAssociationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAssociationAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosQueuePolicyAssociationResponse';
        $request = $this->modifyTransitRouterTrafficQosQueuePolicyAssociationRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterTrafficQosQueuePolicyAssociationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterTrafficQosQueuePolicyAssociation'
            );
        }

        $resourcePath = '/ModifyTransitRouterTrafficQosQueuePolicyAssociation/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAttributes($body)
    {
        list($response) = $this->modifyTransitRouterTrafficQosQueuePolicyAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosQueuePolicyAttributesResponse';
        $request = $this->modifyTransitRouterTrafficQosQueuePolicyAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAttributesAsync($body)
    {
        return $this->modifyTransitRouterTrafficQosQueuePolicyAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterTrafficQosQueuePolicyAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterTrafficQosQueuePolicyAttributesResponse';
        $request = $this->modifyTransitRouterTrafficQosQueuePolicyAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterTrafficQosQueuePolicyAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterTrafficQosQueuePolicyAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterTrafficQosQueuePolicyAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterVpcAttachmentAttributes($body)
    {
        list($response) = $this->modifyTransitRouterVpcAttachmentAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterVpcAttachmentAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterVpcAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterVpcAttachmentAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterVpcAttachmentAttributesAsync($body)
    {
        return $this->modifyTransitRouterVpcAttachmentAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterVpcAttachmentAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterVpcAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterVpcAttachmentAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterVpcAttachmentAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterVpcAttachmentAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterVpcAttachmentAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyTransitRouterVpnAttachmentAttributes($body)
    {
        list($response) = $this->modifyTransitRouterVpnAttachmentAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyTransitRouterVpnAttachmentAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterVpnAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterVpnAttachmentAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyTransitRouterVpnAttachmentAttributesAsync($body)
    {
        return $this->modifyTransitRouterVpnAttachmentAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyTransitRouterVpnAttachmentAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\ModifyTransitRouterVpnAttachmentAttributesResponse';
        $request = $this->modifyTransitRouterVpnAttachmentAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyTransitRouterVpnAttachmentAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyTransitRouterVpnAttachmentAttributes'
            );
        }

        $resourcePath = '/ModifyTransitRouterVpnAttachmentAttributes/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function renewTransitRouterBandwidthPackage($body)
    {
        list($response) = $this->renewTransitRouterBandwidthPackageWithHttpInfo($body);
        return $response;
    }

    public function renewTransitRouterBandwidthPackageWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\RenewTransitRouterBandwidthPackageResponse';
        $request = $this->renewTransitRouterBandwidthPackageRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function renewTransitRouterBandwidthPackageAsync($body)
    {
        return $this->renewTransitRouterBandwidthPackageAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function renewTransitRouterBandwidthPackageAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\RenewTransitRouterBandwidthPackageResponse';
        $request = $this->renewTransitRouterBandwidthPackageRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function renewTransitRouterBandwidthPackageRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling renewTransitRouterBandwidthPackage'
            );
        }

        $resourcePath = '/RenewTransitRouterBandwidthPackage/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function setTransitRouterBandwidthPackageRenewal($body)
    {
        list($response) = $this->setTransitRouterBandwidthPackageRenewalWithHttpInfo($body);
        return $response;
    }

    public function setTransitRouterBandwidthPackageRenewalWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\SetTransitRouterBandwidthPackageRenewalResponse';
        $request = $this->setTransitRouterBandwidthPackageRenewalRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function setTransitRouterBandwidthPackageRenewalAsync($body)
    {
        return $this->setTransitRouterBandwidthPackageRenewalAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function setTransitRouterBandwidthPackageRenewalAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\SetTransitRouterBandwidthPackageRenewalResponse';
        $request = $this->setTransitRouterBandwidthPackageRenewalRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function setTransitRouterBandwidthPackageRenewalRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setTransitRouterBandwidthPackageRenewal'
            );
        }

        $resourcePath = '/SetTransitRouterBandwidthPackageRenewal/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function startTransitRouterFlowLog($body)
    {
        list($response) = $this->startTransitRouterFlowLogWithHttpInfo($body);
        return $response;
    }

    public function startTransitRouterFlowLogWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\StartTransitRouterFlowLogResponse';
        $request = $this->startTransitRouterFlowLogRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function startTransitRouterFlowLogAsync($body)
    {
        return $this->startTransitRouterFlowLogAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function startTransitRouterFlowLogAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\StartTransitRouterFlowLogResponse';
        $request = $this->startTransitRouterFlowLogRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function startTransitRouterFlowLogRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling startTransitRouterFlowLog'
            );
        }

        $resourcePath = '/StartTransitRouterFlowLog/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function stopTransitRouterFlowLog($body)
    {
        list($response) = $this->stopTransitRouterFlowLogWithHttpInfo($body);
        return $response;
    }

    public function stopTransitRouterFlowLogWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\StopTransitRouterFlowLogResponse';
        $request = $this->stopTransitRouterFlowLogRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function stopTransitRouterFlowLogAsync($body)
    {
        return $this->stopTransitRouterFlowLogAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function stopTransitRouterFlowLogAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\StopTransitRouterFlowLogResponse';
        $request = $this->stopTransitRouterFlowLogRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function stopTransitRouterFlowLogRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling stopTransitRouterFlowLog'
            );
        }

        $resourcePath = '/StopTransitRouterFlowLog/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function tagResources($body)
    {
        list($response) = $this->tagResourcesWithHttpInfo($body);
        return $response;
    }

    public function tagResourcesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\TagResourcesResponse';
        $request = $this->tagResourcesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function tagResourcesAsync($body)
    {
        return $this->tagResourcesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function tagResourcesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\TagResourcesResponse';
        $request = $this->tagResourcesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function tagResourcesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling tagResources'
            );
        }

        $resourcePath = '/TagResources/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function untagResources($body)
    {
        list($response) = $this->untagResourcesWithHttpInfo($body);
        return $response;
    }

    public function untagResourcesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\UntagResourcesResponse';
        $request = $this->untagResourcesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function untagResourcesAsync($body)
    {
        return $this->untagResourcesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function untagResourcesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Transitrouter\Model\UntagResourcesResponse';
        $request = $this->untagResourcesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function untagResourcesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling untagResources'
            );
        }

        $resourcePath = '/UntagResources/2020-04-01/transitrouter/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }


    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
