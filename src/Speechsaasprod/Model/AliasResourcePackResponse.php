<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Speechsaasprod\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AliasResourcePackResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AliasResourcePackResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alias' => 'string',
        'code' => 'string',
        'configuration_code' => 'string',
        'current_usage' => 'string',
        'details' => '\Volcengine\Speechsaasprod\Model\DetailsForAliasResourcePackOutput',
        'expires' => 'string',
        'group_name' => 'string',
        'harvest' => '\Volcengine\Speechsaasprod\Model\HarvestForAliasResourcePackOutput',
        'instance_number' => 'string',
        'is_shareable' => 'bool',
        'pack_type' => 'string',
        'purchased_amount' => 'string',
        'raw_type' => 'string',
        'resource_display' => 'string',
        'resource_id' => 'string',
        'state' => 'string',
        'train_id' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alias' => null,
        'code' => null,
        'configuration_code' => null,
        'current_usage' => null,
        'details' => null,
        'expires' => null,
        'group_name' => null,
        'harvest' => null,
        'instance_number' => null,
        'is_shareable' => null,
        'pack_type' => null,
        'purchased_amount' => null,
        'raw_type' => null,
        'resource_display' => null,
        'resource_id' => null,
        'state' => null,
        'train_id' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'Alias',
        'code' => 'Code',
        'configuration_code' => 'ConfigurationCode',
        'current_usage' => 'CurrentUsage',
        'details' => 'Details',
        'expires' => 'Expires',
        'group_name' => 'GroupName',
        'harvest' => 'Harvest',
        'instance_number' => 'InstanceNumber',
        'is_shareable' => 'IsShareable',
        'pack_type' => 'PackType',
        'purchased_amount' => 'PurchasedAmount',
        'raw_type' => 'RawType',
        'resource_display' => 'ResourceDisplay',
        'resource_id' => 'ResourceID',
        'state' => 'State',
        'train_id' => 'TrainID',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'setAlias',
        'code' => 'setCode',
        'configuration_code' => 'setConfigurationCode',
        'current_usage' => 'setCurrentUsage',
        'details' => 'setDetails',
        'expires' => 'setExpires',
        'group_name' => 'setGroupName',
        'harvest' => 'setHarvest',
        'instance_number' => 'setInstanceNumber',
        'is_shareable' => 'setIsShareable',
        'pack_type' => 'setPackType',
        'purchased_amount' => 'setPurchasedAmount',
        'raw_type' => 'setRawType',
        'resource_display' => 'setResourceDisplay',
        'resource_id' => 'setResourceId',
        'state' => 'setState',
        'train_id' => 'setTrainId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'getAlias',
        'code' => 'getCode',
        'configuration_code' => 'getConfigurationCode',
        'current_usage' => 'getCurrentUsage',
        'details' => 'getDetails',
        'expires' => 'getExpires',
        'group_name' => 'getGroupName',
        'harvest' => 'getHarvest',
        'instance_number' => 'getInstanceNumber',
        'is_shareable' => 'getIsShareable',
        'pack_type' => 'getPackType',
        'purchased_amount' => 'getPurchasedAmount',
        'raw_type' => 'getRawType',
        'resource_display' => 'getResourceDisplay',
        'resource_id' => 'getResourceId',
        'state' => 'getState',
        'train_id' => 'getTrainId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['configuration_code'] = isset($data['configuration_code']) ? $data['configuration_code'] : null;
        $this->container['current_usage'] = isset($data['current_usage']) ? $data['current_usage'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['harvest'] = isset($data['harvest']) ? $data['harvest'] : null;
        $this->container['instance_number'] = isset($data['instance_number']) ? $data['instance_number'] : null;
        $this->container['is_shareable'] = isset($data['is_shareable']) ? $data['is_shareable'] : null;
        $this->container['pack_type'] = isset($data['pack_type']) ? $data['pack_type'] : null;
        $this->container['purchased_amount'] = isset($data['purchased_amount']) ? $data['purchased_amount'] : null;
        $this->container['raw_type'] = isset($data['raw_type']) ? $data['raw_type'] : null;
        $this->container['resource_display'] = isset($data['resource_display']) ? $data['resource_display'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['train_id'] = isset($data['train_id']) ? $data['train_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets configuration_code
     *
     * @return string
     */
    public function getConfigurationCode()
    {
        return $this->container['configuration_code'];
    }

    /**
     * Sets configuration_code
     *
     * @param string $configuration_code configuration_code
     *
     * @return $this
     */
    public function setConfigurationCode($configuration_code)
    {
        $this->container['configuration_code'] = $configuration_code;

        return $this;
    }

    /**
     * Gets current_usage
     *
     * @return string
     */
    public function getCurrentUsage()
    {
        return $this->container['current_usage'];
    }

    /**
     * Sets current_usage
     *
     * @param string $current_usage current_usage
     *
     * @return $this
     */
    public function setCurrentUsage($current_usage)
    {
        $this->container['current_usage'] = $current_usage;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Volcengine\Speechsaasprod\Model\DetailsForAliasResourcePackOutput
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Volcengine\Speechsaasprod\Model\DetailsForAliasResourcePackOutput $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return string
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param string $expires expires
     *
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets harvest
     *
     * @return \Volcengine\Speechsaasprod\Model\HarvestForAliasResourcePackOutput
     */
    public function getHarvest()
    {
        return $this->container['harvest'];
    }

    /**
     * Sets harvest
     *
     * @param \Volcengine\Speechsaasprod\Model\HarvestForAliasResourcePackOutput $harvest harvest
     *
     * @return $this
     */
    public function setHarvest($harvest)
    {
        $this->container['harvest'] = $harvest;

        return $this;
    }

    /**
     * Gets instance_number
     *
     * @return string
     */
    public function getInstanceNumber()
    {
        return $this->container['instance_number'];
    }

    /**
     * Sets instance_number
     *
     * @param string $instance_number instance_number
     *
     * @return $this
     */
    public function setInstanceNumber($instance_number)
    {
        $this->container['instance_number'] = $instance_number;

        return $this;
    }

    /**
     * Gets is_shareable
     *
     * @return bool
     */
    public function getIsShareable()
    {
        return $this->container['is_shareable'];
    }

    /**
     * Sets is_shareable
     *
     * @param bool $is_shareable is_shareable
     *
     * @return $this
     */
    public function setIsShareable($is_shareable)
    {
        $this->container['is_shareable'] = $is_shareable;

        return $this;
    }

    /**
     * Gets pack_type
     *
     * @return string
     */
    public function getPackType()
    {
        return $this->container['pack_type'];
    }

    /**
     * Sets pack_type
     *
     * @param string $pack_type pack_type
     *
     * @return $this
     */
    public function setPackType($pack_type)
    {
        $this->container['pack_type'] = $pack_type;

        return $this;
    }

    /**
     * Gets purchased_amount
     *
     * @return string
     */
    public function getPurchasedAmount()
    {
        return $this->container['purchased_amount'];
    }

    /**
     * Sets purchased_amount
     *
     * @param string $purchased_amount purchased_amount
     *
     * @return $this
     */
    public function setPurchasedAmount($purchased_amount)
    {
        $this->container['purchased_amount'] = $purchased_amount;

        return $this;
    }

    /**
     * Gets raw_type
     *
     * @return string
     */
    public function getRawType()
    {
        return $this->container['raw_type'];
    }

    /**
     * Sets raw_type
     *
     * @param string $raw_type raw_type
     *
     * @return $this
     */
    public function setRawType($raw_type)
    {
        $this->container['raw_type'] = $raw_type;

        return $this;
    }

    /**
     * Gets resource_display
     *
     * @return string
     */
    public function getResourceDisplay()
    {
        return $this->container['resource_display'];
    }

    /**
     * Sets resource_display
     *
     * @param string $resource_display resource_display
     *
     * @return $this
     */
    public function setResourceDisplay($resource_display)
    {
        $this->container['resource_display'] = $resource_display;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets train_id
     *
     * @return string
     */
    public function getTrainId()
    {
        return $this->container['train_id'];
    }

    /**
     * Sets train_id
     *
     * @param string $train_id train_id
     *
     * @return $this
     */
    public function setTrainId($train_id)
    {
        $this->container['train_id'] = $train_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

