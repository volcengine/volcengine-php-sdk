<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Speechsaasprod\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AttributesForResourcePacksStatusOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AttributesForResourcePacksStatusOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code_attribute' => '\Volcengine\Speechsaasprod\Model\CodeAttributeForResourcePacksStatusOutput',
        'formalized_from' => 'string',
        'is_forced_expires_display' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code_attribute' => null,
        'formalized_from' => null,
        'is_forced_expires_display' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code_attribute' => 'CodeAttribute',
        'formalized_from' => 'FormalizedFrom',
        'is_forced_expires_display' => 'IsForcedExpiresDisplay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code_attribute' => 'setCodeAttribute',
        'formalized_from' => 'setFormalizedFrom',
        'is_forced_expires_display' => 'setIsForcedExpiresDisplay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code_attribute' => 'getCodeAttribute',
        'formalized_from' => 'getFormalizedFrom',
        'is_forced_expires_display' => 'getIsForcedExpiresDisplay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code_attribute'] = isset($data['code_attribute']) ? $data['code_attribute'] : null;
        $this->container['formalized_from'] = isset($data['formalized_from']) ? $data['formalized_from'] : null;
        $this->container['is_forced_expires_display'] = isset($data['is_forced_expires_display']) ? $data['is_forced_expires_display'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code_attribute
     *
     * @return \Volcengine\Speechsaasprod\Model\CodeAttributeForResourcePacksStatusOutput
     */
    public function getCodeAttribute()
    {
        return $this->container['code_attribute'];
    }

    /**
     * Sets code_attribute
     *
     * @param \Volcengine\Speechsaasprod\Model\CodeAttributeForResourcePacksStatusOutput $code_attribute code_attribute
     *
     * @return $this
     */
    public function setCodeAttribute($code_attribute)
    {
        $this->container['code_attribute'] = $code_attribute;

        return $this;
    }

    /**
     * Gets formalized_from
     *
     * @return string
     */
    public function getFormalizedFrom()
    {
        return $this->container['formalized_from'];
    }

    /**
     * Sets formalized_from
     *
     * @param string $formalized_from formalized_from
     *
     * @return $this
     */
    public function setFormalizedFrom($formalized_from)
    {
        $this->container['formalized_from'] = $formalized_from;

        return $this;
    }

    /**
     * Gets is_forced_expires_display
     *
     * @return bool
     */
    public function getIsForcedExpiresDisplay()
    {
        return $this->container['is_forced_expires_display'];
    }

    /**
     * Sets is_forced_expires_display
     *
     * @param bool $is_forced_expires_display is_forced_expires_display
     *
     * @return $this
     */
    public function setIsForcedExpiresDisplay($is_forced_expires_display)
    {
        $this->container['is_forced_expires_display'] = $is_forced_expires_display;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

