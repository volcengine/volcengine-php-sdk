<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Speechsaasprod\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DetailsForResourcePacksStatusOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetailsForResourcePacksStatusOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aliasable' => 'bool',
        'demo_link' => 'string',
        'extra_api_allowed' => 'bool',
        'formalizable' => 'bool',
        'language' => 'string',
        'megatts_training' => '\Volcengine\Speechsaasprod\Model\MegattsTrainingForResourcePacksStatusOutput',
        'recommended_scenario' => 'string',
        'tone_number' => 'string',
        'voice_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aliasable' => null,
        'demo_link' => null,
        'extra_api_allowed' => null,
        'formalizable' => null,
        'language' => null,
        'megatts_training' => null,
        'recommended_scenario' => null,
        'tone_number' => null,
        'voice_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aliasable' => 'Aliasable',
        'demo_link' => 'DemoLink',
        'extra_api_allowed' => 'ExtraApiAllowed',
        'formalizable' => 'Formalizable',
        'language' => 'Language',
        'megatts_training' => 'MegattsTraining',
        'recommended_scenario' => 'RecommendedScenario',
        'tone_number' => 'ToneNumber',
        'voice_type' => 'VoiceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aliasable' => 'setAliasable',
        'demo_link' => 'setDemoLink',
        'extra_api_allowed' => 'setExtraApiAllowed',
        'formalizable' => 'setFormalizable',
        'language' => 'setLanguage',
        'megatts_training' => 'setMegattsTraining',
        'recommended_scenario' => 'setRecommendedScenario',
        'tone_number' => 'setToneNumber',
        'voice_type' => 'setVoiceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aliasable' => 'getAliasable',
        'demo_link' => 'getDemoLink',
        'extra_api_allowed' => 'getExtraApiAllowed',
        'formalizable' => 'getFormalizable',
        'language' => 'getLanguage',
        'megatts_training' => 'getMegattsTraining',
        'recommended_scenario' => 'getRecommendedScenario',
        'tone_number' => 'getToneNumber',
        'voice_type' => 'getVoiceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aliasable'] = isset($data['aliasable']) ? $data['aliasable'] : null;
        $this->container['demo_link'] = isset($data['demo_link']) ? $data['demo_link'] : null;
        $this->container['extra_api_allowed'] = isset($data['extra_api_allowed']) ? $data['extra_api_allowed'] : null;
        $this->container['formalizable'] = isset($data['formalizable']) ? $data['formalizable'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['megatts_training'] = isset($data['megatts_training']) ? $data['megatts_training'] : null;
        $this->container['recommended_scenario'] = isset($data['recommended_scenario']) ? $data['recommended_scenario'] : null;
        $this->container['tone_number'] = isset($data['tone_number']) ? $data['tone_number'] : null;
        $this->container['voice_type'] = isset($data['voice_type']) ? $data['voice_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aliasable
     *
     * @return bool
     */
    public function getAliasable()
    {
        return $this->container['aliasable'];
    }

    /**
     * Sets aliasable
     *
     * @param bool $aliasable aliasable
     *
     * @return $this
     */
    public function setAliasable($aliasable)
    {
        $this->container['aliasable'] = $aliasable;

        return $this;
    }

    /**
     * Gets demo_link
     *
     * @return string
     */
    public function getDemoLink()
    {
        return $this->container['demo_link'];
    }

    /**
     * Sets demo_link
     *
     * @param string $demo_link demo_link
     *
     * @return $this
     */
    public function setDemoLink($demo_link)
    {
        $this->container['demo_link'] = $demo_link;

        return $this;
    }

    /**
     * Gets extra_api_allowed
     *
     * @return bool
     */
    public function getExtraApiAllowed()
    {
        return $this->container['extra_api_allowed'];
    }

    /**
     * Sets extra_api_allowed
     *
     * @param bool $extra_api_allowed extra_api_allowed
     *
     * @return $this
     */
    public function setExtraApiAllowed($extra_api_allowed)
    {
        $this->container['extra_api_allowed'] = $extra_api_allowed;

        return $this;
    }

    /**
     * Gets formalizable
     *
     * @return bool
     */
    public function getFormalizable()
    {
        return $this->container['formalizable'];
    }

    /**
     * Sets formalizable
     *
     * @param bool $formalizable formalizable
     *
     * @return $this
     */
    public function setFormalizable($formalizable)
    {
        $this->container['formalizable'] = $formalizable;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets megatts_training
     *
     * @return \Volcengine\Speechsaasprod\Model\MegattsTrainingForResourcePacksStatusOutput
     */
    public function getMegattsTraining()
    {
        return $this->container['megatts_training'];
    }

    /**
     * Sets megatts_training
     *
     * @param \Volcengine\Speechsaasprod\Model\MegattsTrainingForResourcePacksStatusOutput $megatts_training megatts_training
     *
     * @return $this
     */
    public function setMegattsTraining($megatts_training)
    {
        $this->container['megatts_training'] = $megatts_training;

        return $this;
    }

    /**
     * Gets recommended_scenario
     *
     * @return string
     */
    public function getRecommendedScenario()
    {
        return $this->container['recommended_scenario'];
    }

    /**
     * Sets recommended_scenario
     *
     * @param string $recommended_scenario recommended_scenario
     *
     * @return $this
     */
    public function setRecommendedScenario($recommended_scenario)
    {
        $this->container['recommended_scenario'] = $recommended_scenario;

        return $this;
    }

    /**
     * Gets tone_number
     *
     * @return string
     */
    public function getToneNumber()
    {
        return $this->container['tone_number'];
    }

    /**
     * Sets tone_number
     *
     * @param string $tone_number tone_number
     *
     * @return $this
     */
    public function setToneNumber($tone_number)
    {
        $this->container['tone_number'] = $tone_number;

        return $this;
    }

    /**
     * Gets voice_type
     *
     * @return string
     */
    public function getVoiceType()
    {
        return $this->container['voice_type'];
    }

    /**
     * Sets voice_type
     *
     * @param string $voice_type voice_type
     *
     * @return $this
     */
    public function setVoiceType($voice_type)
    {
        $this->container['voice_type'] = $voice_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

