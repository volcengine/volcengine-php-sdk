<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Speechsaasprod\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class EmotionForListBigModelTTSTimbresOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmotionForListBigModelTTSTimbresOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'demo_text' => 'string',
        'demo_url' => 'string',
        'emotion' => 'string',
        'emotion_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'demo_text' => null,
        'demo_url' => null,
        'emotion' => null,
        'emotion_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'demo_text' => 'DemoText',
        'demo_url' => 'DemoURL',
        'emotion' => 'Emotion',
        'emotion_type' => 'EmotionType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'demo_text' => 'setDemoText',
        'demo_url' => 'setDemoUrl',
        'emotion' => 'setEmotion',
        'emotion_type' => 'setEmotionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'demo_text' => 'getDemoText',
        'demo_url' => 'getDemoUrl',
        'emotion' => 'getEmotion',
        'emotion_type' => 'getEmotionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['demo_text'] = isset($data['demo_text']) ? $data['demo_text'] : null;
        $this->container['demo_url'] = isset($data['demo_url']) ? $data['demo_url'] : null;
        $this->container['emotion'] = isset($data['emotion']) ? $data['emotion'] : null;
        $this->container['emotion_type'] = isset($data['emotion_type']) ? $data['emotion_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets demo_text
     *
     * @return string
     */
    public function getDemoText()
    {
        return $this->container['demo_text'];
    }

    /**
     * Sets demo_text
     *
     * @param string $demo_text demo_text
     *
     * @return $this
     */
    public function setDemoText($demo_text)
    {
        $this->container['demo_text'] = $demo_text;

        return $this;
    }

    /**
     * Gets demo_url
     *
     * @return string
     */
    public function getDemoUrl()
    {
        return $this->container['demo_url'];
    }

    /**
     * Sets demo_url
     *
     * @param string $demo_url demo_url
     *
     * @return $this
     */
    public function setDemoUrl($demo_url)
    {
        $this->container['demo_url'] = $demo_url;

        return $this;
    }

    /**
     * Gets emotion
     *
     * @return string
     */
    public function getEmotion()
    {
        return $this->container['emotion'];
    }

    /**
     * Sets emotion
     *
     * @param string $emotion emotion
     *
     * @return $this
     */
    public function setEmotion($emotion)
    {
        $this->container['emotion'] = $emotion;

        return $this;
    }

    /**
     * Gets emotion_type
     *
     * @return string
     */
    public function getEmotionType()
    {
        return $this->container['emotion_type'];
    }

    /**
     * Sets emotion_type
     *
     * @param string $emotion_type emotion_type
     *
     * @return $this
     */
    public function setEmotionType($emotion_type)
    {
        $this->container['emotion_type'] = $emotion_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

